
MatiInzynierkaCpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a738  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800a8c8  0800a8c8  0001a8c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad14  0800ad14  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad14  0800ad14  0001ad14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad1c  0800ad1c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad1c  0800ad1c  0001ad1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad20  0800ad20  0001ad20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800ad24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  200001d8  0800aefc  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  0800aefc  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001582a  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000316e  00000000  00000000  00035a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001308  00000000  00000000  00038be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ea1  00000000  00000000  00039ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ced  00000000  00000000  0003ad91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000193f0  00000000  00000000  0005fa7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d11df  00000000  00000000  00078e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061a8  00000000  00000000  0014a050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001501f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a8b0 	.word	0x0800a8b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800a8b0 	.word	0x0800a8b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <IncInit>:
			return 0;

	return 1;
}

void IncInit(void){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
	transfer In,Out;
	Out.buf[0] = 0x10 | (0x00);
 8000f4a:	2310      	movs	r3, #16
 8000f4c:	703b      	strb	r3, [r7, #0]
	Out.buf[1] = 0x10;
 8000f4e:	2310      	movs	r3, #16
 8000f50:	707b      	strb	r3, [r7, #1]
	//6Bh - who I am
	SPIIncSend(Out.buf, In.buf, 2);
 8000f52:	1d39      	adds	r1, r7, #4
 8000f54:	463b      	mov	r3, r7
 8000f56:	2202      	movs	r2, #2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 f933 	bl	80011c4 <SPIIncSend>

	return;
 8000f5e:	bf00      	nop
}
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <IncGetAngle>:

float IncGetAngle(void){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
	float result;
	char address = 0x28 | (0x80);
 8000f6e:	23a8      	movs	r3, #168	; 0xa8
 8000f70:	72fb      	strb	r3, [r7, #11]
			char a;
			int16_t values[2];
		};
	}receive;

	SPIIncSend(&address, receive.data, 5);
 8000f72:	1d39      	adds	r1, r7, #4
 8000f74:	f107 030b 	add.w	r3, r7, #11
 8000f78:	2205      	movs	r2, #5
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f922 	bl	80011c4 <SPIIncSend>

	result = atan2f ((float)receive.values[1],(float)receive.values[0]) * 180 / 3.141592653f;
 8000f80:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f90:	ee07 3a10 	vmov	s14, r3
 8000f94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f98:	eef0 0a47 	vmov.f32	s1, s14
 8000f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa0:	f006 fa37 	bl	8007412 <atan2f>
 8000fa4:	eef0 7a40 	vmov.f32	s15, s0
 8000fa8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000fcc <IncGetAngle+0x64>
 8000fac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fb0:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000fd0 <IncGetAngle+0x68>
 8000fb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb8:	edc7 7a03 	vstr	s15, [r7, #12]

	return result;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	ee07 3a90 	vmov	s15, r3
}
 8000fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	43340000 	.word	0x43340000
 8000fd0:	40490fdb 	.word	0x40490fdb

08000fd4 <PSSetSeaLevelPressure>:
#define CTRL_REG_DEF_OSM	(CTRL_REG_DEF | 1)
#define SA_READ				(0x80)

static float referencePressure = 101325.0f;

void PSSetSeaLevelPressure(float pressure){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	ed87 0a01 	vstr	s0, [r7, #4]
	referencePressure = pressure;
 8000fde:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <PSSetSeaLevelPressure+0x1c>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6013      	str	r3, [r2, #0]
	return;
 8000fe4:	bf00      	nop
}
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000000 	.word	0x20000000

08000ff4 <PSGetSeaLevelPressure>:

__attribute__((weak)) float PSGetSeaLevelPressure(void){
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

	return referencePressure;
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <PSGetSeaLevelPressure+0x18>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	ee07 3a90 	vmov	s15, r3
}
 8001000:	eeb0 0a67 	vmov.f32	s0, s15
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	20000000 	.word	0x20000000

08001010 <PSCalculateAlt>:

__attribute__((weak)) float PSCalculateAlt(float pressure, float temp){
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	ed87 0a01 	vstr	s0, [r7, #4]
 800101a:	edc7 0a00 	vstr	s1, [r7]


	return ((powf((PSGetSeaLevelPressure() / pressure), 1.0f/5.257f) - 1.0f) * (temp + 273.15f)) / 0.0065f;
 800101e:	f7ff ffe9 	bl	8000ff4 <PSGetSeaLevelPressure>
 8001022:	eef0 6a40 	vmov.f32	s13, s0
 8001026:	edd7 7a01 	vldr	s15, [r7, #4]
 800102a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800102e:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800106c <PSCalculateAlt+0x5c>
 8001032:	eeb0 0a47 	vmov.f32	s0, s14
 8001036:	f006 f9ee 	bl	8007416 <powf>
 800103a:	eef0 7a40 	vmov.f32	s15, s0
 800103e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001042:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001046:	edd7 7a00 	vldr	s15, [r7]
 800104a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001070 <PSCalculateAlt+0x60>
 800104e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001056:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001074 <PSCalculateAlt+0x64>
 800105a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800105e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001062:	eeb0 0a67 	vmov.f32	s0, s15
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	3e42c9b4 	.word	0x3e42c9b4
 8001070:	43889333 	.word	0x43889333
 8001074:	3bd4fdf4 	.word	0x3bd4fdf4

08001078 <PsPing>:

int32_t PsPing(void){
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
	transfer In,Out;
	Out.buf[0] = 0x0F | SA_READ;
 800107e:	238f      	movs	r3, #143	; 0x8f
 8001080:	703b      	strb	r3, [r7, #0]
	Out.buf[1] = 0x00;
 8001082:	2300      	movs	r3, #0
 8001084:	707b      	strb	r3, [r7, #1]
	In.dane = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
	//6Bh - who I am
	SPIPsSend(Out.buf, In.buf, 2);
 800108a:	1d39      	adds	r1, r7, #4
 800108c:	463b      	mov	r3, r7
 800108e:	2202      	movs	r2, #2
 8001090:	4618      	mov	r0, r3
 8001092:	f000 f8c1 	bl	8001218 <SPIPsSend>

	if(In.buf[1] == 0xB1)
 8001096:	797b      	ldrb	r3, [r7, #5]
 8001098:	2bb1      	cmp	r3, #177	; 0xb1
 800109a:	d101      	bne.n	80010a0 <PsPing+0x28>
			return 0;
 800109c:	2300      	movs	r3, #0
 800109e:	e000      	b.n	80010a2 <PsPing+0x2a>

	return 1;
 80010a0:	2301      	movs	r3, #1
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <PSRead>:


//No error checking!
int32_t PSRead(PSReading * data){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retVal;
	transfer In,Out;
	//Force one shoot:
	Out.buf[0] = 0x11;
 80010b4:	2311      	movs	r3, #17
 80010b6:	733b      	strb	r3, [r7, #12]
	Out.buf[1] = CTRL_REG_DEF_OSM;
 80010b8:	2311      	movs	r3, #17
 80010ba:	737b      	strb	r3, [r7, #13]
	retVal = SPIPsSend(Out.buf, In.buf, 2);
 80010bc:	f107 0110 	add.w	r1, r7, #16
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2202      	movs	r2, #2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f8a6 	bl	8001218 <SPIPsSend>
 80010cc:	4603      	mov	r3, r0
 80010ce:	75fb      	strb	r3, [r7, #23]
	//Wait for one shoot done:
	Out.buf[0] = 0x11 | SA_READ;
 80010d0:	2391      	movs	r3, #145	; 0x91
 80010d2:	733b      	strb	r3, [r7, #12]
	Out.buf[1] = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	737b      	strb	r3, [r7, #13]
	while(In.buf[1] != CTRL_REG_DEF){
 80010d8:	e009      	b.n	80010ee <PSRead+0x42>
		retVal = SPIPsSend(Out.buf, In.buf, 2);
 80010da:	f107 0110 	add.w	r1, r7, #16
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	2202      	movs	r2, #2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 f897 	bl	8001218 <SPIPsSend>
 80010ea:	4603      	mov	r3, r0
 80010ec:	75fb      	strb	r3, [r7, #23]
	while(In.buf[1] != CTRL_REG_DEF){
 80010ee:	7c7b      	ldrb	r3, [r7, #17]
 80010f0:	2b10      	cmp	r3, #16
 80010f2:	d1f2      	bne.n	80010da <PSRead+0x2e>
		//todo: add timeout!
	}
	//Read values:
	//Pressure:
	Out.dane = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
	In.dane = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
	Out.buf[0] = 0x28 | SA_READ;
 80010fc:	23a8      	movs	r3, #168	; 0xa8
 80010fe:	733b      	strb	r3, [r7, #12]
	retVal = SPIPsSend(Out.buf, In.buf, 4);
 8001100:	f107 0110 	add.w	r1, r7, #16
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2204      	movs	r2, #4
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f884 	bl	8001218 <SPIPsSend>
 8001110:	4603      	mov	r3, r0
 8001112:	75fb      	strb	r3, [r7, #23]

	//24 bit 2's complement
	In.dane >>=8; //skip nulls
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	0a1b      	lsrs	r3, r3, #8
 8001118:	613b      	str	r3, [r7, #16]
	if(In.buf[3] & 0x80){
 800111a:	7cfb      	ldrb	r3, [r7, #19]
 800111c:	b25b      	sxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	da01      	bge.n	8001126 <PSRead+0x7a>
		//negative
		In.buf[4]=0xff;
 8001122:	23ff      	movs	r3, #255	; 0xff
 8001124:	753b      	strb	r3, [r7, #20]
	}

	data->pres = (float)*(int32_t *)(In.buf)/40.96f;
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	ee07 3a90 	vmov	s15, r3
 8001130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001134:	eddf 6a21 	vldr	s13, [pc, #132]	; 80011bc <PSRead+0x110>
 8001138:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	edc3 7a01 	vstr	s15, [r3, #4]


	//Temperature:
	Out.dane = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
	In.dane = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
	Out.buf[0] = 0x2B | SA_READ;
 800114a:	23ab      	movs	r3, #171	; 0xab
 800114c:	733b      	strb	r3, [r7, #12]
	retVal = SPIPsSend(Out.buf, In.buf, 3);
 800114e:	f107 0110 	add.w	r1, r7, #16
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	2203      	movs	r2, #3
 8001158:	4618      	mov	r0, r3
 800115a:	f000 f85d 	bl	8001218 <SPIPsSend>
 800115e:	4603      	mov	r3, r0
 8001160:	75fb      	strb	r3, [r7, #23]

	data->temp = (float)*((int16_t *)(In.buf+1));
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	3301      	adds	r3, #1
 8001168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	edc3 7a00 	vstr	s15, [r3]
	data->temp /= 100;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	ed93 7a00 	vldr	s14, [r3]
 8001180:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80011c0 <PSRead+0x114>
 8001184:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	edc3 7a00 	vstr	s15, [r3]

	//calculate Altitude:

	data->alt = PSCalculateAlt(data->pres,data->temp);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	edd3 7a01 	vldr	s15, [r3, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	ed93 7a00 	vldr	s14, [r3]
 800119a:	eef0 0a47 	vmov.f32	s1, s14
 800119e:	eeb0 0a67 	vmov.f32	s0, s15
 80011a2:	f7ff ff35 	bl	8001010 <PSCalculateAlt>
 80011a6:	eef0 7a40 	vmov.f32	s15, s0
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	edc3 7a02 	vstr	s15, [r3, #8]

	return retVal;
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	4223d70a 	.word	0x4223d70a
 80011c0:	42c80000 	.word	0x42c80000

080011c4 <SPIIncSend>:


extern SPI_HandleTypeDef hspi2;


HAL_StatusTypeDef SPIIncSend(char* dataOut,char * dataIn, uint16_t len){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af02      	add	r7, sp, #8
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	4613      	mov	r3, r2
 80011d0:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef retVal;

	HAL_GPIO_WritePin(CS_INC_GPIO_Port, CS_INC_Pin, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <SPIIncSend+0x4c>)
 80011da:	f001 f8b7 	bl	800234c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80011de:	2001      	movs	r0, #1
 80011e0:	f000 fe30 	bl	8001e44 <HAL_Delay>

	retVal = HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)dataOut, (uint8_t*)dataIn, len, 100);
 80011e4:	88fb      	ldrh	r3, [r7, #6]
 80011e6:	2264      	movs	r2, #100	; 0x64
 80011e8:	9200      	str	r2, [sp, #0]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	68f9      	ldr	r1, [r7, #12]
 80011ee:	4809      	ldr	r0, [pc, #36]	; (8001214 <SPIIncSend+0x50>)
 80011f0:	f004 f93b 	bl	800546a <HAL_SPI_TransmitReceive>
 80011f4:	4603      	mov	r3, r0
 80011f6:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(CS_INC_GPIO_Port, CS_INC_Pin, 1);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011fe:	4804      	ldr	r0, [pc, #16]	; (8001210 <SPIIncSend+0x4c>)
 8001200:	f001 f8a4 	bl	800234c <HAL_GPIO_WritePin>

	return retVal;
 8001204:	7dfb      	ldrb	r3, [r7, #23]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	48000400 	.word	0x48000400
 8001214:	20000354 	.word	0x20000354

08001218 <SPIPsSend>:
	HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, 1);

	return retVal;
}

HAL_StatusTypeDef SPIPsSend(char* dataOut,char * dataIn, uint16_t len){
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af02      	add	r7, sp, #8
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	4613      	mov	r3, r2
 8001224:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef retVal;

	HAL_GPIO_WritePin(CS_PS_GPIO_Port, CS_PS_Pin, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2140      	movs	r1, #64	; 0x40
 800122a:	480d      	ldr	r0, [pc, #52]	; (8001260 <SPIPsSend+0x48>)
 800122c:	f001 f88e 	bl	800234c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001230:	2001      	movs	r0, #1
 8001232:	f000 fe07 	bl	8001e44 <HAL_Delay>

	retVal = HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)dataOut, (uint8_t*)dataIn, len, 100);
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	2264      	movs	r2, #100	; 0x64
 800123a:	9200      	str	r2, [sp, #0]
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	68f9      	ldr	r1, [r7, #12]
 8001240:	4808      	ldr	r0, [pc, #32]	; (8001264 <SPIPsSend+0x4c>)
 8001242:	f004 f912 	bl	800546a <HAL_SPI_TransmitReceive>
 8001246:	4603      	mov	r3, r0
 8001248:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(CS_PS_GPIO_Port, CS_PS_Pin, 1);
 800124a:	2201      	movs	r2, #1
 800124c:	2140      	movs	r1, #64	; 0x40
 800124e:	4804      	ldr	r0, [pc, #16]	; (8001260 <SPIPsSend+0x48>)
 8001250:	f001 f87c 	bl	800234c <HAL_GPIO_WritePin>

	return retVal;
 8001254:	7dfb      	ldrb	r3, [r7, #23]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	48000400 	.word	0x48000400
 8001264:	20000354 	.word	0x20000354

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800126c:	b08c      	sub	sp, #48	; 0x30
 800126e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001270:	f000 fd73 	bl	8001d5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001274:	f000 f8e0 	bl	8001438 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001278:	f000 f9fc 	bl	8001674 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 800127c:	f000 f99a 	bl	80015b4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001280:	f005 fef6 	bl	8007070 <MX_FATFS_Init>
  MX_SPI2_Init();
 8001284:	f000 f9b8 	bl	80015f8 <MX_SPI2_Init>
  MX_I2C3_Init();
 8001288:	f000 f928 	bl	80014dc <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 800128c:	f000 f966 	bl	800155c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, 1);
 8001290:	2201      	movs	r2, #1
 8001292:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001296:	4864      	ldr	r0, [pc, #400]	; (8001428 <main+0x1c0>)
 8001298:	f001 f858 	bl	800234c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS_PS_GPIO_Port, CS_PS_Pin, 1);
 800129c:	2201      	movs	r2, #1
 800129e:	2140      	movs	r1, #64	; 0x40
 80012a0:	4861      	ldr	r0, [pc, #388]	; (8001428 <main+0x1c0>)
 80012a2:	f001 f853 	bl	800234c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS_INC_GPIO_Port, CS_INC_Pin, 1);
 80012a6:	2201      	movs	r2, #1
 80012a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ac:	485e      	ldr	r0, [pc, #376]	; (8001428 <main+0x1c0>)
 80012ae:	f001 f84d 	bl	800234c <HAL_GPIO_WritePin>

  //Check I2C:
  //Set beginning altitude:

  PSReading PSData;
  if(!PsPing()){
 80012b2:	f7ff fee1 	bl	8001078 <PsPing>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d109      	bne.n	80012d0 <main+0x68>
  		  PSRead(&PSData);
 80012bc:	463b      	mov	r3, r7
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fef4 	bl	80010ac <PSRead>
  		  PSSetSeaLevelPressure(PSData.pres);
 80012c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c8:	eeb0 0a67 	vmov.f32	s0, s15
 80012cc:	f7ff fe82 	bl	8000fd4 <PSSetSeaLevelPressure>
  }
  IncInit();
 80012d0:	f7ff fe38 	bl	8000f44 <IncInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float filteredAlt=0, filteredAng=0,filteredAltOld;
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
  int x = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]
  while (1)
  {



	  PSRead(&PSData);
 80012e4:	463b      	mov	r3, r7
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fee0 	bl	80010ac <PSRead>
	  angle = IncGetAngle();
 80012ec:	f7ff fe3c 	bl	8000f68 <IncGetAngle>
 80012f0:	ed87 0a03 	vstr	s0, [r7, #12]

	  //Filter:
	  filteredAlt = filteredAlt * (1-FILTER_A) + FILTER_A * PSData.alt;
 80012f4:	69f8      	ldr	r0, [r7, #28]
 80012f6:	f7ff f927 	bl	8000548 <__aeabi_f2d>
 80012fa:	a345      	add	r3, pc, #276	; (adr r3, 8001410 <main+0x1a8>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	f7ff f97a 	bl	80005f8 <__aeabi_dmul>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4614      	mov	r4, r2
 800130a:	461d      	mov	r5, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f91a 	bl	8000548 <__aeabi_f2d>
 8001314:	a340      	add	r3, pc, #256	; (adr r3, 8001418 <main+0x1b0>)
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	f7ff f96d 	bl	80005f8 <__aeabi_dmul>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4620      	mov	r0, r4
 8001324:	4629      	mov	r1, r5
 8001326:	f7fe ffb1 	bl	800028c <__adddf3>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fc39 	bl	8000ba8 <__aeabi_d2f>
 8001336:	4603      	mov	r3, r0
 8001338:	61fb      	str	r3, [r7, #28]
	  filteredAng = filteredAng * (1-FILTER_A) + FILTER_A * angle;
 800133a:	69b8      	ldr	r0, [r7, #24]
 800133c:	f7ff f904 	bl	8000548 <__aeabi_f2d>
 8001340:	a333      	add	r3, pc, #204	; (adr r3, 8001410 <main+0x1a8>)
 8001342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001346:	f7ff f957 	bl	80005f8 <__aeabi_dmul>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4614      	mov	r4, r2
 8001350:	461d      	mov	r5, r3
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f7ff f8f8 	bl	8000548 <__aeabi_f2d>
 8001358:	a32f      	add	r3, pc, #188	; (adr r3, 8001418 <main+0x1b0>)
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	f7ff f94b 	bl	80005f8 <__aeabi_dmul>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4620      	mov	r0, r4
 8001368:	4629      	mov	r1, r5
 800136a:	f7fe ff8f 	bl	800028c <__adddf3>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f7ff fc17 	bl	8000ba8 <__aeabi_d2f>
 800137a:	4603      	mov	r3, r0
 800137c:	61bb      	str	r3, [r7, #24]

	  (void) angle;
	  if((angle > CRIT_ANGLE) || ( (fabs(filteredAlt-filteredAltOld)*10) > CRIT_ACC))
 800137e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001382:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800138a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138e:	dc1c      	bgt.n	80013ca <main+0x162>
 8001390:	ed97 7a07 	vldr	s14, [r7, #28]
 8001394:	edd7 7a05 	vldr	s15, [r7, #20]
 8001398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800139c:	eef0 7ae7 	vabs.f32	s15, s15
 80013a0:	ee17 0a90 	vmov	r0, s15
 80013a4:	f7ff f8d0 	bl	8000548 <__aeabi_f2d>
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <main+0x1c4>)
 80013ae:	f7ff f923 	bl	80005f8 <__aeabi_dmul>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	a319      	add	r3, pc, #100	; (adr r3, 8001420 <main+0x1b8>)
 80013bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c0:	f7ff fbaa 	bl	8000b18 <__aeabi_dcmpgt>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d002      	beq.n	80013d0 <main+0x168>
	  {
		  printf("STAN KRYTYCZNY!\n");
 80013ca:	4819      	ldr	r0, [pc, #100]	; (8001430 <main+0x1c8>)
 80013cc:	f007 fad6 	bl	800897c <puts>
	  }

	  printf("KAT,%3.1f,WYS,%1.1f,T,%3.1f\n",filteredAng,filteredAlt,PSData.temp);
 80013d0:	69b8      	ldr	r0, [r7, #24]
 80013d2:	f7ff f8b9 	bl	8000548 <__aeabi_f2d>
 80013d6:	4680      	mov	r8, r0
 80013d8:	4689      	mov	r9, r1
 80013da:	69f8      	ldr	r0, [r7, #28]
 80013dc:	f7ff f8b4 	bl	8000548 <__aeabi_f2d>
 80013e0:	4604      	mov	r4, r0
 80013e2:	460d      	mov	r5, r1
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f8ae 	bl	8000548 <__aeabi_f2d>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80013f4:	e9cd 4500 	strd	r4, r5, [sp]
 80013f8:	4642      	mov	r2, r8
 80013fa:	464b      	mov	r3, r9
 80013fc:	480d      	ldr	r0, [pc, #52]	; (8001434 <main+0x1cc>)
 80013fe:	f007 fa57 	bl	80088b0 <iprintf>

	  HAL_Delay(100);
 8001402:	2064      	movs	r0, #100	; 0x64
 8001404:	f000 fd1e 	bl	8001e44 <HAL_Delay>
	  filteredAltOld = filteredAlt;
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	617b      	str	r3, [r7, #20]
	  PSRead(&PSData);
 800140c:	e76a      	b.n	80012e4 <main+0x7c>
 800140e:	bf00      	nop
 8001410:	eb851eb8 	.word	0xeb851eb8
 8001414:	3feeb851 	.word	0x3feeb851
 8001418:	47ae147b 	.word	0x47ae147b
 800141c:	3fa47ae1 	.word	0x3fa47ae1
 8001420:	9999999a 	.word	0x9999999a
 8001424:	3fe99999 	.word	0x3fe99999
 8001428:	48000400 	.word	0x48000400
 800142c:	40240000 	.word	0x40240000
 8001430:	0800a8c8 	.word	0x0800a8c8
 8001434:	0800a8d8 	.word	0x0800a8d8

08001438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b096      	sub	sp, #88	; 0x58
 800143c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	2244      	movs	r2, #68	; 0x44
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f007 fb78 	bl	8008b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800144c:	463b      	mov	r3, r7
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800145a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800145e:	f001 f8cd 	bl	80025fc <HAL_PWREx_ControlVoltageScaling>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001468:	f000 f968 	bl	800173c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800146c:	2302      	movs	r3, #2
 800146e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001470:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001474:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001476:	2310      	movs	r3, #16
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147a:	2302      	movs	r3, #2
 800147c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800147e:	2302      	movs	r3, #2
 8001480:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001482:	2301      	movs	r3, #1
 8001484:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001486:	230a      	movs	r3, #10
 8001488:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800148a:	2307      	movs	r3, #7
 800148c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800148e:	2302      	movs	r3, #2
 8001490:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001492:	2302      	movs	r3, #2
 8001494:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4618      	mov	r0, r3
 800149c:	f001 f904 	bl	80026a8 <HAL_RCC_OscConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80014a6:	f000 f949 	bl	800173c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014aa:	230f      	movs	r3, #15
 80014ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ae:	2303      	movs	r3, #3
 80014b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014be:	463b      	mov	r3, r7
 80014c0:	2104      	movs	r1, #4
 80014c2:	4618      	mov	r0, r3
 80014c4:	f001 fd04 	bl	8002ed0 <HAL_RCC_ClockConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014ce:	f000 f935 	bl	800173c <Error_Handler>
  }
}
 80014d2:	bf00      	nop
 80014d4:	3758      	adds	r7, #88	; 0x58
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <MX_I2C3_Init+0x74>)
 80014e2:	4a1c      	ldr	r2, [pc, #112]	; (8001554 <MX_I2C3_Init+0x78>)
 80014e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0xF010F3FE;
 80014e6:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <MX_I2C3_Init+0x74>)
 80014e8:	4a1b      	ldr	r2, [pc, #108]	; (8001558 <MX_I2C3_Init+0x7c>)
 80014ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <MX_I2C3_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <MX_I2C3_Init+0x74>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <MX_I2C3_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <MX_I2C3_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <MX_I2C3_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <MX_I2C3_Init+0x74>)
 800150c:	2200      	movs	r2, #0
 800150e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <MX_I2C3_Init+0x74>)
 8001512:	2200      	movs	r2, #0
 8001514:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001516:	480e      	ldr	r0, [pc, #56]	; (8001550 <MX_I2C3_Init+0x74>)
 8001518:	f000 ff30 	bl	800237c <HAL_I2C_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001522:	f000 f90b 	bl	800173c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001526:	2100      	movs	r1, #0
 8001528:	4809      	ldr	r0, [pc, #36]	; (8001550 <MX_I2C3_Init+0x74>)
 800152a:	f000 ffc2 	bl	80024b2 <HAL_I2CEx_ConfigAnalogFilter>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001534:	f000 f902 	bl	800173c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001538:	2100      	movs	r1, #0
 800153a:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_I2C3_Init+0x74>)
 800153c:	f001 f804 	bl	8002548 <HAL_I2CEx_ConfigDigitalFilter>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001546:	f000 f8f9 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200001f4 	.word	0x200001f4
 8001554:	40005c00 	.word	0x40005c00
 8001558:	f010f3fe 	.word	0xf010f3fe

0800155c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <MX_LPUART1_UART_Init+0x50>)
 8001562:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <MX_LPUART1_UART_Init+0x54>)
 8001564:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_LPUART1_UART_Init+0x50>)
 8001568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800156c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_LPUART1_UART_Init+0x50>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <MX_LPUART1_UART_Init+0x50>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_LPUART1_UART_Init+0x50>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <MX_LPUART1_UART_Init+0x50>)
 8001582:	220c      	movs	r2, #12
 8001584:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_LPUART1_UART_Init+0x50>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <MX_LPUART1_UART_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_LPUART1_UART_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001598:	4804      	ldr	r0, [pc, #16]	; (80015ac <MX_LPUART1_UART_Init+0x50>)
 800159a:	f004 faed 	bl	8005b78 <HAL_UART_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80015a4:	f000 f8ca 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000248 	.word	0x20000248
 80015b0:	40008000 	.word	0x40008000

080015b4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <MX_SDMMC1_SD_Init+0x3c>)
 80015ba:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <MX_SDMMC1_SD_Init+0x40>)
 80015bc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_SDMMC1_SD_Init+0x3c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_ENABLE;
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <MX_SDMMC1_SD_Init+0x3c>)
 80015c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ca:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_SDMMC1_SD_Init+0x3c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <MX_SDMMC1_SD_Init+0x3c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <MX_SDMMC1_SD_Init+0x3c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 4;
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <MX_SDMMC1_SD_Init+0x3c>)
 80015e0:	2204      	movs	r2, #4
 80015e2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	200002d0 	.word	0x200002d0
 80015f4:	40012800 	.word	0x40012800

080015f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <MX_SPI2_Init+0x74>)
 80015fe:	4a1c      	ldr	r2, [pc, #112]	; (8001670 <MX_SPI2_Init+0x78>)
 8001600:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <MX_SPI2_Init+0x74>)
 8001604:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001608:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <MX_SPI2_Init+0x74>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001610:	4b16      	ldr	r3, [pc, #88]	; (800166c <MX_SPI2_Init+0x74>)
 8001612:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001616:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <MX_SPI2_Init+0x74>)
 800161a:	2202      	movs	r2, #2
 800161c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <MX_SPI2_Init+0x74>)
 8001620:	2201      	movs	r2, #1
 8001622:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_SPI2_Init+0x74>)
 8001626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800162a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <MX_SPI2_Init+0x74>)
 800162e:	2238      	movs	r2, #56	; 0x38
 8001630:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_SPI2_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_SPI2_Init+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <MX_SPI2_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_SPI2_Init+0x74>)
 8001646:	2207      	movs	r2, #7
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <MX_SPI2_Init+0x74>)
 800164c:	2200      	movs	r2, #0
 800164e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_SPI2_Init+0x74>)
 8001652:	2200      	movs	r2, #0
 8001654:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_SPI2_Init+0x74>)
 8001658:	f003 fe64 	bl	8005324 <HAL_SPI_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001662:	f000 f86b 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000354 	.word	0x20000354
 8001670:	40003800 	.word	0x40003800

08001674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
 8001688:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800168a:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <MX_GPIO_Init+0xc0>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	4a29      	ldr	r2, [pc, #164]	; (8001734 <MX_GPIO_Init+0xc0>)
 8001690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001696:	4b27      	ldr	r3, [pc, #156]	; (8001734 <MX_GPIO_Init+0xc0>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	4b24      	ldr	r3, [pc, #144]	; (8001734 <MX_GPIO_Init+0xc0>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	4a23      	ldr	r2, [pc, #140]	; (8001734 <MX_GPIO_Init+0xc0>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ae:	4b21      	ldr	r3, [pc, #132]	; (8001734 <MX_GPIO_Init+0xc0>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <MX_GPIO_Init+0xc0>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	4a1d      	ldr	r2, [pc, #116]	; (8001734 <MX_GPIO_Init+0xc0>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c6:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <MX_GPIO_Init+0xc0>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <MX_GPIO_Init+0xc0>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	4a17      	ldr	r2, [pc, #92]	; (8001734 <MX_GPIO_Init+0xc0>)
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <MX_GPIO_Init+0xc0>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <MX_GPIO_Init+0xc0>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <MX_GPIO_Init+0xc0>)
 80016f0:	f043 0308 	orr.w	r3, r3, #8
 80016f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <MX_GPIO_Init+0xc0>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_PS_Pin|CS_IMU_Pin|CS_INC_Pin, GPIO_PIN_RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	f44f 7150 	mov.w	r1, #832	; 0x340
 8001708:	480b      	ldr	r0, [pc, #44]	; (8001738 <MX_GPIO_Init+0xc4>)
 800170a:	f000 fe1f 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_PS_Pin CS_IMU_Pin CS_INC_Pin */
  GPIO_InitStruct.Pin = CS_PS_Pin|CS_IMU_Pin|CS_INC_Pin;
 800170e:	f44f 7350 	mov.w	r3, #832	; 0x340
 8001712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001714:	2301      	movs	r3, #1
 8001716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2300      	movs	r3, #0
 800171e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	4804      	ldr	r0, [pc, #16]	; (8001738 <MX_GPIO_Init+0xc4>)
 8001728:	f000 fc96 	bl	8002058 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	; 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000
 8001738:	48000400 	.word	0x48000400

0800173c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001740:	b672      	cpsid	i
}
 8001742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001744:	e7fe      	b.n	8001744 <Error_Handler+0x8>
	...

08001748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <HAL_MspInit+0x44>)
 8001750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001752:	4a0e      	ldr	r2, [pc, #56]	; (800178c <HAL_MspInit+0x44>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6613      	str	r3, [r2, #96]	; 0x60
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <HAL_MspInit+0x44>)
 800175c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_MspInit+0x44>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <HAL_MspInit+0x44>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001770:	6593      	str	r3, [r2, #88]	; 0x58
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_MspInit+0x44>)
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000

08001790 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b0a0      	sub	sp, #128	; 0x80
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	225c      	movs	r2, #92	; 0x5c
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f007 f9c3 	bl	8008b3c <memset>
  if(hi2c->Instance==I2C3)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a1f      	ldr	r2, [pc, #124]	; (8001838 <HAL_I2C_MspInit+0xa8>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d136      	bne.n	800182e <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80017c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80017c6:	2300      	movs	r3, #0
 80017c8:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ca:	f107 0310 	add.w	r3, r7, #16
 80017ce:	4618      	mov	r0, r3
 80017d0:	f001 fda0 	bl	8003314 <HAL_RCCEx_PeriphCLKConfig>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80017da:	f7ff ffaf 	bl	800173c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <HAL_I2C_MspInit+0xac>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	4a16      	ldr	r2, [pc, #88]	; (800183c <HAL_I2C_MspInit+0xac>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <HAL_I2C_MspInit+0xac>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017f6:	2303      	movs	r3, #3
 80017f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017fa:	2312      	movs	r3, #18
 80017fc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017fe:	2301      	movs	r3, #1
 8001800:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001806:	2304      	movs	r3, #4
 8001808:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800180e:	4619      	mov	r1, r3
 8001810:	480b      	ldr	r0, [pc, #44]	; (8001840 <HAL_I2C_MspInit+0xb0>)
 8001812:	f000 fc21 	bl	8002058 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_I2C_MspInit+0xac>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	4a08      	ldr	r2, [pc, #32]	; (800183c <HAL_I2C_MspInit+0xac>)
 800181c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001820:	6593      	str	r3, [r2, #88]	; 0x58
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_I2C_MspInit+0xac>)
 8001824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001826:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800182e:	bf00      	nop
 8001830:	3780      	adds	r7, #128	; 0x80
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40005c00 	.word	0x40005c00
 800183c:	40021000 	.word	0x40021000
 8001840:	48000800 	.word	0x48000800

08001844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b0a2      	sub	sp, #136	; 0x88
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800185c:	f107 0318 	add.w	r3, r7, #24
 8001860:	225c      	movs	r2, #92	; 0x5c
 8001862:	2100      	movs	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f007 f969 	bl	8008b3c <memset>
  if(huart->Instance==LPUART1)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a2f      	ldr	r2, [pc, #188]	; (800192c <HAL_UART_MspInit+0xe8>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d157      	bne.n	8001924 <HAL_UART_MspInit+0xe0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001874:	2320      	movs	r3, #32
 8001876:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001878:	2300      	movs	r3, #0
 800187a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800187c:	f107 0318 	add.w	r3, r7, #24
 8001880:	4618      	mov	r0, r3
 8001882:	f001 fd47 	bl	8003314 <HAL_RCCEx_PeriphCLKConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800188c:	f7ff ff56 	bl	800173c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001890:	4b27      	ldr	r3, [pc, #156]	; (8001930 <HAL_UART_MspInit+0xec>)
 8001892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001894:	4a26      	ldr	r2, [pc, #152]	; (8001930 <HAL_UART_MspInit+0xec>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800189c:	4b24      	ldr	r3, [pc, #144]	; (8001930 <HAL_UART_MspInit+0xec>)
 800189e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a8:	4b21      	ldr	r3, [pc, #132]	; (8001930 <HAL_UART_MspInit+0xec>)
 80018aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ac:	4a20      	ldr	r2, [pc, #128]	; (8001930 <HAL_UART_MspInit+0xec>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <HAL_UART_MspInit+0xec>)
 80018b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <HAL_UART_MspInit+0xec>)
 80018c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c4:	4a1a      	ldr	r2, [pc, #104]	; (8001930 <HAL_UART_MspInit+0xec>)
 80018c6:	f043 0302 	orr.w	r3, r3, #2
 80018ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018cc:	4b18      	ldr	r3, [pc, #96]	; (8001930 <HAL_UART_MspInit+0xec>)
 80018ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018d8:	2308      	movs	r3, #8
 80018da:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80018ea:	2308      	movs	r3, #8
 80018ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018f4:	4619      	mov	r1, r3
 80018f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fa:	f000 fbad 	bl	8002058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80018fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001902:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190c:	2303      	movs	r3, #3
 800190e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001912:	2308      	movs	r3, #8
 8001914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001918:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800191c:	4619      	mov	r1, r3
 800191e:	4805      	ldr	r0, [pc, #20]	; (8001934 <HAL_UART_MspInit+0xf0>)
 8001920:	f000 fb9a 	bl	8002058 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001924:	bf00      	nop
 8001926:	3788      	adds	r7, #136	; 0x88
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40008000 	.word	0x40008000
 8001930:	40021000 	.word	0x40021000
 8001934:	48000400 	.word	0x48000400

08001938 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b0a2      	sub	sp, #136	; 0x88
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001950:	f107 0318 	add.w	r3, r7, #24
 8001954:	225c      	movs	r2, #92	; 0x5c
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f007 f8ef 	bl	8008b3c <memset>
  if(hsd->Instance==SDMMC1)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a37      	ldr	r2, [pc, #220]	; (8001a40 <HAL_SD_MspInit+0x108>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d167      	bne.n	8001a38 <HAL_SD_MspInit+0x100>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001968:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800196c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 800196e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001972:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001974:	2302      	movs	r3, #2
 8001976:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001978:	2301      	movs	r3, #1
 800197a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 800197c:	230a      	movs	r3, #10
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001980:	2307      	movs	r3, #7
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8001984:	2304      	movs	r3, #4
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001988:	2302      	movs	r3, #2
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800198c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001990:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001992:	f107 0318 	add.w	r3, r7, #24
 8001996:	4618      	mov	r0, r3
 8001998:	f001 fcbc 	bl	8003314 <HAL_RCCEx_PeriphCLKConfig>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_SD_MspInit+0x6e>
    {
      Error_Handler();
 80019a2:	f7ff fecb 	bl	800173c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80019a6:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <HAL_SD_MspInit+0x10c>)
 80019a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019aa:	4a26      	ldr	r2, [pc, #152]	; (8001a44 <HAL_SD_MspInit+0x10c>)
 80019ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019b0:	6613      	str	r3, [r2, #96]	; 0x60
 80019b2:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <HAL_SD_MspInit+0x10c>)
 80019b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019be:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <HAL_SD_MspInit+0x10c>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	4a20      	ldr	r2, [pc, #128]	; (8001a44 <HAL_SD_MspInit+0x10c>)
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <HAL_SD_MspInit+0x10c>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d6:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_SD_MspInit+0x10c>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	4a1a      	ldr	r2, [pc, #104]	; (8001a44 <HAL_SD_MspInit+0x10c>)
 80019dc:	f043 0308 	orr.w	r3, r3, #8
 80019e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_SD_MspInit+0x10c>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80019ee:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80019f2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f8:	2301      	movs	r3, #1
 80019fa:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fc:	2303      	movs	r3, #3
 80019fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a02:	230c      	movs	r3, #12
 8001a04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a08:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	480e      	ldr	r0, [pc, #56]	; (8001a48 <HAL_SD_MspInit+0x110>)
 8001a10:	f000 fb22 	bl	8002058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a14:	2304      	movs	r3, #4
 8001a16:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a26:	230c      	movs	r3, #12
 8001a28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a2c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a30:	4619      	mov	r1, r3
 8001a32:	4806      	ldr	r0, [pc, #24]	; (8001a4c <HAL_SD_MspInit+0x114>)
 8001a34:	f000 fb10 	bl	8002058 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001a38:	bf00      	nop
 8001a3a:	3788      	adds	r7, #136	; 0x88
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40012800 	.word	0x40012800
 8001a44:	40021000 	.word	0x40021000
 8001a48:	48000800 	.word	0x48000800
 8001a4c:	48000c00 	.word	0x48000c00

08001a50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a25      	ldr	r2, [pc, #148]	; (8001b04 <HAL_SPI_MspInit+0xb4>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d144      	bne.n	8001afc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a72:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <HAL_SPI_MspInit+0xb8>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a76:	4a24      	ldr	r2, [pc, #144]	; (8001b08 <HAL_SPI_MspInit+0xb8>)
 8001a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a7e:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <HAL_SPI_MspInit+0xb8>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8a:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <HAL_SPI_MspInit+0xb8>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8e:	4a1e      	ldr	r2, [pc, #120]	; (8001b08 <HAL_SPI_MspInit+0xb8>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a96:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <HAL_SPI_MspInit+0xb8>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <HAL_SPI_MspInit+0xb8>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa6:	4a18      	ldr	r2, [pc, #96]	; (8001b08 <HAL_SPI_MspInit+0xb8>)
 8001aa8:	f043 0302 	orr.w	r3, r3, #2
 8001aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aae:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <HAL_SPI_MspInit+0xb8>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001aba:	230c      	movs	r3, #12
 8001abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aca:	2305      	movs	r3, #5
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	480d      	ldr	r0, [pc, #52]	; (8001b0c <HAL_SPI_MspInit+0xbc>)
 8001ad6:	f000 fabf 	bl	8002058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aec:	2305      	movs	r3, #5
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4619      	mov	r1, r3
 8001af6:	4806      	ldr	r0, [pc, #24]	; (8001b10 <HAL_SPI_MspInit+0xc0>)
 8001af8:	f000 faae 	bl	8002058 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001afc:	bf00      	nop
 8001afe:	3728      	adds	r7, #40	; 0x28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40003800 	.word	0x40003800
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	48000800 	.word	0x48000800
 8001b10:	48000400 	.word	0x48000400

08001b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <NMI_Handler+0x4>

08001b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <HardFault_Handler+0x4>

08001b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <MemManage_Handler+0x4>

08001b26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <BusFault_Handler+0x4>

08001b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <UsageFault_Handler+0x4>

08001b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b60:	f000 f950 	bl	8001e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return 1;
 8001b6c:	2301      	movs	r3, #1
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <_kill>:

int _kill(int pid, int sig)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b82:	f007 f82d 	bl	8008be0 <__errno>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2216      	movs	r2, #22
 8001b8a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <_exit>:

void _exit (int status)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ffe7 	bl	8001b78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001baa:	e7fe      	b.n	8001baa <_exit+0x12>

08001bac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	e00a      	b.n	8001bd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bbe:	f3af 8000 	nop.w
 8001bc2:	4601      	mov	r1, r0
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	60ba      	str	r2, [r7, #8]
 8001bca:	b2ca      	uxtb	r2, r1
 8001bcc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	dbf0      	blt.n	8001bbe <_read+0x12>
  }

  return len;
 8001bdc:	687b      	ldr	r3, [r7, #4]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  HAL_UART_Transmit(&hlpuart1, ptr, len, 100);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	2364      	movs	r3, #100	; 0x64
 8001bfa:	68b9      	ldr	r1, [r7, #8]
 8001bfc:	4803      	ldr	r0, [pc, #12]	; (8001c0c <_write+0x24>)
 8001bfe:	f004 f809 	bl	8005c14 <HAL_UART_Transmit>

  return len;
 8001c02:	687b      	ldr	r3, [r7, #4]

}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000248 	.word	0x20000248

08001c10 <_close>:

int _close(int file)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c38:	605a      	str	r2, [r3, #4]
  return 0;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_isatty>:

int _isatty(int file)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c50:	2301      	movs	r3, #1
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b085      	sub	sp, #20
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <_sbrk+0x5c>)
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <_sbrk+0x60>)
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <_sbrk+0x64>)
 8001c96:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <_sbrk+0x68>)
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d207      	bcs.n	8001cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca8:	f006 ff9a 	bl	8008be0 <__errno>
 8001cac:	4603      	mov	r3, r0
 8001cae:	220c      	movs	r2, #12
 8001cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb6:	e009      	b.n	8001ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <_sbrk+0x64>)
 8001cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20010000 	.word	0x20010000
 8001cd8:	00000400 	.word	0x00000400
 8001cdc:	200003b8 	.word	0x200003b8
 8001ce0:	20000520 	.word	0x20000520

08001ce4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <SystemInit+0x20>)
 8001cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cee:	4a05      	ldr	r2, [pc, #20]	; (8001d04 <SystemInit+0x20>)
 8001cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d0c:	f7ff ffea 	bl	8001ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d10:	480c      	ldr	r0, [pc, #48]	; (8001d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d12:	490d      	ldr	r1, [pc, #52]	; (8001d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d14:	4a0d      	ldr	r2, [pc, #52]	; (8001d4c <LoopForever+0xe>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d18:	e002      	b.n	8001d20 <LoopCopyDataInit>

08001d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1e:	3304      	adds	r3, #4

08001d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d24:	d3f9      	bcc.n	8001d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d28:	4c0a      	ldr	r4, [pc, #40]	; (8001d54 <LoopForever+0x16>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d2c:	e001      	b.n	8001d32 <LoopFillZerobss>

08001d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d30:	3204      	adds	r2, #4

08001d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d34:	d3fb      	bcc.n	8001d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d36:	f006 ff59 	bl	8008bec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d3a:	f7ff fa95 	bl	8001268 <main>

08001d3e <LoopForever>:

LoopForever:
    b LoopForever
 8001d3e:	e7fe      	b.n	8001d3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d40:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d48:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001d4c:	0800ad24 	.word	0x0800ad24
  ldr r2, =_sbss
 8001d50:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001d54:	20000520 	.word	0x20000520

08001d58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <ADC1_IRQHandler>

08001d5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d64:	2003      	movs	r0, #3
 8001d66:	f000 f943 	bl	8001ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d6a:	200f      	movs	r0, #15
 8001d6c:	f000 f80e 	bl	8001d8c <HAL_InitTick>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d002      	beq.n	8001d7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	71fb      	strb	r3, [r7, #7]
 8001d7a:	e001      	b.n	8001d80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d7c:	f7ff fce4 	bl	8001748 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d80:	79fb      	ldrb	r3, [r7, #7]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <HAL_InitTick+0x6c>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d023      	beq.n	8001de8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001da0:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <HAL_InitTick+0x70>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <HAL_InitTick+0x6c>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 f941 	bl	800203e <HAL_SYSTICK_Config>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10f      	bne.n	8001de2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b0f      	cmp	r3, #15
 8001dc6:	d809      	bhi.n	8001ddc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	f000 f919 	bl	8002006 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <HAL_InitTick+0x74>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e007      	b.n	8001dec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
 8001de0:	e004      	b.n	8001dec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
 8001de6:	e001      	b.n	8001dec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	2000000c 	.word	0x2000000c
 8001dfc:	20000004 	.word	0x20000004
 8001e00:	20000008 	.word	0x20000008

08001e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_IncTick+0x20>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_IncTick+0x24>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_IncTick+0x24>)
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	2000000c 	.word	0x2000000c
 8001e28:	200003bc 	.word	0x200003bc

08001e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_GetTick+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	200003bc 	.word	0x200003bc

08001e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e4c:	f7ff ffee 	bl	8001e2c <HAL_GetTick>
 8001e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5c:	d005      	beq.n	8001e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <HAL_Delay+0x44>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4413      	add	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e6a:	bf00      	nop
 8001e6c:	f7ff ffde 	bl	8001e2c <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d8f7      	bhi.n	8001e6c <HAL_Delay+0x28>
  {
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2000000c 	.word	0x2000000c

08001e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ebe:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	60d3      	str	r3, [r2, #12]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <__NVIC_GetPriorityGrouping+0x18>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	f003 0307 	and.w	r3, r3, #7
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	6039      	str	r1, [r7, #0]
 8001efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	db0a      	blt.n	8001f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	490c      	ldr	r1, [pc, #48]	; (8001f3c <__NVIC_SetPriority+0x4c>)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	0112      	lsls	r2, r2, #4
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	440b      	add	r3, r1
 8001f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f18:	e00a      	b.n	8001f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4908      	ldr	r1, [pc, #32]	; (8001f40 <__NVIC_SetPriority+0x50>)
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	3b04      	subs	r3, #4
 8001f28:	0112      	lsls	r2, r2, #4
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	761a      	strb	r2, [r3, #24]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000e100 	.word	0xe000e100
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b089      	sub	sp, #36	; 0x24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f1c3 0307 	rsb	r3, r3, #7
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	bf28      	it	cs
 8001f62:	2304      	movcs	r3, #4
 8001f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	2b06      	cmp	r3, #6
 8001f6c:	d902      	bls.n	8001f74 <NVIC_EncodePriority+0x30>
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3b03      	subs	r3, #3
 8001f72:	e000      	b.n	8001f76 <NVIC_EncodePriority+0x32>
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43da      	mvns	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	401a      	ands	r2, r3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	fa01 f303 	lsl.w	r3, r1, r3
 8001f96:	43d9      	mvns	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9c:	4313      	orrs	r3, r2
         );
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3724      	adds	r7, #36	; 0x24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fbc:	d301      	bcc.n	8001fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00f      	b.n	8001fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <SysTick_Config+0x40>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fca:	210f      	movs	r1, #15
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	f7ff ff8e 	bl	8001ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <SysTick_Config+0x40>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fda:	4b04      	ldr	r3, [pc, #16]	; (8001fec <SysTick_Config+0x40>)
 8001fdc:	2207      	movs	r2, #7
 8001fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	e000e010 	.word	0xe000e010

08001ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ff47 	bl	8001e8c <__NVIC_SetPriorityGrouping>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b086      	sub	sp, #24
 800200a:	af00      	add	r7, sp, #0
 800200c:	4603      	mov	r3, r0
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
 8002012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002018:	f7ff ff5c 	bl	8001ed4 <__NVIC_GetPriorityGrouping>
 800201c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68b9      	ldr	r1, [r7, #8]
 8002022:	6978      	ldr	r0, [r7, #20]
 8002024:	f7ff ff8e 	bl	8001f44 <NVIC_EncodePriority>
 8002028:	4602      	mov	r2, r0
 800202a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff5d 	bl	8001ef0 <__NVIC_SetPriority>
}
 8002036:	bf00      	nop
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff ffb0 	bl	8001fac <SysTick_Config>
 800204c:	4603      	mov	r3, r0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002058:	b480      	push	{r7}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002066:	e154      	b.n	8002312 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	2101      	movs	r1, #1
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	fa01 f303 	lsl.w	r3, r1, r3
 8002074:	4013      	ands	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 8146 	beq.w	800230c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b01      	cmp	r3, #1
 800208a:	d005      	beq.n	8002098 <HAL_GPIO_Init+0x40>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d130      	bne.n	80020fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	2203      	movs	r2, #3
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4013      	ands	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020ce:	2201      	movs	r2, #1
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	091b      	lsrs	r3, r3, #4
 80020e4:	f003 0201 	and.w	r2, r3, #1
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b03      	cmp	r3, #3
 8002104:	d017      	beq.n	8002136 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	2203      	movs	r2, #3
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d123      	bne.n	800218a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	08da      	lsrs	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3208      	adds	r2, #8
 800214a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4013      	ands	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	691a      	ldr	r2, [r3, #16]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	08da      	lsrs	r2, r3, #3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3208      	adds	r2, #8
 8002184:	6939      	ldr	r1, [r7, #16]
 8002186:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	2203      	movs	r2, #3
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	4013      	ands	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 0203 	and.w	r2, r3, #3
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 80a0 	beq.w	800230c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021cc:	4b58      	ldr	r3, [pc, #352]	; (8002330 <HAL_GPIO_Init+0x2d8>)
 80021ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d0:	4a57      	ldr	r2, [pc, #348]	; (8002330 <HAL_GPIO_Init+0x2d8>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6613      	str	r3, [r2, #96]	; 0x60
 80021d8:	4b55      	ldr	r3, [pc, #340]	; (8002330 <HAL_GPIO_Init+0x2d8>)
 80021da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021e4:	4a53      	ldr	r2, [pc, #332]	; (8002334 <HAL_GPIO_Init+0x2dc>)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	089b      	lsrs	r3, r3, #2
 80021ea:	3302      	adds	r3, #2
 80021ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	220f      	movs	r2, #15
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800220e:	d019      	beq.n	8002244 <HAL_GPIO_Init+0x1ec>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a49      	ldr	r2, [pc, #292]	; (8002338 <HAL_GPIO_Init+0x2e0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d013      	beq.n	8002240 <HAL_GPIO_Init+0x1e8>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a48      	ldr	r2, [pc, #288]	; (800233c <HAL_GPIO_Init+0x2e4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d00d      	beq.n	800223c <HAL_GPIO_Init+0x1e4>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a47      	ldr	r2, [pc, #284]	; (8002340 <HAL_GPIO_Init+0x2e8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d007      	beq.n	8002238 <HAL_GPIO_Init+0x1e0>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a46      	ldr	r2, [pc, #280]	; (8002344 <HAL_GPIO_Init+0x2ec>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d101      	bne.n	8002234 <HAL_GPIO_Init+0x1dc>
 8002230:	2304      	movs	r3, #4
 8002232:	e008      	b.n	8002246 <HAL_GPIO_Init+0x1ee>
 8002234:	2307      	movs	r3, #7
 8002236:	e006      	b.n	8002246 <HAL_GPIO_Init+0x1ee>
 8002238:	2303      	movs	r3, #3
 800223a:	e004      	b.n	8002246 <HAL_GPIO_Init+0x1ee>
 800223c:	2302      	movs	r3, #2
 800223e:	e002      	b.n	8002246 <HAL_GPIO_Init+0x1ee>
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <HAL_GPIO_Init+0x1ee>
 8002244:	2300      	movs	r3, #0
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	f002 0203 	and.w	r2, r2, #3
 800224c:	0092      	lsls	r2, r2, #2
 800224e:	4093      	lsls	r3, r2
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002256:	4937      	ldr	r1, [pc, #220]	; (8002334 <HAL_GPIO_Init+0x2dc>)
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	089b      	lsrs	r3, r3, #2
 800225c:	3302      	adds	r3, #2
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002264:	4b38      	ldr	r3, [pc, #224]	; (8002348 <HAL_GPIO_Init+0x2f0>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	43db      	mvns	r3, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4013      	ands	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002288:	4a2f      	ldr	r2, [pc, #188]	; (8002348 <HAL_GPIO_Init+0x2f0>)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800228e:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <HAL_GPIO_Init+0x2f0>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	43db      	mvns	r3, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022b2:	4a25      	ldr	r2, [pc, #148]	; (8002348 <HAL_GPIO_Init+0x2f0>)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022b8:	4b23      	ldr	r3, [pc, #140]	; (8002348 <HAL_GPIO_Init+0x2f0>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022dc:	4a1a      	ldr	r2, [pc, #104]	; (8002348 <HAL_GPIO_Init+0x2f0>)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022e2:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_GPIO_Init+0x2f0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	43db      	mvns	r3, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002306:	4a10      	ldr	r2, [pc, #64]	; (8002348 <HAL_GPIO_Init+0x2f0>)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	3301      	adds	r3, #1
 8002310:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	f47f aea3 	bne.w	8002068 <HAL_GPIO_Init+0x10>
  }
}
 8002322:	bf00      	nop
 8002324:	bf00      	nop
 8002326:	371c      	adds	r7, #28
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	40021000 	.word	0x40021000
 8002334:	40010000 	.word	0x40010000
 8002338:	48000400 	.word	0x48000400
 800233c:	48000800 	.word	0x48000800
 8002340:	48000c00 	.word	0x48000c00
 8002344:	48001000 	.word	0x48001000
 8002348:	40010400 	.word	0x40010400

0800234c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
 8002358:	4613      	mov	r3, r2
 800235a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800235c:	787b      	ldrb	r3, [r7, #1]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002362:	887a      	ldrh	r2, [r7, #2]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002368:	e002      	b.n	8002370 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800236a:	887a      	ldrh	r2, [r7, #2]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e08d      	b.n	80024aa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff f9f4 	bl	8001790 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2224      	movs	r2, #36	; 0x24
 80023ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0201 	bic.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d107      	bne.n	80023f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	e006      	b.n	8002404 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002402:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d108      	bne.n	800241e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	e007      	b.n	800242e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800242c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800243c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002440:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002450:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691a      	ldr	r2, [r3, #16]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69d9      	ldr	r1, [r3, #28]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1a      	ldr	r2, [r3, #32]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2220      	movs	r2, #32
 8002496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	d138      	bne.n	800253a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e032      	b.n	800253c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2224      	movs	r2, #36	; 0x24
 80024e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0201 	bic.w	r2, r2, #1
 80024f4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002504:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6819      	ldr	r1, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 0201 	orr.w	r2, r2, #1
 8002524:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2220      	movs	r2, #32
 800252a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	e000      	b.n	800253c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800253a:	2302      	movs	r3, #2
  }
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b20      	cmp	r3, #32
 800255c:	d139      	bne.n	80025d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002568:	2302      	movs	r3, #2
 800256a:	e033      	b.n	80025d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2224      	movs	r2, #36	; 0x24
 8002578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800259a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	021b      	lsls	r3, r3, #8
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0201 	orr.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2220      	movs	r2, #32
 80025c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e000      	b.n	80025d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025d2:	2302      	movs	r3, #2
  }
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40007000 	.word	0x40007000

080025fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800260a:	d130      	bne.n	800266e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800260c:	4b23      	ldr	r3, [pc, #140]	; (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002618:	d038      	beq.n	800268c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800261a:	4b20      	ldr	r3, [pc, #128]	; (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002622:	4a1e      	ldr	r2, [pc, #120]	; (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002624:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002628:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800262a:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2232      	movs	r2, #50	; 0x32
 8002630:	fb02 f303 	mul.w	r3, r2, r3
 8002634:	4a1b      	ldr	r2, [pc, #108]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	0c9b      	lsrs	r3, r3, #18
 800263c:	3301      	adds	r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002640:	e002      	b.n	8002648 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	3b01      	subs	r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002648:	4b14      	ldr	r3, [pc, #80]	; (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002654:	d102      	bne.n	800265c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f2      	bne.n	8002642 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002668:	d110      	bne.n	800268c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e00f      	b.n	800268e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800266e:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800267a:	d007      	beq.n	800268c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800267c:	4b07      	ldr	r3, [pc, #28]	; (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002684:	4a05      	ldr	r2, [pc, #20]	; (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800268a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40007000 	.word	0x40007000
 80026a0:	20000004 	.word	0x20000004
 80026a4:	431bde83 	.word	0x431bde83

080026a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d102      	bne.n	80026bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	f000 bc02 	b.w	8002ec0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026bc:	4b96      	ldr	r3, [pc, #600]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 030c 	and.w	r3, r3, #12
 80026c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026c6:	4b94      	ldr	r3, [pc, #592]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80e4 	beq.w	80028a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d007      	beq.n	80026f4 <HAL_RCC_OscConfig+0x4c>
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	2b0c      	cmp	r3, #12
 80026e8:	f040 808b 	bne.w	8002802 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	f040 8087 	bne.w	8002802 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026f4:	4b88      	ldr	r3, [pc, #544]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_RCC_OscConfig+0x64>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e3d9      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1a      	ldr	r2, [r3, #32]
 8002710:	4b81      	ldr	r3, [pc, #516]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d004      	beq.n	8002726 <HAL_RCC_OscConfig+0x7e>
 800271c:	4b7e      	ldr	r3, [pc, #504]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002724:	e005      	b.n	8002732 <HAL_RCC_OscConfig+0x8a>
 8002726:	4b7c      	ldr	r3, [pc, #496]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002732:	4293      	cmp	r3, r2
 8002734:	d223      	bcs.n	800277e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fd8a 	bl	8003254 <RCC_SetFlashLatencyFromMSIRange>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e3ba      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800274a:	4b73      	ldr	r3, [pc, #460]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a72      	ldr	r2, [pc, #456]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002750:	f043 0308 	orr.w	r3, r3, #8
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	4b70      	ldr	r3, [pc, #448]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	496d      	ldr	r1, [pc, #436]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002764:	4313      	orrs	r3, r2
 8002766:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002768:	4b6b      	ldr	r3, [pc, #428]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	021b      	lsls	r3, r3, #8
 8002776:	4968      	ldr	r1, [pc, #416]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002778:	4313      	orrs	r3, r2
 800277a:	604b      	str	r3, [r1, #4]
 800277c:	e025      	b.n	80027ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800277e:	4b66      	ldr	r3, [pc, #408]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a65      	ldr	r2, [pc, #404]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002784:	f043 0308 	orr.w	r3, r3, #8
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	4b63      	ldr	r3, [pc, #396]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	4960      	ldr	r1, [pc, #384]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002798:	4313      	orrs	r3, r2
 800279a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800279c:	4b5e      	ldr	r3, [pc, #376]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	021b      	lsls	r3, r3, #8
 80027aa:	495b      	ldr	r1, [pc, #364]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d109      	bne.n	80027ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 fd4a 	bl	8003254 <RCC_SetFlashLatencyFromMSIRange>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e37a      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027ca:	f000 fc81 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 80027ce:	4602      	mov	r2, r0
 80027d0:	4b51      	ldr	r3, [pc, #324]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	091b      	lsrs	r3, r3, #4
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	4950      	ldr	r1, [pc, #320]	; (800291c <HAL_RCC_OscConfig+0x274>)
 80027dc:	5ccb      	ldrb	r3, [r1, r3]
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	fa22 f303 	lsr.w	r3, r2, r3
 80027e6:	4a4e      	ldr	r2, [pc, #312]	; (8002920 <HAL_RCC_OscConfig+0x278>)
 80027e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027ea:	4b4e      	ldr	r3, [pc, #312]	; (8002924 <HAL_RCC_OscConfig+0x27c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff facc 	bl	8001d8c <HAL_InitTick>
 80027f4:	4603      	mov	r3, r0
 80027f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d052      	beq.n	80028a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	e35e      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d032      	beq.n	8002870 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800280a:	4b43      	ldr	r3, [pc, #268]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a42      	ldr	r2, [pc, #264]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002816:	f7ff fb09 	bl	8001e2c <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800281e:	f7ff fb05 	bl	8001e2c <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e347      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002830:	4b39      	ldr	r3, [pc, #228]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800283c:	4b36      	ldr	r3, [pc, #216]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a35      	ldr	r2, [pc, #212]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002842:	f043 0308 	orr.w	r3, r3, #8
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	4b33      	ldr	r3, [pc, #204]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	4930      	ldr	r1, [pc, #192]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002856:	4313      	orrs	r3, r2
 8002858:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800285a:	4b2f      	ldr	r3, [pc, #188]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	021b      	lsls	r3, r3, #8
 8002868:	492b      	ldr	r1, [pc, #172]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 800286a:	4313      	orrs	r3, r2
 800286c:	604b      	str	r3, [r1, #4]
 800286e:	e01a      	b.n	80028a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002870:	4b29      	ldr	r3, [pc, #164]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a28      	ldr	r2, [pc, #160]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002876:	f023 0301 	bic.w	r3, r3, #1
 800287a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800287c:	f7ff fad6 	bl	8001e2c <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002884:	f7ff fad2 	bl	8001e2c <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e314      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002896:	4b20      	ldr	r3, [pc, #128]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x1dc>
 80028a2:	e000      	b.n	80028a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d073      	beq.n	800299a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_OscConfig+0x21c>
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	2b0c      	cmp	r3, #12
 80028bc:	d10e      	bne.n	80028dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d10b      	bne.n	80028dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c4:	4b14      	ldr	r3, [pc, #80]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d063      	beq.n	8002998 <HAL_RCC_OscConfig+0x2f0>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d15f      	bne.n	8002998 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e2f1      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e4:	d106      	bne.n	80028f4 <HAL_RCC_OscConfig+0x24c>
 80028e6:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a0b      	ldr	r2, [pc, #44]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 80028ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	e025      	b.n	8002940 <HAL_RCC_OscConfig+0x298>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028fc:	d114      	bne.n	8002928 <HAL_RCC_OscConfig+0x280>
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a05      	ldr	r2, [pc, #20]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	4b03      	ldr	r3, [pc, #12]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a02      	ldr	r2, [pc, #8]	; (8002918 <HAL_RCC_OscConfig+0x270>)
 8002910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	e013      	b.n	8002940 <HAL_RCC_OscConfig+0x298>
 8002918:	40021000 	.word	0x40021000
 800291c:	0800a8f8 	.word	0x0800a8f8
 8002920:	20000004 	.word	0x20000004
 8002924:	20000008 	.word	0x20000008
 8002928:	4ba0      	ldr	r3, [pc, #640]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a9f      	ldr	r2, [pc, #636]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 800292e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	4b9d      	ldr	r3, [pc, #628]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a9c      	ldr	r2, [pc, #624]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 800293a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d013      	beq.n	8002970 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7ff fa70 	bl	8001e2c <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002950:	f7ff fa6c 	bl	8001e2c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	; 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e2ae      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002962:	4b92      	ldr	r3, [pc, #584]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0x2a8>
 800296e:	e014      	b.n	800299a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7ff fa5c 	bl	8001e2c <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002978:	f7ff fa58 	bl	8001e2c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	; 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e29a      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800298a:	4b88      	ldr	r3, [pc, #544]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x2d0>
 8002996:	e000      	b.n	800299a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d060      	beq.n	8002a68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_OscConfig+0x310>
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2b0c      	cmp	r3, #12
 80029b0:	d119      	bne.n	80029e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d116      	bne.n	80029e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029b8:	4b7c      	ldr	r3, [pc, #496]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_OscConfig+0x328>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e277      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d0:	4b76      	ldr	r3, [pc, #472]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	061b      	lsls	r3, r3, #24
 80029de:	4973      	ldr	r1, [pc, #460]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e4:	e040      	b.n	8002a68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d023      	beq.n	8002a36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ee:	4b6f      	ldr	r3, [pc, #444]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a6e      	ldr	r2, [pc, #440]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 80029f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fa:	f7ff fa17 	bl	8001e2c <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a02:	f7ff fa13 	bl	8001e2c <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e255      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a14:	4b65      	ldr	r3, [pc, #404]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a20:	4b62      	ldr	r3, [pc, #392]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	495f      	ldr	r1, [pc, #380]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]
 8002a34:	e018      	b.n	8002a68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a36:	4b5d      	ldr	r3, [pc, #372]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a5c      	ldr	r2, [pc, #368]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a42:	f7ff f9f3 	bl	8001e2c <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a4a:	f7ff f9ef 	bl	8001e2c <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e231      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a5c:	4b53      	ldr	r3, [pc, #332]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1f0      	bne.n	8002a4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d03c      	beq.n	8002aee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d01c      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7c:	4b4b      	ldr	r3, [pc, #300]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a82:	4a4a      	ldr	r2, [pc, #296]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7ff f9ce 	bl	8001e2c <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a94:	f7ff f9ca 	bl	8001e2c <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e20c      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aa6:	4b41      	ldr	r3, [pc, #260]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ef      	beq.n	8002a94 <HAL_RCC_OscConfig+0x3ec>
 8002ab4:	e01b      	b.n	8002aee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab6:	4b3d      	ldr	r3, [pc, #244]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002abc:	4a3b      	ldr	r2, [pc, #236]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002abe:	f023 0301 	bic.w	r3, r3, #1
 8002ac2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac6:	f7ff f9b1 	bl	8001e2c <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ace:	f7ff f9ad 	bl	8001e2c <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e1ef      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ae0:	4b32      	ldr	r3, [pc, #200]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1ef      	bne.n	8002ace <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 80a6 	beq.w	8002c48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afc:	2300      	movs	r3, #0
 8002afe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b00:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10d      	bne.n	8002b28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0c:	4b27      	ldr	r3, [pc, #156]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b10:	4a26      	ldr	r2, [pc, #152]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b16:	6593      	str	r3, [r2, #88]	; 0x58
 8002b18:	4b24      	ldr	r3, [pc, #144]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b24:	2301      	movs	r3, #1
 8002b26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b28:	4b21      	ldr	r3, [pc, #132]	; (8002bb0 <HAL_RCC_OscConfig+0x508>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d118      	bne.n	8002b66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b34:	4b1e      	ldr	r3, [pc, #120]	; (8002bb0 <HAL_RCC_OscConfig+0x508>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a1d      	ldr	r2, [pc, #116]	; (8002bb0 <HAL_RCC_OscConfig+0x508>)
 8002b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b40:	f7ff f974 	bl	8001e2c <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b48:	f7ff f970 	bl	8001e2c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e1b2      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b5a:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <HAL_RCC_OscConfig+0x508>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d108      	bne.n	8002b80 <HAL_RCC_OscConfig+0x4d8>
 8002b6e:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b74:	4a0d      	ldr	r2, [pc, #52]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b7e:	e029      	b.n	8002bd4 <HAL_RCC_OscConfig+0x52c>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2b05      	cmp	r3, #5
 8002b86:	d115      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x50c>
 8002b88:	4b08      	ldr	r3, [pc, #32]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8e:	4a07      	ldr	r2, [pc, #28]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b90:	f043 0304 	orr.w	r3, r3, #4
 8002b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b98:	4b04      	ldr	r3, [pc, #16]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9e:	4a03      	ldr	r2, [pc, #12]	; (8002bac <HAL_RCC_OscConfig+0x504>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ba8:	e014      	b.n	8002bd4 <HAL_RCC_OscConfig+0x52c>
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40007000 	.word	0x40007000
 8002bb4:	4b9a      	ldr	r3, [pc, #616]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bba:	4a99      	ldr	r2, [pc, #612]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bc4:	4b96      	ldr	r3, [pc, #600]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bca:	4a95      	ldr	r2, [pc, #596]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002bcc:	f023 0304 	bic.w	r3, r3, #4
 8002bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d016      	beq.n	8002c0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bdc:	f7ff f926 	bl	8001e2c <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be2:	e00a      	b.n	8002bfa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be4:	f7ff f922 	bl	8001e2c <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e162      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bfa:	4b89      	ldr	r3, [pc, #548]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0ed      	beq.n	8002be4 <HAL_RCC_OscConfig+0x53c>
 8002c08:	e015      	b.n	8002c36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0a:	f7ff f90f 	bl	8001e2c <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c10:	e00a      	b.n	8002c28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c12:	f7ff f90b 	bl	8001e2c <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e14b      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c28:	4b7d      	ldr	r3, [pc, #500]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1ed      	bne.n	8002c12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c36:	7ffb      	ldrb	r3, [r7, #31]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d105      	bne.n	8002c48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c3c:	4b78      	ldr	r3, [pc, #480]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	4a77      	ldr	r2, [pc, #476]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d03c      	beq.n	8002cce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01c      	beq.n	8002c96 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c5c:	4b70      	ldr	r3, [pc, #448]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002c5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c62:	4a6f      	ldr	r2, [pc, #444]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6c:	f7ff f8de 	bl	8001e2c <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c74:	f7ff f8da 	bl	8001e2c <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e11c      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c86:	4b66      	ldr	r3, [pc, #408]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002c88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0ef      	beq.n	8002c74 <HAL_RCC_OscConfig+0x5cc>
 8002c94:	e01b      	b.n	8002cce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c96:	4b62      	ldr	r3, [pc, #392]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002c98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c9c:	4a60      	ldr	r2, [pc, #384]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002c9e:	f023 0301 	bic.w	r3, r3, #1
 8002ca2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca6:	f7ff f8c1 	bl	8001e2c <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cae:	f7ff f8bd 	bl	8001e2c <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e0ff      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cc0:	4b57      	ldr	r3, [pc, #348]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002cc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1ef      	bne.n	8002cae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80f3 	beq.w	8002ebe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	f040 80c9 	bne.w	8002e74 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ce2:	4b4f      	ldr	r3, [pc, #316]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f003 0203 	and.w	r2, r3, #3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d12c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	3b01      	subs	r3, #1
 8002d02:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d123      	bne.n	8002d50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d12:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d11b      	bne.n	8002d50 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d113      	bne.n	8002d50 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d32:	085b      	lsrs	r3, r3, #1
 8002d34:	3b01      	subs	r3, #1
 8002d36:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d109      	bne.n	8002d50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	085b      	lsrs	r3, r3, #1
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d06b      	beq.n	8002e28 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	2b0c      	cmp	r3, #12
 8002d54:	d062      	beq.n	8002e1c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d56:	4b32      	ldr	r3, [pc, #200]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e0ac      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d66:	4b2e      	ldr	r3, [pc, #184]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a2d      	ldr	r2, [pc, #180]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002d6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d70:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d72:	f7ff f85b 	bl	8001e2c <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7a:	f7ff f857 	bl	8001e2c <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e099      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d8c:	4b24      	ldr	r3, [pc, #144]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1f0      	bne.n	8002d7a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d98:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	4b21      	ldr	r3, [pc, #132]	; (8002e24 <HAL_RCC_OscConfig+0x77c>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002da8:	3a01      	subs	r2, #1
 8002daa:	0112      	lsls	r2, r2, #4
 8002dac:	4311      	orrs	r1, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002db2:	0212      	lsls	r2, r2, #8
 8002db4:	4311      	orrs	r1, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002dba:	0852      	lsrs	r2, r2, #1
 8002dbc:	3a01      	subs	r2, #1
 8002dbe:	0552      	lsls	r2, r2, #21
 8002dc0:	4311      	orrs	r1, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002dc6:	0852      	lsrs	r2, r2, #1
 8002dc8:	3a01      	subs	r2, #1
 8002dca:	0652      	lsls	r2, r2, #25
 8002dcc:	4311      	orrs	r1, r2
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dd2:	06d2      	lsls	r2, r2, #27
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	4912      	ldr	r1, [pc, #72]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ddc:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a0f      	ldr	r2, [pc, #60]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002de6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002de8:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4a0c      	ldr	r2, [pc, #48]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002df2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002df4:	f7ff f81a 	bl	8001e2c <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfc:	f7ff f816 	bl	8001e2c <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e058      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e0e:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <HAL_RCC_OscConfig+0x778>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e1a:	e050      	b.n	8002ebe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e04f      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
 8002e20:	40021000 	.word	0x40021000
 8002e24:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e28:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <HAL_RCC_OscConfig+0x820>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d144      	bne.n	8002ebe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e34:	4b24      	ldr	r3, [pc, #144]	; (8002ec8 <HAL_RCC_OscConfig+0x820>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a23      	ldr	r2, [pc, #140]	; (8002ec8 <HAL_RCC_OscConfig+0x820>)
 8002e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e40:	4b21      	ldr	r3, [pc, #132]	; (8002ec8 <HAL_RCC_OscConfig+0x820>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4a20      	ldr	r2, [pc, #128]	; (8002ec8 <HAL_RCC_OscConfig+0x820>)
 8002e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e4c:	f7fe ffee 	bl	8001e2c <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e54:	f7fe ffea 	bl	8001e2c <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e02c      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e66:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <HAL_RCC_OscConfig+0x820>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x7ac>
 8002e72:	e024      	b.n	8002ebe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b0c      	cmp	r3, #12
 8002e78:	d01f      	beq.n	8002eba <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7a:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <HAL_RCC_OscConfig+0x820>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a12      	ldr	r2, [pc, #72]	; (8002ec8 <HAL_RCC_OscConfig+0x820>)
 8002e80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e86:	f7fe ffd1 	bl	8001e2c <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8e:	f7fe ffcd 	bl	8001e2c <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e00f      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea0:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <HAL_RCC_OscConfig+0x820>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1f0      	bne.n	8002e8e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_RCC_OscConfig+0x820>)
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	4905      	ldr	r1, [pc, #20]	; (8002ec8 <HAL_RCC_OscConfig+0x820>)
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_RCC_OscConfig+0x824>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	60cb      	str	r3, [r1, #12]
 8002eb8:	e001      	b.n	8002ebe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3720      	adds	r7, #32
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	feeefffc 	.word	0xfeeefffc

08002ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0e7      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee4:	4b75      	ldr	r3, [pc, #468]	; (80030bc <HAL_RCC_ClockConfig+0x1ec>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d910      	bls.n	8002f14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef2:	4b72      	ldr	r3, [pc, #456]	; (80030bc <HAL_RCC_ClockConfig+0x1ec>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 0207 	bic.w	r2, r3, #7
 8002efa:	4970      	ldr	r1, [pc, #448]	; (80030bc <HAL_RCC_ClockConfig+0x1ec>)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f02:	4b6e      	ldr	r3, [pc, #440]	; (80030bc <HAL_RCC_ClockConfig+0x1ec>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0cf      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d010      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	4b66      	ldr	r3, [pc, #408]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d908      	bls.n	8002f42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f30:	4b63      	ldr	r3, [pc, #396]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	4960      	ldr	r1, [pc, #384]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d04c      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f56:	4b5a      	ldr	r3, [pc, #360]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d121      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e0a6      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f6e:	4b54      	ldr	r3, [pc, #336]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d115      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e09a      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d107      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f86:	4b4e      	ldr	r3, [pc, #312]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d109      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e08e      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f96:	4b4a      	ldr	r3, [pc, #296]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e086      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fa6:	4b46      	ldr	r3, [pc, #280]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f023 0203 	bic.w	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	4943      	ldr	r1, [pc, #268]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb8:	f7fe ff38 	bl	8001e2c <HAL_GetTick>
 8002fbc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc0:	f7fe ff34 	bl	8001e2c <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e06e      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd6:	4b3a      	ldr	r3, [pc, #232]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 020c 	and.w	r2, r3, #12
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d1eb      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d010      	beq.n	8003016 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	4b31      	ldr	r3, [pc, #196]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003000:	429a      	cmp	r2, r3
 8003002:	d208      	bcs.n	8003016 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003004:	4b2e      	ldr	r3, [pc, #184]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	492b      	ldr	r1, [pc, #172]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003012:	4313      	orrs	r3, r2
 8003014:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003016:	4b29      	ldr	r3, [pc, #164]	; (80030bc <HAL_RCC_ClockConfig+0x1ec>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d210      	bcs.n	8003046 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003024:	4b25      	ldr	r3, [pc, #148]	; (80030bc <HAL_RCC_ClockConfig+0x1ec>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f023 0207 	bic.w	r2, r3, #7
 800302c:	4923      	ldr	r1, [pc, #140]	; (80030bc <HAL_RCC_ClockConfig+0x1ec>)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	4313      	orrs	r3, r2
 8003032:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003034:	4b21      	ldr	r3, [pc, #132]	; (80030bc <HAL_RCC_ClockConfig+0x1ec>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d001      	beq.n	8003046 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e036      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b00      	cmp	r3, #0
 8003050:	d008      	beq.n	8003064 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003052:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	4918      	ldr	r1, [pc, #96]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003060:	4313      	orrs	r3, r2
 8003062:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d009      	beq.n	8003084 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003070:	4b13      	ldr	r3, [pc, #76]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	4910      	ldr	r1, [pc, #64]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003080:	4313      	orrs	r3, r2
 8003082:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003084:	f000 f824 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 8003088:	4602      	mov	r2, r0
 800308a:	4b0d      	ldr	r3, [pc, #52]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	091b      	lsrs	r3, r3, #4
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	490b      	ldr	r1, [pc, #44]	; (80030c4 <HAL_RCC_ClockConfig+0x1f4>)
 8003096:	5ccb      	ldrb	r3, [r1, r3]
 8003098:	f003 031f 	and.w	r3, r3, #31
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
 80030a0:	4a09      	ldr	r2, [pc, #36]	; (80030c8 <HAL_RCC_ClockConfig+0x1f8>)
 80030a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030a4:	4b09      	ldr	r3, [pc, #36]	; (80030cc <HAL_RCC_ClockConfig+0x1fc>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fe fe6f 	bl	8001d8c <HAL_InitTick>
 80030ae:	4603      	mov	r3, r0
 80030b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80030b2:	7afb      	ldrb	r3, [r7, #11]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40022000 	.word	0x40022000
 80030c0:	40021000 	.word	0x40021000
 80030c4:	0800a8f8 	.word	0x0800a8f8
 80030c8:	20000004 	.word	0x20000004
 80030cc:	20000008 	.word	0x20000008

080030d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b089      	sub	sp, #36	; 0x24
 80030d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	2300      	movs	r3, #0
 80030dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030de:	4b3e      	ldr	r3, [pc, #248]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
 80030e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030e8:	4b3b      	ldr	r3, [pc, #236]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_GetSysClockFreq+0x34>
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	2b0c      	cmp	r3, #12
 80030fc:	d121      	bne.n	8003142 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d11e      	bne.n	8003142 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003104:	4b34      	ldr	r3, [pc, #208]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b00      	cmp	r3, #0
 800310e:	d107      	bne.n	8003120 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003110:	4b31      	ldr	r3, [pc, #196]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003116:	0a1b      	lsrs	r3, r3, #8
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	61fb      	str	r3, [r7, #28]
 800311e:	e005      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003120:	4b2d      	ldr	r3, [pc, #180]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	091b      	lsrs	r3, r3, #4
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800312c:	4a2b      	ldr	r2, [pc, #172]	; (80031dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003134:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10d      	bne.n	8003158 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003140:	e00a      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b04      	cmp	r3, #4
 8003146:	d102      	bne.n	800314e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003148:	4b25      	ldr	r3, [pc, #148]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800314a:	61bb      	str	r3, [r7, #24]
 800314c:	e004      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	2b08      	cmp	r3, #8
 8003152:	d101      	bne.n	8003158 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003154:	4b22      	ldr	r3, [pc, #136]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003156:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	2b0c      	cmp	r3, #12
 800315c:	d134      	bne.n	80031c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800315e:	4b1e      	ldr	r3, [pc, #120]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d003      	beq.n	8003176 <HAL_RCC_GetSysClockFreq+0xa6>
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b03      	cmp	r3, #3
 8003172:	d003      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0xac>
 8003174:	e005      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003176:	4b1a      	ldr	r3, [pc, #104]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003178:	617b      	str	r3, [r7, #20]
      break;
 800317a:	e005      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800317c:	4b18      	ldr	r3, [pc, #96]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800317e:	617b      	str	r3, [r7, #20]
      break;
 8003180:	e002      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	617b      	str	r3, [r7, #20]
      break;
 8003186:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003188:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	3301      	adds	r3, #1
 8003194:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	0a1b      	lsrs	r3, r3, #8
 800319c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	fb03 f202 	mul.w	r2, r3, r2
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031ae:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	0e5b      	lsrs	r3, r3, #25
 80031b4:	f003 0303 	and.w	r3, r3, #3
 80031b8:	3301      	adds	r3, #1
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031c8:	69bb      	ldr	r3, [r7, #24]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3724      	adds	r7, #36	; 0x24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40021000 	.word	0x40021000
 80031dc:	0800a910 	.word	0x0800a910
 80031e0:	00f42400 	.word	0x00f42400

080031e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e8:	4b03      	ldr	r3, [pc, #12]	; (80031f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ea:	681b      	ldr	r3, [r3, #0]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20000004 	.word	0x20000004

080031fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003200:	f7ff fff0 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8003204:	4602      	mov	r2, r0
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	0a1b      	lsrs	r3, r3, #8
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	4904      	ldr	r1, [pc, #16]	; (8003224 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003212:	5ccb      	ldrb	r3, [r1, r3]
 8003214:	f003 031f 	and.w	r3, r3, #31
 8003218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800321c:	4618      	mov	r0, r3
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40021000 	.word	0x40021000
 8003224:	0800a908 	.word	0x0800a908

08003228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800322c:	f7ff ffda 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8003230:	4602      	mov	r2, r0
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	0adb      	lsrs	r3, r3, #11
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	4904      	ldr	r1, [pc, #16]	; (8003250 <HAL_RCC_GetPCLK2Freq+0x28>)
 800323e:	5ccb      	ldrb	r3, [r1, r3]
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003248:	4618      	mov	r0, r3
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000
 8003250:	0800a908 	.word	0x0800a908

08003254 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800325c:	2300      	movs	r3, #0
 800325e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003260:	4b2a      	ldr	r3, [pc, #168]	; (800330c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800326c:	f7ff f9b8 	bl	80025e0 <HAL_PWREx_GetVoltageRange>
 8003270:	6178      	str	r0, [r7, #20]
 8003272:	e014      	b.n	800329e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003274:	4b25      	ldr	r3, [pc, #148]	; (800330c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003278:	4a24      	ldr	r2, [pc, #144]	; (800330c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800327a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327e:	6593      	str	r3, [r2, #88]	; 0x58
 8003280:	4b22      	ldr	r3, [pc, #136]	; (800330c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800328c:	f7ff f9a8 	bl	80025e0 <HAL_PWREx_GetVoltageRange>
 8003290:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003292:	4b1e      	ldr	r3, [pc, #120]	; (800330c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	4a1d      	ldr	r2, [pc, #116]	; (800330c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800329c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a4:	d10b      	bne.n	80032be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b80      	cmp	r3, #128	; 0x80
 80032aa:	d919      	bls.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2ba0      	cmp	r3, #160	; 0xa0
 80032b0:	d902      	bls.n	80032b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032b2:	2302      	movs	r3, #2
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	e013      	b.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032b8:	2301      	movs	r3, #1
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	e010      	b.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b80      	cmp	r3, #128	; 0x80
 80032c2:	d902      	bls.n	80032ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032c4:	2303      	movs	r3, #3
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	e00a      	b.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b80      	cmp	r3, #128	; 0x80
 80032ce:	d102      	bne.n	80032d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032d0:	2302      	movs	r3, #2
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	e004      	b.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b70      	cmp	r3, #112	; 0x70
 80032da:	d101      	bne.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032dc:	2301      	movs	r3, #1
 80032de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f023 0207 	bic.w	r2, r3, #7
 80032e8:	4909      	ldr	r1, [pc, #36]	; (8003310 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032f0:	4b07      	ldr	r3, [pc, #28]	; (8003310 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d001      	beq.n	8003302 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40021000 	.word	0x40021000
 8003310:	40022000 	.word	0x40022000

08003314 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800331c:	2300      	movs	r3, #0
 800331e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003320:	2300      	movs	r3, #0
 8003322:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800332c:	2b00      	cmp	r3, #0
 800332e:	d031      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003334:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003338:	d01a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800333a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800333e:	d814      	bhi.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003340:	2b00      	cmp	r3, #0
 8003342:	d009      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003344:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003348:	d10f      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800334a:	4b5d      	ldr	r3, [pc, #372]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	4a5c      	ldr	r2, [pc, #368]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003354:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003356:	e00c      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3304      	adds	r3, #4
 800335c:	2100      	movs	r1, #0
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fe84 	bl	800406c <RCCEx_PLLSAI1_Config>
 8003364:	4603      	mov	r3, r0
 8003366:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003368:	e003      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	74fb      	strb	r3, [r7, #19]
      break;
 800336e:	e000      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003372:	7cfb      	ldrb	r3, [r7, #19]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10b      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003378:	4b51      	ldr	r3, [pc, #324]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	494e      	ldr	r1, [pc, #312]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800338e:	e001      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003390:	7cfb      	ldrb	r3, [r7, #19]
 8003392:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 809e 	beq.w	80034de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a2:	2300      	movs	r3, #0
 80033a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033a6:	4b46      	ldr	r3, [pc, #280]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80033b6:	2300      	movs	r3, #0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00d      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033bc:	4b40      	ldr	r3, [pc, #256]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c0:	4a3f      	ldr	r2, [pc, #252]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c6:	6593      	str	r3, [r2, #88]	; 0x58
 80033c8:	4b3d      	ldr	r3, [pc, #244]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d4:	2301      	movs	r3, #1
 80033d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033d8:	4b3a      	ldr	r3, [pc, #232]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a39      	ldr	r2, [pc, #228]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80033de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033e4:	f7fe fd22 	bl	8001e2c <HAL_GetTick>
 80033e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033ea:	e009      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ec:	f7fe fd1e 	bl	8001e2c <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d902      	bls.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	74fb      	strb	r3, [r7, #19]
        break;
 80033fe:	e005      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003400:	4b30      	ldr	r3, [pc, #192]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0ef      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800340c:	7cfb      	ldrb	r3, [r7, #19]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d15a      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003412:	4b2b      	ldr	r3, [pc, #172]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800341c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01e      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	429a      	cmp	r2, r3
 800342c:	d019      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800342e:	4b24      	ldr	r3, [pc, #144]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003438:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800343a:	4b21      	ldr	r3, [pc, #132]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003440:	4a1f      	ldr	r2, [pc, #124]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003446:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800344a:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800344c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003450:	4a1b      	ldr	r2, [pc, #108]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800345a:	4a19      	ldr	r2, [pc, #100]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	d016      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7fe fcde 	bl	8001e2c <HAL_GetTick>
 8003470:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003472:	e00b      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003474:	f7fe fcda 	bl	8001e2c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d902      	bls.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	74fb      	strb	r3, [r7, #19]
            break;
 800348a:	e006      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0ec      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800349a:	7cfb      	ldrb	r3, [r7, #19]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10b      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034a0:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ae:	4904      	ldr	r1, [pc, #16]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034b6:	e009      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034b8:	7cfb      	ldrb	r3, [r7, #19]
 80034ba:	74bb      	strb	r3, [r7, #18]
 80034bc:	e006      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80034be:	bf00      	nop
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c8:	7cfb      	ldrb	r3, [r7, #19]
 80034ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034cc:	7c7b      	ldrb	r3, [r7, #17]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d105      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d2:	4b9b      	ldr	r3, [pc, #620]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d6:	4a9a      	ldr	r2, [pc, #616]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80034d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034ea:	4b95      	ldr	r3, [pc, #596]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80034ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f0:	f023 0203 	bic.w	r2, r3, #3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	4991      	ldr	r1, [pc, #580]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800350c:	4b8c      	ldr	r3, [pc, #560]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003512:	f023 020c 	bic.w	r2, r3, #12
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	4989      	ldr	r1, [pc, #548]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800352e:	4b84      	ldr	r3, [pc, #528]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003534:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	4980      	ldr	r1, [pc, #512]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003550:	4b7b      	ldr	r3, [pc, #492]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	4978      	ldr	r1, [pc, #480]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003572:	4b73      	ldr	r3, [pc, #460]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003578:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003580:	496f      	ldr	r1, [pc, #444]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003594:	4b6a      	ldr	r3, [pc, #424]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	4967      	ldr	r1, [pc, #412]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035b6:	4b62      	ldr	r3, [pc, #392]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	495e      	ldr	r1, [pc, #376]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035d8:	4b59      	ldr	r3, [pc, #356]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e6:	4956      	ldr	r1, [pc, #344]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035fa:	4b51      	ldr	r3, [pc, #324]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003600:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003608:	494d      	ldr	r1, [pc, #308]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d028      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800361c:	4b48      	ldr	r3, [pc, #288]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003622:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800362a:	4945      	ldr	r1, [pc, #276]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003636:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800363a:	d106      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800363c:	4b40      	ldr	r3, [pc, #256]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	4a3f      	ldr	r2, [pc, #252]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003646:	60d3      	str	r3, [r2, #12]
 8003648:	e011      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003652:	d10c      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3304      	adds	r3, #4
 8003658:	2101      	movs	r1, #1
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fd06 	bl	800406c <RCCEx_PLLSAI1_Config>
 8003660:	4603      	mov	r3, r0
 8003662:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003664:	7cfb      	ldrb	r3, [r7, #19]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800366a:	7cfb      	ldrb	r3, [r7, #19]
 800366c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d028      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800367a:	4b31      	ldr	r3, [pc, #196]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800367c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003680:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003688:	492d      	ldr	r1, [pc, #180]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003698:	d106      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800369a:	4b29      	ldr	r3, [pc, #164]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	4a28      	ldr	r2, [pc, #160]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036a4:	60d3      	str	r3, [r2, #12]
 80036a6:	e011      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036b0:	d10c      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3304      	adds	r3, #4
 80036b6:	2101      	movs	r1, #1
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 fcd7 	bl	800406c <RCCEx_PLLSAI1_Config>
 80036be:	4603      	mov	r3, r0
 80036c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036c2:	7cfb      	ldrb	r3, [r7, #19]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80036c8:	7cfb      	ldrb	r3, [r7, #19]
 80036ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01c      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036d8:	4b19      	ldr	r3, [pc, #100]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e6:	4916      	ldr	r1, [pc, #88]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036f6:	d10c      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3304      	adds	r3, #4
 80036fc:	2102      	movs	r1, #2
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fcb4 	bl	800406c <RCCEx_PLLSAI1_Config>
 8003704:	4603      	mov	r3, r0
 8003706:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003708:	7cfb      	ldrb	r3, [r7, #19]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800370e:	7cfb      	ldrb	r3, [r7, #19]
 8003710:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800371e:	4b08      	ldr	r3, [pc, #32]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003724:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372c:	4904      	ldr	r1, [pc, #16]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003734:	7cbb      	ldrb	r3, [r7, #18]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000

08003744 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003756:	d13e      	bne.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003758:	4bb0      	ldr	r3, [pc, #704]	; (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800375a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003762:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800376a:	d028      	beq.n	80037be <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003772:	f200 8469 	bhi.w	8004048 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800377c:	d005      	beq.n	800378a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003784:	d00e      	beq.n	80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003786:	f000 bc5f 	b.w	8004048 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800378a:	4ba4      	ldr	r3, [pc, #656]	; (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b02      	cmp	r3, #2
 8003796:	f040 8459 	bne.w	800404c <HAL_RCCEx_GetPeriphCLKFreq+0x908>
        frequency = LSE_VALUE;
 800379a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800379e:	61fb      	str	r3, [r7, #28]
      break;
 80037a0:	f000 bc54 	b.w	800404c <HAL_RCCEx_GetPeriphCLKFreq+0x908>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80037a4:	4b9d      	ldr	r3, [pc, #628]	; (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80037a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	f040 844e 	bne.w	8004050 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
          frequency = LSI_VALUE;
 80037b4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80037b8:	61fb      	str	r3, [r7, #28]
      break;
 80037ba:	f000 bc49 	b.w	8004050 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80037be:	4b97      	ldr	r3, [pc, #604]	; (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037ca:	f040 8443 	bne.w	8004054 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
        frequency = HSE_VALUE / 32U;
 80037ce:	4b94      	ldr	r3, [pc, #592]	; (8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80037d0:	61fb      	str	r3, [r7, #28]
      break;
 80037d2:	f000 bc3f 	b.w	8004054 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037d6:	4b91      	ldr	r3, [pc, #580]	; (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	d036      	beq.n	8003854 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d840      	bhi.n	800386e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d003      	beq.n	80037fa <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d020      	beq.n	800383a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80037f8:	e039      	b.n	800386e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80037fa:	4b88      	ldr	r3, [pc, #544]	; (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b02      	cmp	r3, #2
 8003804:	d116      	bne.n	8003834 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003806:	4b85      	ldr	r3, [pc, #532]	; (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d005      	beq.n	800381e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003812:	4b82      	ldr	r3, [pc, #520]	; (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	091b      	lsrs	r3, r3, #4
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	e005      	b.n	800382a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800381e:	4b7f      	ldr	r3, [pc, #508]	; (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8003820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003824:	0a1b      	lsrs	r3, r3, #8
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	4a7e      	ldr	r2, [pc, #504]	; (8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800382c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003830:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003832:	e01f      	b.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	61bb      	str	r3, [r7, #24]
      break;
 8003838:	e01c      	b.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800383a:	4b78      	ldr	r3, [pc, #480]	; (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003846:	d102      	bne.n	800384e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8003848:	4b77      	ldr	r3, [pc, #476]	; (8003a28 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800384a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800384c:	e012      	b.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	61bb      	str	r3, [r7, #24]
      break;
 8003852:	e00f      	b.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003854:	4b71      	ldr	r3, [pc, #452]	; (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003860:	d102      	bne.n	8003868 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8003862:	4b71      	ldr	r3, [pc, #452]	; (8003a28 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003864:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003866:	e005      	b.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	61bb      	str	r3, [r7, #24]
      break;
 800386c:	e002      	b.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	61bb      	str	r3, [r7, #24]
      break;
 8003872:	bf00      	nop
    }

    switch(PeriphClk)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800387a:	f000 80ad 	beq.w	80039d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003884:	f200 83e8 	bhi.w	8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800388e:	f000 80a3 	beq.w	80039d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003898:	f200 83de 	bhi.w	8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038a2:	f000 83b4 	beq.w	800400e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ac:	f200 83d4 	bhi.w	8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038b6:	f000 824c 	beq.w	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038c0:	f200 83ca 	bhi.w	8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ca:	d07e      	beq.n	80039ca <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038d2:	f200 83c1 	bhi.w	8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038dc:	f000 834d 	beq.w	8003f7a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e6:	f200 83b7 	bhi.w	8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f0:	f000 82f5 	beq.w	8003ede <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038fa:	f200 83ad 	bhi.w	8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003904:	f000 82bf 	beq.w	8003e86 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800390e:	f200 83a3 	bhi.w	8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b80      	cmp	r3, #128	; 0x80
 8003916:	f000 828a 	beq.w	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b80      	cmp	r3, #128	; 0x80
 800391e:	f200 839b 	bhi.w	8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b20      	cmp	r3, #32
 8003926:	d84b      	bhi.n	80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 8394 	beq.w	8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3b01      	subs	r3, #1
 8003934:	2b1f      	cmp	r3, #31
 8003936:	f200 838f 	bhi.w	8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800393a:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 800393c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003940:	08003b43 	.word	0x08003b43
 8003944:	08003bb3 	.word	0x08003bb3
 8003948:	08004059 	.word	0x08004059
 800394c:	08003c47 	.word	0x08003c47
 8003950:	08004059 	.word	0x08004059
 8003954:	08004059 	.word	0x08004059
 8003958:	08004059 	.word	0x08004059
 800395c:	08004059 	.word	0x08004059
 8003960:	08004059 	.word	0x08004059
 8003964:	08004059 	.word	0x08004059
 8003968:	08004059 	.word	0x08004059
 800396c:	08004059 	.word	0x08004059
 8003970:	08004059 	.word	0x08004059
 8003974:	08004059 	.word	0x08004059
 8003978:	08004059 	.word	0x08004059
 800397c:	08004059 	.word	0x08004059
 8003980:	08004059 	.word	0x08004059
 8003984:	08004059 	.word	0x08004059
 8003988:	08004059 	.word	0x08004059
 800398c:	08004059 	.word	0x08004059
 8003990:	08004059 	.word	0x08004059
 8003994:	08004059 	.word	0x08004059
 8003998:	08004059 	.word	0x08004059
 800399c:	08004059 	.word	0x08004059
 80039a0:	08004059 	.word	0x08004059
 80039a4:	08004059 	.word	0x08004059
 80039a8:	08004059 	.word	0x08004059
 80039ac:	08004059 	.word	0x08004059
 80039b0:	08004059 	.word	0x08004059
 80039b4:	08004059 	.word	0x08004059
 80039b8:	08004059 	.word	0x08004059
 80039bc:	08003cd1 	.word	0x08003cd1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b40      	cmp	r3, #64	; 0x40
 80039c4:	f000 8207 	beq.w	8003dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80039c8:	e346      	b.n	8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80039ca:	69b9      	ldr	r1, [r7, #24]
 80039cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80039d0:	f000 fc3e 	bl	8004250 <RCCEx_GetSAIxPeriphCLKFreq>
 80039d4:	61f8      	str	r0, [r7, #28]
      break;
 80039d6:	e340      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80039d8:	4b10      	ldr	r3, [pc, #64]	; (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80039da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039de:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80039e2:	613b      	str	r3, [r7, #16]
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80039ea:	d01f      	beq.n	8003a2c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80039f2:	f200 809c 	bhi.w	8003b2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039fc:	d033      	beq.n	8003a66 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a04:	f200 8093 	bhi.w	8003b2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 8085 	beq.w	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a16:	d053      	beq.n	8003ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          break;
 8003a18:	e089      	b.n	8003b2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8003a1a:	bf00      	nop
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	0007a120 	.word	0x0007a120
 8003a24:	0800a910 	.word	0x0800a910
 8003a28:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003a2c:	4ba4      	ldr	r3, [pc, #656]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d17c      	bne.n	8003b32 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003a38:	4ba1      	ldr	r3, [pc, #644]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8003a44:	4b9e      	ldr	r3, [pc, #632]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	091b      	lsrs	r3, r3, #4
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	e005      	b.n	8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8003a50:	4b9b      	ldr	r3, [pc, #620]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a56:	0a1b      	lsrs	r3, r3, #8
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	4a99      	ldr	r2, [pc, #612]	; (8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8003a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a62:	61fb      	str	r3, [r7, #28]
          break;
 8003a64:	e065      	b.n	8003b32 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003a66:	4b96      	ldr	r3, [pc, #600]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a72:	d160      	bne.n	8003b36 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003a74:	4b92      	ldr	r3, [pc, #584]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a80:	d159      	bne.n	8003b36 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003a82:	4b8f      	ldr	r3, [pc, #572]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	0a1b      	lsrs	r3, r3, #8
 8003a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a8c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	fb03 f202 	mul.w	r2, r3, r2
 8003a96:	4b8a      	ldr	r3, [pc, #552]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	091b      	lsrs	r3, r3, #4
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003aa8:	4b85      	ldr	r3, [pc, #532]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	0d5b      	lsrs	r3, r3, #21
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abc:	61fb      	str	r3, [r7, #28]
          break;
 8003abe:	e03a      	b.n	8003b36 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003ac0:	4b7f      	ldr	r3, [pc, #508]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ac8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003acc:	d135      	bne.n	8003b3a <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003ace:	4b7c      	ldr	r3, [pc, #496]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ada:	d12e      	bne.n	8003b3a <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003adc:	4b78      	ldr	r3, [pc, #480]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	0a1b      	lsrs	r3, r3, #8
 8003ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ae6:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	fb03 f202 	mul.w	r2, r3, r2
 8003af0:	4b73      	ldr	r3, [pc, #460]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	3301      	adds	r3, #1
 8003afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b00:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003b02:	4b6f      	ldr	r3, [pc, #444]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	0d5b      	lsrs	r3, r3, #21
 8003b08:	f003 0303 	and.w	r3, r3, #3
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b16:	61fb      	str	r3, [r7, #28]
          break;
 8003b18:	e00f      	b.n	8003b3a <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003b1a:	4b69      	ldr	r3, [pc, #420]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003b1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d10a      	bne.n	8003b3e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
            frequency = HSI48_VALUE;
 8003b28:	4b67      	ldr	r3, [pc, #412]	; (8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8003b2a:	61fb      	str	r3, [r7, #28]
          break;
 8003b2c:	e007      	b.n	8003b3e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          break;
 8003b2e:	bf00      	nop
 8003b30:	e293      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003b32:	bf00      	nop
 8003b34:	e291      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003b36:	bf00      	nop
 8003b38:	e28f      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003b3a:	bf00      	nop
 8003b3c:	e28d      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003b3e:	bf00      	nop
        break;
 8003b40:	e28b      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003b42:	4b5f      	ldr	r3, [pc, #380]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b48:	f003 0303 	and.w	r3, r3, #3
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	d828      	bhi.n	8003ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003b54:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 8003b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5a:	bf00      	nop
 8003b5c:	08003b6d 	.word	0x08003b6d
 8003b60:	08003b75 	.word	0x08003b75
 8003b64:	08003b7d 	.word	0x08003b7d
 8003b68:	08003b91 	.word	0x08003b91
          frequency = HAL_RCC_GetPCLK2Freq();
 8003b6c:	f7ff fb5c 	bl	8003228 <HAL_RCC_GetPCLK2Freq>
 8003b70:	61f8      	str	r0, [r7, #28]
          break;
 8003b72:	e01d      	b.n	8003bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          frequency = HAL_RCC_GetSysClockFreq();
 8003b74:	f7ff faac 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 8003b78:	61f8      	str	r0, [r7, #28]
          break;
 8003b7a:	e019      	b.n	8003bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003b7c:	4b50      	ldr	r3, [pc, #320]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b88:	d10f      	bne.n	8003baa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
            frequency = HSI_VALUE;
 8003b8a:	4b50      	ldr	r3, [pc, #320]	; (8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003b8c:	61fb      	str	r3, [r7, #28]
          break;
 8003b8e:	e00c      	b.n	8003baa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003b90:	4b4b      	ldr	r3, [pc, #300]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d107      	bne.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
            frequency = LSE_VALUE;
 8003b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ba2:	61fb      	str	r3, [r7, #28]
          break;
 8003ba4:	e003      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
          break;
 8003ba6:	bf00      	nop
 8003ba8:	e257      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003baa:	bf00      	nop
 8003bac:	e255      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003bae:	bf00      	nop
        break;
 8003bb0:	e253      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003bb2:	4b43      	ldr	r3, [pc, #268]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb8:	f003 030c 	and.w	r3, r3, #12
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	2b0c      	cmp	r3, #12
 8003bc2:	d83a      	bhi.n	8003c3a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8003bc4:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003c01 	.word	0x08003c01
 8003bd0:	08003c3b 	.word	0x08003c3b
 8003bd4:	08003c3b 	.word	0x08003c3b
 8003bd8:	08003c3b 	.word	0x08003c3b
 8003bdc:	08003c09 	.word	0x08003c09
 8003be0:	08003c3b 	.word	0x08003c3b
 8003be4:	08003c3b 	.word	0x08003c3b
 8003be8:	08003c3b 	.word	0x08003c3b
 8003bec:	08003c11 	.word	0x08003c11
 8003bf0:	08003c3b 	.word	0x08003c3b
 8003bf4:	08003c3b 	.word	0x08003c3b
 8003bf8:	08003c3b 	.word	0x08003c3b
 8003bfc:	08003c25 	.word	0x08003c25
          frequency = HAL_RCC_GetPCLK1Freq();
 8003c00:	f7ff fafc 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8003c04:	61f8      	str	r0, [r7, #28]
          break;
 8003c06:	e01d      	b.n	8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
          frequency = HAL_RCC_GetSysClockFreq();
 8003c08:	f7ff fa62 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 8003c0c:	61f8      	str	r0, [r7, #28]
          break;
 8003c0e:	e019      	b.n	8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003c10:	4b2b      	ldr	r3, [pc, #172]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c1c:	d10f      	bne.n	8003c3e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
            frequency = HSI_VALUE;
 8003c1e:	4b2b      	ldr	r3, [pc, #172]	; (8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003c20:	61fb      	str	r3, [r7, #28]
          break;
 8003c22:	e00c      	b.n	8003c3e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003c24:	4b26      	ldr	r3, [pc, #152]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d107      	bne.n	8003c42 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
            frequency = LSE_VALUE;
 8003c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c36:	61fb      	str	r3, [r7, #28]
          break;
 8003c38:	e003      	b.n	8003c42 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          break;
 8003c3a:	bf00      	nop
 8003c3c:	e20d      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003c3e:	bf00      	nop
 8003c40:	e20b      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003c42:	bf00      	nop
        break;
 8003c44:	e209      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003c46:	4b1e      	ldr	r3, [pc, #120]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b30      	cmp	r3, #48	; 0x30
 8003c56:	d021      	beq.n	8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	2b30      	cmp	r3, #48	; 0x30
 8003c5c:	d829      	bhi.n	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	d011      	beq.n	8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d823      	bhi.n	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	2b10      	cmp	r3, #16
 8003c74:	d004      	beq.n	8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 8003c76:	e01c      	b.n	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003c78:	f7ff fac0 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8003c7c:	61f8      	str	r0, [r7, #28]
          break;
 8003c7e:	e01d      	b.n	8003cbc <HAL_RCCEx_GetPeriphCLKFreq+0x578>
          frequency = HAL_RCC_GetSysClockFreq();
 8003c80:	f7ff fa26 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 8003c84:	61f8      	str	r0, [r7, #28]
          break;
 8003c86:	e019      	b.n	8003cbc <HAL_RCCEx_GetPeriphCLKFreq+0x578>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003c88:	4b0d      	ldr	r3, [pc, #52]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c94:	d10f      	bne.n	8003cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
            frequency = HSI_VALUE;
 8003c96:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003c98:	61fb      	str	r3, [r7, #28]
          break;
 8003c9a:	e00c      	b.n	8003cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003c9c:	4b08      	ldr	r3, [pc, #32]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d107      	bne.n	8003cba <HAL_RCCEx_GetPeriphCLKFreq+0x576>
            frequency = LSE_VALUE;
 8003caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cae:	61fb      	str	r3, [r7, #28]
          break;
 8003cb0:	e003      	b.n	8003cba <HAL_RCCEx_GetPeriphCLKFreq+0x576>
          break;
 8003cb2:	bf00      	nop
 8003cb4:	e1d1      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003cb6:	bf00      	nop
 8003cb8:	e1cf      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003cba:	bf00      	nop
        break;
 8003cbc:	e1cd      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	0800a910 	.word	0x0800a910
 8003cc8:	02dc6c00 	.word	0x02dc6c00
 8003ccc:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003cd0:	4b99      	ldr	r3, [pc, #612]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cda:	613b      	str	r3, [r7, #16]
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ce2:	d025      	beq.n	8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cea:	d82c      	bhi.n	8003d46 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cf2:	d013      	beq.n	8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cfa:	d824      	bhi.n	8003d46 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d004      	beq.n	8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d08:	d004      	beq.n	8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
          break;
 8003d0a:	e01c      	b.n	8003d46 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003d0c:	f7ff fa76 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8003d10:	61f8      	str	r0, [r7, #28]
          break;
 8003d12:	e01d      	b.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
          frequency = HAL_RCC_GetSysClockFreq();
 8003d14:	f7ff f9dc 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 8003d18:	61f8      	str	r0, [r7, #28]
          break;
 8003d1a:	e019      	b.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d1c:	4b86      	ldr	r3, [pc, #536]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d28:	d10f      	bne.n	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
            frequency = HSI_VALUE;
 8003d2a:	4b84      	ldr	r3, [pc, #528]	; (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003d2c:	61fb      	str	r3, [r7, #28]
          break;
 8003d2e:	e00c      	b.n	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003d30:	4b81      	ldr	r3, [pc, #516]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d107      	bne.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
            frequency = LSE_VALUE;
 8003d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d42:	61fb      	str	r3, [r7, #28]
          break;
 8003d44:	e003      	b.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          break;
 8003d46:	bf00      	nop
 8003d48:	e187      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003d4a:	bf00      	nop
 8003d4c:	e185      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003d4e:	bf00      	nop
        break;
 8003d50:	e183      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8003d52:	4b79      	ldr	r3, [pc, #484]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d64:	d007      	beq.n	8003d76 <HAL_RCCEx_GetPeriphCLKFreq+0x632>
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d6c:	d12f      	bne.n	8003dce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
          frequency = HAL_RCC_GetSysClockFreq();
 8003d6e:	f7ff f9af 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 8003d72:	61f8      	str	r0, [r7, #28]
          break;
 8003d74:	e02e      	b.n	8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8003d76:	4b70      	ldr	r3, [pc, #448]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d82:	d126      	bne.n	8003dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
 8003d84:	4b6c      	ldr	r3, [pc, #432]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d020      	beq.n	8003dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003d90:	4b69      	ldr	r3, [pc, #420]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	0a1b      	lsrs	r3, r3, #8
 8003d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d9a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	fb03 f202 	mul.w	r2, r3, r2
 8003da4:	4b64      	ldr	r3, [pc, #400]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	091b      	lsrs	r3, r3, #4
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	3301      	adds	r3, #1
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8003db6:	4b60      	ldr	r3, [pc, #384]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	0e5b      	lsrs	r3, r3, #25
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dca:	61fb      	str	r3, [r7, #28]
          break;
 8003dcc:	e001      	b.n	8003dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
          break;
 8003dce:	bf00      	nop
 8003dd0:	e143      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003dd2:	bf00      	nop
        break;
 8003dd4:	e141      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003dd6:	4b58      	ldr	r3, [pc, #352]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ddc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003de0:	613b      	str	r3, [r7, #16]
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de8:	d013      	beq.n	8003e12 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003df0:	d819      	bhi.n	8003e26 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d004      	beq.n	8003e02 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dfe:	d004      	beq.n	8003e0a <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
          break;
 8003e00:	e011      	b.n	8003e26 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e02:	f7ff f9fb 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8003e06:	61f8      	str	r0, [r7, #28]
          break;
 8003e08:	e010      	b.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          frequency = HAL_RCC_GetSysClockFreq();
 8003e0a:	f7ff f961 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 8003e0e:	61f8      	str	r0, [r7, #28]
          break;
 8003e10:	e00c      	b.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e12:	4b49      	ldr	r3, [pc, #292]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e1e:	d104      	bne.n	8003e2a <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
            frequency = HSI_VALUE;
 8003e20:	4b46      	ldr	r3, [pc, #280]	; (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003e22:	61fb      	str	r3, [r7, #28]
          break;
 8003e24:	e001      	b.n	8003e2a <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8003e26:	bf00      	nop
 8003e28:	e117      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003e2a:	bf00      	nop
        break;
 8003e2c:	e115      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003e2e:	4b42      	ldr	r3, [pc, #264]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e40:	d013      	beq.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e48:	d819      	bhi.n	8003e7e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d004      	beq.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e56:	d004      	beq.n	8003e62 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
          break;
 8003e58:	e011      	b.n	8003e7e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e5a:	f7ff f9cf 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8003e5e:	61f8      	str	r0, [r7, #28]
          break;
 8003e60:	e010      	b.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x740>
          frequency = HAL_RCC_GetSysClockFreq();
 8003e62:	f7ff f935 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 8003e66:	61f8      	str	r0, [r7, #28]
          break;
 8003e68:	e00c      	b.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x740>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e6a:	4b33      	ldr	r3, [pc, #204]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e76:	d104      	bne.n	8003e82 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
            frequency = HSI_VALUE;
 8003e78:	4b30      	ldr	r3, [pc, #192]	; (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003e7a:	61fb      	str	r3, [r7, #28]
          break;
 8003e7c:	e001      	b.n	8003e82 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
          break;
 8003e7e:	bf00      	nop
 8003e80:	e0eb      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003e82:	bf00      	nop
        break;
 8003e84:	e0e9      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003e86:	4b2c      	ldr	r3, [pc, #176]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e90:	613b      	str	r3, [r7, #16]
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e98:	d013      	beq.n	8003ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ea0:	d819      	bhi.n	8003ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d004      	beq.n	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eae:	d004      	beq.n	8003eba <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8003eb0:	e011      	b.n	8003ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003eb2:	f7ff f9a3 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8003eb6:	61f8      	str	r0, [r7, #28]
          break;
 8003eb8:	e010      	b.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x798>
          frequency = HAL_RCC_GetSysClockFreq();
 8003eba:	f7ff f909 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 8003ebe:	61f8      	str	r0, [r7, #28]
          break;
 8003ec0:	e00c      	b.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x798>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003ec2:	4b1d      	ldr	r3, [pc, #116]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ece:	d104      	bne.n	8003eda <HAL_RCCEx_GetPeriphCLKFreq+0x796>
            frequency = HSI_VALUE;
 8003ed0:	4b1a      	ldr	r3, [pc, #104]	; (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003ed2:	61fb      	str	r3, [r7, #28]
          break;
 8003ed4:	e001      	b.n	8003eda <HAL_RCCEx_GetPeriphCLKFreq+0x796>
          break;
 8003ed6:	bf00      	nop
 8003ed8:	e0bf      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003eda:	bf00      	nop
        break;
 8003edc:	e0bd      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003ede:	4b16      	ldr	r3, [pc, #88]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ef0:	d030      	beq.n	8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ef8:	d837      	bhi.n	8003f6a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f00:	d01e      	beq.n	8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f08:	d82f      	bhi.n	8003f6a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f16:	d004      	beq.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
          break;
 8003f18:	e027      	b.n	8003f6a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f1a:	f7ff f96f 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8003f1e:	61f8      	str	r0, [r7, #28]
          break;
 8003f20:	e02a      	b.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003f22:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d11e      	bne.n	8003f6e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
              frequency = LSI_VALUE;
 8003f30:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003f34:	61fb      	str	r3, [r7, #28]
          break;
 8003f36:	e01a      	b.n	8003f6e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f40:	4b48      	ldr	r3, [pc, #288]	; (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f4c:	d111      	bne.n	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
            frequency = HSI_VALUE;
 8003f4e:	4b46      	ldr	r3, [pc, #280]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8003f50:	61fb      	str	r3, [r7, #28]
          break;
 8003f52:	e00e      	b.n	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f54:	4b43      	ldr	r3, [pc, #268]	; (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d109      	bne.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
            frequency = LSE_VALUE;
 8003f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f66:	61fb      	str	r3, [r7, #28]
          break;
 8003f68:	e005      	b.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
          break;
 8003f6a:	bf00      	nop
 8003f6c:	e075      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003f6e:	bf00      	nop
 8003f70:	e073      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003f72:	bf00      	nop
 8003f74:	e071      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003f76:	bf00      	nop
        break;
 8003f78:	e06f      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003f7a:	4b3a      	ldr	r3, [pc, #232]	; (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f80:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f8c:	d02c      	beq.n	8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f94:	d833      	bhi.n	8003ffe <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f9c:	d01a      	beq.n	8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fa4:	d82b      	bhi.n	8003ffe <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d004      	beq.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fb2:	d004      	beq.n	8003fbe <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
          break;
 8003fb4:	e023      	b.n	8003ffe <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003fb6:	f7ff f921 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8003fba:	61f8      	str	r0, [r7, #28]
          break;
 8003fbc:	e026      	b.n	800400c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003fbe:	4b29      	ldr	r3, [pc, #164]	; (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 8003fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d11a      	bne.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
              frequency = LSI_VALUE;
 8003fcc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003fd0:	61fb      	str	r3, [r7, #28]
          break;
 8003fd2:	e016      	b.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003fd4:	4b23      	ldr	r3, [pc, #140]	; (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe0:	d111      	bne.n	8004006 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            frequency = HSI_VALUE;
 8003fe2:	4b21      	ldr	r3, [pc, #132]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8003fe4:	61fb      	str	r3, [r7, #28]
          break;
 8003fe6:	e00e      	b.n	8004006 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003fe8:	4b1e      	ldr	r3, [pc, #120]	; (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 8003fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d109      	bne.n	800400a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
            frequency = LSE_VALUE;
 8003ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ffa:	61fb      	str	r3, [r7, #28]
          break;
 8003ffc:	e005      	b.n	800400a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
          break;
 8003ffe:	bf00      	nop
 8004000:	e02b      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8004002:	bf00      	nop
 8004004:	e029      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8004006:	bf00      	nop
 8004008:	e027      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 800400a:	bf00      	nop
        break;
 800400c:	e025      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800400e:	4b15      	ldr	r3, [pc, #84]	; (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 8004010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004014:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d004      	beq.n	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004026:	d004      	beq.n	8004032 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8004028:	e00d      	b.n	8004046 <HAL_RCCEx_GetPeriphCLKFreq+0x902>
          frequency = HAL_RCC_GetPCLK1Freq();
 800402a:	f7ff f8e7 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 800402e:	61f8      	str	r0, [r7, #28]
          break;
 8004030:	e009      	b.n	8004046 <HAL_RCCEx_GetPeriphCLKFreq+0x902>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004032:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403e:	d101      	bne.n	8004044 <HAL_RCCEx_GetPeriphCLKFreq+0x900>
            frequency = HSI_VALUE;
 8004040:	4b09      	ldr	r3, [pc, #36]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8004042:	61fb      	str	r3, [r7, #28]
          break;
 8004044:	bf00      	nop
        break;
 8004046:	e008      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
      break;
 8004048:	bf00      	nop
 800404a:	e006      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
      break;
 800404c:	bf00      	nop
 800404e:	e004      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
      break;
 8004050:	bf00      	nop
 8004052:	e002      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
      break;
 8004054:	bf00      	nop
 8004056:	e000      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
      break;
 8004058:	bf00      	nop
    }
  }

  return(frequency);
 800405a:	69fb      	ldr	r3, [r7, #28]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3720      	adds	r7, #32
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40021000 	.word	0x40021000
 8004068:	00f42400 	.word	0x00f42400

0800406c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800407a:	4b74      	ldr	r3, [pc, #464]	; (800424c <RCCEx_PLLSAI1_Config+0x1e0>)
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d018      	beq.n	80040b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004086:	4b71      	ldr	r3, [pc, #452]	; (800424c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f003 0203 	and.w	r2, r3, #3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d10d      	bne.n	80040b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
       ||
 800409a:	2b00      	cmp	r3, #0
 800409c:	d009      	beq.n	80040b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800409e:	4b6b      	ldr	r3, [pc, #428]	; (800424c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	091b      	lsrs	r3, r3, #4
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
       ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d047      	beq.n	8004142 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	73fb      	strb	r3, [r7, #15]
 80040b6:	e044      	b.n	8004142 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b03      	cmp	r3, #3
 80040be:	d018      	beq.n	80040f2 <RCCEx_PLLSAI1_Config+0x86>
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d825      	bhi.n	8004110 <RCCEx_PLLSAI1_Config+0xa4>
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d002      	beq.n	80040ce <RCCEx_PLLSAI1_Config+0x62>
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d009      	beq.n	80040e0 <RCCEx_PLLSAI1_Config+0x74>
 80040cc:	e020      	b.n	8004110 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040ce:	4b5f      	ldr	r3, [pc, #380]	; (800424c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d11d      	bne.n	8004116 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040de:	e01a      	b.n	8004116 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040e0:	4b5a      	ldr	r3, [pc, #360]	; (800424c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d116      	bne.n	800411a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040f0:	e013      	b.n	800411a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040f2:	4b56      	ldr	r3, [pc, #344]	; (800424c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10f      	bne.n	800411e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040fe:	4b53      	ldr	r3, [pc, #332]	; (800424c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d109      	bne.n	800411e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800410e:	e006      	b.n	800411e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	73fb      	strb	r3, [r7, #15]
      break;
 8004114:	e004      	b.n	8004120 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004116:	bf00      	nop
 8004118:	e002      	b.n	8004120 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800411a:	bf00      	nop
 800411c:	e000      	b.n	8004120 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800411e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004120:	7bfb      	ldrb	r3, [r7, #15]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10d      	bne.n	8004142 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004126:	4b49      	ldr	r3, [pc, #292]	; (800424c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6819      	ldr	r1, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	3b01      	subs	r3, #1
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	430b      	orrs	r3, r1
 800413c:	4943      	ldr	r1, [pc, #268]	; (800424c <RCCEx_PLLSAI1_Config+0x1e0>)
 800413e:	4313      	orrs	r3, r2
 8004140:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d17c      	bne.n	8004242 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004148:	4b40      	ldr	r3, [pc, #256]	; (800424c <RCCEx_PLLSAI1_Config+0x1e0>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a3f      	ldr	r2, [pc, #252]	; (800424c <RCCEx_PLLSAI1_Config+0x1e0>)
 800414e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004152:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004154:	f7fd fe6a 	bl	8001e2c <HAL_GetTick>
 8004158:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800415a:	e009      	b.n	8004170 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800415c:	f7fd fe66 	bl	8001e2c <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d902      	bls.n	8004170 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	73fb      	strb	r3, [r7, #15]
        break;
 800416e:	e005      	b.n	800417c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004170:	4b36      	ldr	r3, [pc, #216]	; (800424c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1ef      	bne.n	800415c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d15f      	bne.n	8004242 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d110      	bne.n	80041aa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004188:	4b30      	ldr	r3, [pc, #192]	; (800424c <RCCEx_PLLSAI1_Config+0x1e0>)
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004190:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6892      	ldr	r2, [r2, #8]
 8004198:	0211      	lsls	r1, r2, #8
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	68d2      	ldr	r2, [r2, #12]
 800419e:	06d2      	lsls	r2, r2, #27
 80041a0:	430a      	orrs	r2, r1
 80041a2:	492a      	ldr	r1, [pc, #168]	; (800424c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	610b      	str	r3, [r1, #16]
 80041a8:	e027      	b.n	80041fa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d112      	bne.n	80041d6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041b0:	4b26      	ldr	r3, [pc, #152]	; (800424c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80041b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6892      	ldr	r2, [r2, #8]
 80041c0:	0211      	lsls	r1, r2, #8
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6912      	ldr	r2, [r2, #16]
 80041c6:	0852      	lsrs	r2, r2, #1
 80041c8:	3a01      	subs	r2, #1
 80041ca:	0552      	lsls	r2, r2, #21
 80041cc:	430a      	orrs	r2, r1
 80041ce:	491f      	ldr	r1, [pc, #124]	; (800424c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	610b      	str	r3, [r1, #16]
 80041d4:	e011      	b.n	80041fa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041d6:	4b1d      	ldr	r3, [pc, #116]	; (800424c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80041de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6892      	ldr	r2, [r2, #8]
 80041e6:	0211      	lsls	r1, r2, #8
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6952      	ldr	r2, [r2, #20]
 80041ec:	0852      	lsrs	r2, r2, #1
 80041ee:	3a01      	subs	r2, #1
 80041f0:	0652      	lsls	r2, r2, #25
 80041f2:	430a      	orrs	r2, r1
 80041f4:	4915      	ldr	r1, [pc, #84]	; (800424c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041fa:	4b14      	ldr	r3, [pc, #80]	; (800424c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a13      	ldr	r2, [pc, #76]	; (800424c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004200:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004204:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004206:	f7fd fe11 	bl	8001e2c <HAL_GetTick>
 800420a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800420c:	e009      	b.n	8004222 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800420e:	f7fd fe0d 	bl	8001e2c <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d902      	bls.n	8004222 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	73fb      	strb	r3, [r7, #15]
          break;
 8004220:	e005      	b.n	800422e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004222:	4b0a      	ldr	r3, [pc, #40]	; (800424c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0ef      	beq.n	800420e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d106      	bne.n	8004242 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004234:	4b05      	ldr	r3, [pc, #20]	; (800424c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004236:	691a      	ldr	r2, [r3, #16]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	4903      	ldr	r1, [pc, #12]	; (800424c <RCCEx_PLLSAI1_Config+0x1e0>)
 800423e:	4313      	orrs	r3, r2
 8004240:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004242:	7bfb      	ldrb	r3, [r7, #15]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40021000 	.word	0x40021000

08004250 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004250:	b480      	push	{r7}
 8004252:	b089      	sub	sp, #36	; 0x24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800425a:	2300      	movs	r3, #0
 800425c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800426c:	d10b      	bne.n	8004286 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800426e:	4b53      	ldr	r3, [pc, #332]	; (80043bc <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004274:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004278:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004280:	d101      	bne.n	8004286 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004282:	4b4f      	ldr	r3, [pc, #316]	; (80043c0 <RCCEx_GetSAIxPeriphCLKFreq+0x170>)
 8004284:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	2b00      	cmp	r3, #0
 800428a:	f040 8090 	bne.w	80043ae <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
  {
    pllvco = InputFrequency;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	613b      	str	r3, [r7, #16]
      }
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

#else
    if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004298:	d143      	bne.n	8004322 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI2CLK) != 0U))
 800429a:	4b48      	ldr	r3, [pc, #288]	; (80043bc <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042a6:	d132      	bne.n	800430e <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
 80042a8:	4b44      	ldr	r3, [pc, #272]	; (80043bc <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d02c      	beq.n	800430e <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80042b4:	4b41      	ldr	r3, [pc, #260]	; (80043bc <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	3301      	adds	r3, #1
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c6:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80042c8:	4b3c      	ldr	r3, [pc, #240]	; (80043bc <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	0a1b      	lsrs	r3, r3, #8
 80042ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042d2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80042d4:	4b39      	ldr	r3, [pc, #228]	; (80043bc <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	0edb      	lsrs	r3, r3, #27
 80042da:	f003 031f 	and.w	r3, r3, #31
 80042de:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10a      	bne.n	80042fc <RCCEx_GetSAIxPeriphCLKFreq+0xac>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80042e6:	4b35      	ldr	r3, [pc, #212]	; (80043bc <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <RCCEx_GetSAIxPeriphCLKFreq+0xa8>
          {
            pllp = 17U;
 80042f2:	2311      	movs	r3, #17
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	e001      	b.n	80042fc <RCCEx_GetSAIxPeriphCLKFreq+0xac>
          }
          else
          {
            pllp = 7U;
 80042f8:	2307      	movs	r3, #7
 80042fa:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	fb03 f202 	mul.w	r2, r3, r2
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	fbb2 f3f3 	udiv	r3, r2, r3
 800430a:	61fb      	str	r3, [r7, #28]
 800430c:	e04f      	b.n	80043ae <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800430e:	4b2b      	ldr	r3, [pc, #172]	; (80043bc <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431a:	d148      	bne.n	80043ae <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      {
        /* HSI automatically selected as clock source if PLLs not enabled */
        frequency = HSI_VALUE;
 800431c:	4b29      	ldr	r3, [pc, #164]	; (80043c4 <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 800431e:	61fb      	str	r3, [r7, #28]
 8004320:	e045      	b.n	80043ae <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      else
      {
        /* No clock source, frequency default init at 0 */
      }
    }
    else if(srcclk == RCC_SAI1CLKSOURCE_PLLSAI1)
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d142      	bne.n	80043ae <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004328:	4b24      	ldr	r3, [pc, #144]	; (80043bc <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004330:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004334:	d132      	bne.n	800439c <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
 8004336:	4b21      	ldr	r3, [pc, #132]	; (80043bc <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d02c      	beq.n	800439c <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004342:	4b1e      	ldr	r3, [pc, #120]	; (80043bc <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	091b      	lsrs	r3, r3, #4
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	3301      	adds	r3, #1
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	fbb2 f3f3 	udiv	r3, r2, r3
 8004354:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004356:	4b19      	ldr	r3, [pc, #100]	; (80043bc <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	0a1b      	lsrs	r3, r3, #8
 800435c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004360:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8004362:	4b16      	ldr	r3, [pc, #88]	; (80043bc <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	0edb      	lsrs	r3, r3, #27
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10a      	bne.n	800438a <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004374:	4b11      	ldr	r3, [pc, #68]	; (80043bc <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <RCCEx_GetSAIxPeriphCLKFreq+0x136>
          {
            pllp = 17U;
 8004380:	2311      	movs	r3, #17
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	e001      	b.n	800438a <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
          }
          else
          {
            pllp = 7U;
 8004386:	2307      	movs	r3, #7
 8004388:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	fb03 f202 	mul.w	r2, r3, r2
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	fbb2 f3f3 	udiv	r3, r2, r3
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	e008      	b.n	80043ae <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800439c:	4b07      	ldr	r3, [pc, #28]	; (80043bc <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a8:	d101      	bne.n	80043ae <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      {
        /* HSI automatically selected as clock source if PLLs not enabled */
        frequency = HSI_VALUE;
 80043aa:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 80043ac:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80043ae:	69fb      	ldr	r3, [r7, #28]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3724      	adds	r7, #36	; 0x24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	40021000 	.word	0x40021000
 80043c0:	001fff68 	.word	0x001fff68
 80043c4:	00f42400 	.word	0x00f42400

080043c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e022      	b.n	8004420 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d105      	bne.n	80043f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7fd faa3 	bl	8001938 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2203      	movs	r2, #3
 80043f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f814 	bl	8004428 <HAL_SD_InitCard>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e00a      	b.n	8004420 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004428:	b5b0      	push	{r4, r5, r7, lr}
 800442a:	b08e      	sub	sp, #56	; 0x38
 800442c:	af04      	add	r7, sp, #16
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004430:	2300      	movs	r3, #0
 8004432:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004438:	2300      	movs	r3, #0
 800443a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800443c:	2300      	movs	r3, #0
 800443e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004440:	2300      	movs	r3, #0
 8004442:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8004444:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004448:	f7ff f97c 	bl	8003744 <HAL_RCCEx_GetPeriphCLKFreq>
 800444c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	2b00      	cmp	r3, #0
 8004452:	d109      	bne.n	8004468 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004462:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e07b      	b.n	8004560 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	09db      	lsrs	r3, r3, #7
 800446c:	4a3e      	ldr	r2, [pc, #248]	; (8004568 <HAL_SD_InitCard+0x140>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	091b      	lsrs	r3, r3, #4
 8004474:	3b02      	subs	r3, #2
 8004476:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681d      	ldr	r5, [r3, #0]
 800447c:	466c      	mov	r4, sp
 800447e:	f107 0314 	add.w	r3, r7, #20
 8004482:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004486:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800448a:	f107 0308 	add.w	r3, r7, #8
 800448e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004490:	4628      	mov	r0, r5
 8004492:	f002 f8b8 	bl	8006606 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044a4:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f002 f8f6 	bl	800669c <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044be:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	3302      	adds	r3, #2
 80044c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80044cc:	4a27      	ldr	r2, [pc, #156]	; (800456c <HAL_SD_InitCard+0x144>)
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d4:	3301      	adds	r3, #1
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fd fcb4 	bl	8001e44 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 fe6b 	bl	80051b8 <SD_PowerON>
 80044e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00b      	beq.n	8004502 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e02e      	b.n	8004560 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fd8a 	bl	800501c <SD_InitCard>
 8004508:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00b      	beq.n	8004528 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e01b      	b.n	8004560 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004530:	4618      	mov	r0, r3
 8004532:	f002 f946 	bl	80067c2 <SDMMC_CmdBlockLength>
 8004536:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00f      	beq.n	800455e <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a0b      	ldr	r2, [pc, #44]	; (8004570 <HAL_SD_InitCard+0x148>)
 8004544:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	431a      	orrs	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3728      	adds	r7, #40	; 0x28
 8004564:	46bd      	mov	sp, r7
 8004566:	bdb0      	pop	{r4, r5, r7, pc}
 8004568:	014f8b59 	.word	0x014f8b59
 800456c:	00012110 	.word	0x00012110
 8004570:	004005ff 	.word	0x004005ff

08004574 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b092      	sub	sp, #72	; 0x48
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004582:	f7fd fc53 	bl	8001e2c <HAL_GetTick>
 8004586:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d107      	bne.n	80045a6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e1bd      	b.n	8004922 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	f040 81b0 	bne.w	8004914 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80045ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	441a      	add	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d907      	bls.n	80045d8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045cc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e1a4      	b.n	8004922 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2203      	movs	r2, #3
 80045dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2200      	movs	r2, #0
 80045e6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d002      	beq.n	80045f6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80045f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f2:	025b      	lsls	r3, r3, #9
 80045f4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80045f6:	f04f 33ff 	mov.w	r3, #4294967295
 80045fa:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	025b      	lsls	r3, r3, #9
 8004600:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004602:	2390      	movs	r3, #144	; 0x90
 8004604:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004606:	2302      	movs	r3, #2
 8004608:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800460a:	2300      	movs	r3, #0
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800460e:	2301      	movs	r3, #1
 8004610:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f107 0214 	add.w	r2, r7, #20
 800461a:	4611      	mov	r1, r2
 800461c:	4618      	mov	r0, r3
 800461e:	f002 f8a4 	bl	800676a <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d90a      	bls.n	800463e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2202      	movs	r2, #2
 800462c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004634:	4618      	mov	r0, r3
 8004636:	f002 f908 	bl	800684a <SDMMC_CmdReadMultiBlock>
 800463a:	6478      	str	r0, [r7, #68]	; 0x44
 800463c:	e009      	b.n	8004652 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800464a:	4618      	mov	r0, r3
 800464c:	f002 f8db 	bl	8006806 <SDMMC_CmdReadSingleBlock>
 8004650:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004654:	2b00      	cmp	r3, #0
 8004656:	d012      	beq.n	800467e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a7a      	ldr	r2, [pc, #488]	; (8004848 <HAL_SD_ReadBlocks+0x2d4>)
 800465e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004666:	431a      	orrs	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e151      	b.n	8004922 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004682:	e061      	b.n	8004748 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d03c      	beq.n	800470c <HAL_SD_ReadBlocks+0x198>
 8004692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004694:	2b00      	cmp	r3, #0
 8004696:	d039      	beq.n	800470c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004698:	2300      	movs	r3, #0
 800469a:	643b      	str	r3, [r7, #64]	; 0x40
 800469c:	e033      	b.n	8004706 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 ffdc 	bl	8006660 <SDMMC_ReadFIFO>
 80046a8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80046aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80046b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b4:	3301      	adds	r3, #1
 80046b6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80046b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ba:	3b01      	subs	r3, #1
 80046bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80046be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c0:	0a1b      	lsrs	r3, r3, #8
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80046c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ca:	3301      	adds	r3, #1
 80046cc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80046ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d0:	3b01      	subs	r3, #1
 80046d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80046d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d6:	0c1b      	lsrs	r3, r3, #16
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046dc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80046de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e0:	3301      	adds	r3, #1
 80046e2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80046e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e6:	3b01      	subs	r3, #1
 80046e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80046ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ec:	0e1b      	lsrs	r3, r3, #24
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80046f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f6:	3301      	adds	r3, #1
 80046f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80046fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fc:	3b01      	subs	r3, #1
 80046fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8004700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004702:	3301      	adds	r3, #1
 8004704:	643b      	str	r3, [r7, #64]	; 0x40
 8004706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004708:	2b07      	cmp	r3, #7
 800470a:	d9c8      	bls.n	800469e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800470c:	f7fd fb8e 	bl	8001e2c <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004718:	429a      	cmp	r2, r3
 800471a:	d902      	bls.n	8004722 <HAL_SD_ReadBlocks+0x1ae>
 800471c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800471e:	2b00      	cmp	r3, #0
 8004720:	d112      	bne.n	8004748 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a48      	ldr	r2, [pc, #288]	; (8004848 <HAL_SD_ReadBlocks+0x2d4>)
 8004728:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e0ec      	b.n	8004922 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8004752:	2b00      	cmp	r3, #0
 8004754:	d096      	beq.n	8004684 <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004760:	2b00      	cmp	r3, #0
 8004762:	d022      	beq.n	80047aa <HAL_SD_ReadBlocks+0x236>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d91f      	bls.n	80047aa <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476e:	2b03      	cmp	r3, #3
 8004770:	d01b      	beq.n	80047aa <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f002 f8ce 	bl	8006918 <SDMMC_CmdStopTransfer>
 800477c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800477e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004780:	2b00      	cmp	r3, #0
 8004782:	d012      	beq.n	80047aa <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a2f      	ldr	r2, [pc, #188]	; (8004848 <HAL_SD_ReadBlocks+0x2d4>)
 800478a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004792:	431a      	orrs	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e0bb      	b.n	8004922 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b0:	f003 0308 	and.w	r3, r3, #8
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d012      	beq.n	80047de <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a22      	ldr	r2, [pc, #136]	; (8004848 <HAL_SD_ReadBlocks+0x2d4>)
 80047be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	f043 0208 	orr.w	r2, r3, #8
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e0a1      	b.n	8004922 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d012      	beq.n	8004812 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a15      	ldr	r2, [pc, #84]	; (8004848 <HAL_SD_ReadBlocks+0x2d4>)
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	f043 0202 	orr.w	r2, r3, #2
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e087      	b.n	8004922 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b00      	cmp	r3, #0
 800481e:	d064      	beq.n	80048ea <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a08      	ldr	r2, [pc, #32]	; (8004848 <HAL_SD_ReadBlocks+0x2d4>)
 8004826:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482c:	f043 0220 	orr.w	r2, r3, #32
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e06d      	b.n	8004922 <HAL_SD_ReadBlocks+0x3ae>
 8004846:	bf00      	nop
 8004848:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f001 ff05 	bl	8006660 <SDMMC_ReadFIFO>
 8004856:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485a:	b2da      	uxtb	r2, r3
 800485c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004862:	3301      	adds	r3, #1
 8004864:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004868:	3b01      	subs	r3, #1
 800486a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800486c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486e:	0a1b      	lsrs	r3, r3, #8
 8004870:	b2da      	uxtb	r2, r3
 8004872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004874:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004878:	3301      	adds	r3, #1
 800487a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800487c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487e:	3b01      	subs	r3, #1
 8004880:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004884:	0c1b      	lsrs	r3, r3, #16
 8004886:	b2da      	uxtb	r2, r3
 8004888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800488c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488e:	3301      	adds	r3, #1
 8004890:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004894:	3b01      	subs	r3, #1
 8004896:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489a:	0e1b      	lsrs	r3, r3, #24
 800489c:	b2da      	uxtb	r2, r3
 800489e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80048a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a4:	3301      	adds	r3, #1
 80048a6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80048a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048aa:	3b01      	subs	r3, #1
 80048ac:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80048ae:	f7fd fabd 	bl	8001e2c <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d902      	bls.n	80048c4 <HAL_SD_ReadBlocks+0x350>
 80048be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d112      	bne.n	80048ea <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a18      	ldr	r2, [pc, #96]	; (800492c <HAL_SD_ReadBlocks+0x3b8>)
 80048ca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e01b      	b.n	8004922 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <HAL_SD_ReadBlocks+0x38a>
 80048f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1a6      	bne.n	800484c <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f240 523a 	movw	r2, #1338	; 0x53a
 8004906:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004910:	2300      	movs	r3, #0
 8004912:	e006      	b.n	8004922 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004918:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
  }
}
 8004922:	4618      	mov	r0, r3
 8004924:	3748      	adds	r7, #72	; 0x48
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	004005ff 	.word	0x004005ff

08004930 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b092      	sub	sp, #72	; 0x48
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800493e:	f7fd fa75 	bl	8001e2c <HAL_GetTick>
 8004942:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d107      	bne.n	8004962 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004956:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e165      	b.n	8004c2e <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b01      	cmp	r3, #1
 800496c:	f040 8158 	bne.w	8004c20 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004976:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	441a      	add	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004980:	429a      	cmp	r2, r3
 8004982:	d907      	bls.n	8004994 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004988:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e14c      	b.n	8004c2e <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2203      	movs	r2, #3
 8004998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2200      	movs	r2, #0
 80049a2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d002      	beq.n	80049b2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80049ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ae:	025b      	lsls	r3, r3, #9
 80049b0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80049b2:	f04f 33ff 	mov.w	r3, #4294967295
 80049b6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	025b      	lsls	r3, r3, #9
 80049bc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80049be:	2390      	movs	r3, #144	; 0x90
 80049c0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80049c2:	2300      	movs	r3, #0
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80049ca:	2301      	movs	r3, #1
 80049cc:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f107 0218 	add.w	r2, r7, #24
 80049d6:	4611      	mov	r1, r2
 80049d8:	4618      	mov	r0, r3
 80049da:	f001 fec6 	bl	800676a <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d90a      	bls.n	80049fa <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049f0:	4618      	mov	r0, r3
 80049f2:	f001 ff6e 	bl	80068d2 <SDMMC_CmdWriteMultiBlock>
 80049f6:	6478      	str	r0, [r7, #68]	; 0x44
 80049f8:	e009      	b.n	8004a0e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2210      	movs	r2, #16
 80049fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a06:	4618      	mov	r0, r3
 8004a08:	f001 ff41 	bl	800688e <SDMMC_CmdWriteSingleBlock>
 8004a0c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d012      	beq.n	8004a3a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a87      	ldr	r2, [pc, #540]	; (8004c38 <HAL_SD_WriteBlocks+0x308>)
 8004a1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a22:	431a      	orrs	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e0f9      	b.n	8004c2e <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004a3e:	e065      	b.n	8004b0c <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d040      	beq.n	8004ad0 <HAL_SD_WriteBlocks+0x1a0>
 8004a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d03d      	beq.n	8004ad0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004a54:	2300      	movs	r3, #0
 8004a56:	643b      	str	r3, [r7, #64]	; 0x40
 8004a58:	e037      	b.n	8004aca <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8004a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a62:	3301      	adds	r3, #1
 8004a64:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	021a      	lsls	r2, r3, #8
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a80:	3b01      	subs	r3, #1
 8004a82:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	041a      	lsls	r2, r3, #16
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a92:	3301      	adds	r3, #1
 8004a94:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	061a      	lsls	r2, r3, #24
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aaa:	3301      	adds	r3, #1
 8004aac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f107 0214 	add.w	r2, r7, #20
 8004abc:	4611      	mov	r1, r2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f001 fddb 	bl	800667a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	643b      	str	r3, [r7, #64]	; 0x40
 8004aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004acc:	2b07      	cmp	r3, #7
 8004ace:	d9c4      	bls.n	8004a5a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004ad0:	f7fd f9ac 	bl	8001e2c <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d902      	bls.n	8004ae6 <HAL_SD_WriteBlocks+0x1b6>
 8004ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d112      	bne.n	8004b0c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a53      	ldr	r2, [pc, #332]	; (8004c38 <HAL_SD_WriteBlocks+0x308>)
 8004aec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004af4:	431a      	orrs	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e090      	b.n	8004c2e <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b12:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d092      	beq.n	8004a40 <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d022      	beq.n	8004b6e <HAL_SD_WriteBlocks+0x23e>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d91f      	bls.n	8004b6e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	d01b      	beq.n	8004b6e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f001 feec 	bl	8006918 <SDMMC_CmdStopTransfer>
 8004b40:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d012      	beq.n	8004b6e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a3a      	ldr	r2, [pc, #232]	; (8004c38 <HAL_SD_WriteBlocks+0x308>)
 8004b4e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b56:	431a      	orrs	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e05f      	b.n	8004c2e <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b74:	f003 0308 	and.w	r3, r3, #8
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d012      	beq.n	8004ba2 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a2d      	ldr	r2, [pc, #180]	; (8004c38 <HAL_SD_WriteBlocks+0x308>)
 8004b82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	f043 0208 	orr.w	r2, r3, #8
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e045      	b.n	8004c2e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d012      	beq.n	8004bd6 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a20      	ldr	r2, [pc, #128]	; (8004c38 <HAL_SD_WriteBlocks+0x308>)
 8004bb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	f043 0202 	orr.w	r2, r3, #2
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e02b      	b.n	8004c2e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d012      	beq.n	8004c0a <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a13      	ldr	r2, [pc, #76]	; (8004c38 <HAL_SD_WriteBlocks+0x308>)
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	f043 0210 	orr.w	r2, r3, #16
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e011      	b.n	8004c2e <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004c12:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e006      	b.n	8004c2e <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
  }
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3748      	adds	r7, #72	; 0x48
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	004005ff 	.word	0x004005ff

08004c3c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c4a:	0f9b      	lsrs	r3, r3, #30
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c56:	0e9b      	lsrs	r3, r3, #26
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c68:	0e1b      	lsrs	r3, r3, #24
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c7a:	0c1b      	lsrs	r3, r3, #16
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c86:	0a1b      	lsrs	r3, r3, #8
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c9c:	0d1b      	lsrs	r3, r3, #20
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ca8:	0c1b      	lsrs	r3, r3, #16
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	f003 030f 	and.w	r3, r3, #15
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cba:	0bdb      	lsrs	r3, r3, #15
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ccc:	0b9b      	lsrs	r3, r3, #14
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cde:	0b5b      	lsrs	r3, r3, #13
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cf0:	0b1b      	lsrs	r3, r3, #12
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2200      	movs	r2, #0
 8004d02:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d163      	bne.n	8004dd4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d10:	009a      	lsls	r2, r3, #2
 8004d12:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d16:	4013      	ands	r3, r2
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004d1c:	0f92      	lsrs	r2, r2, #30
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d28:	0edb      	lsrs	r3, r3, #27
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d3a:	0e1b      	lsrs	r3, r3, #24
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d4c:	0d5b      	lsrs	r3, r3, #21
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d5e:	0c9b      	lsrs	r3, r3, #18
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d70:	0bdb      	lsrs	r3, r3, #15
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	7e1b      	ldrb	r3, [r3, #24]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	3302      	adds	r3, #2
 8004d94:	2201      	movs	r2, #1
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004d9e:	fb03 f202 	mul.w	r2, r3, r2
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	7a1b      	ldrb	r3, [r3, #8]
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	f003 030f 	and.w	r3, r3, #15
 8004db0:	2201      	movs	r2, #1
 8004db2:	409a      	lsls	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004dc0:	0a52      	lsrs	r2, r2, #9
 8004dc2:	fb03 f202 	mul.w	r2, r3, r2
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dd0:	661a      	str	r2, [r3, #96]	; 0x60
 8004dd2:	e031      	b.n	8004e38 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d11d      	bne.n	8004e18 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004de0:	041b      	lsls	r3, r3, #16
 8004de2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dea:	0c1b      	lsrs	r3, r3, #16
 8004dec:	431a      	orrs	r2, r3
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	3301      	adds	r3, #1
 8004df8:	029a      	lsls	r2, r3, #10
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e0c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	661a      	str	r2, [r3, #96]	; 0x60
 8004e16:	e00f      	b.n	8004e38 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a58      	ldr	r2, [pc, #352]	; (8004f80 <HAL_SD_GetCardCSD+0x344>)
 8004e1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e09d      	b.n	8004f74 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e3c:	0b9b      	lsrs	r3, r3, #14
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e4e:	09db      	lsrs	r3, r3, #7
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e70:	0fdb      	lsrs	r3, r3, #31
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7c:	0f5b      	lsrs	r3, r3, #29
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	f003 0303 	and.w	r3, r3, #3
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8e:	0e9b      	lsrs	r3, r3, #26
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea0:	0d9b      	lsrs	r3, r3, #22
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	f003 030f 	and.w	r3, r3, #15
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb2:	0d5b      	lsrs	r3, r3, #21
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ece:	0c1b      	lsrs	r3, r3, #16
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee2:	0bdb      	lsrs	r3, r3, #15
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef6:	0b9b      	lsrs	r3, r3, #14
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0a:	0b5b      	lsrs	r3, r3, #13
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1e:	0b1b      	lsrs	r3, r3, #12
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f32:	0a9b      	lsrs	r3, r3, #10
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f46:	0a1b      	lsrs	r3, r3, #8
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5a:	085b      	lsrs	r3, r3, #1
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	004005ff 	.word	0x004005ff

08004f84 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004fe8:	f107 030c 	add.w	r3, r7, #12
 8004fec:	4619      	mov	r1, r3
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f970 	bl	80052d4 <SD_SendStatus>
 8004ff4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d005      	beq.n	8005008 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	0a5b      	lsrs	r3, r3, #9
 800500c:	f003 030f 	and.w	r3, r3, #15
 8005010:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005012:	693b      	ldr	r3, [r7, #16]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3718      	adds	r7, #24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800501c:	b5b0      	push	{r4, r5, r7, lr}
 800501e:	b094      	sub	sp, #80	; 0x50
 8005020:	af04      	add	r7, sp, #16
 8005022:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005024:	2301      	movs	r3, #1
 8005026:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4618      	mov	r0, r3
 800502e:	f001 fb44 	bl	80066ba <SDMMC_GetPowerState>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d102      	bne.n	800503e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005038:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800503c:	e0b8      	b.n	80051b0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005042:	2b03      	cmp	r3, #3
 8005044:	d02f      	beq.n	80050a6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f001 fd2b 	bl	8006aa6 <SDMMC_CmdSendCID>
 8005050:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <SD_InitCard+0x40>
    {
      return errorstate;
 8005058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800505a:	e0a9      	b.n	80051b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2100      	movs	r1, #0
 8005062:	4618      	mov	r0, r3
 8005064:	f001 fb6e 	bl	8006744 <SDMMC_GetResponse>
 8005068:	4602      	mov	r2, r0
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2104      	movs	r1, #4
 8005074:	4618      	mov	r0, r3
 8005076:	f001 fb65 	bl	8006744 <SDMMC_GetResponse>
 800507a:	4602      	mov	r2, r0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2108      	movs	r1, #8
 8005086:	4618      	mov	r0, r3
 8005088:	f001 fb5c 	bl	8006744 <SDMMC_GetResponse>
 800508c:	4602      	mov	r2, r0
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	210c      	movs	r1, #12
 8005098:	4618      	mov	r0, r3
 800509a:	f001 fb53 	bl	8006744 <SDMMC_GetResponse>
 800509e:	4602      	mov	r2, r0
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d00d      	beq.n	80050ca <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f107 020e 	add.w	r2, r7, #14
 80050b6:	4611      	mov	r1, r2
 80050b8:	4618      	mov	r0, r3
 80050ba:	f001 fd31 	bl	8006b20 <SDMMC_CmdSetRelAdd>
 80050be:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80050c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <SD_InitCard+0xae>
    {
      return errorstate;
 80050c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c8:	e072      	b.n	80051b0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	d036      	beq.n	8005140 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80050d2:	89fb      	ldrh	r3, [r7, #14]
 80050d4:	461a      	mov	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e2:	041b      	lsls	r3, r3, #16
 80050e4:	4619      	mov	r1, r3
 80050e6:	4610      	mov	r0, r2
 80050e8:	f001 fcfb 	bl	8006ae2 <SDMMC_CmdSendCSD>
 80050ec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80050ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80050f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f6:	e05b      	b.n	80051b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2100      	movs	r1, #0
 80050fe:	4618      	mov	r0, r3
 8005100:	f001 fb20 	bl	8006744 <SDMMC_GetResponse>
 8005104:	4602      	mov	r2, r0
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2104      	movs	r1, #4
 8005110:	4618      	mov	r0, r3
 8005112:	f001 fb17 	bl	8006744 <SDMMC_GetResponse>
 8005116:	4602      	mov	r2, r0
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2108      	movs	r1, #8
 8005122:	4618      	mov	r0, r3
 8005124:	f001 fb0e 	bl	8006744 <SDMMC_GetResponse>
 8005128:	4602      	mov	r2, r0
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	210c      	movs	r1, #12
 8005134:	4618      	mov	r0, r3
 8005136:	f001 fb05 	bl	8006744 <SDMMC_GetResponse>
 800513a:	4602      	mov	r2, r0
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2104      	movs	r1, #4
 8005146:	4618      	mov	r0, r3
 8005148:	f001 fafc 	bl	8006744 <SDMMC_GetResponse>
 800514c:	4603      	mov	r3, r0
 800514e:	0d1a      	lsrs	r2, r3, #20
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005154:	f107 0310 	add.w	r3, r7, #16
 8005158:	4619      	mov	r1, r3
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7ff fd6e 	bl	8004c3c <HAL_SD_GetCardCSD>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d002      	beq.n	800516c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005166:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800516a:	e021      	b.n	80051b0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6819      	ldr	r1, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005174:	041b      	lsls	r3, r3, #16
 8005176:	2200      	movs	r2, #0
 8005178:	461c      	mov	r4, r3
 800517a:	4615      	mov	r5, r2
 800517c:	4622      	mov	r2, r4
 800517e:	462b      	mov	r3, r5
 8005180:	4608      	mov	r0, r1
 8005182:	f001 fbeb 	bl	800695c <SDMMC_CmdSelDesel>
 8005186:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <SD_InitCard+0x176>
  {
    return errorstate;
 800518e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005190:	e00e      	b.n	80051b0 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681d      	ldr	r5, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	466c      	mov	r4, sp
 800519a:	f103 0210 	add.w	r2, r3, #16
 800519e:	ca07      	ldmia	r2, {r0, r1, r2}
 80051a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80051a4:	3304      	adds	r3, #4
 80051a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051a8:	4628      	mov	r0, r5
 80051aa:	f001 fa2c 	bl	8006606 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3740      	adds	r7, #64	; 0x40
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bdb0      	pop	{r4, r5, r7, pc}

080051b8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	2300      	movs	r3, #0
 80051ca:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f001 fbe6 	bl	80069a2 <SDMMC_CmdGoIdleState>
 80051d6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	e072      	b.n	80052c8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f001 fbf9 	bl	80069de <SDMMC_CmdOperCond>
 80051ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00d      	beq.n	8005210 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4618      	mov	r0, r3
 8005200:	f001 fbcf 	bl	80069a2 <SDMMC_CmdGoIdleState>
 8005204:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d004      	beq.n	8005216 <SD_PowerON+0x5e>
    {
      return errorstate;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	e05b      	b.n	80052c8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800521a:	2b01      	cmp	r3, #1
 800521c:	d137      	bne.n	800528e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2100      	movs	r1, #0
 8005224:	4618      	mov	r0, r3
 8005226:	f001 fbf9 	bl	8006a1c <SDMMC_CmdAppCommand>
 800522a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d02d      	beq.n	800528e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005232:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005236:	e047      	b.n	80052c8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2100      	movs	r1, #0
 800523e:	4618      	mov	r0, r3
 8005240:	f001 fbec 	bl	8006a1c <SDMMC_CmdAppCommand>
 8005244:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <SD_PowerON+0x98>
    {
      return errorstate;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	e03b      	b.n	80052c8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	491e      	ldr	r1, [pc, #120]	; (80052d0 <SD_PowerON+0x118>)
 8005256:	4618      	mov	r0, r3
 8005258:	f001 fc02 	bl	8006a60 <SDMMC_CmdAppOperCommand>
 800525c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d002      	beq.n	800526a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005264:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005268:	e02e      	b.n	80052c8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2100      	movs	r1, #0
 8005270:	4618      	mov	r0, r3
 8005272:	f001 fa67 	bl	8006744 <SDMMC_GetResponse>
 8005276:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	0fdb      	lsrs	r3, r3, #31
 800527c:	2b01      	cmp	r3, #1
 800527e:	d101      	bne.n	8005284 <SD_PowerON+0xcc>
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <SD_PowerON+0xce>
 8005284:	2300      	movs	r3, #0
 8005286:	613b      	str	r3, [r7, #16]

    count++;
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	3301      	adds	r3, #1
 800528c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005294:	4293      	cmp	r3, r2
 8005296:	d802      	bhi.n	800529e <SD_PowerON+0xe6>
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0cc      	beq.n	8005238 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d902      	bls.n	80052ae <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80052a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052ac:	e00c      	b.n	80052c8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	645a      	str	r2, [r3, #68]	; 0x44
 80052be:	e002      	b.n	80052c6 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	c1100000 	.word	0xc1100000

080052d4 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d102      	bne.n	80052ea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80052e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052e8:	e018      	b.n	800531c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f2:	041b      	lsls	r3, r3, #16
 80052f4:	4619      	mov	r1, r3
 80052f6:	4610      	mov	r0, r2
 80052f8:	f001 fc33 	bl	8006b62 <SDMMC_CmdSendStatus>
 80052fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	e009      	b.n	800531c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2100      	movs	r1, #0
 800530e:	4618      	mov	r0, r3
 8005310:	f001 fa18 	bl	8006744 <SDMMC_GetResponse>
 8005314:	4602      	mov	r2, r0
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e095      	b.n	8005462 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	2b00      	cmp	r3, #0
 800533c:	d108      	bne.n	8005350 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005346:	d009      	beq.n	800535c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	61da      	str	r2, [r3, #28]
 800534e:	e005      	b.n	800535c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fc fb6a 	bl	8001a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005392:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800539c:	d902      	bls.n	80053a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	e002      	b.n	80053aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80053b2:	d007      	beq.n	80053c4 <HAL_SPI_Init+0xa0>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053bc:	d002      	beq.n	80053c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053d4:	431a      	orrs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005406:	ea42 0103 	orr.w	r1, r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	0c1b      	lsrs	r3, r3, #16
 8005420:	f003 0204 	and.w	r2, r3, #4
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	f003 0310 	and.w	r3, r3, #16
 800542c:	431a      	orrs	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005440:	ea42 0103 	orr.w	r1, r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b08a      	sub	sp, #40	; 0x28
 800546e:	af00      	add	r7, sp, #0
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	607a      	str	r2, [r7, #4]
 8005476:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005478:	2301      	movs	r3, #1
 800547a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005488:	2b01      	cmp	r3, #1
 800548a:	d101      	bne.n	8005490 <HAL_SPI_TransmitReceive+0x26>
 800548c:	2302      	movs	r3, #2
 800548e:	e20a      	b.n	80058a6 <HAL_SPI_TransmitReceive+0x43c>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005498:	f7fc fcc8 	bl	8001e2c <HAL_GetTick>
 800549c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054a4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80054ac:	887b      	ldrh	r3, [r7, #2]
 80054ae:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80054b0:	887b      	ldrh	r3, [r7, #2]
 80054b2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054b4:	7efb      	ldrb	r3, [r7, #27]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d00e      	beq.n	80054d8 <HAL_SPI_TransmitReceive+0x6e>
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054c0:	d106      	bne.n	80054d0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d102      	bne.n	80054d0 <HAL_SPI_TransmitReceive+0x66>
 80054ca:	7efb      	ldrb	r3, [r7, #27]
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d003      	beq.n	80054d8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80054d0:	2302      	movs	r3, #2
 80054d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80054d6:	e1e0      	b.n	800589a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d005      	beq.n	80054ea <HAL_SPI_TransmitReceive+0x80>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <HAL_SPI_TransmitReceive+0x80>
 80054e4:	887b      	ldrh	r3, [r7, #2]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d103      	bne.n	80054f2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80054f0:	e1d3      	b.n	800589a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d003      	beq.n	8005506 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2205      	movs	r2, #5
 8005502:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	887a      	ldrh	r2, [r7, #2]
 8005516:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	887a      	ldrh	r2, [r7, #2]
 800551e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	887a      	ldrh	r2, [r7, #2]
 800552c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	887a      	ldrh	r2, [r7, #2]
 8005532:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005548:	d802      	bhi.n	8005550 <HAL_SPI_TransmitReceive+0xe6>
 800554a:	8a3b      	ldrh	r3, [r7, #16]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d908      	bls.n	8005562 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800555e:	605a      	str	r2, [r3, #4]
 8005560:	e007      	b.n	8005572 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005570:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557c:	2b40      	cmp	r3, #64	; 0x40
 800557e:	d007      	beq.n	8005590 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800558e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005598:	f240 8081 	bls.w	800569e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d002      	beq.n	80055aa <HAL_SPI_TransmitReceive+0x140>
 80055a4:	8a7b      	ldrh	r3, [r7, #18]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d16d      	bne.n	8005686 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ae:	881a      	ldrh	r2, [r3, #0]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ba:	1c9a      	adds	r2, r3, #2
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	3b01      	subs	r3, #1
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055ce:	e05a      	b.n	8005686 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d11b      	bne.n	8005616 <HAL_SPI_TransmitReceive+0x1ac>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d016      	beq.n	8005616 <HAL_SPI_TransmitReceive+0x1ac>
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d113      	bne.n	8005616 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f2:	881a      	ldrh	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fe:	1c9a      	adds	r2, r3, #2
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005608:	b29b      	uxth	r3, r3
 800560a:	3b01      	subs	r3, #1
 800560c:	b29a      	uxth	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b01      	cmp	r3, #1
 8005622:	d11c      	bne.n	800565e <HAL_SPI_TransmitReceive+0x1f4>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800562a:	b29b      	uxth	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d016      	beq.n	800565e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	b292      	uxth	r2, r2
 800563c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	1c9a      	adds	r2, r3, #2
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800564e:	b29b      	uxth	r3, r3
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800565a:	2301      	movs	r3, #1
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800565e:	f7fc fbe5 	bl	8001e2c <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800566a:	429a      	cmp	r2, r3
 800566c:	d80b      	bhi.n	8005686 <HAL_SPI_TransmitReceive+0x21c>
 800566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005674:	d007      	beq.n	8005686 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005684:	e109      	b.n	800589a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800568a:	b29b      	uxth	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d19f      	bne.n	80055d0 <HAL_SPI_TransmitReceive+0x166>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005696:	b29b      	uxth	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d199      	bne.n	80055d0 <HAL_SPI_TransmitReceive+0x166>
 800569c:	e0e3      	b.n	8005866 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_SPI_TransmitReceive+0x244>
 80056a6:	8a7b      	ldrh	r3, [r7, #18]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	f040 80cf 	bne.w	800584c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d912      	bls.n	80056de <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056bc:	881a      	ldrh	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c8:	1c9a      	adds	r2, r3, #2
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	3b02      	subs	r3, #2
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056dc:	e0b6      	b.n	800584c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	330c      	adds	r3, #12
 80056e8:	7812      	ldrb	r2, [r2, #0]
 80056ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	3b01      	subs	r3, #1
 80056fe:	b29a      	uxth	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005704:	e0a2      	b.n	800584c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b02      	cmp	r3, #2
 8005712:	d134      	bne.n	800577e <HAL_SPI_TransmitReceive+0x314>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d02f      	beq.n	800577e <HAL_SPI_TransmitReceive+0x314>
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	2b01      	cmp	r3, #1
 8005722:	d12c      	bne.n	800577e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b01      	cmp	r3, #1
 800572c:	d912      	bls.n	8005754 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005732:	881a      	ldrh	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	1c9a      	adds	r2, r3, #2
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005748:	b29b      	uxth	r3, r3
 800574a:	3b02      	subs	r3, #2
 800574c:	b29a      	uxth	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005752:	e012      	b.n	800577a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	330c      	adds	r3, #12
 800575e:	7812      	ldrb	r2, [r2, #0]
 8005760:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005770:	b29b      	uxth	r3, r3
 8005772:	3b01      	subs	r3, #1
 8005774:	b29a      	uxth	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b01      	cmp	r3, #1
 800578a:	d148      	bne.n	800581e <HAL_SPI_TransmitReceive+0x3b4>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005792:	b29b      	uxth	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d042      	beq.n	800581e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800579e:	b29b      	uxth	r3, r3
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d923      	bls.n	80057ec <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	b292      	uxth	r2, r2
 80057b0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	1c9a      	adds	r2, r3, #2
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	3b02      	subs	r3, #2
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d81f      	bhi.n	800581a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057e8:	605a      	str	r2, [r3, #4]
 80057ea:	e016      	b.n	800581a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f103 020c 	add.w	r2, r3, #12
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f8:	7812      	ldrb	r2, [r2, #0]
 80057fa:	b2d2      	uxtb	r2, r2
 80057fc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800580e:	b29b      	uxth	r3, r3
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800581a:	2301      	movs	r3, #1
 800581c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800581e:	f7fc fb05 	bl	8001e2c <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800582a:	429a      	cmp	r2, r3
 800582c:	d803      	bhi.n	8005836 <HAL_SPI_TransmitReceive+0x3cc>
 800582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005834:	d102      	bne.n	800583c <HAL_SPI_TransmitReceive+0x3d2>
 8005836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005838:	2b00      	cmp	r3, #0
 800583a:	d107      	bne.n	800584c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800584a:	e026      	b.n	800589a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005850:	b29b      	uxth	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	f47f af57 	bne.w	8005706 <HAL_SPI_TransmitReceive+0x29c>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800585e:	b29b      	uxth	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	f47f af50 	bne.w	8005706 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f000 f93e 	bl	8005aec <SPI_EndRxTxTransaction>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d005      	beq.n	8005882 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2220      	movs	r2, #32
 8005880:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005890:	e003      	b.n	800589a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80058a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3728      	adds	r7, #40	; 0x28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	4613      	mov	r3, r2
 80058be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058c0:	f7fc fab4 	bl	8001e2c <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	1a9b      	subs	r3, r3, r2
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	4413      	add	r3, r2
 80058ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058d0:	f7fc faac 	bl	8001e2c <HAL_GetTick>
 80058d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058d6:	4b39      	ldr	r3, [pc, #228]	; (80059bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	015b      	lsls	r3, r3, #5
 80058dc:	0d1b      	lsrs	r3, r3, #20
 80058de:	69fa      	ldr	r2, [r7, #28]
 80058e0:	fb02 f303 	mul.w	r3, r2, r3
 80058e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058e6:	e054      	b.n	8005992 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ee:	d050      	beq.n	8005992 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058f0:	f7fc fa9c 	bl	8001e2c <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	69fa      	ldr	r2, [r7, #28]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d902      	bls.n	8005906 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d13d      	bne.n	8005982 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005914:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800591e:	d111      	bne.n	8005944 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005928:	d004      	beq.n	8005934 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005932:	d107      	bne.n	8005944 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005942:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800594c:	d10f      	bne.n	800596e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800596c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e017      	b.n	80059b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	3b01      	subs	r3, #1
 8005990:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	4013      	ands	r3, r2
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	429a      	cmp	r2, r3
 80059a0:	bf0c      	ite	eq
 80059a2:	2301      	moveq	r3, #1
 80059a4:	2300      	movne	r3, #0
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	461a      	mov	r2, r3
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d19b      	bne.n	80058e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3720      	adds	r7, #32
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20000004 	.word	0x20000004

080059c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08a      	sub	sp, #40	; 0x28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
 80059cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80059ce:	2300      	movs	r3, #0
 80059d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80059d2:	f7fc fa2b 	bl	8001e2c <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	1a9b      	subs	r3, r3, r2
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	4413      	add	r3, r2
 80059e0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80059e2:	f7fc fa23 	bl	8001e2c <HAL_GetTick>
 80059e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	330c      	adds	r3, #12
 80059ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80059f0:	4b3d      	ldr	r3, [pc, #244]	; (8005ae8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	4613      	mov	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	00da      	lsls	r2, r3, #3
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	0d1b      	lsrs	r3, r3, #20
 8005a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a02:	fb02 f303 	mul.w	r3, r2, r3
 8005a06:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a08:	e060      	b.n	8005acc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a10:	d107      	bne.n	8005a22 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d104      	bne.n	8005a22 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005a20:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a28:	d050      	beq.n	8005acc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a2a:	f7fc f9ff 	bl	8001e2c <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d902      	bls.n	8005a40 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d13d      	bne.n	8005abc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a58:	d111      	bne.n	8005a7e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a62:	d004      	beq.n	8005a6e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a6c:	d107      	bne.n	8005a7e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a7c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a86:	d10f      	bne.n	8005aa8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aa6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e010      	b.n	8005ade <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d196      	bne.n	8005a0a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3728      	adds	r7, #40	; 0x28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20000004 	.word	0x20000004

08005aec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f7ff ff5b 	bl	80059c0 <SPI_WaitFifoStateUntilTimeout>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d007      	beq.n	8005b20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b14:	f043 0220 	orr.w	r2, r3, #32
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e027      	b.n	8005b70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2200      	movs	r2, #0
 8005b28:	2180      	movs	r1, #128	; 0x80
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f7ff fec0 	bl	80058b0 <SPI_WaitFlagStateUntilTimeout>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d007      	beq.n	8005b46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b3a:	f043 0220 	orr.w	r2, r3, #32
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e014      	b.n	8005b70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f7ff ff34 	bl	80059c0 <SPI_WaitFifoStateUntilTimeout>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d007      	beq.n	8005b6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b62:	f043 0220 	orr.w	r2, r3, #32
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e000      	b.n	8005b70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e040      	b.n	8005c0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d106      	bne.n	8005ba0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7fb fe52 	bl	8001844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2224      	movs	r2, #36	; 0x24
 8005ba4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 0201 	bic.w	r2, r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fb0c 	bl	80061dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f8af 	bl	8005d28 <UART_SetConfig>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d101      	bne.n	8005bd4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e01b      	b.n	8005c0c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005be2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0201 	orr.w	r2, r2, #1
 8005c02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fb8b 	bl	8006320 <UART_CheckIdleState>
 8005c0a:	4603      	mov	r3, r0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08a      	sub	sp, #40	; 0x28
 8005c18:	af02      	add	r7, sp, #8
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	603b      	str	r3, [r7, #0]
 8005c20:	4613      	mov	r3, r2
 8005c22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	d178      	bne.n	8005d1e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <HAL_UART_Transmit+0x24>
 8005c32:	88fb      	ldrh	r3, [r7, #6]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e071      	b.n	8005d20 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2221      	movs	r2, #33	; 0x21
 8005c48:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c4a:	f7fc f8ef 	bl	8001e2c <HAL_GetTick>
 8005c4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	88fa      	ldrh	r2, [r7, #6]
 8005c54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	88fa      	ldrh	r2, [r7, #6]
 8005c5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c68:	d108      	bne.n	8005c7c <HAL_UART_Transmit+0x68>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d104      	bne.n	8005c7c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005c72:	2300      	movs	r3, #0
 8005c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	61bb      	str	r3, [r7, #24]
 8005c7a:	e003      	b.n	8005c84 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c80:	2300      	movs	r3, #0
 8005c82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c84:	e030      	b.n	8005ce8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2180      	movs	r1, #128	; 0x80
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 fbed 	bl	8006470 <UART_WaitOnFlagUntilTimeout>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d004      	beq.n	8005ca6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e03c      	b.n	8005d20 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10b      	bne.n	8005cc4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	881a      	ldrh	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cb8:	b292      	uxth	r2, r2
 8005cba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	3302      	adds	r3, #2
 8005cc0:	61bb      	str	r3, [r7, #24]
 8005cc2:	e008      	b.n	8005cd6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	781a      	ldrb	r2, [r3, #0]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	b292      	uxth	r2, r2
 8005cce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1c8      	bne.n	8005c86 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	2140      	movs	r1, #64	; 0x40
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 fbb6 	bl	8006470 <UART_WaitOnFlagUntilTimeout>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d004      	beq.n	8005d14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e005      	b.n	8005d20 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2220      	movs	r2, #32
 8005d18:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e000      	b.n	8005d20 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005d1e:	2302      	movs	r3, #2
  }
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3720      	adds	r7, #32
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d2c:	b08a      	sub	sp, #40	; 0x28
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	431a      	orrs	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	431a      	orrs	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	4b9e      	ldr	r3, [pc, #632]	; (8005fd0 <UART_SetConfig+0x2a8>)
 8005d58:	4013      	ands	r3, r2
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	6812      	ldr	r2, [r2, #0]
 8005d5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d60:	430b      	orrs	r3, r1
 8005d62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a93      	ldr	r2, [pc, #588]	; (8005fd4 <UART_SetConfig+0x2ac>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d004      	beq.n	8005d94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d90:	4313      	orrs	r3, r2
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005da4:	430a      	orrs	r2, r1
 8005da6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a8a      	ldr	r2, [pc, #552]	; (8005fd8 <UART_SetConfig+0x2b0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d126      	bne.n	8005e00 <UART_SetConfig+0xd8>
 8005db2:	4b8a      	ldr	r3, [pc, #552]	; (8005fdc <UART_SetConfig+0x2b4>)
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db8:	f003 0303 	and.w	r3, r3, #3
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d81b      	bhi.n	8005df8 <UART_SetConfig+0xd0>
 8005dc0:	a201      	add	r2, pc, #4	; (adr r2, 8005dc8 <UART_SetConfig+0xa0>)
 8005dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc6:	bf00      	nop
 8005dc8:	08005dd9 	.word	0x08005dd9
 8005dcc:	08005de9 	.word	0x08005de9
 8005dd0:	08005de1 	.word	0x08005de1
 8005dd4:	08005df1 	.word	0x08005df1
 8005dd8:	2301      	movs	r3, #1
 8005dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dde:	e0ab      	b.n	8005f38 <UART_SetConfig+0x210>
 8005de0:	2302      	movs	r3, #2
 8005de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005de6:	e0a7      	b.n	8005f38 <UART_SetConfig+0x210>
 8005de8:	2304      	movs	r3, #4
 8005dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dee:	e0a3      	b.n	8005f38 <UART_SetConfig+0x210>
 8005df0:	2308      	movs	r3, #8
 8005df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005df6:	e09f      	b.n	8005f38 <UART_SetConfig+0x210>
 8005df8:	2310      	movs	r3, #16
 8005dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dfe:	e09b      	b.n	8005f38 <UART_SetConfig+0x210>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a76      	ldr	r2, [pc, #472]	; (8005fe0 <UART_SetConfig+0x2b8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d138      	bne.n	8005e7c <UART_SetConfig+0x154>
 8005e0a:	4b74      	ldr	r3, [pc, #464]	; (8005fdc <UART_SetConfig+0x2b4>)
 8005e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e10:	f003 030c 	and.w	r3, r3, #12
 8005e14:	2b0c      	cmp	r3, #12
 8005e16:	d82d      	bhi.n	8005e74 <UART_SetConfig+0x14c>
 8005e18:	a201      	add	r2, pc, #4	; (adr r2, 8005e20 <UART_SetConfig+0xf8>)
 8005e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1e:	bf00      	nop
 8005e20:	08005e55 	.word	0x08005e55
 8005e24:	08005e75 	.word	0x08005e75
 8005e28:	08005e75 	.word	0x08005e75
 8005e2c:	08005e75 	.word	0x08005e75
 8005e30:	08005e65 	.word	0x08005e65
 8005e34:	08005e75 	.word	0x08005e75
 8005e38:	08005e75 	.word	0x08005e75
 8005e3c:	08005e75 	.word	0x08005e75
 8005e40:	08005e5d 	.word	0x08005e5d
 8005e44:	08005e75 	.word	0x08005e75
 8005e48:	08005e75 	.word	0x08005e75
 8005e4c:	08005e75 	.word	0x08005e75
 8005e50:	08005e6d 	.word	0x08005e6d
 8005e54:	2300      	movs	r3, #0
 8005e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e5a:	e06d      	b.n	8005f38 <UART_SetConfig+0x210>
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e62:	e069      	b.n	8005f38 <UART_SetConfig+0x210>
 8005e64:	2304      	movs	r3, #4
 8005e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e6a:	e065      	b.n	8005f38 <UART_SetConfig+0x210>
 8005e6c:	2308      	movs	r3, #8
 8005e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e72:	e061      	b.n	8005f38 <UART_SetConfig+0x210>
 8005e74:	2310      	movs	r3, #16
 8005e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e7a:	e05d      	b.n	8005f38 <UART_SetConfig+0x210>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a58      	ldr	r2, [pc, #352]	; (8005fe4 <UART_SetConfig+0x2bc>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d125      	bne.n	8005ed2 <UART_SetConfig+0x1aa>
 8005e86:	4b55      	ldr	r3, [pc, #340]	; (8005fdc <UART_SetConfig+0x2b4>)
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e90:	2b30      	cmp	r3, #48	; 0x30
 8005e92:	d016      	beq.n	8005ec2 <UART_SetConfig+0x19a>
 8005e94:	2b30      	cmp	r3, #48	; 0x30
 8005e96:	d818      	bhi.n	8005eca <UART_SetConfig+0x1a2>
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	d00a      	beq.n	8005eb2 <UART_SetConfig+0x18a>
 8005e9c:	2b20      	cmp	r3, #32
 8005e9e:	d814      	bhi.n	8005eca <UART_SetConfig+0x1a2>
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <UART_SetConfig+0x182>
 8005ea4:	2b10      	cmp	r3, #16
 8005ea6:	d008      	beq.n	8005eba <UART_SetConfig+0x192>
 8005ea8:	e00f      	b.n	8005eca <UART_SetConfig+0x1a2>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eb0:	e042      	b.n	8005f38 <UART_SetConfig+0x210>
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eb8:	e03e      	b.n	8005f38 <UART_SetConfig+0x210>
 8005eba:	2304      	movs	r3, #4
 8005ebc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ec0:	e03a      	b.n	8005f38 <UART_SetConfig+0x210>
 8005ec2:	2308      	movs	r3, #8
 8005ec4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ec8:	e036      	b.n	8005f38 <UART_SetConfig+0x210>
 8005eca:	2310      	movs	r3, #16
 8005ecc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ed0:	e032      	b.n	8005f38 <UART_SetConfig+0x210>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a3f      	ldr	r2, [pc, #252]	; (8005fd4 <UART_SetConfig+0x2ac>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d12a      	bne.n	8005f32 <UART_SetConfig+0x20a>
 8005edc:	4b3f      	ldr	r3, [pc, #252]	; (8005fdc <UART_SetConfig+0x2b4>)
 8005ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ee6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005eea:	d01a      	beq.n	8005f22 <UART_SetConfig+0x1fa>
 8005eec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ef0:	d81b      	bhi.n	8005f2a <UART_SetConfig+0x202>
 8005ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ef6:	d00c      	beq.n	8005f12 <UART_SetConfig+0x1ea>
 8005ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005efc:	d815      	bhi.n	8005f2a <UART_SetConfig+0x202>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <UART_SetConfig+0x1e2>
 8005f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f06:	d008      	beq.n	8005f1a <UART_SetConfig+0x1f2>
 8005f08:	e00f      	b.n	8005f2a <UART_SetConfig+0x202>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f10:	e012      	b.n	8005f38 <UART_SetConfig+0x210>
 8005f12:	2302      	movs	r3, #2
 8005f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f18:	e00e      	b.n	8005f38 <UART_SetConfig+0x210>
 8005f1a:	2304      	movs	r3, #4
 8005f1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f20:	e00a      	b.n	8005f38 <UART_SetConfig+0x210>
 8005f22:	2308      	movs	r3, #8
 8005f24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f28:	e006      	b.n	8005f38 <UART_SetConfig+0x210>
 8005f2a:	2310      	movs	r3, #16
 8005f2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f30:	e002      	b.n	8005f38 <UART_SetConfig+0x210>
 8005f32:	2310      	movs	r3, #16
 8005f34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a25      	ldr	r2, [pc, #148]	; (8005fd4 <UART_SetConfig+0x2ac>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	f040 808a 	bne.w	8006058 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d824      	bhi.n	8005f96 <UART_SetConfig+0x26e>
 8005f4c:	a201      	add	r2, pc, #4	; (adr r2, 8005f54 <UART_SetConfig+0x22c>)
 8005f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f52:	bf00      	nop
 8005f54:	08005f79 	.word	0x08005f79
 8005f58:	08005f97 	.word	0x08005f97
 8005f5c:	08005f81 	.word	0x08005f81
 8005f60:	08005f97 	.word	0x08005f97
 8005f64:	08005f87 	.word	0x08005f87
 8005f68:	08005f97 	.word	0x08005f97
 8005f6c:	08005f97 	.word	0x08005f97
 8005f70:	08005f97 	.word	0x08005f97
 8005f74:	08005f8f 	.word	0x08005f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f78:	f7fd f940 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8005f7c:	61f8      	str	r0, [r7, #28]
        break;
 8005f7e:	e010      	b.n	8005fa2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f80:	4b19      	ldr	r3, [pc, #100]	; (8005fe8 <UART_SetConfig+0x2c0>)
 8005f82:	61fb      	str	r3, [r7, #28]
        break;
 8005f84:	e00d      	b.n	8005fa2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f86:	f7fd f8a3 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 8005f8a:	61f8      	str	r0, [r7, #28]
        break;
 8005f8c:	e009      	b.n	8005fa2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f92:	61fb      	str	r3, [r7, #28]
        break;
 8005f94:	e005      	b.n	8005fa2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005fa0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 8109 	beq.w	80061bc <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	005b      	lsls	r3, r3, #1
 8005fb2:	4413      	add	r3, r2
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d305      	bcc.n	8005fc6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d912      	bls.n	8005fec <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005fcc:	e0f6      	b.n	80061bc <UART_SetConfig+0x494>
 8005fce:	bf00      	nop
 8005fd0:	efff69f3 	.word	0xefff69f3
 8005fd4:	40008000 	.word	0x40008000
 8005fd8:	40013800 	.word	0x40013800
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	40004400 	.word	0x40004400
 8005fe4:	40004800 	.word	0x40004800
 8005fe8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	461c      	mov	r4, r3
 8005ff2:	4615      	mov	r5, r2
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	f04f 0300 	mov.w	r3, #0
 8005ffc:	022b      	lsls	r3, r5, #8
 8005ffe:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006002:	0222      	lsls	r2, r4, #8
 8006004:	68f9      	ldr	r1, [r7, #12]
 8006006:	6849      	ldr	r1, [r1, #4]
 8006008:	0849      	lsrs	r1, r1, #1
 800600a:	2000      	movs	r0, #0
 800600c:	4688      	mov	r8, r1
 800600e:	4681      	mov	r9, r0
 8006010:	eb12 0a08 	adds.w	sl, r2, r8
 8006014:	eb43 0b09 	adc.w	fp, r3, r9
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	603b      	str	r3, [r7, #0]
 8006020:	607a      	str	r2, [r7, #4]
 8006022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006026:	4650      	mov	r0, sl
 8006028:	4659      	mov	r1, fp
 800602a:	f7fa fe0d 	bl	8000c48 <__aeabi_uldivmod>
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	4613      	mov	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800603c:	d308      	bcc.n	8006050 <UART_SetConfig+0x328>
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006044:	d204      	bcs.n	8006050 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	60da      	str	r2, [r3, #12]
 800604e:	e0b5      	b.n	80061bc <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006056:	e0b1      	b.n	80061bc <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	69db      	ldr	r3, [r3, #28]
 800605c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006060:	d15d      	bne.n	800611e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006062:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006066:	2b08      	cmp	r3, #8
 8006068:	d827      	bhi.n	80060ba <UART_SetConfig+0x392>
 800606a:	a201      	add	r2, pc, #4	; (adr r2, 8006070 <UART_SetConfig+0x348>)
 800606c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006070:	08006095 	.word	0x08006095
 8006074:	0800609d 	.word	0x0800609d
 8006078:	080060a5 	.word	0x080060a5
 800607c:	080060bb 	.word	0x080060bb
 8006080:	080060ab 	.word	0x080060ab
 8006084:	080060bb 	.word	0x080060bb
 8006088:	080060bb 	.word	0x080060bb
 800608c:	080060bb 	.word	0x080060bb
 8006090:	080060b3 	.word	0x080060b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006094:	f7fd f8b2 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8006098:	61f8      	str	r0, [r7, #28]
        break;
 800609a:	e014      	b.n	80060c6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800609c:	f7fd f8c4 	bl	8003228 <HAL_RCC_GetPCLK2Freq>
 80060a0:	61f8      	str	r0, [r7, #28]
        break;
 80060a2:	e010      	b.n	80060c6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060a4:	4b4c      	ldr	r3, [pc, #304]	; (80061d8 <UART_SetConfig+0x4b0>)
 80060a6:	61fb      	str	r3, [r7, #28]
        break;
 80060a8:	e00d      	b.n	80060c6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060aa:	f7fd f811 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 80060ae:	61f8      	str	r0, [r7, #28]
        break;
 80060b0:	e009      	b.n	80060c6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060b6:	61fb      	str	r3, [r7, #28]
        break;
 80060b8:	e005      	b.n	80060c6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80060c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d077      	beq.n	80061bc <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	005a      	lsls	r2, r3, #1
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	085b      	lsrs	r3, r3, #1
 80060d6:	441a      	add	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	2b0f      	cmp	r3, #15
 80060e6:	d916      	bls.n	8006116 <UART_SetConfig+0x3ee>
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ee:	d212      	bcs.n	8006116 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	f023 030f 	bic.w	r3, r3, #15
 80060f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	085b      	lsrs	r3, r3, #1
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f003 0307 	and.w	r3, r3, #7
 8006104:	b29a      	uxth	r2, r3
 8006106:	8afb      	ldrh	r3, [r7, #22]
 8006108:	4313      	orrs	r3, r2
 800610a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	8afa      	ldrh	r2, [r7, #22]
 8006112:	60da      	str	r2, [r3, #12]
 8006114:	e052      	b.n	80061bc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800611c:	e04e      	b.n	80061bc <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800611e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006122:	2b08      	cmp	r3, #8
 8006124:	d827      	bhi.n	8006176 <UART_SetConfig+0x44e>
 8006126:	a201      	add	r2, pc, #4	; (adr r2, 800612c <UART_SetConfig+0x404>)
 8006128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612c:	08006151 	.word	0x08006151
 8006130:	08006159 	.word	0x08006159
 8006134:	08006161 	.word	0x08006161
 8006138:	08006177 	.word	0x08006177
 800613c:	08006167 	.word	0x08006167
 8006140:	08006177 	.word	0x08006177
 8006144:	08006177 	.word	0x08006177
 8006148:	08006177 	.word	0x08006177
 800614c:	0800616f 	.word	0x0800616f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006150:	f7fd f854 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8006154:	61f8      	str	r0, [r7, #28]
        break;
 8006156:	e014      	b.n	8006182 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006158:	f7fd f866 	bl	8003228 <HAL_RCC_GetPCLK2Freq>
 800615c:	61f8      	str	r0, [r7, #28]
        break;
 800615e:	e010      	b.n	8006182 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006160:	4b1d      	ldr	r3, [pc, #116]	; (80061d8 <UART_SetConfig+0x4b0>)
 8006162:	61fb      	str	r3, [r7, #28]
        break;
 8006164:	e00d      	b.n	8006182 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006166:	f7fc ffb3 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 800616a:	61f8      	str	r0, [r7, #28]
        break;
 800616c:	e009      	b.n	8006182 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800616e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006172:	61fb      	str	r3, [r7, #28]
        break;
 8006174:	e005      	b.n	8006182 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006180:	bf00      	nop
    }

    if (pclk != 0U)
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d019      	beq.n	80061bc <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	085a      	lsrs	r2, r3, #1
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	441a      	add	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	fbb2 f3f3 	udiv	r3, r2, r3
 800619a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	2b0f      	cmp	r3, #15
 80061a0:	d909      	bls.n	80061b6 <UART_SetConfig+0x48e>
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061a8:	d205      	bcs.n	80061b6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	60da      	str	r2, [r3, #12]
 80061b4:	e002      	b.n	80061bc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80061c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3728      	adds	r7, #40	; 0x28
 80061d0:	46bd      	mov	sp, r7
 80061d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061d6:	bf00      	nop
 80061d8:	00f42400 	.word	0x00f42400

080061dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e8:	f003 0308 	and.w	r3, r3, #8
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00a      	beq.n	8006206 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00a      	beq.n	8006228 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	f003 0302 	and.w	r3, r3, #2
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00a      	beq.n	800624a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	f003 0304 	and.w	r3, r3, #4
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006270:	f003 0310 	and.w	r3, r3, #16
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00a      	beq.n	800628e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006292:	f003 0320 	and.w	r3, r3, #32
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00a      	beq.n	80062b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d01a      	beq.n	80062f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062da:	d10a      	bne.n	80062f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00a      	beq.n	8006314 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	605a      	str	r2, [r3, #4]
  }
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b098      	sub	sp, #96	; 0x60
 8006324:	af02      	add	r7, sp, #8
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006330:	f7fb fd7c 	bl	8001e2c <HAL_GetTick>
 8006334:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b08      	cmp	r3, #8
 8006342:	d12e      	bne.n	80063a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006344:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800634c:	2200      	movs	r2, #0
 800634e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f88c 	bl	8006470 <UART_WaitOnFlagUntilTimeout>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d021      	beq.n	80063a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	e853 3f00 	ldrex	r3, [r3]
 800636a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800636c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006372:	653b      	str	r3, [r7, #80]	; 0x50
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	461a      	mov	r2, r3
 800637a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800637c:	647b      	str	r3, [r7, #68]	; 0x44
 800637e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006380:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006382:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006384:	e841 2300 	strex	r3, r2, [r1]
 8006388:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800638a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e6      	bne.n	800635e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2220      	movs	r2, #32
 8006394:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e062      	b.n	8006468 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	d149      	bne.n	8006444 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063b8:	2200      	movs	r2, #0
 80063ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f856 	bl	8006470 <UART_WaitOnFlagUntilTimeout>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d03c      	beq.n	8006444 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	623b      	str	r3, [r7, #32]
   return(result);
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063e8:	633b      	str	r3, [r7, #48]	; 0x30
 80063ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f0:	e841 2300 	strex	r3, r2, [r1]
 80063f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e6      	bne.n	80063ca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3308      	adds	r3, #8
 8006402:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	e853 3f00 	ldrex	r3, [r3]
 800640a:	60fb      	str	r3, [r7, #12]
   return(result);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0301 	bic.w	r3, r3, #1
 8006412:	64bb      	str	r3, [r7, #72]	; 0x48
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3308      	adds	r3, #8
 800641a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800641c:	61fa      	str	r2, [r7, #28]
 800641e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	69b9      	ldr	r1, [r7, #24]
 8006422:	69fa      	ldr	r2, [r7, #28]
 8006424:	e841 2300 	strex	r3, r2, [r1]
 8006428:	617b      	str	r3, [r7, #20]
   return(result);
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e5      	bne.n	80063fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2220      	movs	r2, #32
 8006434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e011      	b.n	8006468 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2220      	movs	r2, #32
 8006448:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2220      	movs	r2, #32
 800644e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3758      	adds	r7, #88	; 0x58
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	603b      	str	r3, [r7, #0]
 800647c:	4613      	mov	r3, r2
 800647e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006480:	e049      	b.n	8006516 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006488:	d045      	beq.n	8006516 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800648a:	f7fb fccf 	bl	8001e2c <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	429a      	cmp	r2, r3
 8006498:	d302      	bcc.n	80064a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e048      	b.n	8006536 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0304 	and.w	r3, r3, #4
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d031      	beq.n	8006516 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	f003 0308 	and.w	r3, r3, #8
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d110      	bne.n	80064e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2208      	movs	r2, #8
 80064c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 f838 	bl	800653e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2208      	movs	r2, #8
 80064d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e029      	b.n	8006536 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064f0:	d111      	bne.n	8006516 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 f81e 	bl	800653e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2220      	movs	r2, #32
 8006506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e00f      	b.n	8006536 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69da      	ldr	r2, [r3, #28]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	4013      	ands	r3, r2
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	429a      	cmp	r2, r3
 8006524:	bf0c      	ite	eq
 8006526:	2301      	moveq	r3, #1
 8006528:	2300      	movne	r3, #0
 800652a:	b2db      	uxtb	r3, r3
 800652c:	461a      	mov	r2, r3
 800652e:	79fb      	ldrb	r3, [r7, #7]
 8006530:	429a      	cmp	r2, r3
 8006532:	d0a6      	beq.n	8006482 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800653e:	b480      	push	{r7}
 8006540:	b095      	sub	sp, #84	; 0x54
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654e:	e853 3f00 	ldrex	r3, [r3]
 8006552:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800655a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	461a      	mov	r2, r3
 8006562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006564:	643b      	str	r3, [r7, #64]	; 0x40
 8006566:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006568:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800656a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800656c:	e841 2300 	strex	r3, r2, [r1]
 8006570:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1e6      	bne.n	8006546 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3308      	adds	r3, #8
 800657e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	61fb      	str	r3, [r7, #28]
   return(result);
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	f023 0301 	bic.w	r3, r3, #1
 800658e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3308      	adds	r3, #8
 8006596:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006598:	62fa      	str	r2, [r7, #44]	; 0x2c
 800659a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800659e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065a0:	e841 2300 	strex	r3, r2, [r1]
 80065a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e5      	bne.n	8006578 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d118      	bne.n	80065e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	e853 3f00 	ldrex	r3, [r3]
 80065c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	f023 0310 	bic.w	r3, r3, #16
 80065c8:	647b      	str	r3, [r7, #68]	; 0x44
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	461a      	mov	r2, r3
 80065d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065d2:	61bb      	str	r3, [r7, #24]
 80065d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d6:	6979      	ldr	r1, [r7, #20]
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	613b      	str	r3, [r7, #16]
   return(result);
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e6      	bne.n	80065b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2220      	movs	r2, #32
 80065ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80065fa:	bf00      	nop
 80065fc:	3754      	adds	r7, #84	; 0x54
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006606:	b084      	sub	sp, #16
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	f107 001c 	add.w	r0, r7, #28
 8006614:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006618:	2300      	movs	r3, #0
 800661a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8006624:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8006628:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800662c:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800662e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006630:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006634:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	4313      	orrs	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006644:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	431a      	orrs	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	b004      	add	sp, #16
 800665e:	4770      	bx	lr

08006660 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800666e:	4618      	mov	r0, r3
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800667a:	b480      	push	{r7}
 800667c:	b083      	sub	sp, #12
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2203      	movs	r2, #3
 80066a8:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80066aa:	2002      	movs	r0, #2
 80066ac:	f7fb fbca 	bl	8001e44 <HAL_Delay>

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0303 	and.w	r3, r3, #3
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b085      	sub	sp, #20
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80066e0:	2300      	movs	r3, #0
 80066e2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80066f4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80066fa:	431a      	orrs	r2, r3
                       Command->CPSM);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006700:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	4313      	orrs	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006710:	f023 030f 	bic.w	r3, r3, #15
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	b2db      	uxtb	r3, r3
}
 8006738:	4618      	mov	r0, r3
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	3314      	adds	r3, #20
 8006752:	461a      	mov	r2, r3
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	4413      	add	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800676a:	b480      	push	{r7}
 800676c:	b085      	sub	sp, #20
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006774:	2300      	movs	r3, #0
 8006776:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006790:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006796:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800679c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	431a      	orrs	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0

}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b088      	sub	sp, #32
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80067d0:	2310      	movs	r3, #16
 80067d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80067d4:	2340      	movs	r3, #64	; 0x40
 80067d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80067d8:	2300      	movs	r3, #0
 80067da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80067dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80067e2:	f107 0308 	add.w	r3, r7, #8
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7ff ff74 	bl	80066d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80067ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f2:	2110      	movs	r1, #16
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f9d7 	bl	8006ba8 <SDMMC_GetCmdResp1>
 80067fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067fc:	69fb      	ldr	r3, [r7, #28]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3720      	adds	r7, #32
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b088      	sub	sp, #32
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006814:	2311      	movs	r3, #17
 8006816:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006818:	2340      	movs	r3, #64	; 0x40
 800681a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800681c:	2300      	movs	r3, #0
 800681e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006824:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006826:	f107 0308 	add.w	r3, r7, #8
 800682a:	4619      	mov	r1, r3
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7ff ff52 	bl	80066d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006832:	f241 3288 	movw	r2, #5000	; 0x1388
 8006836:	2111      	movs	r1, #17
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f9b5 	bl	8006ba8 <SDMMC_GetCmdResp1>
 800683e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006840:	69fb      	ldr	r3, [r7, #28]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3720      	adds	r7, #32
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b088      	sub	sp, #32
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006858:	2312      	movs	r3, #18
 800685a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800685c:	2340      	movs	r3, #64	; 0x40
 800685e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006860:	2300      	movs	r3, #0
 8006862:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006868:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800686a:	f107 0308 	add.w	r3, r7, #8
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7ff ff30 	bl	80066d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006876:	f241 3288 	movw	r2, #5000	; 0x1388
 800687a:	2112      	movs	r1, #18
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f993 	bl	8006ba8 <SDMMC_GetCmdResp1>
 8006882:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006884:	69fb      	ldr	r3, [r7, #28]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3720      	adds	r7, #32
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b088      	sub	sp, #32
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800689c:	2318      	movs	r3, #24
 800689e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80068a0:	2340      	movs	r3, #64	; 0x40
 80068a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80068a4:	2300      	movs	r3, #0
 80068a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80068a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068ae:	f107 0308 	add.w	r3, r7, #8
 80068b2:	4619      	mov	r1, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7ff ff0e 	bl	80066d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80068ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80068be:	2118      	movs	r1, #24
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f971 	bl	8006ba8 <SDMMC_GetCmdResp1>
 80068c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068c8:	69fb      	ldr	r3, [r7, #28]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3720      	adds	r7, #32
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b088      	sub	sp, #32
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80068e0:	2319      	movs	r3, #25
 80068e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80068e4:	2340      	movs	r3, #64	; 0x40
 80068e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80068e8:	2300      	movs	r3, #0
 80068ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80068ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068f2:	f107 0308 	add.w	r3, r7, #8
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7ff feec 	bl	80066d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80068fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006902:	2119      	movs	r1, #25
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f94f 	bl	8006ba8 <SDMMC_GetCmdResp1>
 800690a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800690c:	69fb      	ldr	r3, [r7, #28]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3720      	adds	r7, #32
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
	...

08006918 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006924:	230c      	movs	r3, #12
 8006926:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006928:	2340      	movs	r3, #64	; 0x40
 800692a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800692c:	2300      	movs	r3, #0
 800692e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006934:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006936:	f107 0308 	add.w	r3, r7, #8
 800693a:	4619      	mov	r1, r3
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7ff feca 	bl	80066d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8006942:	4a05      	ldr	r2, [pc, #20]	; (8006958 <SDMMC_CmdStopTransfer+0x40>)
 8006944:	210c      	movs	r1, #12
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f92e 	bl	8006ba8 <SDMMC_GetCmdResp1>
 800694c:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800694e:	69fb      	ldr	r3, [r7, #28]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3720      	adds	r7, #32
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	05f5e100 	.word	0x05f5e100

0800695c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b08a      	sub	sp, #40	; 0x28
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800696c:	2307      	movs	r3, #7
 800696e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006970:	2340      	movs	r3, #64	; 0x40
 8006972:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006974:	2300      	movs	r3, #0
 8006976:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800697c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800697e:	f107 0310 	add.w	r3, r7, #16
 8006982:	4619      	mov	r1, r3
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f7ff fea6 	bl	80066d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800698a:	f241 3288 	movw	r2, #5000	; 0x1388
 800698e:	2107      	movs	r1, #7
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f000 f909 	bl	8006ba8 <SDMMC_GetCmdResp1>
 8006996:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800699a:	4618      	mov	r0, r3
 800699c:	3728      	adds	r7, #40	; 0x28
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b088      	sub	sp, #32
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80069ae:	2300      	movs	r3, #0
 80069b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80069b2:	2300      	movs	r3, #0
 80069b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80069b6:	2300      	movs	r3, #0
 80069b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80069ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80069c0:	f107 0308 	add.w	r3, r7, #8
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7ff fe85 	bl	80066d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fb23 	bl	8007018 <SDMMC_GetCmdError>
 80069d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069d4:	69fb      	ldr	r3, [r7, #28]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3720      	adds	r7, #32
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b088      	sub	sp, #32
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80069e6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80069ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80069ec:	2308      	movs	r3, #8
 80069ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80069f0:	2340      	movs	r3, #64	; 0x40
 80069f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80069f4:	2300      	movs	r3, #0
 80069f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80069f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80069fe:	f107 0308 	add.w	r3, r7, #8
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7ff fe66 	bl	80066d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fab6 	bl	8006f7c <SDMMC_GetCmdResp7>
 8006a10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a12:	69fb      	ldr	r3, [r7, #28]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3720      	adds	r7, #32
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b088      	sub	sp, #32
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006a2a:	2337      	movs	r3, #55	; 0x37
 8006a2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a2e:	2340      	movs	r3, #64	; 0x40
 8006a30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a32:	2300      	movs	r3, #0
 8006a34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a3c:	f107 0308 	add.w	r3, r7, #8
 8006a40:	4619      	mov	r1, r3
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7ff fe47 	bl	80066d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a4c:	2137      	movs	r1, #55	; 0x37
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f8aa 	bl	8006ba8 <SDMMC_GetCmdResp1>
 8006a54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a56:	69fb      	ldr	r3, [r7, #28]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3720      	adds	r7, #32
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a74:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006a76:	2329      	movs	r3, #41	; 0x29
 8006a78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a7a:	2340      	movs	r3, #64	; 0x40
 8006a7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a88:	f107 0308 	add.w	r3, r7, #8
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7ff fe21 	bl	80066d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f9bd 	bl	8006e14 <SDMMC_GetCmdResp3>
 8006a9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a9c:	69fb      	ldr	r3, [r7, #28]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3720      	adds	r7, #32
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b088      	sub	sp, #32
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006ab6:	23c0      	movs	r3, #192	; 0xc0
 8006ab8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006aba:	2300      	movs	r3, #0
 8006abc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ac2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ac4:	f107 0308 	add.w	r3, r7, #8
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7ff fe03 	bl	80066d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f957 	bl	8006d84 <SDMMC_GetCmdResp2>
 8006ad6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ad8:	69fb      	ldr	r3, [r7, #28]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3720      	adds	r7, #32
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b088      	sub	sp, #32
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006af0:	2309      	movs	r3, #9
 8006af2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006af4:	23c0      	movs	r3, #192	; 0xc0
 8006af6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006af8:	2300      	movs	r3, #0
 8006afa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b02:	f107 0308 	add.w	r3, r7, #8
 8006b06:	4619      	mov	r1, r3
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7ff fde4 	bl	80066d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f938 	bl	8006d84 <SDMMC_GetCmdResp2>
 8006b14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b16:	69fb      	ldr	r3, [r7, #28]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3720      	adds	r7, #32
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b32:	2340      	movs	r3, #64	; 0x40
 8006b34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b36:	2300      	movs	r3, #0
 8006b38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b40:	f107 0308 	add.w	r3, r7, #8
 8006b44:	4619      	mov	r1, r3
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff fdc5 	bl	80066d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006b4c:	683a      	ldr	r2, [r7, #0]
 8006b4e:	2103      	movs	r1, #3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f99d 	bl	8006e90 <SDMMC_GetCmdResp6>
 8006b56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b58:	69fb      	ldr	r3, [r7, #28]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3720      	adds	r7, #32
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b088      	sub	sp, #32
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006b70:	230d      	movs	r3, #13
 8006b72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b74:	2340      	movs	r3, #64	; 0x40
 8006b76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b82:	f107 0308 	add.w	r3, r7, #8
 8006b86:	4619      	mov	r1, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7ff fda4 	bl	80066d6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b92:	210d      	movs	r1, #13
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f807 	bl	8006ba8 <SDMMC_GetCmdResp1>
 8006b9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b9c:	69fb      	ldr	r3, [r7, #28]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3720      	adds	r7, #32
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
	...

08006ba8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b088      	sub	sp, #32
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006bb6:	4b70      	ldr	r3, [pc, #448]	; (8006d78 <SDMMC_GetCmdResp1+0x1d0>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a70      	ldr	r2, [pc, #448]	; (8006d7c <SDMMC_GetCmdResp1+0x1d4>)
 8006bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc0:	0a5a      	lsrs	r2, r3, #9
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	fb02 f303 	mul.w	r3, r2, r3
 8006bc8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	1e5a      	subs	r2, r3, #1
 8006bce:	61fa      	str	r2, [r7, #28]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d102      	bne.n	8006bda <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006bd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006bd8:	e0c9      	b.n	8006d6e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bde:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d0ef      	beq.n	8006bca <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1ea      	bne.n	8006bca <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d004      	beq.n	8006c0a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2204      	movs	r2, #4
 8006c04:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006c06:	2304      	movs	r3, #4
 8006c08:	e0b1      	b.n	8006d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d004      	beq.n	8006c20 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e0a6      	b.n	8006d6e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	22c5      	movs	r2, #197	; 0xc5
 8006c24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f7ff fd7f 	bl	800672a <SDMMC_GetCommandResponse>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	461a      	mov	r2, r3
 8006c30:	7afb      	ldrb	r3, [r7, #11]
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d001      	beq.n	8006c3a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e099      	b.n	8006d6e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f7ff fd81 	bl	8006744 <SDMMC_GetResponse>
 8006c42:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	4b4e      	ldr	r3, [pc, #312]	; (8006d80 <SDMMC_GetCmdResp1+0x1d8>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e08d      	b.n	8006d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	da02      	bge.n	8006c5e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006c58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c5c:	e087      	b.n	8006d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006c68:	2340      	movs	r3, #64	; 0x40
 8006c6a:	e080      	b.n	8006d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006c76:	2380      	movs	r3, #128	; 0x80
 8006c78:	e079      	b.n	8006d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006c84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c88:	e071      	b.n	8006d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c98:	e069      	b.n	8006d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d002      	beq.n	8006caa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ca8:	e061      	b.n	8006d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006cb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006cb8:	e059      	b.n	8006d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cc8:	e051      	b.n	8006d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006cd8:	e049      	b.n	8006d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006ce4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ce8:	e041      	b.n	8006d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006cf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cf8:	e039      	b.n	8006d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006d04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d08:	e031      	b.n	8006d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006d14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006d18:	e029      	b.n	8006d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006d24:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006d28:	e021      	b.n	8006d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006d34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006d38:	e019      	b.n	8006d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006d44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006d48:	e011      	b.n	8006d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006d54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006d58:	e009      	b.n	8006d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f003 0308 	and.w	r3, r3, #8
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006d64:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006d68:	e001      	b.n	8006d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006d6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3720      	adds	r7, #32
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20000004 	.word	0x20000004
 8006d7c:	10624dd3 	.word	0x10624dd3
 8006d80:	fdffe008 	.word	0xfdffe008

08006d84 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d8c:	4b1f      	ldr	r3, [pc, #124]	; (8006e0c <SDMMC_GetCmdResp2+0x88>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a1f      	ldr	r2, [pc, #124]	; (8006e10 <SDMMC_GetCmdResp2+0x8c>)
 8006d92:	fba2 2303 	umull	r2, r3, r2, r3
 8006d96:	0a5b      	lsrs	r3, r3, #9
 8006d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d9c:	fb02 f303 	mul.w	r3, r2, r3
 8006da0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	1e5a      	subs	r2, r3, #1
 8006da6:	60fa      	str	r2, [r7, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d102      	bne.n	8006db2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006dac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006db0:	e026      	b.n	8006e00 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d0ef      	beq.n	8006da2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1ea      	bne.n	8006da2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d004      	beq.n	8006de2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2204      	movs	r2, #4
 8006ddc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006dde:	2304      	movs	r3, #4
 8006de0:	e00e      	b.n	8006e00 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d004      	beq.n	8006df8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e003      	b.n	8006e00 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	22c5      	movs	r2, #197	; 0xc5
 8006dfc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	20000004 	.word	0x20000004
 8006e10:	10624dd3 	.word	0x10624dd3

08006e14 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e1c:	4b1a      	ldr	r3, [pc, #104]	; (8006e88 <SDMMC_GetCmdResp3+0x74>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a1a      	ldr	r2, [pc, #104]	; (8006e8c <SDMMC_GetCmdResp3+0x78>)
 8006e22:	fba2 2303 	umull	r2, r3, r2, r3
 8006e26:	0a5b      	lsrs	r3, r3, #9
 8006e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e2c:	fb02 f303 	mul.w	r3, r2, r3
 8006e30:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	1e5a      	subs	r2, r3, #1
 8006e36:	60fa      	str	r2, [r7, #12]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d102      	bne.n	8006e42 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e40:	e01b      	b.n	8006e7a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e46:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d0ef      	beq.n	8006e32 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1ea      	bne.n	8006e32 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d004      	beq.n	8006e72 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2204      	movs	r2, #4
 8006e6c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006e6e:	2304      	movs	r3, #4
 8006e70:	e003      	b.n	8006e7a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	22c5      	movs	r2, #197	; 0xc5
 8006e76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3714      	adds	r7, #20
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	20000004 	.word	0x20000004
 8006e8c:	10624dd3 	.word	0x10624dd3

08006e90 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b088      	sub	sp, #32
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	607a      	str	r2, [r7, #4]
 8006e9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e9e:	4b35      	ldr	r3, [pc, #212]	; (8006f74 <SDMMC_GetCmdResp6+0xe4>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a35      	ldr	r2, [pc, #212]	; (8006f78 <SDMMC_GetCmdResp6+0xe8>)
 8006ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea8:	0a5b      	lsrs	r3, r3, #9
 8006eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eae:	fb02 f303 	mul.w	r3, r2, r3
 8006eb2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	1e5a      	subs	r2, r3, #1
 8006eb8:	61fa      	str	r2, [r7, #28]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d102      	bne.n	8006ec4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ebe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ec2:	e052      	b.n	8006f6a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0ef      	beq.n	8006eb4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1ea      	bne.n	8006eb4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee2:	f003 0304 	and.w	r3, r3, #4
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d004      	beq.n	8006ef4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2204      	movs	r2, #4
 8006eee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ef0:	2304      	movs	r3, #4
 8006ef2:	e03a      	b.n	8006f6a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d004      	beq.n	8006f0a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2201      	movs	r2, #1
 8006f04:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e02f      	b.n	8006f6a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f7ff fc0d 	bl	800672a <SDMMC_GetCommandResponse>
 8006f10:	4603      	mov	r3, r0
 8006f12:	461a      	mov	r2, r3
 8006f14:	7afb      	ldrb	r3, [r7, #11]
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d001      	beq.n	8006f1e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e025      	b.n	8006f6a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	22c5      	movs	r2, #197	; 0xc5
 8006f22:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006f24:	2100      	movs	r1, #0
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f7ff fc0c 	bl	8006744 <SDMMC_GetResponse>
 8006f2c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d106      	bne.n	8006f46 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	0c1b      	lsrs	r3, r3, #16
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8006f42:	2300      	movs	r3, #0
 8006f44:	e011      	b.n	8006f6a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006f50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f54:	e009      	b.n	8006f6a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d002      	beq.n	8006f66 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f64:	e001      	b.n	8006f6a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006f66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3720      	adds	r7, #32
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	20000004 	.word	0x20000004
 8006f78:	10624dd3 	.word	0x10624dd3

08006f7c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f84:	4b22      	ldr	r3, [pc, #136]	; (8007010 <SDMMC_GetCmdResp7+0x94>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a22      	ldr	r2, [pc, #136]	; (8007014 <SDMMC_GetCmdResp7+0x98>)
 8006f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f8e:	0a5b      	lsrs	r3, r3, #9
 8006f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f94:	fb02 f303 	mul.w	r3, r2, r3
 8006f98:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	1e5a      	subs	r2, r3, #1
 8006f9e:	60fa      	str	r2, [r7, #12]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d102      	bne.n	8006faa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006fa4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006fa8:	e02c      	b.n	8007004 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d0ef      	beq.n	8006f9a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1ea      	bne.n	8006f9a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc8:	f003 0304 	and.w	r3, r3, #4
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d004      	beq.n	8006fda <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2204      	movs	r2, #4
 8006fd4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006fd6:	2304      	movs	r3, #4
 8006fd8:	e014      	b.n	8007004 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d004      	beq.n	8006ff0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e009      	b.n	8007004 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d002      	beq.n	8007002 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2240      	movs	r2, #64	; 0x40
 8007000:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007002:	2300      	movs	r3, #0

}
 8007004:	4618      	mov	r0, r3
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	20000004 	.word	0x20000004
 8007014:	10624dd3 	.word	0x10624dd3

08007018 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007020:	4b11      	ldr	r3, [pc, #68]	; (8007068 <SDMMC_GetCmdError+0x50>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a11      	ldr	r2, [pc, #68]	; (800706c <SDMMC_GetCmdError+0x54>)
 8007026:	fba2 2303 	umull	r2, r3, r2, r3
 800702a:	0a5b      	lsrs	r3, r3, #9
 800702c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007030:	fb02 f303 	mul.w	r3, r2, r3
 8007034:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	1e5a      	subs	r2, r3, #1
 800703a:	60fa      	str	r2, [r7, #12]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d102      	bne.n	8007046 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007040:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007044:	e009      	b.n	800705a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800704a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800704e:	2b00      	cmp	r3, #0
 8007050:	d0f1      	beq.n	8007036 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	22c5      	movs	r2, #197	; 0xc5
 8007056:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	20000004 	.word	0x20000004
 800706c:	10624dd3 	.word	0x10624dd3

08007070 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007074:	4904      	ldr	r1, [pc, #16]	; (8007088 <MX_FATFS_Init+0x18>)
 8007076:	4805      	ldr	r0, [pc, #20]	; (800708c <MX_FATFS_Init+0x1c>)
 8007078:	f000 f9bc 	bl	80073f4 <FATFS_LinkDriver>
 800707c:	4603      	mov	r3, r0
 800707e:	461a      	mov	r2, r3
 8007080:	4b03      	ldr	r3, [pc, #12]	; (8007090 <MX_FATFS_Init+0x20>)
 8007082:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007084:	bf00      	nop
 8007086:	bd80      	pop	{r7, pc}
 8007088:	200003c4 	.word	0x200003c4
 800708c:	0800a940 	.word	0x0800a940
 8007090:	200003c0 	.word	0x200003c0

08007094 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800709e:	f000 f86b 	bl	8007178 <BSP_SD_IsDetected>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d001      	beq.n	80070ac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80070a8:	2302      	movs	r3, #2
 80070aa:	e005      	b.n	80070b8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80070ac:	4804      	ldr	r0, [pc, #16]	; (80070c0 <BSP_SD_Init+0x2c>)
 80070ae:	f7fd f98b 	bl	80043c8 <HAL_SD_Init>
 80070b2:	4603      	mov	r3, r0
 80070b4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80070b6:	79fb      	ldrb	r3, [r7, #7]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	200002d0 	.word	0x200002d0

080070c4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af02      	add	r7, sp, #8
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
 80070d0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	68f9      	ldr	r1, [r7, #12]
 80070e0:	4806      	ldr	r0, [pc, #24]	; (80070fc <BSP_SD_ReadBlocks+0x38>)
 80070e2:	f7fd fa47 	bl	8004574 <HAL_SD_ReadBlocks>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	200002d0 	.word	0x200002d0

08007100 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b088      	sub	sp, #32
 8007104:	af02      	add	r7, sp, #8
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
 800710c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	68f9      	ldr	r1, [r7, #12]
 800711c:	4806      	ldr	r0, [pc, #24]	; (8007138 <BSP_SD_WriteBlocks+0x38>)
 800711e:	f7fd fc07 	bl	8004930 <HAL_SD_WriteBlocks>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d001      	beq.n	800712c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800712c:	7dfb      	ldrb	r3, [r7, #23]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	200002d0 	.word	0x200002d0

0800713c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007140:	4805      	ldr	r0, [pc, #20]	; (8007158 <BSP_SD_GetCardState+0x1c>)
 8007142:	f7fd ff4b 	bl	8004fdc <HAL_SD_GetCardState>
 8007146:	4603      	mov	r3, r0
 8007148:	2b04      	cmp	r3, #4
 800714a:	bf14      	ite	ne
 800714c:	2301      	movne	r3, #1
 800714e:	2300      	moveq	r3, #0
 8007150:	b2db      	uxtb	r3, r3
}
 8007152:	4618      	mov	r0, r3
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	200002d0 	.word	0x200002d0

0800715c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007164:	6879      	ldr	r1, [r7, #4]
 8007166:	4803      	ldr	r0, [pc, #12]	; (8007174 <BSP_SD_GetCardInfo+0x18>)
 8007168:	f7fd ff0c 	bl	8004f84 <HAL_SD_GetCardInfo>
}
 800716c:	bf00      	nop
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	200002d0 	.word	0x200002d0

08007178 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800717e:	2301      	movs	r3, #1
 8007180:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8007182:	79fb      	ldrb	r3, [r7, #7]
 8007184:	b2db      	uxtb	r3, r3
}
 8007186:	4618      	mov	r0, r3
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
	...

08007194 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	4603      	mov	r3, r0
 800719c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800719e:	4b0b      	ldr	r3, [pc, #44]	; (80071cc <SD_CheckStatus+0x38>)
 80071a0:	2201      	movs	r2, #1
 80071a2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80071a4:	f7ff ffca 	bl	800713c <BSP_SD_GetCardState>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d107      	bne.n	80071be <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80071ae:	4b07      	ldr	r3, [pc, #28]	; (80071cc <SD_CheckStatus+0x38>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	f023 0301 	bic.w	r3, r3, #1
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	4b04      	ldr	r3, [pc, #16]	; (80071cc <SD_CheckStatus+0x38>)
 80071bc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80071be:	4b03      	ldr	r3, [pc, #12]	; (80071cc <SD_CheckStatus+0x38>)
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	b2db      	uxtb	r3, r3
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	2000000d 	.word	0x2000000d

080071d0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	4603      	mov	r3, r0
 80071d8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80071da:	4b0b      	ldr	r3, [pc, #44]	; (8007208 <SD_initialize+0x38>)
 80071dc:	2201      	movs	r2, #1
 80071de:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80071e0:	f7ff ff58 	bl	8007094 <BSP_SD_Init>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d107      	bne.n	80071fa <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80071ea:	79fb      	ldrb	r3, [r7, #7]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7ff ffd1 	bl	8007194 <SD_CheckStatus>
 80071f2:	4603      	mov	r3, r0
 80071f4:	461a      	mov	r2, r3
 80071f6:	4b04      	ldr	r3, [pc, #16]	; (8007208 <SD_initialize+0x38>)
 80071f8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80071fa:	4b03      	ldr	r3, [pc, #12]	; (8007208 <SD_initialize+0x38>)
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	b2db      	uxtb	r3, r3
}
 8007200:	4618      	mov	r0, r3
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	2000000d 	.word	0x2000000d

0800720c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	4603      	mov	r3, r0
 8007214:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007216:	79fb      	ldrb	r3, [r7, #7]
 8007218:	4618      	mov	r0, r3
 800721a:	f7ff ffbb 	bl	8007194 <SD_CheckStatus>
 800721e:	4603      	mov	r3, r0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	60b9      	str	r1, [r7, #8]
 8007230:	607a      	str	r2, [r7, #4]
 8007232:	603b      	str	r3, [r7, #0]
 8007234:	4603      	mov	r3, r0
 8007236:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800723c:	f04f 33ff 	mov.w	r3, #4294967295
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	6879      	ldr	r1, [r7, #4]
 8007244:	68b8      	ldr	r0, [r7, #8]
 8007246:	f7ff ff3d 	bl	80070c4 <BSP_SD_ReadBlocks>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d107      	bne.n	8007260 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007250:	bf00      	nop
 8007252:	f7ff ff73 	bl	800713c <BSP_SD_GetCardState>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1fa      	bne.n	8007252 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007260:	7dfb      	ldrb	r3, [r7, #23]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b086      	sub	sp, #24
 800726e:	af00      	add	r7, sp, #0
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
 8007274:	603b      	str	r3, [r7, #0]
 8007276:	4603      	mov	r3, r0
 8007278:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800727e:	f04f 33ff 	mov.w	r3, #4294967295
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	6879      	ldr	r1, [r7, #4]
 8007286:	68b8      	ldr	r0, [r7, #8]
 8007288:	f7ff ff3a 	bl	8007100 <BSP_SD_WriteBlocks>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d107      	bne.n	80072a2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8007292:	bf00      	nop
 8007294:	f7ff ff52 	bl	800713c <BSP_SD_GetCardState>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1fa      	bne.n	8007294 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80072a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3718      	adds	r7, #24
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b08c      	sub	sp, #48	; 0x30
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	4603      	mov	r3, r0
 80072b4:	603a      	str	r2, [r7, #0]
 80072b6:	71fb      	strb	r3, [r7, #7]
 80072b8:	460b      	mov	r3, r1
 80072ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80072c2:	4b25      	ldr	r3, [pc, #148]	; (8007358 <SD_ioctl+0xac>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d001      	beq.n	80072d4 <SD_ioctl+0x28>
 80072d0:	2303      	movs	r3, #3
 80072d2:	e03c      	b.n	800734e <SD_ioctl+0xa2>

  switch (cmd)
 80072d4:	79bb      	ldrb	r3, [r7, #6]
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d834      	bhi.n	8007344 <SD_ioctl+0x98>
 80072da:	a201      	add	r2, pc, #4	; (adr r2, 80072e0 <SD_ioctl+0x34>)
 80072dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e0:	080072f1 	.word	0x080072f1
 80072e4:	080072f9 	.word	0x080072f9
 80072e8:	08007311 	.word	0x08007311
 80072ec:	0800732b 	.word	0x0800732b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80072f6:	e028      	b.n	800734a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80072f8:	f107 030c 	add.w	r3, r7, #12
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7ff ff2d 	bl	800715c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800730e:	e01c      	b.n	800734a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007310:	f107 030c 	add.w	r3, r7, #12
 8007314:	4618      	mov	r0, r3
 8007316:	f7ff ff21 	bl	800715c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800731a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731c:	b29a      	uxth	r2, r3
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007328:	e00f      	b.n	800734a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800732a:	f107 030c 	add.w	r3, r7, #12
 800732e:	4618      	mov	r0, r3
 8007330:	f7ff ff14 	bl	800715c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007336:	0a5a      	lsrs	r2, r3, #9
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007342:	e002      	b.n	800734a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007344:	2304      	movs	r3, #4
 8007346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800734a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800734e:	4618      	mov	r0, r3
 8007350:	3730      	adds	r7, #48	; 0x30
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	2000000d 	.word	0x2000000d

0800735c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800735c:	b480      	push	{r7}
 800735e:	b087      	sub	sp, #28
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	4613      	mov	r3, r2
 8007368:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800736a:	2301      	movs	r3, #1
 800736c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800736e:	2300      	movs	r3, #0
 8007370:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007372:	4b1f      	ldr	r3, [pc, #124]	; (80073f0 <FATFS_LinkDriverEx+0x94>)
 8007374:	7a5b      	ldrb	r3, [r3, #9]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d131      	bne.n	80073e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800737c:	4b1c      	ldr	r3, [pc, #112]	; (80073f0 <FATFS_LinkDriverEx+0x94>)
 800737e:	7a5b      	ldrb	r3, [r3, #9]
 8007380:	b2db      	uxtb	r3, r3
 8007382:	461a      	mov	r2, r3
 8007384:	4b1a      	ldr	r3, [pc, #104]	; (80073f0 <FATFS_LinkDriverEx+0x94>)
 8007386:	2100      	movs	r1, #0
 8007388:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800738a:	4b19      	ldr	r3, [pc, #100]	; (80073f0 <FATFS_LinkDriverEx+0x94>)
 800738c:	7a5b      	ldrb	r3, [r3, #9]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	4a17      	ldr	r2, [pc, #92]	; (80073f0 <FATFS_LinkDriverEx+0x94>)
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800739a:	4b15      	ldr	r3, [pc, #84]	; (80073f0 <FATFS_LinkDriverEx+0x94>)
 800739c:	7a5b      	ldrb	r3, [r3, #9]
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	461a      	mov	r2, r3
 80073a2:	4b13      	ldr	r3, [pc, #76]	; (80073f0 <FATFS_LinkDriverEx+0x94>)
 80073a4:	4413      	add	r3, r2
 80073a6:	79fa      	ldrb	r2, [r7, #7]
 80073a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80073aa:	4b11      	ldr	r3, [pc, #68]	; (80073f0 <FATFS_LinkDriverEx+0x94>)
 80073ac:	7a5b      	ldrb	r3, [r3, #9]
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	b2d1      	uxtb	r1, r2
 80073b4:	4a0e      	ldr	r2, [pc, #56]	; (80073f0 <FATFS_LinkDriverEx+0x94>)
 80073b6:	7251      	strb	r1, [r2, #9]
 80073b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80073ba:	7dbb      	ldrb	r3, [r7, #22]
 80073bc:	3330      	adds	r3, #48	; 0x30
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	3301      	adds	r3, #1
 80073c8:	223a      	movs	r2, #58	; 0x3a
 80073ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	3302      	adds	r3, #2
 80073d0:	222f      	movs	r2, #47	; 0x2f
 80073d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	3303      	adds	r3, #3
 80073d8:	2200      	movs	r2, #0
 80073da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80073dc:	2300      	movs	r3, #0
 80073de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	371c      	adds	r7, #28
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	200003c8 	.word	0x200003c8

080073f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80073fe:	2200      	movs	r2, #0
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7ff ffaa 	bl	800735c <FATFS_LinkDriverEx>
 8007408:	4603      	mov	r3, r0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <atan2f>:
 8007412:	f000 b865 	b.w	80074e0 <__ieee754_atan2f>

08007416 <powf>:
 8007416:	b508      	push	{r3, lr}
 8007418:	ed2d 8b04 	vpush	{d8-d9}
 800741c:	eeb0 8a60 	vmov.f32	s16, s1
 8007420:	eeb0 9a40 	vmov.f32	s18, s0
 8007424:	f000 f8fc 	bl	8007620 <__ieee754_powf>
 8007428:	eeb4 8a48 	vcmp.f32	s16, s16
 800742c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007430:	eef0 8a40 	vmov.f32	s17, s0
 8007434:	d63e      	bvs.n	80074b4 <powf+0x9e>
 8007436:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800743a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800743e:	d112      	bne.n	8007466 <powf+0x50>
 8007440:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007448:	d039      	beq.n	80074be <powf+0xa8>
 800744a:	eeb0 0a48 	vmov.f32	s0, s16
 800744e:	f000 f839 	bl	80074c4 <finitef>
 8007452:	b378      	cbz	r0, 80074b4 <powf+0x9e>
 8007454:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800745c:	d52a      	bpl.n	80074b4 <powf+0x9e>
 800745e:	f001 fbbf 	bl	8008be0 <__errno>
 8007462:	2322      	movs	r3, #34	; 0x22
 8007464:	e014      	b.n	8007490 <powf+0x7a>
 8007466:	f000 f82d 	bl	80074c4 <finitef>
 800746a:	b998      	cbnz	r0, 8007494 <powf+0x7e>
 800746c:	eeb0 0a49 	vmov.f32	s0, s18
 8007470:	f000 f828 	bl	80074c4 <finitef>
 8007474:	b170      	cbz	r0, 8007494 <powf+0x7e>
 8007476:	eeb0 0a48 	vmov.f32	s0, s16
 800747a:	f000 f823 	bl	80074c4 <finitef>
 800747e:	b148      	cbz	r0, 8007494 <powf+0x7e>
 8007480:	eef4 8a68 	vcmp.f32	s17, s17
 8007484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007488:	d7e9      	bvc.n	800745e <powf+0x48>
 800748a:	f001 fba9 	bl	8008be0 <__errno>
 800748e:	2321      	movs	r3, #33	; 0x21
 8007490:	6003      	str	r3, [r0, #0]
 8007492:	e00f      	b.n	80074b4 <powf+0x9e>
 8007494:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800749c:	d10a      	bne.n	80074b4 <powf+0x9e>
 800749e:	eeb0 0a49 	vmov.f32	s0, s18
 80074a2:	f000 f80f 	bl	80074c4 <finitef>
 80074a6:	b128      	cbz	r0, 80074b4 <powf+0x9e>
 80074a8:	eeb0 0a48 	vmov.f32	s0, s16
 80074ac:	f000 f80a 	bl	80074c4 <finitef>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	d1d4      	bne.n	800745e <powf+0x48>
 80074b4:	eeb0 0a68 	vmov.f32	s0, s17
 80074b8:	ecbd 8b04 	vpop	{d8-d9}
 80074bc:	bd08      	pop	{r3, pc}
 80074be:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80074c2:	e7f7      	b.n	80074b4 <powf+0x9e>

080074c4 <finitef>:
 80074c4:	b082      	sub	sp, #8
 80074c6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80074ca:	9801      	ldr	r0, [sp, #4]
 80074cc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80074d0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80074d4:	bfac      	ite	ge
 80074d6:	2000      	movge	r0, #0
 80074d8:	2001      	movlt	r0, #1
 80074da:	b002      	add	sp, #8
 80074dc:	4770      	bx	lr
	...

080074e0 <__ieee754_atan2f>:
 80074e0:	ee10 2a90 	vmov	r2, s1
 80074e4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80074e8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80074ec:	b510      	push	{r4, lr}
 80074ee:	eef0 7a40 	vmov.f32	s15, s0
 80074f2:	dc06      	bgt.n	8007502 <__ieee754_atan2f+0x22>
 80074f4:	ee10 0a10 	vmov	r0, s0
 80074f8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80074fc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007500:	dd04      	ble.n	800750c <__ieee754_atan2f+0x2c>
 8007502:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007506:	eeb0 0a67 	vmov.f32	s0, s15
 800750a:	bd10      	pop	{r4, pc}
 800750c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8007510:	d103      	bne.n	800751a <__ieee754_atan2f+0x3a>
 8007512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007516:	f000 bb4d 	b.w	8007bb4 <atanf>
 800751a:	1794      	asrs	r4, r2, #30
 800751c:	f004 0402 	and.w	r4, r4, #2
 8007520:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007524:	b943      	cbnz	r3, 8007538 <__ieee754_atan2f+0x58>
 8007526:	2c02      	cmp	r4, #2
 8007528:	d05e      	beq.n	80075e8 <__ieee754_atan2f+0x108>
 800752a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80075fc <__ieee754_atan2f+0x11c>
 800752e:	2c03      	cmp	r4, #3
 8007530:	bf08      	it	eq
 8007532:	eef0 7a47 	vmoveq.f32	s15, s14
 8007536:	e7e6      	b.n	8007506 <__ieee754_atan2f+0x26>
 8007538:	b941      	cbnz	r1, 800754c <__ieee754_atan2f+0x6c>
 800753a:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007600 <__ieee754_atan2f+0x120>
 800753e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007604 <__ieee754_atan2f+0x124>
 8007542:	2800      	cmp	r0, #0
 8007544:	bfb8      	it	lt
 8007546:	eef0 7a47 	vmovlt.f32	s15, s14
 800754a:	e7dc      	b.n	8007506 <__ieee754_atan2f+0x26>
 800754c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007550:	d110      	bne.n	8007574 <__ieee754_atan2f+0x94>
 8007552:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007556:	f104 34ff 	add.w	r4, r4, #4294967295
 800755a:	d107      	bne.n	800756c <__ieee754_atan2f+0x8c>
 800755c:	2c02      	cmp	r4, #2
 800755e:	d846      	bhi.n	80075ee <__ieee754_atan2f+0x10e>
 8007560:	4b29      	ldr	r3, [pc, #164]	; (8007608 <__ieee754_atan2f+0x128>)
 8007562:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007566:	edd3 7a00 	vldr	s15, [r3]
 800756a:	e7cc      	b.n	8007506 <__ieee754_atan2f+0x26>
 800756c:	2c02      	cmp	r4, #2
 800756e:	d841      	bhi.n	80075f4 <__ieee754_atan2f+0x114>
 8007570:	4b26      	ldr	r3, [pc, #152]	; (800760c <__ieee754_atan2f+0x12c>)
 8007572:	e7f6      	b.n	8007562 <__ieee754_atan2f+0x82>
 8007574:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007578:	d0df      	beq.n	800753a <__ieee754_atan2f+0x5a>
 800757a:	1a5b      	subs	r3, r3, r1
 800757c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8007580:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8007584:	da1a      	bge.n	80075bc <__ieee754_atan2f+0xdc>
 8007586:	2a00      	cmp	r2, #0
 8007588:	da01      	bge.n	800758e <__ieee754_atan2f+0xae>
 800758a:	313c      	adds	r1, #60	; 0x3c
 800758c:	db19      	blt.n	80075c2 <__ieee754_atan2f+0xe2>
 800758e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8007592:	f000 fbe3 	bl	8007d5c <fabsf>
 8007596:	f000 fb0d 	bl	8007bb4 <atanf>
 800759a:	eef0 7a40 	vmov.f32	s15, s0
 800759e:	2c01      	cmp	r4, #1
 80075a0:	d012      	beq.n	80075c8 <__ieee754_atan2f+0xe8>
 80075a2:	2c02      	cmp	r4, #2
 80075a4:	d017      	beq.n	80075d6 <__ieee754_atan2f+0xf6>
 80075a6:	2c00      	cmp	r4, #0
 80075a8:	d0ad      	beq.n	8007506 <__ieee754_atan2f+0x26>
 80075aa:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007610 <__ieee754_atan2f+0x130>
 80075ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075b2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007614 <__ieee754_atan2f+0x134>
 80075b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075ba:	e7a4      	b.n	8007506 <__ieee754_atan2f+0x26>
 80075bc:	eddf 7a10 	vldr	s15, [pc, #64]	; 8007600 <__ieee754_atan2f+0x120>
 80075c0:	e7ed      	b.n	800759e <__ieee754_atan2f+0xbe>
 80075c2:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007618 <__ieee754_atan2f+0x138>
 80075c6:	e7ea      	b.n	800759e <__ieee754_atan2f+0xbe>
 80075c8:	ee17 3a90 	vmov	r3, s15
 80075cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80075d0:	ee07 3a90 	vmov	s15, r3
 80075d4:	e797      	b.n	8007506 <__ieee754_atan2f+0x26>
 80075d6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8007610 <__ieee754_atan2f+0x130>
 80075da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075de:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007614 <__ieee754_atan2f+0x134>
 80075e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075e6:	e78e      	b.n	8007506 <__ieee754_atan2f+0x26>
 80075e8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8007614 <__ieee754_atan2f+0x134>
 80075ec:	e78b      	b.n	8007506 <__ieee754_atan2f+0x26>
 80075ee:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800761c <__ieee754_atan2f+0x13c>
 80075f2:	e788      	b.n	8007506 <__ieee754_atan2f+0x26>
 80075f4:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007618 <__ieee754_atan2f+0x138>
 80075f8:	e785      	b.n	8007506 <__ieee754_atan2f+0x26>
 80075fa:	bf00      	nop
 80075fc:	c0490fdb 	.word	0xc0490fdb
 8007600:	3fc90fdb 	.word	0x3fc90fdb
 8007604:	bfc90fdb 	.word	0xbfc90fdb
 8007608:	0800a954 	.word	0x0800a954
 800760c:	0800a960 	.word	0x0800a960
 8007610:	33bbbd2e 	.word	0x33bbbd2e
 8007614:	40490fdb 	.word	0x40490fdb
 8007618:	00000000 	.word	0x00000000
 800761c:	3f490fdb 	.word	0x3f490fdb

08007620 <__ieee754_powf>:
 8007620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007624:	ee10 4a90 	vmov	r4, s1
 8007628:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800762c:	ed2d 8b02 	vpush	{d8}
 8007630:	ee10 7a10 	vmov	r7, s0
 8007634:	eeb0 8a40 	vmov.f32	s16, s0
 8007638:	eef0 8a60 	vmov.f32	s17, s1
 800763c:	d10c      	bne.n	8007658 <__ieee754_powf+0x38>
 800763e:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 8007642:	007f      	lsls	r7, r7, #1
 8007644:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 8007648:	f240 8292 	bls.w	8007b70 <__ieee754_powf+0x550>
 800764c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8007650:	ecbd 8b02 	vpop	{d8}
 8007654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007658:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 800765c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007660:	dcf4      	bgt.n	800764c <__ieee754_powf+0x2c>
 8007662:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8007666:	dd08      	ble.n	800767a <__ieee754_powf+0x5a>
 8007668:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800766c:	d1ee      	bne.n	800764c <__ieee754_powf+0x2c>
 800766e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8007672:	0064      	lsls	r4, r4, #1
 8007674:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8007678:	e7e6      	b.n	8007648 <__ieee754_powf+0x28>
 800767a:	2f00      	cmp	r7, #0
 800767c:	da20      	bge.n	80076c0 <__ieee754_powf+0xa0>
 800767e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8007682:	da2d      	bge.n	80076e0 <__ieee754_powf+0xc0>
 8007684:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8007688:	f2c0 827b 	blt.w	8007b82 <__ieee754_powf+0x562>
 800768c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8007690:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007694:	fa48 f603 	asr.w	r6, r8, r3
 8007698:	fa06 f303 	lsl.w	r3, r6, r3
 800769c:	4543      	cmp	r3, r8
 800769e:	f040 8270 	bne.w	8007b82 <__ieee754_powf+0x562>
 80076a2:	f006 0601 	and.w	r6, r6, #1
 80076a6:	f1c6 0602 	rsb	r6, r6, #2
 80076aa:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80076ae:	d11f      	bne.n	80076f0 <__ieee754_powf+0xd0>
 80076b0:	2c00      	cmp	r4, #0
 80076b2:	f280 8263 	bge.w	8007b7c <__ieee754_powf+0x55c>
 80076b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80076ba:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80076be:	e7c7      	b.n	8007650 <__ieee754_powf+0x30>
 80076c0:	2600      	movs	r6, #0
 80076c2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80076c6:	d1f0      	bne.n	80076aa <__ieee754_powf+0x8a>
 80076c8:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80076cc:	f000 8250 	beq.w	8007b70 <__ieee754_powf+0x550>
 80076d0:	dd08      	ble.n	80076e4 <__ieee754_powf+0xc4>
 80076d2:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 80079d8 <__ieee754_powf+0x3b8>
 80076d6:	2c00      	cmp	r4, #0
 80076d8:	bfa8      	it	ge
 80076da:	eeb0 0a68 	vmovge.f32	s0, s17
 80076de:	e7b7      	b.n	8007650 <__ieee754_powf+0x30>
 80076e0:	2602      	movs	r6, #2
 80076e2:	e7ee      	b.n	80076c2 <__ieee754_powf+0xa2>
 80076e4:	2c00      	cmp	r4, #0
 80076e6:	f280 8246 	bge.w	8007b76 <__ieee754_powf+0x556>
 80076ea:	eeb1 0a68 	vneg.f32	s0, s17
 80076ee:	e7af      	b.n	8007650 <__ieee754_powf+0x30>
 80076f0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80076f4:	d102      	bne.n	80076fc <__ieee754_powf+0xdc>
 80076f6:	ee28 0a08 	vmul.f32	s0, s16, s16
 80076fa:	e7a9      	b.n	8007650 <__ieee754_powf+0x30>
 80076fc:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8007700:	eeb0 0a48 	vmov.f32	s0, s16
 8007704:	d107      	bne.n	8007716 <__ieee754_powf+0xf6>
 8007706:	2f00      	cmp	r7, #0
 8007708:	db05      	blt.n	8007716 <__ieee754_powf+0xf6>
 800770a:	ecbd 8b02 	vpop	{d8}
 800770e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007712:	f000 bbb3 	b.w	8007e7c <__ieee754_sqrtf>
 8007716:	f000 fb21 	bl	8007d5c <fabsf>
 800771a:	b125      	cbz	r5, 8007726 <__ieee754_powf+0x106>
 800771c:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8007720:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007724:	d115      	bne.n	8007752 <__ieee754_powf+0x132>
 8007726:	2c00      	cmp	r4, #0
 8007728:	bfbc      	itt	lt
 800772a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800772e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007732:	2f00      	cmp	r7, #0
 8007734:	da8c      	bge.n	8007650 <__ieee754_powf+0x30>
 8007736:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800773a:	4335      	orrs	r5, r6
 800773c:	d104      	bne.n	8007748 <__ieee754_powf+0x128>
 800773e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007742:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007746:	e783      	b.n	8007650 <__ieee754_powf+0x30>
 8007748:	2e01      	cmp	r6, #1
 800774a:	d181      	bne.n	8007650 <__ieee754_powf+0x30>
 800774c:	eeb1 0a40 	vneg.f32	s0, s0
 8007750:	e77e      	b.n	8007650 <__ieee754_powf+0x30>
 8007752:	0ff8      	lsrs	r0, r7, #31
 8007754:	3801      	subs	r0, #1
 8007756:	ea56 0300 	orrs.w	r3, r6, r0
 800775a:	d104      	bne.n	8007766 <__ieee754_powf+0x146>
 800775c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8007760:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007764:	e774      	b.n	8007650 <__ieee754_powf+0x30>
 8007766:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800776a:	dd73      	ble.n	8007854 <__ieee754_powf+0x234>
 800776c:	4b9b      	ldr	r3, [pc, #620]	; (80079dc <__ieee754_powf+0x3bc>)
 800776e:	429d      	cmp	r5, r3
 8007770:	dc08      	bgt.n	8007784 <__ieee754_powf+0x164>
 8007772:	2c00      	cmp	r4, #0
 8007774:	da0b      	bge.n	800778e <__ieee754_powf+0x16e>
 8007776:	2000      	movs	r0, #0
 8007778:	ecbd 8b02 	vpop	{d8}
 800777c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007780:	f000 bb76 	b.w	8007e70 <__math_oflowf>
 8007784:	4b96      	ldr	r3, [pc, #600]	; (80079e0 <__ieee754_powf+0x3c0>)
 8007786:	429d      	cmp	r5, r3
 8007788:	dd08      	ble.n	800779c <__ieee754_powf+0x17c>
 800778a:	2c00      	cmp	r4, #0
 800778c:	dcf3      	bgt.n	8007776 <__ieee754_powf+0x156>
 800778e:	2000      	movs	r0, #0
 8007790:	ecbd 8b02 	vpop	{d8}
 8007794:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007798:	f000 bb64 	b.w	8007e64 <__math_uflowf>
 800779c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80077a0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80077a4:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80079e4 <__ieee754_powf+0x3c4>
 80077a8:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80077ac:	eee0 6a67 	vfms.f32	s13, s0, s15
 80077b0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80077b4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80077b8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80077bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077c0:	eddf 7a89 	vldr	s15, [pc, #548]	; 80079e8 <__ieee754_powf+0x3c8>
 80077c4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80077c8:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80079ec <__ieee754_powf+0x3cc>
 80077cc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80077d0:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80079f0 <__ieee754_powf+0x3d0>
 80077d4:	eef0 6a67 	vmov.f32	s13, s15
 80077d8:	eee0 6a07 	vfma.f32	s13, s0, s14
 80077dc:	ee16 3a90 	vmov	r3, s13
 80077e0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80077e4:	f023 030f 	bic.w	r3, r3, #15
 80077e8:	ee06 3a90 	vmov	s13, r3
 80077ec:	eee0 6a47 	vfms.f32	s13, s0, s14
 80077f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80077f4:	3e01      	subs	r6, #1
 80077f6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80077fa:	4306      	orrs	r6, r0
 80077fc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007800:	f024 040f 	bic.w	r4, r4, #15
 8007804:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007808:	bf08      	it	eq
 800780a:	eeb0 8a47 	vmoveq.f32	s16, s14
 800780e:	ee07 4a10 	vmov	s14, r4
 8007812:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8007816:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800781a:	ee07 3a90 	vmov	s15, r3
 800781e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8007822:	ee07 4a10 	vmov	s14, r4
 8007826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800782a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800782e:	ee17 1a10 	vmov	r1, s14
 8007832:	2900      	cmp	r1, #0
 8007834:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007838:	f340 817c 	ble.w	8007b34 <__ieee754_powf+0x514>
 800783c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8007840:	f340 80f8 	ble.w	8007a34 <__ieee754_powf+0x414>
 8007844:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800784c:	bf4c      	ite	mi
 800784e:	2001      	movmi	r0, #1
 8007850:	2000      	movpl	r0, #0
 8007852:	e791      	b.n	8007778 <__ieee754_powf+0x158>
 8007854:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 8007858:	bf01      	itttt	eq
 800785a:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80079f4 <__ieee754_powf+0x3d4>
 800785e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8007862:	f06f 0317 	mvneq.w	r3, #23
 8007866:	ee17 5a90 	vmoveq	r5, s15
 800786a:	ea4f 52e5 	mov.w	r2, r5, asr #23
 800786e:	bf18      	it	ne
 8007870:	2300      	movne	r3, #0
 8007872:	3a7f      	subs	r2, #127	; 0x7f
 8007874:	441a      	add	r2, r3
 8007876:	4b60      	ldr	r3, [pc, #384]	; (80079f8 <__ieee754_powf+0x3d8>)
 8007878:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800787c:	429d      	cmp	r5, r3
 800787e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8007882:	dd06      	ble.n	8007892 <__ieee754_powf+0x272>
 8007884:	4b5d      	ldr	r3, [pc, #372]	; (80079fc <__ieee754_powf+0x3dc>)
 8007886:	429d      	cmp	r5, r3
 8007888:	f340 80a4 	ble.w	80079d4 <__ieee754_powf+0x3b4>
 800788c:	3201      	adds	r2, #1
 800788e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8007892:	2500      	movs	r5, #0
 8007894:	4b5a      	ldr	r3, [pc, #360]	; (8007a00 <__ieee754_powf+0x3e0>)
 8007896:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800789a:	ee07 1a10 	vmov	s14, r1
 800789e:	edd3 5a00 	vldr	s11, [r3]
 80078a2:	4b58      	ldr	r3, [pc, #352]	; (8007a04 <__ieee754_powf+0x3e4>)
 80078a4:	ee75 7a87 	vadd.f32	s15, s11, s14
 80078a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ac:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80078b0:	1049      	asrs	r1, r1, #1
 80078b2:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80078b6:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80078ba:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80078be:	ee37 6a65 	vsub.f32	s12, s14, s11
 80078c2:	ee07 1a90 	vmov	s15, r1
 80078c6:	ee26 5a24 	vmul.f32	s10, s12, s9
 80078ca:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80078ce:	ee15 7a10 	vmov	r7, s10
 80078d2:	401f      	ands	r7, r3
 80078d4:	ee06 7a90 	vmov	s13, r7
 80078d8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80078dc:	ee37 7a65 	vsub.f32	s14, s14, s11
 80078e0:	ee65 7a05 	vmul.f32	s15, s10, s10
 80078e4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80078e8:	eddf 5a47 	vldr	s11, [pc, #284]	; 8007a08 <__ieee754_powf+0x3e8>
 80078ec:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8007a0c <__ieee754_powf+0x3ec>
 80078f0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80078f4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8007a10 <__ieee754_powf+0x3f0>
 80078f8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80078fc:	eddf 5a39 	vldr	s11, [pc, #228]	; 80079e4 <__ieee754_powf+0x3c4>
 8007900:	eee7 5a27 	vfma.f32	s11, s14, s15
 8007904:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8007a14 <__ieee754_powf+0x3f4>
 8007908:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800790c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8007a18 <__ieee754_powf+0x3f8>
 8007910:	ee26 6a24 	vmul.f32	s12, s12, s9
 8007914:	eee7 5a27 	vfma.f32	s11, s14, s15
 8007918:	ee35 7a26 	vadd.f32	s14, s10, s13
 800791c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8007920:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007924:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8007928:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800792c:	eef0 5a67 	vmov.f32	s11, s15
 8007930:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8007934:	ee75 5a87 	vadd.f32	s11, s11, s14
 8007938:	ee15 1a90 	vmov	r1, s11
 800793c:	4019      	ands	r1, r3
 800793e:	ee05 1a90 	vmov	s11, r1
 8007942:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8007946:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800794a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800794e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8007952:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007956:	eeb0 6a67 	vmov.f32	s12, s15
 800795a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800795e:	ee16 1a10 	vmov	r1, s12
 8007962:	4019      	ands	r1, r3
 8007964:	ee07 1a10 	vmov	s14, r1
 8007968:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800796c:	ee06 1a10 	vmov	s12, r1
 8007970:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007974:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8007a1c <__ieee754_powf+0x3fc>
 8007978:	4929      	ldr	r1, [pc, #164]	; (8007a20 <__ieee754_powf+0x400>)
 800797a:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8007a24 <__ieee754_powf+0x404>
 800797e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007982:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8007a28 <__ieee754_powf+0x408>
 8007986:	eee6 7a07 	vfma.f32	s15, s12, s14
 800798a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800798e:	ed91 7a00 	vldr	s14, [r1]
 8007992:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007996:	ee07 2a10 	vmov	s14, r2
 800799a:	eef0 6a67 	vmov.f32	s13, s15
 800799e:	4a23      	ldr	r2, [pc, #140]	; (8007a2c <__ieee754_powf+0x40c>)
 80079a0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80079a4:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80079a8:	ed92 5a00 	vldr	s10, [r2]
 80079ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80079b0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80079b4:	ee76 6a87 	vadd.f32	s13, s13, s14
 80079b8:	ee16 2a90 	vmov	r2, s13
 80079bc:	4013      	ands	r3, r2
 80079be:	ee06 3a90 	vmov	s13, r3
 80079c2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80079c6:	ee37 7a45 	vsub.f32	s14, s14, s10
 80079ca:	eea6 7a65 	vfms.f32	s14, s12, s11
 80079ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079d2:	e70f      	b.n	80077f4 <__ieee754_powf+0x1d4>
 80079d4:	2501      	movs	r5, #1
 80079d6:	e75d      	b.n	8007894 <__ieee754_powf+0x274>
 80079d8:	00000000 	.word	0x00000000
 80079dc:	3f7ffff3 	.word	0x3f7ffff3
 80079e0:	3f800007 	.word	0x3f800007
 80079e4:	3eaaaaab 	.word	0x3eaaaaab
 80079e8:	3fb8aa3b 	.word	0x3fb8aa3b
 80079ec:	36eca570 	.word	0x36eca570
 80079f0:	3fb8aa00 	.word	0x3fb8aa00
 80079f4:	4b800000 	.word	0x4b800000
 80079f8:	001cc471 	.word	0x001cc471
 80079fc:	005db3d6 	.word	0x005db3d6
 8007a00:	0800a96c 	.word	0x0800a96c
 8007a04:	fffff000 	.word	0xfffff000
 8007a08:	3e6c3255 	.word	0x3e6c3255
 8007a0c:	3e53f142 	.word	0x3e53f142
 8007a10:	3e8ba305 	.word	0x3e8ba305
 8007a14:	3edb6db7 	.word	0x3edb6db7
 8007a18:	3f19999a 	.word	0x3f19999a
 8007a1c:	3f76384f 	.word	0x3f76384f
 8007a20:	0800a97c 	.word	0x0800a97c
 8007a24:	3f763800 	.word	0x3f763800
 8007a28:	369dc3a0 	.word	0x369dc3a0
 8007a2c:	0800a974 	.word	0x0800a974
 8007a30:	3338aa3c 	.word	0x3338aa3c
 8007a34:	f040 8093 	bne.w	8007b5e <__ieee754_powf+0x53e>
 8007a38:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8007a30 <__ieee754_powf+0x410>
 8007a3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007a40:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8007a44:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a4c:	f73f aefa 	bgt.w	8007844 <__ieee754_powf+0x224>
 8007a50:	15db      	asrs	r3, r3, #23
 8007a52:	3b7e      	subs	r3, #126	; 0x7e
 8007a54:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8007a58:	4118      	asrs	r0, r3
 8007a5a:	4408      	add	r0, r1
 8007a5c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007a60:	4a49      	ldr	r2, [pc, #292]	; (8007b88 <__ieee754_powf+0x568>)
 8007a62:	3b7f      	subs	r3, #127	; 0x7f
 8007a64:	411a      	asrs	r2, r3
 8007a66:	4002      	ands	r2, r0
 8007a68:	ee07 2a10 	vmov	s14, r2
 8007a6c:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8007a70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007a74:	f1c3 0317 	rsb	r3, r3, #23
 8007a78:	4118      	asrs	r0, r3
 8007a7a:	2900      	cmp	r1, #0
 8007a7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a80:	bfb8      	it	lt
 8007a82:	4240      	neglt	r0, r0
 8007a84:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8007a88:	eddf 6a40 	vldr	s13, [pc, #256]	; 8007b8c <__ieee754_powf+0x56c>
 8007a8c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8007b90 <__ieee754_powf+0x570>
 8007a90:	ee17 3a10 	vmov	r3, s14
 8007a94:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007a98:	f023 030f 	bic.w	r3, r3, #15
 8007a9c:	ee07 3a10 	vmov	s14, r3
 8007aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007aa4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007aa8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007aac:	eddf 7a39 	vldr	s15, [pc, #228]	; 8007b94 <__ieee754_powf+0x574>
 8007ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ab4:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8007ab8:	eef0 6a67 	vmov.f32	s13, s15
 8007abc:	eee7 6a06 	vfma.f32	s13, s14, s12
 8007ac0:	eef0 5a66 	vmov.f32	s11, s13
 8007ac4:	eee7 5a46 	vfms.f32	s11, s14, s12
 8007ac8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8007acc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007ad0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8007b98 <__ieee754_powf+0x578>
 8007ad4:	eddf 5a31 	vldr	s11, [pc, #196]	; 8007b9c <__ieee754_powf+0x57c>
 8007ad8:	eea7 6a25 	vfma.f32	s12, s14, s11
 8007adc:	eddf 5a30 	vldr	s11, [pc, #192]	; 8007ba0 <__ieee754_powf+0x580>
 8007ae0:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007ae4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8007ba4 <__ieee754_powf+0x584>
 8007ae8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8007aec:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007ba8 <__ieee754_powf+0x588>
 8007af0:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007af4:	eeb0 6a66 	vmov.f32	s12, s13
 8007af8:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8007afc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007b00:	ee66 5a86 	vmul.f32	s11, s13, s12
 8007b04:	ee36 6a47 	vsub.f32	s12, s12, s14
 8007b08:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8007b0c:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8007b10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b14:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007b18:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007b1c:	ee10 3a10 	vmov	r3, s0
 8007b20:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8007b24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b28:	da1f      	bge.n	8007b6a <__ieee754_powf+0x54a>
 8007b2a:	f000 f91f 	bl	8007d6c <scalbnf>
 8007b2e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007b32:	e58d      	b.n	8007650 <__ieee754_powf+0x30>
 8007b34:	4a1d      	ldr	r2, [pc, #116]	; (8007bac <__ieee754_powf+0x58c>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	dd07      	ble.n	8007b4a <__ieee754_powf+0x52a>
 8007b3a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b42:	bf4c      	ite	mi
 8007b44:	2001      	movmi	r0, #1
 8007b46:	2000      	movpl	r0, #0
 8007b48:	e622      	b.n	8007790 <__ieee754_powf+0x170>
 8007b4a:	d108      	bne.n	8007b5e <__ieee754_powf+0x53e>
 8007b4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007b50:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b58:	f6ff af7a 	blt.w	8007a50 <__ieee754_powf+0x430>
 8007b5c:	e7ed      	b.n	8007b3a <__ieee754_powf+0x51a>
 8007b5e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8007b62:	f73f af75 	bgt.w	8007a50 <__ieee754_powf+0x430>
 8007b66:	2000      	movs	r0, #0
 8007b68:	e78c      	b.n	8007a84 <__ieee754_powf+0x464>
 8007b6a:	ee00 3a10 	vmov	s0, r3
 8007b6e:	e7de      	b.n	8007b2e <__ieee754_powf+0x50e>
 8007b70:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007b74:	e56c      	b.n	8007650 <__ieee754_powf+0x30>
 8007b76:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8007bb0 <__ieee754_powf+0x590>
 8007b7a:	e569      	b.n	8007650 <__ieee754_powf+0x30>
 8007b7c:	eeb0 0a48 	vmov.f32	s0, s16
 8007b80:	e566      	b.n	8007650 <__ieee754_powf+0x30>
 8007b82:	2600      	movs	r6, #0
 8007b84:	e591      	b.n	80076aa <__ieee754_powf+0x8a>
 8007b86:	bf00      	nop
 8007b88:	ff800000 	.word	0xff800000
 8007b8c:	3f317218 	.word	0x3f317218
 8007b90:	3f317200 	.word	0x3f317200
 8007b94:	35bfbe8c 	.word	0x35bfbe8c
 8007b98:	b5ddea0e 	.word	0xb5ddea0e
 8007b9c:	3331bb4c 	.word	0x3331bb4c
 8007ba0:	388ab355 	.word	0x388ab355
 8007ba4:	bb360b61 	.word	0xbb360b61
 8007ba8:	3e2aaaab 	.word	0x3e2aaaab
 8007bac:	43160000 	.word	0x43160000
 8007bb0:	00000000 	.word	0x00000000

08007bb4 <atanf>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	ee10 5a10 	vmov	r5, s0
 8007bba:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007bbe:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8007bc2:	eef0 7a40 	vmov.f32	s15, s0
 8007bc6:	db10      	blt.n	8007bea <atanf+0x36>
 8007bc8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007bcc:	dd04      	ble.n	8007bd8 <atanf+0x24>
 8007bce:	ee70 7a00 	vadd.f32	s15, s0, s0
 8007bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8007bd6:	bd38      	pop	{r3, r4, r5, pc}
 8007bd8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8007d10 <atanf+0x15c>
 8007bdc:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8007d14 <atanf+0x160>
 8007be0:	2d00      	cmp	r5, #0
 8007be2:	bfd8      	it	le
 8007be4:	eef0 7a47 	vmovle.f32	s15, s14
 8007be8:	e7f3      	b.n	8007bd2 <atanf+0x1e>
 8007bea:	4b4b      	ldr	r3, [pc, #300]	; (8007d18 <atanf+0x164>)
 8007bec:	429c      	cmp	r4, r3
 8007bee:	dc10      	bgt.n	8007c12 <atanf+0x5e>
 8007bf0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8007bf4:	da0a      	bge.n	8007c0c <atanf+0x58>
 8007bf6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007d1c <atanf+0x168>
 8007bfa:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c02:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c0a:	dce2      	bgt.n	8007bd2 <atanf+0x1e>
 8007c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c10:	e013      	b.n	8007c3a <atanf+0x86>
 8007c12:	f000 f8a3 	bl	8007d5c <fabsf>
 8007c16:	4b42      	ldr	r3, [pc, #264]	; (8007d20 <atanf+0x16c>)
 8007c18:	429c      	cmp	r4, r3
 8007c1a:	dc4f      	bgt.n	8007cbc <atanf+0x108>
 8007c1c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8007c20:	429c      	cmp	r4, r3
 8007c22:	dc41      	bgt.n	8007ca8 <atanf+0xf4>
 8007c24:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007c28:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007c2c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007c30:	2300      	movs	r3, #0
 8007c32:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007c36:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007c3a:	1c5a      	adds	r2, r3, #1
 8007c3c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007c40:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007d24 <atanf+0x170>
 8007c44:	eddf 5a38 	vldr	s11, [pc, #224]	; 8007d28 <atanf+0x174>
 8007c48:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8007d2c <atanf+0x178>
 8007c4c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007c50:	eee6 5a87 	vfma.f32	s11, s13, s14
 8007c54:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007d30 <atanf+0x17c>
 8007c58:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007c5c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8007d34 <atanf+0x180>
 8007c60:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007c64:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007d38 <atanf+0x184>
 8007c68:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007c6c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007d3c <atanf+0x188>
 8007c70:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007c74:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007d40 <atanf+0x18c>
 8007c78:	eea6 5a87 	vfma.f32	s10, s13, s14
 8007c7c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007d44 <atanf+0x190>
 8007c80:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007c84:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8007d48 <atanf+0x194>
 8007c88:	eea7 5a26 	vfma.f32	s10, s14, s13
 8007c8c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007d4c <atanf+0x198>
 8007c90:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007c94:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007c98:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007c9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007ca0:	d121      	bne.n	8007ce6 <atanf+0x132>
 8007ca2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ca6:	e794      	b.n	8007bd2 <atanf+0x1e>
 8007ca8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007cac:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007cb0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007cba:	e7be      	b.n	8007c3a <atanf+0x86>
 8007cbc:	4b24      	ldr	r3, [pc, #144]	; (8007d50 <atanf+0x19c>)
 8007cbe:	429c      	cmp	r4, r3
 8007cc0:	dc0b      	bgt.n	8007cda <atanf+0x126>
 8007cc2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8007cc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cca:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007cce:	2302      	movs	r3, #2
 8007cd0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cd8:	e7af      	b.n	8007c3a <atanf+0x86>
 8007cda:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007cde:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e7a9      	b.n	8007c3a <atanf+0x86>
 8007ce6:	4a1b      	ldr	r2, [pc, #108]	; (8007d54 <atanf+0x1a0>)
 8007ce8:	491b      	ldr	r1, [pc, #108]	; (8007d58 <atanf+0x1a4>)
 8007cea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007cee:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007cf2:	edd3 6a00 	vldr	s13, [r3]
 8007cf6:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007cfa:	2d00      	cmp	r5, #0
 8007cfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007d00:	edd2 7a00 	vldr	s15, [r2]
 8007d04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d08:	bfb8      	it	lt
 8007d0a:	eef1 7a67 	vneglt.f32	s15, s15
 8007d0e:	e760      	b.n	8007bd2 <atanf+0x1e>
 8007d10:	3fc90fdb 	.word	0x3fc90fdb
 8007d14:	bfc90fdb 	.word	0xbfc90fdb
 8007d18:	3edfffff 	.word	0x3edfffff
 8007d1c:	7149f2ca 	.word	0x7149f2ca
 8007d20:	3f97ffff 	.word	0x3f97ffff
 8007d24:	3c8569d7 	.word	0x3c8569d7
 8007d28:	3d4bda59 	.word	0x3d4bda59
 8007d2c:	bd6ef16b 	.word	0xbd6ef16b
 8007d30:	3d886b35 	.word	0x3d886b35
 8007d34:	3dba2e6e 	.word	0x3dba2e6e
 8007d38:	3e124925 	.word	0x3e124925
 8007d3c:	3eaaaaab 	.word	0x3eaaaaab
 8007d40:	bd15a221 	.word	0xbd15a221
 8007d44:	bd9d8795 	.word	0xbd9d8795
 8007d48:	bde38e38 	.word	0xbde38e38
 8007d4c:	be4ccccd 	.word	0xbe4ccccd
 8007d50:	401bffff 	.word	0x401bffff
 8007d54:	0800a984 	.word	0x0800a984
 8007d58:	0800a994 	.word	0x0800a994

08007d5c <fabsf>:
 8007d5c:	ee10 3a10 	vmov	r3, s0
 8007d60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d64:	ee00 3a10 	vmov	s0, r3
 8007d68:	4770      	bx	lr
	...

08007d6c <scalbnf>:
 8007d6c:	ee10 3a10 	vmov	r3, s0
 8007d70:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007d74:	d02b      	beq.n	8007dce <scalbnf+0x62>
 8007d76:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007d7a:	d302      	bcc.n	8007d82 <scalbnf+0x16>
 8007d7c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007d80:	4770      	bx	lr
 8007d82:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007d86:	d123      	bne.n	8007dd0 <scalbnf+0x64>
 8007d88:	4b24      	ldr	r3, [pc, #144]	; (8007e1c <scalbnf+0xb0>)
 8007d8a:	eddf 7a25 	vldr	s15, [pc, #148]	; 8007e20 <scalbnf+0xb4>
 8007d8e:	4298      	cmp	r0, r3
 8007d90:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007d94:	db17      	blt.n	8007dc6 <scalbnf+0x5a>
 8007d96:	ee10 3a10 	vmov	r3, s0
 8007d9a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007d9e:	3a19      	subs	r2, #25
 8007da0:	f24c 3150 	movw	r1, #50000	; 0xc350
 8007da4:	4288      	cmp	r0, r1
 8007da6:	dd15      	ble.n	8007dd4 <scalbnf+0x68>
 8007da8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007e24 <scalbnf+0xb8>
 8007dac:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8007e28 <scalbnf+0xbc>
 8007db0:	ee10 3a10 	vmov	r3, s0
 8007db4:	eeb0 7a67 	vmov.f32	s14, s15
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	bfb8      	it	lt
 8007dbc:	eef0 7a66 	vmovlt.f32	s15, s13
 8007dc0:	ee27 0a87 	vmul.f32	s0, s15, s14
 8007dc4:	4770      	bx	lr
 8007dc6:	eddf 7a19 	vldr	s15, [pc, #100]	; 8007e2c <scalbnf+0xc0>
 8007dca:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007dce:	4770      	bx	lr
 8007dd0:	0dd2      	lsrs	r2, r2, #23
 8007dd2:	e7e5      	b.n	8007da0 <scalbnf+0x34>
 8007dd4:	4410      	add	r0, r2
 8007dd6:	28fe      	cmp	r0, #254	; 0xfe
 8007dd8:	dce6      	bgt.n	8007da8 <scalbnf+0x3c>
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	dd06      	ble.n	8007dec <scalbnf+0x80>
 8007dde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007de2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007de6:	ee00 3a10 	vmov	s0, r3
 8007dea:	4770      	bx	lr
 8007dec:	f110 0f16 	cmn.w	r0, #22
 8007df0:	da09      	bge.n	8007e06 <scalbnf+0x9a>
 8007df2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8007e2c <scalbnf+0xc0>
 8007df6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8007e30 <scalbnf+0xc4>
 8007dfa:	ee10 3a10 	vmov	r3, s0
 8007dfe:	eeb0 7a67 	vmov.f32	s14, s15
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	e7d9      	b.n	8007dba <scalbnf+0x4e>
 8007e06:	3019      	adds	r0, #25
 8007e08:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007e0c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007e10:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8007e34 <scalbnf+0xc8>
 8007e14:	ee07 3a90 	vmov	s15, r3
 8007e18:	e7d7      	b.n	8007dca <scalbnf+0x5e>
 8007e1a:	bf00      	nop
 8007e1c:	ffff3cb0 	.word	0xffff3cb0
 8007e20:	4c000000 	.word	0x4c000000
 8007e24:	7149f2ca 	.word	0x7149f2ca
 8007e28:	f149f2ca 	.word	0xf149f2ca
 8007e2c:	0da24260 	.word	0x0da24260
 8007e30:	8da24260 	.word	0x8da24260
 8007e34:	33000000 	.word	0x33000000

08007e38 <with_errnof>:
 8007e38:	b513      	push	{r0, r1, r4, lr}
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007e40:	f000 fece 	bl	8008be0 <__errno>
 8007e44:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007e48:	6004      	str	r4, [r0, #0]
 8007e4a:	b002      	add	sp, #8
 8007e4c:	bd10      	pop	{r4, pc}

08007e4e <xflowf>:
 8007e4e:	b130      	cbz	r0, 8007e5e <xflowf+0x10>
 8007e50:	eef1 7a40 	vneg.f32	s15, s0
 8007e54:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007e58:	2022      	movs	r0, #34	; 0x22
 8007e5a:	f7ff bfed 	b.w	8007e38 <with_errnof>
 8007e5e:	eef0 7a40 	vmov.f32	s15, s0
 8007e62:	e7f7      	b.n	8007e54 <xflowf+0x6>

08007e64 <__math_uflowf>:
 8007e64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007e6c <__math_uflowf+0x8>
 8007e68:	f7ff bff1 	b.w	8007e4e <xflowf>
 8007e6c:	10000000 	.word	0x10000000

08007e70 <__math_oflowf>:
 8007e70:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007e78 <__math_oflowf+0x8>
 8007e74:	f7ff bfeb 	b.w	8007e4e <xflowf>
 8007e78:	70000000 	.word	0x70000000

08007e7c <__ieee754_sqrtf>:
 8007e7c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007e80:	4770      	bx	lr

08007e82 <__cvt>:
 8007e82:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e86:	ec55 4b10 	vmov	r4, r5, d0
 8007e8a:	2d00      	cmp	r5, #0
 8007e8c:	460e      	mov	r6, r1
 8007e8e:	4619      	mov	r1, r3
 8007e90:	462b      	mov	r3, r5
 8007e92:	bfbb      	ittet	lt
 8007e94:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007e98:	461d      	movlt	r5, r3
 8007e9a:	2300      	movge	r3, #0
 8007e9c:	232d      	movlt	r3, #45	; 0x2d
 8007e9e:	700b      	strb	r3, [r1, #0]
 8007ea0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ea2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007ea6:	4691      	mov	r9, r2
 8007ea8:	f023 0820 	bic.w	r8, r3, #32
 8007eac:	bfbc      	itt	lt
 8007eae:	4622      	movlt	r2, r4
 8007eb0:	4614      	movlt	r4, r2
 8007eb2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007eb6:	d005      	beq.n	8007ec4 <__cvt+0x42>
 8007eb8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007ebc:	d100      	bne.n	8007ec0 <__cvt+0x3e>
 8007ebe:	3601      	adds	r6, #1
 8007ec0:	2102      	movs	r1, #2
 8007ec2:	e000      	b.n	8007ec6 <__cvt+0x44>
 8007ec4:	2103      	movs	r1, #3
 8007ec6:	ab03      	add	r3, sp, #12
 8007ec8:	9301      	str	r3, [sp, #4]
 8007eca:	ab02      	add	r3, sp, #8
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	ec45 4b10 	vmov	d0, r4, r5
 8007ed2:	4653      	mov	r3, sl
 8007ed4:	4632      	mov	r2, r6
 8007ed6:	f000 ff37 	bl	8008d48 <_dtoa_r>
 8007eda:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ede:	4607      	mov	r7, r0
 8007ee0:	d102      	bne.n	8007ee8 <__cvt+0x66>
 8007ee2:	f019 0f01 	tst.w	r9, #1
 8007ee6:	d022      	beq.n	8007f2e <__cvt+0xac>
 8007ee8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007eec:	eb07 0906 	add.w	r9, r7, r6
 8007ef0:	d110      	bne.n	8007f14 <__cvt+0x92>
 8007ef2:	783b      	ldrb	r3, [r7, #0]
 8007ef4:	2b30      	cmp	r3, #48	; 0x30
 8007ef6:	d10a      	bne.n	8007f0e <__cvt+0x8c>
 8007ef8:	2200      	movs	r2, #0
 8007efa:	2300      	movs	r3, #0
 8007efc:	4620      	mov	r0, r4
 8007efe:	4629      	mov	r1, r5
 8007f00:	f7f8 fde2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f04:	b918      	cbnz	r0, 8007f0e <__cvt+0x8c>
 8007f06:	f1c6 0601 	rsb	r6, r6, #1
 8007f0a:	f8ca 6000 	str.w	r6, [sl]
 8007f0e:	f8da 3000 	ldr.w	r3, [sl]
 8007f12:	4499      	add	r9, r3
 8007f14:	2200      	movs	r2, #0
 8007f16:	2300      	movs	r3, #0
 8007f18:	4620      	mov	r0, r4
 8007f1a:	4629      	mov	r1, r5
 8007f1c:	f7f8 fdd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f20:	b108      	cbz	r0, 8007f26 <__cvt+0xa4>
 8007f22:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f26:	2230      	movs	r2, #48	; 0x30
 8007f28:	9b03      	ldr	r3, [sp, #12]
 8007f2a:	454b      	cmp	r3, r9
 8007f2c:	d307      	bcc.n	8007f3e <__cvt+0xbc>
 8007f2e:	9b03      	ldr	r3, [sp, #12]
 8007f30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f32:	1bdb      	subs	r3, r3, r7
 8007f34:	4638      	mov	r0, r7
 8007f36:	6013      	str	r3, [r2, #0]
 8007f38:	b004      	add	sp, #16
 8007f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f3e:	1c59      	adds	r1, r3, #1
 8007f40:	9103      	str	r1, [sp, #12]
 8007f42:	701a      	strb	r2, [r3, #0]
 8007f44:	e7f0      	b.n	8007f28 <__cvt+0xa6>

08007f46 <__exponent>:
 8007f46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2900      	cmp	r1, #0
 8007f4c:	bfb8      	it	lt
 8007f4e:	4249      	neglt	r1, r1
 8007f50:	f803 2b02 	strb.w	r2, [r3], #2
 8007f54:	bfb4      	ite	lt
 8007f56:	222d      	movlt	r2, #45	; 0x2d
 8007f58:	222b      	movge	r2, #43	; 0x2b
 8007f5a:	2909      	cmp	r1, #9
 8007f5c:	7042      	strb	r2, [r0, #1]
 8007f5e:	dd2a      	ble.n	8007fb6 <__exponent+0x70>
 8007f60:	f10d 0207 	add.w	r2, sp, #7
 8007f64:	4617      	mov	r7, r2
 8007f66:	260a      	movs	r6, #10
 8007f68:	4694      	mov	ip, r2
 8007f6a:	fb91 f5f6 	sdiv	r5, r1, r6
 8007f6e:	fb06 1415 	mls	r4, r6, r5, r1
 8007f72:	3430      	adds	r4, #48	; 0x30
 8007f74:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007f78:	460c      	mov	r4, r1
 8007f7a:	2c63      	cmp	r4, #99	; 0x63
 8007f7c:	f102 32ff 	add.w	r2, r2, #4294967295
 8007f80:	4629      	mov	r1, r5
 8007f82:	dcf1      	bgt.n	8007f68 <__exponent+0x22>
 8007f84:	3130      	adds	r1, #48	; 0x30
 8007f86:	f1ac 0402 	sub.w	r4, ip, #2
 8007f8a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007f8e:	1c41      	adds	r1, r0, #1
 8007f90:	4622      	mov	r2, r4
 8007f92:	42ba      	cmp	r2, r7
 8007f94:	d30a      	bcc.n	8007fac <__exponent+0x66>
 8007f96:	f10d 0209 	add.w	r2, sp, #9
 8007f9a:	eba2 020c 	sub.w	r2, r2, ip
 8007f9e:	42bc      	cmp	r4, r7
 8007fa0:	bf88      	it	hi
 8007fa2:	2200      	movhi	r2, #0
 8007fa4:	4413      	add	r3, r2
 8007fa6:	1a18      	subs	r0, r3, r0
 8007fa8:	b003      	add	sp, #12
 8007faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fac:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007fb0:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007fb4:	e7ed      	b.n	8007f92 <__exponent+0x4c>
 8007fb6:	2330      	movs	r3, #48	; 0x30
 8007fb8:	3130      	adds	r1, #48	; 0x30
 8007fba:	7083      	strb	r3, [r0, #2]
 8007fbc:	70c1      	strb	r1, [r0, #3]
 8007fbe:	1d03      	adds	r3, r0, #4
 8007fc0:	e7f1      	b.n	8007fa6 <__exponent+0x60>
	...

08007fc4 <_printf_float>:
 8007fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc8:	ed2d 8b02 	vpush	{d8}
 8007fcc:	b08d      	sub	sp, #52	; 0x34
 8007fce:	460c      	mov	r4, r1
 8007fd0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007fd4:	4616      	mov	r6, r2
 8007fd6:	461f      	mov	r7, r3
 8007fd8:	4605      	mov	r5, r0
 8007fda:	f000 fdb7 	bl	8008b4c <_localeconv_r>
 8007fde:	f8d0 a000 	ldr.w	sl, [r0]
 8007fe2:	4650      	mov	r0, sl
 8007fe4:	f7f8 f944 	bl	8000270 <strlen>
 8007fe8:	2300      	movs	r3, #0
 8007fea:	930a      	str	r3, [sp, #40]	; 0x28
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	9305      	str	r3, [sp, #20]
 8007ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ff4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007ff8:	3307      	adds	r3, #7
 8007ffa:	f023 0307 	bic.w	r3, r3, #7
 8007ffe:	f103 0208 	add.w	r2, r3, #8
 8008002:	f8c8 2000 	str.w	r2, [r8]
 8008006:	e9d3 8900 	ldrd	r8, r9, [r3]
 800800a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800800e:	9307      	str	r3, [sp, #28]
 8008010:	f8cd 8018 	str.w	r8, [sp, #24]
 8008014:	ee08 0a10 	vmov	s16, r0
 8008018:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800801c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008020:	4b9e      	ldr	r3, [pc, #632]	; (800829c <_printf_float+0x2d8>)
 8008022:	f04f 32ff 	mov.w	r2, #4294967295
 8008026:	f7f8 fd81 	bl	8000b2c <__aeabi_dcmpun>
 800802a:	bb88      	cbnz	r0, 8008090 <_printf_float+0xcc>
 800802c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008030:	4b9a      	ldr	r3, [pc, #616]	; (800829c <_printf_float+0x2d8>)
 8008032:	f04f 32ff 	mov.w	r2, #4294967295
 8008036:	f7f8 fd5b 	bl	8000af0 <__aeabi_dcmple>
 800803a:	bb48      	cbnz	r0, 8008090 <_printf_float+0xcc>
 800803c:	2200      	movs	r2, #0
 800803e:	2300      	movs	r3, #0
 8008040:	4640      	mov	r0, r8
 8008042:	4649      	mov	r1, r9
 8008044:	f7f8 fd4a 	bl	8000adc <__aeabi_dcmplt>
 8008048:	b110      	cbz	r0, 8008050 <_printf_float+0x8c>
 800804a:	232d      	movs	r3, #45	; 0x2d
 800804c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008050:	4a93      	ldr	r2, [pc, #588]	; (80082a0 <_printf_float+0x2dc>)
 8008052:	4b94      	ldr	r3, [pc, #592]	; (80082a4 <_printf_float+0x2e0>)
 8008054:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008058:	bf94      	ite	ls
 800805a:	4690      	movls	r8, r2
 800805c:	4698      	movhi	r8, r3
 800805e:	2303      	movs	r3, #3
 8008060:	6123      	str	r3, [r4, #16]
 8008062:	9b05      	ldr	r3, [sp, #20]
 8008064:	f023 0304 	bic.w	r3, r3, #4
 8008068:	6023      	str	r3, [r4, #0]
 800806a:	f04f 0900 	mov.w	r9, #0
 800806e:	9700      	str	r7, [sp, #0]
 8008070:	4633      	mov	r3, r6
 8008072:	aa0b      	add	r2, sp, #44	; 0x2c
 8008074:	4621      	mov	r1, r4
 8008076:	4628      	mov	r0, r5
 8008078:	f000 f9da 	bl	8008430 <_printf_common>
 800807c:	3001      	adds	r0, #1
 800807e:	f040 8090 	bne.w	80081a2 <_printf_float+0x1de>
 8008082:	f04f 30ff 	mov.w	r0, #4294967295
 8008086:	b00d      	add	sp, #52	; 0x34
 8008088:	ecbd 8b02 	vpop	{d8}
 800808c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008090:	4642      	mov	r2, r8
 8008092:	464b      	mov	r3, r9
 8008094:	4640      	mov	r0, r8
 8008096:	4649      	mov	r1, r9
 8008098:	f7f8 fd48 	bl	8000b2c <__aeabi_dcmpun>
 800809c:	b140      	cbz	r0, 80080b0 <_printf_float+0xec>
 800809e:	464b      	mov	r3, r9
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	bfbc      	itt	lt
 80080a4:	232d      	movlt	r3, #45	; 0x2d
 80080a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80080aa:	4a7f      	ldr	r2, [pc, #508]	; (80082a8 <_printf_float+0x2e4>)
 80080ac:	4b7f      	ldr	r3, [pc, #508]	; (80082ac <_printf_float+0x2e8>)
 80080ae:	e7d1      	b.n	8008054 <_printf_float+0x90>
 80080b0:	6863      	ldr	r3, [r4, #4]
 80080b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80080b6:	9206      	str	r2, [sp, #24]
 80080b8:	1c5a      	adds	r2, r3, #1
 80080ba:	d13f      	bne.n	800813c <_printf_float+0x178>
 80080bc:	2306      	movs	r3, #6
 80080be:	6063      	str	r3, [r4, #4]
 80080c0:	9b05      	ldr	r3, [sp, #20]
 80080c2:	6861      	ldr	r1, [r4, #4]
 80080c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80080c8:	2300      	movs	r3, #0
 80080ca:	9303      	str	r3, [sp, #12]
 80080cc:	ab0a      	add	r3, sp, #40	; 0x28
 80080ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80080d2:	ab09      	add	r3, sp, #36	; 0x24
 80080d4:	ec49 8b10 	vmov	d0, r8, r9
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	6022      	str	r2, [r4, #0]
 80080dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80080e0:	4628      	mov	r0, r5
 80080e2:	f7ff fece 	bl	8007e82 <__cvt>
 80080e6:	9b06      	ldr	r3, [sp, #24]
 80080e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080ea:	2b47      	cmp	r3, #71	; 0x47
 80080ec:	4680      	mov	r8, r0
 80080ee:	d108      	bne.n	8008102 <_printf_float+0x13e>
 80080f0:	1cc8      	adds	r0, r1, #3
 80080f2:	db02      	blt.n	80080fa <_printf_float+0x136>
 80080f4:	6863      	ldr	r3, [r4, #4]
 80080f6:	4299      	cmp	r1, r3
 80080f8:	dd41      	ble.n	800817e <_printf_float+0x1ba>
 80080fa:	f1ab 0302 	sub.w	r3, fp, #2
 80080fe:	fa5f fb83 	uxtb.w	fp, r3
 8008102:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008106:	d820      	bhi.n	800814a <_printf_float+0x186>
 8008108:	3901      	subs	r1, #1
 800810a:	465a      	mov	r2, fp
 800810c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008110:	9109      	str	r1, [sp, #36]	; 0x24
 8008112:	f7ff ff18 	bl	8007f46 <__exponent>
 8008116:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008118:	1813      	adds	r3, r2, r0
 800811a:	2a01      	cmp	r2, #1
 800811c:	4681      	mov	r9, r0
 800811e:	6123      	str	r3, [r4, #16]
 8008120:	dc02      	bgt.n	8008128 <_printf_float+0x164>
 8008122:	6822      	ldr	r2, [r4, #0]
 8008124:	07d2      	lsls	r2, r2, #31
 8008126:	d501      	bpl.n	800812c <_printf_float+0x168>
 8008128:	3301      	adds	r3, #1
 800812a:	6123      	str	r3, [r4, #16]
 800812c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008130:	2b00      	cmp	r3, #0
 8008132:	d09c      	beq.n	800806e <_printf_float+0xaa>
 8008134:	232d      	movs	r3, #45	; 0x2d
 8008136:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800813a:	e798      	b.n	800806e <_printf_float+0xaa>
 800813c:	9a06      	ldr	r2, [sp, #24]
 800813e:	2a47      	cmp	r2, #71	; 0x47
 8008140:	d1be      	bne.n	80080c0 <_printf_float+0xfc>
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1bc      	bne.n	80080c0 <_printf_float+0xfc>
 8008146:	2301      	movs	r3, #1
 8008148:	e7b9      	b.n	80080be <_printf_float+0xfa>
 800814a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800814e:	d118      	bne.n	8008182 <_printf_float+0x1be>
 8008150:	2900      	cmp	r1, #0
 8008152:	6863      	ldr	r3, [r4, #4]
 8008154:	dd0b      	ble.n	800816e <_printf_float+0x1aa>
 8008156:	6121      	str	r1, [r4, #16]
 8008158:	b913      	cbnz	r3, 8008160 <_printf_float+0x19c>
 800815a:	6822      	ldr	r2, [r4, #0]
 800815c:	07d0      	lsls	r0, r2, #31
 800815e:	d502      	bpl.n	8008166 <_printf_float+0x1a2>
 8008160:	3301      	adds	r3, #1
 8008162:	440b      	add	r3, r1
 8008164:	6123      	str	r3, [r4, #16]
 8008166:	65a1      	str	r1, [r4, #88]	; 0x58
 8008168:	f04f 0900 	mov.w	r9, #0
 800816c:	e7de      	b.n	800812c <_printf_float+0x168>
 800816e:	b913      	cbnz	r3, 8008176 <_printf_float+0x1b2>
 8008170:	6822      	ldr	r2, [r4, #0]
 8008172:	07d2      	lsls	r2, r2, #31
 8008174:	d501      	bpl.n	800817a <_printf_float+0x1b6>
 8008176:	3302      	adds	r3, #2
 8008178:	e7f4      	b.n	8008164 <_printf_float+0x1a0>
 800817a:	2301      	movs	r3, #1
 800817c:	e7f2      	b.n	8008164 <_printf_float+0x1a0>
 800817e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008184:	4299      	cmp	r1, r3
 8008186:	db05      	blt.n	8008194 <_printf_float+0x1d0>
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	6121      	str	r1, [r4, #16]
 800818c:	07d8      	lsls	r0, r3, #31
 800818e:	d5ea      	bpl.n	8008166 <_printf_float+0x1a2>
 8008190:	1c4b      	adds	r3, r1, #1
 8008192:	e7e7      	b.n	8008164 <_printf_float+0x1a0>
 8008194:	2900      	cmp	r1, #0
 8008196:	bfd4      	ite	le
 8008198:	f1c1 0202 	rsble	r2, r1, #2
 800819c:	2201      	movgt	r2, #1
 800819e:	4413      	add	r3, r2
 80081a0:	e7e0      	b.n	8008164 <_printf_float+0x1a0>
 80081a2:	6823      	ldr	r3, [r4, #0]
 80081a4:	055a      	lsls	r2, r3, #21
 80081a6:	d407      	bmi.n	80081b8 <_printf_float+0x1f4>
 80081a8:	6923      	ldr	r3, [r4, #16]
 80081aa:	4642      	mov	r2, r8
 80081ac:	4631      	mov	r1, r6
 80081ae:	4628      	mov	r0, r5
 80081b0:	47b8      	blx	r7
 80081b2:	3001      	adds	r0, #1
 80081b4:	d12c      	bne.n	8008210 <_printf_float+0x24c>
 80081b6:	e764      	b.n	8008082 <_printf_float+0xbe>
 80081b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80081bc:	f240 80e0 	bls.w	8008380 <_printf_float+0x3bc>
 80081c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081c4:	2200      	movs	r2, #0
 80081c6:	2300      	movs	r3, #0
 80081c8:	f7f8 fc7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	d034      	beq.n	800823a <_printf_float+0x276>
 80081d0:	4a37      	ldr	r2, [pc, #220]	; (80082b0 <_printf_float+0x2ec>)
 80081d2:	2301      	movs	r3, #1
 80081d4:	4631      	mov	r1, r6
 80081d6:	4628      	mov	r0, r5
 80081d8:	47b8      	blx	r7
 80081da:	3001      	adds	r0, #1
 80081dc:	f43f af51 	beq.w	8008082 <_printf_float+0xbe>
 80081e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081e4:	429a      	cmp	r2, r3
 80081e6:	db02      	blt.n	80081ee <_printf_float+0x22a>
 80081e8:	6823      	ldr	r3, [r4, #0]
 80081ea:	07d8      	lsls	r0, r3, #31
 80081ec:	d510      	bpl.n	8008210 <_printf_float+0x24c>
 80081ee:	ee18 3a10 	vmov	r3, s16
 80081f2:	4652      	mov	r2, sl
 80081f4:	4631      	mov	r1, r6
 80081f6:	4628      	mov	r0, r5
 80081f8:	47b8      	blx	r7
 80081fa:	3001      	adds	r0, #1
 80081fc:	f43f af41 	beq.w	8008082 <_printf_float+0xbe>
 8008200:	f04f 0800 	mov.w	r8, #0
 8008204:	f104 091a 	add.w	r9, r4, #26
 8008208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800820a:	3b01      	subs	r3, #1
 800820c:	4543      	cmp	r3, r8
 800820e:	dc09      	bgt.n	8008224 <_printf_float+0x260>
 8008210:	6823      	ldr	r3, [r4, #0]
 8008212:	079b      	lsls	r3, r3, #30
 8008214:	f100 8107 	bmi.w	8008426 <_printf_float+0x462>
 8008218:	68e0      	ldr	r0, [r4, #12]
 800821a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800821c:	4298      	cmp	r0, r3
 800821e:	bfb8      	it	lt
 8008220:	4618      	movlt	r0, r3
 8008222:	e730      	b.n	8008086 <_printf_float+0xc2>
 8008224:	2301      	movs	r3, #1
 8008226:	464a      	mov	r2, r9
 8008228:	4631      	mov	r1, r6
 800822a:	4628      	mov	r0, r5
 800822c:	47b8      	blx	r7
 800822e:	3001      	adds	r0, #1
 8008230:	f43f af27 	beq.w	8008082 <_printf_float+0xbe>
 8008234:	f108 0801 	add.w	r8, r8, #1
 8008238:	e7e6      	b.n	8008208 <_printf_float+0x244>
 800823a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800823c:	2b00      	cmp	r3, #0
 800823e:	dc39      	bgt.n	80082b4 <_printf_float+0x2f0>
 8008240:	4a1b      	ldr	r2, [pc, #108]	; (80082b0 <_printf_float+0x2ec>)
 8008242:	2301      	movs	r3, #1
 8008244:	4631      	mov	r1, r6
 8008246:	4628      	mov	r0, r5
 8008248:	47b8      	blx	r7
 800824a:	3001      	adds	r0, #1
 800824c:	f43f af19 	beq.w	8008082 <_printf_float+0xbe>
 8008250:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008254:	4313      	orrs	r3, r2
 8008256:	d102      	bne.n	800825e <_printf_float+0x29a>
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	07d9      	lsls	r1, r3, #31
 800825c:	d5d8      	bpl.n	8008210 <_printf_float+0x24c>
 800825e:	ee18 3a10 	vmov	r3, s16
 8008262:	4652      	mov	r2, sl
 8008264:	4631      	mov	r1, r6
 8008266:	4628      	mov	r0, r5
 8008268:	47b8      	blx	r7
 800826a:	3001      	adds	r0, #1
 800826c:	f43f af09 	beq.w	8008082 <_printf_float+0xbe>
 8008270:	f04f 0900 	mov.w	r9, #0
 8008274:	f104 0a1a 	add.w	sl, r4, #26
 8008278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800827a:	425b      	negs	r3, r3
 800827c:	454b      	cmp	r3, r9
 800827e:	dc01      	bgt.n	8008284 <_printf_float+0x2c0>
 8008280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008282:	e792      	b.n	80081aa <_printf_float+0x1e6>
 8008284:	2301      	movs	r3, #1
 8008286:	4652      	mov	r2, sl
 8008288:	4631      	mov	r1, r6
 800828a:	4628      	mov	r0, r5
 800828c:	47b8      	blx	r7
 800828e:	3001      	adds	r0, #1
 8008290:	f43f aef7 	beq.w	8008082 <_printf_float+0xbe>
 8008294:	f109 0901 	add.w	r9, r9, #1
 8008298:	e7ee      	b.n	8008278 <_printf_float+0x2b4>
 800829a:	bf00      	nop
 800829c:	7fefffff 	.word	0x7fefffff
 80082a0:	0800a9a4 	.word	0x0800a9a4
 80082a4:	0800a9a8 	.word	0x0800a9a8
 80082a8:	0800a9ac 	.word	0x0800a9ac
 80082ac:	0800a9b0 	.word	0x0800a9b0
 80082b0:	0800a9b4 	.word	0x0800a9b4
 80082b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082b8:	429a      	cmp	r2, r3
 80082ba:	bfa8      	it	ge
 80082bc:	461a      	movge	r2, r3
 80082be:	2a00      	cmp	r2, #0
 80082c0:	4691      	mov	r9, r2
 80082c2:	dc37      	bgt.n	8008334 <_printf_float+0x370>
 80082c4:	f04f 0b00 	mov.w	fp, #0
 80082c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082cc:	f104 021a 	add.w	r2, r4, #26
 80082d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082d2:	9305      	str	r3, [sp, #20]
 80082d4:	eba3 0309 	sub.w	r3, r3, r9
 80082d8:	455b      	cmp	r3, fp
 80082da:	dc33      	bgt.n	8008344 <_printf_float+0x380>
 80082dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082e0:	429a      	cmp	r2, r3
 80082e2:	db3b      	blt.n	800835c <_printf_float+0x398>
 80082e4:	6823      	ldr	r3, [r4, #0]
 80082e6:	07da      	lsls	r2, r3, #31
 80082e8:	d438      	bmi.n	800835c <_printf_float+0x398>
 80082ea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80082ee:	eba2 0903 	sub.w	r9, r2, r3
 80082f2:	9b05      	ldr	r3, [sp, #20]
 80082f4:	1ad2      	subs	r2, r2, r3
 80082f6:	4591      	cmp	r9, r2
 80082f8:	bfa8      	it	ge
 80082fa:	4691      	movge	r9, r2
 80082fc:	f1b9 0f00 	cmp.w	r9, #0
 8008300:	dc35      	bgt.n	800836e <_printf_float+0x3aa>
 8008302:	f04f 0800 	mov.w	r8, #0
 8008306:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800830a:	f104 0a1a 	add.w	sl, r4, #26
 800830e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008312:	1a9b      	subs	r3, r3, r2
 8008314:	eba3 0309 	sub.w	r3, r3, r9
 8008318:	4543      	cmp	r3, r8
 800831a:	f77f af79 	ble.w	8008210 <_printf_float+0x24c>
 800831e:	2301      	movs	r3, #1
 8008320:	4652      	mov	r2, sl
 8008322:	4631      	mov	r1, r6
 8008324:	4628      	mov	r0, r5
 8008326:	47b8      	blx	r7
 8008328:	3001      	adds	r0, #1
 800832a:	f43f aeaa 	beq.w	8008082 <_printf_float+0xbe>
 800832e:	f108 0801 	add.w	r8, r8, #1
 8008332:	e7ec      	b.n	800830e <_printf_float+0x34a>
 8008334:	4613      	mov	r3, r2
 8008336:	4631      	mov	r1, r6
 8008338:	4642      	mov	r2, r8
 800833a:	4628      	mov	r0, r5
 800833c:	47b8      	blx	r7
 800833e:	3001      	adds	r0, #1
 8008340:	d1c0      	bne.n	80082c4 <_printf_float+0x300>
 8008342:	e69e      	b.n	8008082 <_printf_float+0xbe>
 8008344:	2301      	movs	r3, #1
 8008346:	4631      	mov	r1, r6
 8008348:	4628      	mov	r0, r5
 800834a:	9205      	str	r2, [sp, #20]
 800834c:	47b8      	blx	r7
 800834e:	3001      	adds	r0, #1
 8008350:	f43f ae97 	beq.w	8008082 <_printf_float+0xbe>
 8008354:	9a05      	ldr	r2, [sp, #20]
 8008356:	f10b 0b01 	add.w	fp, fp, #1
 800835a:	e7b9      	b.n	80082d0 <_printf_float+0x30c>
 800835c:	ee18 3a10 	vmov	r3, s16
 8008360:	4652      	mov	r2, sl
 8008362:	4631      	mov	r1, r6
 8008364:	4628      	mov	r0, r5
 8008366:	47b8      	blx	r7
 8008368:	3001      	adds	r0, #1
 800836a:	d1be      	bne.n	80082ea <_printf_float+0x326>
 800836c:	e689      	b.n	8008082 <_printf_float+0xbe>
 800836e:	9a05      	ldr	r2, [sp, #20]
 8008370:	464b      	mov	r3, r9
 8008372:	4442      	add	r2, r8
 8008374:	4631      	mov	r1, r6
 8008376:	4628      	mov	r0, r5
 8008378:	47b8      	blx	r7
 800837a:	3001      	adds	r0, #1
 800837c:	d1c1      	bne.n	8008302 <_printf_float+0x33e>
 800837e:	e680      	b.n	8008082 <_printf_float+0xbe>
 8008380:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008382:	2a01      	cmp	r2, #1
 8008384:	dc01      	bgt.n	800838a <_printf_float+0x3c6>
 8008386:	07db      	lsls	r3, r3, #31
 8008388:	d53a      	bpl.n	8008400 <_printf_float+0x43c>
 800838a:	2301      	movs	r3, #1
 800838c:	4642      	mov	r2, r8
 800838e:	4631      	mov	r1, r6
 8008390:	4628      	mov	r0, r5
 8008392:	47b8      	blx	r7
 8008394:	3001      	adds	r0, #1
 8008396:	f43f ae74 	beq.w	8008082 <_printf_float+0xbe>
 800839a:	ee18 3a10 	vmov	r3, s16
 800839e:	4652      	mov	r2, sl
 80083a0:	4631      	mov	r1, r6
 80083a2:	4628      	mov	r0, r5
 80083a4:	47b8      	blx	r7
 80083a6:	3001      	adds	r0, #1
 80083a8:	f43f ae6b 	beq.w	8008082 <_printf_float+0xbe>
 80083ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083b0:	2200      	movs	r2, #0
 80083b2:	2300      	movs	r3, #0
 80083b4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80083b8:	f7f8 fb86 	bl	8000ac8 <__aeabi_dcmpeq>
 80083bc:	b9d8      	cbnz	r0, 80083f6 <_printf_float+0x432>
 80083be:	f10a 33ff 	add.w	r3, sl, #4294967295
 80083c2:	f108 0201 	add.w	r2, r8, #1
 80083c6:	4631      	mov	r1, r6
 80083c8:	4628      	mov	r0, r5
 80083ca:	47b8      	blx	r7
 80083cc:	3001      	adds	r0, #1
 80083ce:	d10e      	bne.n	80083ee <_printf_float+0x42a>
 80083d0:	e657      	b.n	8008082 <_printf_float+0xbe>
 80083d2:	2301      	movs	r3, #1
 80083d4:	4652      	mov	r2, sl
 80083d6:	4631      	mov	r1, r6
 80083d8:	4628      	mov	r0, r5
 80083da:	47b8      	blx	r7
 80083dc:	3001      	adds	r0, #1
 80083de:	f43f ae50 	beq.w	8008082 <_printf_float+0xbe>
 80083e2:	f108 0801 	add.w	r8, r8, #1
 80083e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083e8:	3b01      	subs	r3, #1
 80083ea:	4543      	cmp	r3, r8
 80083ec:	dcf1      	bgt.n	80083d2 <_printf_float+0x40e>
 80083ee:	464b      	mov	r3, r9
 80083f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80083f4:	e6da      	b.n	80081ac <_printf_float+0x1e8>
 80083f6:	f04f 0800 	mov.w	r8, #0
 80083fa:	f104 0a1a 	add.w	sl, r4, #26
 80083fe:	e7f2      	b.n	80083e6 <_printf_float+0x422>
 8008400:	2301      	movs	r3, #1
 8008402:	4642      	mov	r2, r8
 8008404:	e7df      	b.n	80083c6 <_printf_float+0x402>
 8008406:	2301      	movs	r3, #1
 8008408:	464a      	mov	r2, r9
 800840a:	4631      	mov	r1, r6
 800840c:	4628      	mov	r0, r5
 800840e:	47b8      	blx	r7
 8008410:	3001      	adds	r0, #1
 8008412:	f43f ae36 	beq.w	8008082 <_printf_float+0xbe>
 8008416:	f108 0801 	add.w	r8, r8, #1
 800841a:	68e3      	ldr	r3, [r4, #12]
 800841c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800841e:	1a5b      	subs	r3, r3, r1
 8008420:	4543      	cmp	r3, r8
 8008422:	dcf0      	bgt.n	8008406 <_printf_float+0x442>
 8008424:	e6f8      	b.n	8008218 <_printf_float+0x254>
 8008426:	f04f 0800 	mov.w	r8, #0
 800842a:	f104 0919 	add.w	r9, r4, #25
 800842e:	e7f4      	b.n	800841a <_printf_float+0x456>

08008430 <_printf_common>:
 8008430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008434:	4616      	mov	r6, r2
 8008436:	4699      	mov	r9, r3
 8008438:	688a      	ldr	r2, [r1, #8]
 800843a:	690b      	ldr	r3, [r1, #16]
 800843c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008440:	4293      	cmp	r3, r2
 8008442:	bfb8      	it	lt
 8008444:	4613      	movlt	r3, r2
 8008446:	6033      	str	r3, [r6, #0]
 8008448:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800844c:	4607      	mov	r7, r0
 800844e:	460c      	mov	r4, r1
 8008450:	b10a      	cbz	r2, 8008456 <_printf_common+0x26>
 8008452:	3301      	adds	r3, #1
 8008454:	6033      	str	r3, [r6, #0]
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	0699      	lsls	r1, r3, #26
 800845a:	bf42      	ittt	mi
 800845c:	6833      	ldrmi	r3, [r6, #0]
 800845e:	3302      	addmi	r3, #2
 8008460:	6033      	strmi	r3, [r6, #0]
 8008462:	6825      	ldr	r5, [r4, #0]
 8008464:	f015 0506 	ands.w	r5, r5, #6
 8008468:	d106      	bne.n	8008478 <_printf_common+0x48>
 800846a:	f104 0a19 	add.w	sl, r4, #25
 800846e:	68e3      	ldr	r3, [r4, #12]
 8008470:	6832      	ldr	r2, [r6, #0]
 8008472:	1a9b      	subs	r3, r3, r2
 8008474:	42ab      	cmp	r3, r5
 8008476:	dc26      	bgt.n	80084c6 <_printf_common+0x96>
 8008478:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800847c:	1e13      	subs	r3, r2, #0
 800847e:	6822      	ldr	r2, [r4, #0]
 8008480:	bf18      	it	ne
 8008482:	2301      	movne	r3, #1
 8008484:	0692      	lsls	r2, r2, #26
 8008486:	d42b      	bmi.n	80084e0 <_printf_common+0xb0>
 8008488:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800848c:	4649      	mov	r1, r9
 800848e:	4638      	mov	r0, r7
 8008490:	47c0      	blx	r8
 8008492:	3001      	adds	r0, #1
 8008494:	d01e      	beq.n	80084d4 <_printf_common+0xa4>
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	6922      	ldr	r2, [r4, #16]
 800849a:	f003 0306 	and.w	r3, r3, #6
 800849e:	2b04      	cmp	r3, #4
 80084a0:	bf02      	ittt	eq
 80084a2:	68e5      	ldreq	r5, [r4, #12]
 80084a4:	6833      	ldreq	r3, [r6, #0]
 80084a6:	1aed      	subeq	r5, r5, r3
 80084a8:	68a3      	ldr	r3, [r4, #8]
 80084aa:	bf0c      	ite	eq
 80084ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084b0:	2500      	movne	r5, #0
 80084b2:	4293      	cmp	r3, r2
 80084b4:	bfc4      	itt	gt
 80084b6:	1a9b      	subgt	r3, r3, r2
 80084b8:	18ed      	addgt	r5, r5, r3
 80084ba:	2600      	movs	r6, #0
 80084bc:	341a      	adds	r4, #26
 80084be:	42b5      	cmp	r5, r6
 80084c0:	d11a      	bne.n	80084f8 <_printf_common+0xc8>
 80084c2:	2000      	movs	r0, #0
 80084c4:	e008      	b.n	80084d8 <_printf_common+0xa8>
 80084c6:	2301      	movs	r3, #1
 80084c8:	4652      	mov	r2, sl
 80084ca:	4649      	mov	r1, r9
 80084cc:	4638      	mov	r0, r7
 80084ce:	47c0      	blx	r8
 80084d0:	3001      	adds	r0, #1
 80084d2:	d103      	bne.n	80084dc <_printf_common+0xac>
 80084d4:	f04f 30ff 	mov.w	r0, #4294967295
 80084d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084dc:	3501      	adds	r5, #1
 80084de:	e7c6      	b.n	800846e <_printf_common+0x3e>
 80084e0:	18e1      	adds	r1, r4, r3
 80084e2:	1c5a      	adds	r2, r3, #1
 80084e4:	2030      	movs	r0, #48	; 0x30
 80084e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084ea:	4422      	add	r2, r4
 80084ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084f4:	3302      	adds	r3, #2
 80084f6:	e7c7      	b.n	8008488 <_printf_common+0x58>
 80084f8:	2301      	movs	r3, #1
 80084fa:	4622      	mov	r2, r4
 80084fc:	4649      	mov	r1, r9
 80084fe:	4638      	mov	r0, r7
 8008500:	47c0      	blx	r8
 8008502:	3001      	adds	r0, #1
 8008504:	d0e6      	beq.n	80084d4 <_printf_common+0xa4>
 8008506:	3601      	adds	r6, #1
 8008508:	e7d9      	b.n	80084be <_printf_common+0x8e>
	...

0800850c <_printf_i>:
 800850c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008510:	7e0f      	ldrb	r7, [r1, #24]
 8008512:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008514:	2f78      	cmp	r7, #120	; 0x78
 8008516:	4691      	mov	r9, r2
 8008518:	4680      	mov	r8, r0
 800851a:	460c      	mov	r4, r1
 800851c:	469a      	mov	sl, r3
 800851e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008522:	d807      	bhi.n	8008534 <_printf_i+0x28>
 8008524:	2f62      	cmp	r7, #98	; 0x62
 8008526:	d80a      	bhi.n	800853e <_printf_i+0x32>
 8008528:	2f00      	cmp	r7, #0
 800852a:	f000 80d4 	beq.w	80086d6 <_printf_i+0x1ca>
 800852e:	2f58      	cmp	r7, #88	; 0x58
 8008530:	f000 80c0 	beq.w	80086b4 <_printf_i+0x1a8>
 8008534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008538:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800853c:	e03a      	b.n	80085b4 <_printf_i+0xa8>
 800853e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008542:	2b15      	cmp	r3, #21
 8008544:	d8f6      	bhi.n	8008534 <_printf_i+0x28>
 8008546:	a101      	add	r1, pc, #4	; (adr r1, 800854c <_printf_i+0x40>)
 8008548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800854c:	080085a5 	.word	0x080085a5
 8008550:	080085b9 	.word	0x080085b9
 8008554:	08008535 	.word	0x08008535
 8008558:	08008535 	.word	0x08008535
 800855c:	08008535 	.word	0x08008535
 8008560:	08008535 	.word	0x08008535
 8008564:	080085b9 	.word	0x080085b9
 8008568:	08008535 	.word	0x08008535
 800856c:	08008535 	.word	0x08008535
 8008570:	08008535 	.word	0x08008535
 8008574:	08008535 	.word	0x08008535
 8008578:	080086bd 	.word	0x080086bd
 800857c:	080085e5 	.word	0x080085e5
 8008580:	08008677 	.word	0x08008677
 8008584:	08008535 	.word	0x08008535
 8008588:	08008535 	.word	0x08008535
 800858c:	080086df 	.word	0x080086df
 8008590:	08008535 	.word	0x08008535
 8008594:	080085e5 	.word	0x080085e5
 8008598:	08008535 	.word	0x08008535
 800859c:	08008535 	.word	0x08008535
 80085a0:	0800867f 	.word	0x0800867f
 80085a4:	682b      	ldr	r3, [r5, #0]
 80085a6:	1d1a      	adds	r2, r3, #4
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	602a      	str	r2, [r5, #0]
 80085ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085b4:	2301      	movs	r3, #1
 80085b6:	e09f      	b.n	80086f8 <_printf_i+0x1ec>
 80085b8:	6820      	ldr	r0, [r4, #0]
 80085ba:	682b      	ldr	r3, [r5, #0]
 80085bc:	0607      	lsls	r7, r0, #24
 80085be:	f103 0104 	add.w	r1, r3, #4
 80085c2:	6029      	str	r1, [r5, #0]
 80085c4:	d501      	bpl.n	80085ca <_printf_i+0xbe>
 80085c6:	681e      	ldr	r6, [r3, #0]
 80085c8:	e003      	b.n	80085d2 <_printf_i+0xc6>
 80085ca:	0646      	lsls	r6, r0, #25
 80085cc:	d5fb      	bpl.n	80085c6 <_printf_i+0xba>
 80085ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80085d2:	2e00      	cmp	r6, #0
 80085d4:	da03      	bge.n	80085de <_printf_i+0xd2>
 80085d6:	232d      	movs	r3, #45	; 0x2d
 80085d8:	4276      	negs	r6, r6
 80085da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085de:	485a      	ldr	r0, [pc, #360]	; (8008748 <_printf_i+0x23c>)
 80085e0:	230a      	movs	r3, #10
 80085e2:	e012      	b.n	800860a <_printf_i+0xfe>
 80085e4:	682b      	ldr	r3, [r5, #0]
 80085e6:	6820      	ldr	r0, [r4, #0]
 80085e8:	1d19      	adds	r1, r3, #4
 80085ea:	6029      	str	r1, [r5, #0]
 80085ec:	0605      	lsls	r5, r0, #24
 80085ee:	d501      	bpl.n	80085f4 <_printf_i+0xe8>
 80085f0:	681e      	ldr	r6, [r3, #0]
 80085f2:	e002      	b.n	80085fa <_printf_i+0xee>
 80085f4:	0641      	lsls	r1, r0, #25
 80085f6:	d5fb      	bpl.n	80085f0 <_printf_i+0xe4>
 80085f8:	881e      	ldrh	r6, [r3, #0]
 80085fa:	4853      	ldr	r0, [pc, #332]	; (8008748 <_printf_i+0x23c>)
 80085fc:	2f6f      	cmp	r7, #111	; 0x6f
 80085fe:	bf0c      	ite	eq
 8008600:	2308      	moveq	r3, #8
 8008602:	230a      	movne	r3, #10
 8008604:	2100      	movs	r1, #0
 8008606:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800860a:	6865      	ldr	r5, [r4, #4]
 800860c:	60a5      	str	r5, [r4, #8]
 800860e:	2d00      	cmp	r5, #0
 8008610:	bfa2      	ittt	ge
 8008612:	6821      	ldrge	r1, [r4, #0]
 8008614:	f021 0104 	bicge.w	r1, r1, #4
 8008618:	6021      	strge	r1, [r4, #0]
 800861a:	b90e      	cbnz	r6, 8008620 <_printf_i+0x114>
 800861c:	2d00      	cmp	r5, #0
 800861e:	d04b      	beq.n	80086b8 <_printf_i+0x1ac>
 8008620:	4615      	mov	r5, r2
 8008622:	fbb6 f1f3 	udiv	r1, r6, r3
 8008626:	fb03 6711 	mls	r7, r3, r1, r6
 800862a:	5dc7      	ldrb	r7, [r0, r7]
 800862c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008630:	4637      	mov	r7, r6
 8008632:	42bb      	cmp	r3, r7
 8008634:	460e      	mov	r6, r1
 8008636:	d9f4      	bls.n	8008622 <_printf_i+0x116>
 8008638:	2b08      	cmp	r3, #8
 800863a:	d10b      	bne.n	8008654 <_printf_i+0x148>
 800863c:	6823      	ldr	r3, [r4, #0]
 800863e:	07de      	lsls	r6, r3, #31
 8008640:	d508      	bpl.n	8008654 <_printf_i+0x148>
 8008642:	6923      	ldr	r3, [r4, #16]
 8008644:	6861      	ldr	r1, [r4, #4]
 8008646:	4299      	cmp	r1, r3
 8008648:	bfde      	ittt	le
 800864a:	2330      	movle	r3, #48	; 0x30
 800864c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008650:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008654:	1b52      	subs	r2, r2, r5
 8008656:	6122      	str	r2, [r4, #16]
 8008658:	f8cd a000 	str.w	sl, [sp]
 800865c:	464b      	mov	r3, r9
 800865e:	aa03      	add	r2, sp, #12
 8008660:	4621      	mov	r1, r4
 8008662:	4640      	mov	r0, r8
 8008664:	f7ff fee4 	bl	8008430 <_printf_common>
 8008668:	3001      	adds	r0, #1
 800866a:	d14a      	bne.n	8008702 <_printf_i+0x1f6>
 800866c:	f04f 30ff 	mov.w	r0, #4294967295
 8008670:	b004      	add	sp, #16
 8008672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	f043 0320 	orr.w	r3, r3, #32
 800867c:	6023      	str	r3, [r4, #0]
 800867e:	4833      	ldr	r0, [pc, #204]	; (800874c <_printf_i+0x240>)
 8008680:	2778      	movs	r7, #120	; 0x78
 8008682:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008686:	6823      	ldr	r3, [r4, #0]
 8008688:	6829      	ldr	r1, [r5, #0]
 800868a:	061f      	lsls	r7, r3, #24
 800868c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008690:	d402      	bmi.n	8008698 <_printf_i+0x18c>
 8008692:	065f      	lsls	r7, r3, #25
 8008694:	bf48      	it	mi
 8008696:	b2b6      	uxthmi	r6, r6
 8008698:	07df      	lsls	r7, r3, #31
 800869a:	bf48      	it	mi
 800869c:	f043 0320 	orrmi.w	r3, r3, #32
 80086a0:	6029      	str	r1, [r5, #0]
 80086a2:	bf48      	it	mi
 80086a4:	6023      	strmi	r3, [r4, #0]
 80086a6:	b91e      	cbnz	r6, 80086b0 <_printf_i+0x1a4>
 80086a8:	6823      	ldr	r3, [r4, #0]
 80086aa:	f023 0320 	bic.w	r3, r3, #32
 80086ae:	6023      	str	r3, [r4, #0]
 80086b0:	2310      	movs	r3, #16
 80086b2:	e7a7      	b.n	8008604 <_printf_i+0xf8>
 80086b4:	4824      	ldr	r0, [pc, #144]	; (8008748 <_printf_i+0x23c>)
 80086b6:	e7e4      	b.n	8008682 <_printf_i+0x176>
 80086b8:	4615      	mov	r5, r2
 80086ba:	e7bd      	b.n	8008638 <_printf_i+0x12c>
 80086bc:	682b      	ldr	r3, [r5, #0]
 80086be:	6826      	ldr	r6, [r4, #0]
 80086c0:	6961      	ldr	r1, [r4, #20]
 80086c2:	1d18      	adds	r0, r3, #4
 80086c4:	6028      	str	r0, [r5, #0]
 80086c6:	0635      	lsls	r5, r6, #24
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	d501      	bpl.n	80086d0 <_printf_i+0x1c4>
 80086cc:	6019      	str	r1, [r3, #0]
 80086ce:	e002      	b.n	80086d6 <_printf_i+0x1ca>
 80086d0:	0670      	lsls	r0, r6, #25
 80086d2:	d5fb      	bpl.n	80086cc <_printf_i+0x1c0>
 80086d4:	8019      	strh	r1, [r3, #0]
 80086d6:	2300      	movs	r3, #0
 80086d8:	6123      	str	r3, [r4, #16]
 80086da:	4615      	mov	r5, r2
 80086dc:	e7bc      	b.n	8008658 <_printf_i+0x14c>
 80086de:	682b      	ldr	r3, [r5, #0]
 80086e0:	1d1a      	adds	r2, r3, #4
 80086e2:	602a      	str	r2, [r5, #0]
 80086e4:	681d      	ldr	r5, [r3, #0]
 80086e6:	6862      	ldr	r2, [r4, #4]
 80086e8:	2100      	movs	r1, #0
 80086ea:	4628      	mov	r0, r5
 80086ec:	f7f7 fd70 	bl	80001d0 <memchr>
 80086f0:	b108      	cbz	r0, 80086f6 <_printf_i+0x1ea>
 80086f2:	1b40      	subs	r0, r0, r5
 80086f4:	6060      	str	r0, [r4, #4]
 80086f6:	6863      	ldr	r3, [r4, #4]
 80086f8:	6123      	str	r3, [r4, #16]
 80086fa:	2300      	movs	r3, #0
 80086fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008700:	e7aa      	b.n	8008658 <_printf_i+0x14c>
 8008702:	6923      	ldr	r3, [r4, #16]
 8008704:	462a      	mov	r2, r5
 8008706:	4649      	mov	r1, r9
 8008708:	4640      	mov	r0, r8
 800870a:	47d0      	blx	sl
 800870c:	3001      	adds	r0, #1
 800870e:	d0ad      	beq.n	800866c <_printf_i+0x160>
 8008710:	6823      	ldr	r3, [r4, #0]
 8008712:	079b      	lsls	r3, r3, #30
 8008714:	d413      	bmi.n	800873e <_printf_i+0x232>
 8008716:	68e0      	ldr	r0, [r4, #12]
 8008718:	9b03      	ldr	r3, [sp, #12]
 800871a:	4298      	cmp	r0, r3
 800871c:	bfb8      	it	lt
 800871e:	4618      	movlt	r0, r3
 8008720:	e7a6      	b.n	8008670 <_printf_i+0x164>
 8008722:	2301      	movs	r3, #1
 8008724:	4632      	mov	r2, r6
 8008726:	4649      	mov	r1, r9
 8008728:	4640      	mov	r0, r8
 800872a:	47d0      	blx	sl
 800872c:	3001      	adds	r0, #1
 800872e:	d09d      	beq.n	800866c <_printf_i+0x160>
 8008730:	3501      	adds	r5, #1
 8008732:	68e3      	ldr	r3, [r4, #12]
 8008734:	9903      	ldr	r1, [sp, #12]
 8008736:	1a5b      	subs	r3, r3, r1
 8008738:	42ab      	cmp	r3, r5
 800873a:	dcf2      	bgt.n	8008722 <_printf_i+0x216>
 800873c:	e7eb      	b.n	8008716 <_printf_i+0x20a>
 800873e:	2500      	movs	r5, #0
 8008740:	f104 0619 	add.w	r6, r4, #25
 8008744:	e7f5      	b.n	8008732 <_printf_i+0x226>
 8008746:	bf00      	nop
 8008748:	0800a9b6 	.word	0x0800a9b6
 800874c:	0800a9c7 	.word	0x0800a9c7

08008750 <std>:
 8008750:	2300      	movs	r3, #0
 8008752:	b510      	push	{r4, lr}
 8008754:	4604      	mov	r4, r0
 8008756:	e9c0 3300 	strd	r3, r3, [r0]
 800875a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800875e:	6083      	str	r3, [r0, #8]
 8008760:	8181      	strh	r1, [r0, #12]
 8008762:	6643      	str	r3, [r0, #100]	; 0x64
 8008764:	81c2      	strh	r2, [r0, #14]
 8008766:	6183      	str	r3, [r0, #24]
 8008768:	4619      	mov	r1, r3
 800876a:	2208      	movs	r2, #8
 800876c:	305c      	adds	r0, #92	; 0x5c
 800876e:	f000 f9e5 	bl	8008b3c <memset>
 8008772:	4b05      	ldr	r3, [pc, #20]	; (8008788 <std+0x38>)
 8008774:	6263      	str	r3, [r4, #36]	; 0x24
 8008776:	4b05      	ldr	r3, [pc, #20]	; (800878c <std+0x3c>)
 8008778:	62a3      	str	r3, [r4, #40]	; 0x28
 800877a:	4b05      	ldr	r3, [pc, #20]	; (8008790 <std+0x40>)
 800877c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800877e:	4b05      	ldr	r3, [pc, #20]	; (8008794 <std+0x44>)
 8008780:	6224      	str	r4, [r4, #32]
 8008782:	6323      	str	r3, [r4, #48]	; 0x30
 8008784:	bd10      	pop	{r4, pc}
 8008786:	bf00      	nop
 8008788:	0800898d 	.word	0x0800898d
 800878c:	080089af 	.word	0x080089af
 8008790:	080089e7 	.word	0x080089e7
 8008794:	08008a0b 	.word	0x08008a0b

08008798 <stdio_exit_handler>:
 8008798:	4a02      	ldr	r2, [pc, #8]	; (80087a4 <stdio_exit_handler+0xc>)
 800879a:	4903      	ldr	r1, [pc, #12]	; (80087a8 <stdio_exit_handler+0x10>)
 800879c:	4803      	ldr	r0, [pc, #12]	; (80087ac <stdio_exit_handler+0x14>)
 800879e:	f000 b869 	b.w	8008874 <_fwalk_sglue>
 80087a2:	bf00      	nop
 80087a4:	20000010 	.word	0x20000010
 80087a8:	0800a5b9 	.word	0x0800a5b9
 80087ac:	2000001c 	.word	0x2000001c

080087b0 <cleanup_stdio>:
 80087b0:	6841      	ldr	r1, [r0, #4]
 80087b2:	4b0c      	ldr	r3, [pc, #48]	; (80087e4 <cleanup_stdio+0x34>)
 80087b4:	4299      	cmp	r1, r3
 80087b6:	b510      	push	{r4, lr}
 80087b8:	4604      	mov	r4, r0
 80087ba:	d001      	beq.n	80087c0 <cleanup_stdio+0x10>
 80087bc:	f001 fefc 	bl	800a5b8 <_fflush_r>
 80087c0:	68a1      	ldr	r1, [r4, #8]
 80087c2:	4b09      	ldr	r3, [pc, #36]	; (80087e8 <cleanup_stdio+0x38>)
 80087c4:	4299      	cmp	r1, r3
 80087c6:	d002      	beq.n	80087ce <cleanup_stdio+0x1e>
 80087c8:	4620      	mov	r0, r4
 80087ca:	f001 fef5 	bl	800a5b8 <_fflush_r>
 80087ce:	68e1      	ldr	r1, [r4, #12]
 80087d0:	4b06      	ldr	r3, [pc, #24]	; (80087ec <cleanup_stdio+0x3c>)
 80087d2:	4299      	cmp	r1, r3
 80087d4:	d004      	beq.n	80087e0 <cleanup_stdio+0x30>
 80087d6:	4620      	mov	r0, r4
 80087d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087dc:	f001 beec 	b.w	800a5b8 <_fflush_r>
 80087e0:	bd10      	pop	{r4, pc}
 80087e2:	bf00      	nop
 80087e4:	200003d4 	.word	0x200003d4
 80087e8:	2000043c 	.word	0x2000043c
 80087ec:	200004a4 	.word	0x200004a4

080087f0 <global_stdio_init.part.0>:
 80087f0:	b510      	push	{r4, lr}
 80087f2:	4b0b      	ldr	r3, [pc, #44]	; (8008820 <global_stdio_init.part.0+0x30>)
 80087f4:	4c0b      	ldr	r4, [pc, #44]	; (8008824 <global_stdio_init.part.0+0x34>)
 80087f6:	4a0c      	ldr	r2, [pc, #48]	; (8008828 <global_stdio_init.part.0+0x38>)
 80087f8:	601a      	str	r2, [r3, #0]
 80087fa:	4620      	mov	r0, r4
 80087fc:	2200      	movs	r2, #0
 80087fe:	2104      	movs	r1, #4
 8008800:	f7ff ffa6 	bl	8008750 <std>
 8008804:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008808:	2201      	movs	r2, #1
 800880a:	2109      	movs	r1, #9
 800880c:	f7ff ffa0 	bl	8008750 <std>
 8008810:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008814:	2202      	movs	r2, #2
 8008816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800881a:	2112      	movs	r1, #18
 800881c:	f7ff bf98 	b.w	8008750 <std>
 8008820:	2000050c 	.word	0x2000050c
 8008824:	200003d4 	.word	0x200003d4
 8008828:	08008799 	.word	0x08008799

0800882c <__sfp_lock_acquire>:
 800882c:	4801      	ldr	r0, [pc, #4]	; (8008834 <__sfp_lock_acquire+0x8>)
 800882e:	f000 ba01 	b.w	8008c34 <__retarget_lock_acquire_recursive>
 8008832:	bf00      	nop
 8008834:	20000515 	.word	0x20000515

08008838 <__sfp_lock_release>:
 8008838:	4801      	ldr	r0, [pc, #4]	; (8008840 <__sfp_lock_release+0x8>)
 800883a:	f000 b9fc 	b.w	8008c36 <__retarget_lock_release_recursive>
 800883e:	bf00      	nop
 8008840:	20000515 	.word	0x20000515

08008844 <__sinit>:
 8008844:	b510      	push	{r4, lr}
 8008846:	4604      	mov	r4, r0
 8008848:	f7ff fff0 	bl	800882c <__sfp_lock_acquire>
 800884c:	6a23      	ldr	r3, [r4, #32]
 800884e:	b11b      	cbz	r3, 8008858 <__sinit+0x14>
 8008850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008854:	f7ff bff0 	b.w	8008838 <__sfp_lock_release>
 8008858:	4b04      	ldr	r3, [pc, #16]	; (800886c <__sinit+0x28>)
 800885a:	6223      	str	r3, [r4, #32]
 800885c:	4b04      	ldr	r3, [pc, #16]	; (8008870 <__sinit+0x2c>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1f5      	bne.n	8008850 <__sinit+0xc>
 8008864:	f7ff ffc4 	bl	80087f0 <global_stdio_init.part.0>
 8008868:	e7f2      	b.n	8008850 <__sinit+0xc>
 800886a:	bf00      	nop
 800886c:	080087b1 	.word	0x080087b1
 8008870:	2000050c 	.word	0x2000050c

08008874 <_fwalk_sglue>:
 8008874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008878:	4607      	mov	r7, r0
 800887a:	4688      	mov	r8, r1
 800887c:	4614      	mov	r4, r2
 800887e:	2600      	movs	r6, #0
 8008880:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008884:	f1b9 0901 	subs.w	r9, r9, #1
 8008888:	d505      	bpl.n	8008896 <_fwalk_sglue+0x22>
 800888a:	6824      	ldr	r4, [r4, #0]
 800888c:	2c00      	cmp	r4, #0
 800888e:	d1f7      	bne.n	8008880 <_fwalk_sglue+0xc>
 8008890:	4630      	mov	r0, r6
 8008892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008896:	89ab      	ldrh	r3, [r5, #12]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d907      	bls.n	80088ac <_fwalk_sglue+0x38>
 800889c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088a0:	3301      	adds	r3, #1
 80088a2:	d003      	beq.n	80088ac <_fwalk_sglue+0x38>
 80088a4:	4629      	mov	r1, r5
 80088a6:	4638      	mov	r0, r7
 80088a8:	47c0      	blx	r8
 80088aa:	4306      	orrs	r6, r0
 80088ac:	3568      	adds	r5, #104	; 0x68
 80088ae:	e7e9      	b.n	8008884 <_fwalk_sglue+0x10>

080088b0 <iprintf>:
 80088b0:	b40f      	push	{r0, r1, r2, r3}
 80088b2:	b507      	push	{r0, r1, r2, lr}
 80088b4:	4906      	ldr	r1, [pc, #24]	; (80088d0 <iprintf+0x20>)
 80088b6:	ab04      	add	r3, sp, #16
 80088b8:	6808      	ldr	r0, [r1, #0]
 80088ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80088be:	6881      	ldr	r1, [r0, #8]
 80088c0:	9301      	str	r3, [sp, #4]
 80088c2:	f001 fcd9 	bl	800a278 <_vfiprintf_r>
 80088c6:	b003      	add	sp, #12
 80088c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80088cc:	b004      	add	sp, #16
 80088ce:	4770      	bx	lr
 80088d0:	20000068 	.word	0x20000068

080088d4 <_puts_r>:
 80088d4:	6a03      	ldr	r3, [r0, #32]
 80088d6:	b570      	push	{r4, r5, r6, lr}
 80088d8:	6884      	ldr	r4, [r0, #8]
 80088da:	4605      	mov	r5, r0
 80088dc:	460e      	mov	r6, r1
 80088de:	b90b      	cbnz	r3, 80088e4 <_puts_r+0x10>
 80088e0:	f7ff ffb0 	bl	8008844 <__sinit>
 80088e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088e6:	07db      	lsls	r3, r3, #31
 80088e8:	d405      	bmi.n	80088f6 <_puts_r+0x22>
 80088ea:	89a3      	ldrh	r3, [r4, #12]
 80088ec:	0598      	lsls	r0, r3, #22
 80088ee:	d402      	bmi.n	80088f6 <_puts_r+0x22>
 80088f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088f2:	f000 f99f 	bl	8008c34 <__retarget_lock_acquire_recursive>
 80088f6:	89a3      	ldrh	r3, [r4, #12]
 80088f8:	0719      	lsls	r1, r3, #28
 80088fa:	d513      	bpl.n	8008924 <_puts_r+0x50>
 80088fc:	6923      	ldr	r3, [r4, #16]
 80088fe:	b18b      	cbz	r3, 8008924 <_puts_r+0x50>
 8008900:	3e01      	subs	r6, #1
 8008902:	68a3      	ldr	r3, [r4, #8]
 8008904:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008908:	3b01      	subs	r3, #1
 800890a:	60a3      	str	r3, [r4, #8]
 800890c:	b9e9      	cbnz	r1, 800894a <_puts_r+0x76>
 800890e:	2b00      	cmp	r3, #0
 8008910:	da2e      	bge.n	8008970 <_puts_r+0x9c>
 8008912:	4622      	mov	r2, r4
 8008914:	210a      	movs	r1, #10
 8008916:	4628      	mov	r0, r5
 8008918:	f000 f87b 	bl	8008a12 <__swbuf_r>
 800891c:	3001      	adds	r0, #1
 800891e:	d007      	beq.n	8008930 <_puts_r+0x5c>
 8008920:	250a      	movs	r5, #10
 8008922:	e007      	b.n	8008934 <_puts_r+0x60>
 8008924:	4621      	mov	r1, r4
 8008926:	4628      	mov	r0, r5
 8008928:	f000 f8b0 	bl	8008a8c <__swsetup_r>
 800892c:	2800      	cmp	r0, #0
 800892e:	d0e7      	beq.n	8008900 <_puts_r+0x2c>
 8008930:	f04f 35ff 	mov.w	r5, #4294967295
 8008934:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008936:	07da      	lsls	r2, r3, #31
 8008938:	d405      	bmi.n	8008946 <_puts_r+0x72>
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	059b      	lsls	r3, r3, #22
 800893e:	d402      	bmi.n	8008946 <_puts_r+0x72>
 8008940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008942:	f000 f978 	bl	8008c36 <__retarget_lock_release_recursive>
 8008946:	4628      	mov	r0, r5
 8008948:	bd70      	pop	{r4, r5, r6, pc}
 800894a:	2b00      	cmp	r3, #0
 800894c:	da04      	bge.n	8008958 <_puts_r+0x84>
 800894e:	69a2      	ldr	r2, [r4, #24]
 8008950:	429a      	cmp	r2, r3
 8008952:	dc06      	bgt.n	8008962 <_puts_r+0x8e>
 8008954:	290a      	cmp	r1, #10
 8008956:	d004      	beq.n	8008962 <_puts_r+0x8e>
 8008958:	6823      	ldr	r3, [r4, #0]
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	6022      	str	r2, [r4, #0]
 800895e:	7019      	strb	r1, [r3, #0]
 8008960:	e7cf      	b.n	8008902 <_puts_r+0x2e>
 8008962:	4622      	mov	r2, r4
 8008964:	4628      	mov	r0, r5
 8008966:	f000 f854 	bl	8008a12 <__swbuf_r>
 800896a:	3001      	adds	r0, #1
 800896c:	d1c9      	bne.n	8008902 <_puts_r+0x2e>
 800896e:	e7df      	b.n	8008930 <_puts_r+0x5c>
 8008970:	6823      	ldr	r3, [r4, #0]
 8008972:	250a      	movs	r5, #10
 8008974:	1c5a      	adds	r2, r3, #1
 8008976:	6022      	str	r2, [r4, #0]
 8008978:	701d      	strb	r5, [r3, #0]
 800897a:	e7db      	b.n	8008934 <_puts_r+0x60>

0800897c <puts>:
 800897c:	4b02      	ldr	r3, [pc, #8]	; (8008988 <puts+0xc>)
 800897e:	4601      	mov	r1, r0
 8008980:	6818      	ldr	r0, [r3, #0]
 8008982:	f7ff bfa7 	b.w	80088d4 <_puts_r>
 8008986:	bf00      	nop
 8008988:	20000068 	.word	0x20000068

0800898c <__sread>:
 800898c:	b510      	push	{r4, lr}
 800898e:	460c      	mov	r4, r1
 8008990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008994:	f000 f900 	bl	8008b98 <_read_r>
 8008998:	2800      	cmp	r0, #0
 800899a:	bfab      	itete	ge
 800899c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800899e:	89a3      	ldrhlt	r3, [r4, #12]
 80089a0:	181b      	addge	r3, r3, r0
 80089a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089a6:	bfac      	ite	ge
 80089a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80089aa:	81a3      	strhlt	r3, [r4, #12]
 80089ac:	bd10      	pop	{r4, pc}

080089ae <__swrite>:
 80089ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089b2:	461f      	mov	r7, r3
 80089b4:	898b      	ldrh	r3, [r1, #12]
 80089b6:	05db      	lsls	r3, r3, #23
 80089b8:	4605      	mov	r5, r0
 80089ba:	460c      	mov	r4, r1
 80089bc:	4616      	mov	r6, r2
 80089be:	d505      	bpl.n	80089cc <__swrite+0x1e>
 80089c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089c4:	2302      	movs	r3, #2
 80089c6:	2200      	movs	r2, #0
 80089c8:	f000 f8d4 	bl	8008b74 <_lseek_r>
 80089cc:	89a3      	ldrh	r3, [r4, #12]
 80089ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089d6:	81a3      	strh	r3, [r4, #12]
 80089d8:	4632      	mov	r2, r6
 80089da:	463b      	mov	r3, r7
 80089dc:	4628      	mov	r0, r5
 80089de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089e2:	f000 b8eb 	b.w	8008bbc <_write_r>

080089e6 <__sseek>:
 80089e6:	b510      	push	{r4, lr}
 80089e8:	460c      	mov	r4, r1
 80089ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ee:	f000 f8c1 	bl	8008b74 <_lseek_r>
 80089f2:	1c43      	adds	r3, r0, #1
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	bf15      	itete	ne
 80089f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80089fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a02:	81a3      	strheq	r3, [r4, #12]
 8008a04:	bf18      	it	ne
 8008a06:	81a3      	strhne	r3, [r4, #12]
 8008a08:	bd10      	pop	{r4, pc}

08008a0a <__sclose>:
 8008a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a0e:	f000 b8a1 	b.w	8008b54 <_close_r>

08008a12 <__swbuf_r>:
 8008a12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a14:	460e      	mov	r6, r1
 8008a16:	4614      	mov	r4, r2
 8008a18:	4605      	mov	r5, r0
 8008a1a:	b118      	cbz	r0, 8008a24 <__swbuf_r+0x12>
 8008a1c:	6a03      	ldr	r3, [r0, #32]
 8008a1e:	b90b      	cbnz	r3, 8008a24 <__swbuf_r+0x12>
 8008a20:	f7ff ff10 	bl	8008844 <__sinit>
 8008a24:	69a3      	ldr	r3, [r4, #24]
 8008a26:	60a3      	str	r3, [r4, #8]
 8008a28:	89a3      	ldrh	r3, [r4, #12]
 8008a2a:	071a      	lsls	r2, r3, #28
 8008a2c:	d525      	bpl.n	8008a7a <__swbuf_r+0x68>
 8008a2e:	6923      	ldr	r3, [r4, #16]
 8008a30:	b31b      	cbz	r3, 8008a7a <__swbuf_r+0x68>
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	6922      	ldr	r2, [r4, #16]
 8008a36:	1a98      	subs	r0, r3, r2
 8008a38:	6963      	ldr	r3, [r4, #20]
 8008a3a:	b2f6      	uxtb	r6, r6
 8008a3c:	4283      	cmp	r3, r0
 8008a3e:	4637      	mov	r7, r6
 8008a40:	dc04      	bgt.n	8008a4c <__swbuf_r+0x3a>
 8008a42:	4621      	mov	r1, r4
 8008a44:	4628      	mov	r0, r5
 8008a46:	f001 fdb7 	bl	800a5b8 <_fflush_r>
 8008a4a:	b9e0      	cbnz	r0, 8008a86 <__swbuf_r+0x74>
 8008a4c:	68a3      	ldr	r3, [r4, #8]
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	60a3      	str	r3, [r4, #8]
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	1c5a      	adds	r2, r3, #1
 8008a56:	6022      	str	r2, [r4, #0]
 8008a58:	701e      	strb	r6, [r3, #0]
 8008a5a:	6962      	ldr	r2, [r4, #20]
 8008a5c:	1c43      	adds	r3, r0, #1
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d004      	beq.n	8008a6c <__swbuf_r+0x5a>
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	07db      	lsls	r3, r3, #31
 8008a66:	d506      	bpl.n	8008a76 <__swbuf_r+0x64>
 8008a68:	2e0a      	cmp	r6, #10
 8008a6a:	d104      	bne.n	8008a76 <__swbuf_r+0x64>
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	4628      	mov	r0, r5
 8008a70:	f001 fda2 	bl	800a5b8 <_fflush_r>
 8008a74:	b938      	cbnz	r0, 8008a86 <__swbuf_r+0x74>
 8008a76:	4638      	mov	r0, r7
 8008a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a7a:	4621      	mov	r1, r4
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	f000 f805 	bl	8008a8c <__swsetup_r>
 8008a82:	2800      	cmp	r0, #0
 8008a84:	d0d5      	beq.n	8008a32 <__swbuf_r+0x20>
 8008a86:	f04f 37ff 	mov.w	r7, #4294967295
 8008a8a:	e7f4      	b.n	8008a76 <__swbuf_r+0x64>

08008a8c <__swsetup_r>:
 8008a8c:	b538      	push	{r3, r4, r5, lr}
 8008a8e:	4b2a      	ldr	r3, [pc, #168]	; (8008b38 <__swsetup_r+0xac>)
 8008a90:	4605      	mov	r5, r0
 8008a92:	6818      	ldr	r0, [r3, #0]
 8008a94:	460c      	mov	r4, r1
 8008a96:	b118      	cbz	r0, 8008aa0 <__swsetup_r+0x14>
 8008a98:	6a03      	ldr	r3, [r0, #32]
 8008a9a:	b90b      	cbnz	r3, 8008aa0 <__swsetup_r+0x14>
 8008a9c:	f7ff fed2 	bl	8008844 <__sinit>
 8008aa0:	89a3      	ldrh	r3, [r4, #12]
 8008aa2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008aa6:	0718      	lsls	r0, r3, #28
 8008aa8:	d422      	bmi.n	8008af0 <__swsetup_r+0x64>
 8008aaa:	06d9      	lsls	r1, r3, #27
 8008aac:	d407      	bmi.n	8008abe <__swsetup_r+0x32>
 8008aae:	2309      	movs	r3, #9
 8008ab0:	602b      	str	r3, [r5, #0]
 8008ab2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ab6:	81a3      	strh	r3, [r4, #12]
 8008ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8008abc:	e034      	b.n	8008b28 <__swsetup_r+0x9c>
 8008abe:	0758      	lsls	r0, r3, #29
 8008ac0:	d512      	bpl.n	8008ae8 <__swsetup_r+0x5c>
 8008ac2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ac4:	b141      	cbz	r1, 8008ad8 <__swsetup_r+0x4c>
 8008ac6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008aca:	4299      	cmp	r1, r3
 8008acc:	d002      	beq.n	8008ad4 <__swsetup_r+0x48>
 8008ace:	4628      	mov	r0, r5
 8008ad0:	f000 ff2c 	bl	800992c <_free_r>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	6363      	str	r3, [r4, #52]	; 0x34
 8008ad8:	89a3      	ldrh	r3, [r4, #12]
 8008ada:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ade:	81a3      	strh	r3, [r4, #12]
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	6063      	str	r3, [r4, #4]
 8008ae4:	6923      	ldr	r3, [r4, #16]
 8008ae6:	6023      	str	r3, [r4, #0]
 8008ae8:	89a3      	ldrh	r3, [r4, #12]
 8008aea:	f043 0308 	orr.w	r3, r3, #8
 8008aee:	81a3      	strh	r3, [r4, #12]
 8008af0:	6923      	ldr	r3, [r4, #16]
 8008af2:	b94b      	cbnz	r3, 8008b08 <__swsetup_r+0x7c>
 8008af4:	89a3      	ldrh	r3, [r4, #12]
 8008af6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008afe:	d003      	beq.n	8008b08 <__swsetup_r+0x7c>
 8008b00:	4621      	mov	r1, r4
 8008b02:	4628      	mov	r0, r5
 8008b04:	f001 fda6 	bl	800a654 <__smakebuf_r>
 8008b08:	89a0      	ldrh	r0, [r4, #12]
 8008b0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b0e:	f010 0301 	ands.w	r3, r0, #1
 8008b12:	d00a      	beq.n	8008b2a <__swsetup_r+0x9e>
 8008b14:	2300      	movs	r3, #0
 8008b16:	60a3      	str	r3, [r4, #8]
 8008b18:	6963      	ldr	r3, [r4, #20]
 8008b1a:	425b      	negs	r3, r3
 8008b1c:	61a3      	str	r3, [r4, #24]
 8008b1e:	6923      	ldr	r3, [r4, #16]
 8008b20:	b943      	cbnz	r3, 8008b34 <__swsetup_r+0xa8>
 8008b22:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b26:	d1c4      	bne.n	8008ab2 <__swsetup_r+0x26>
 8008b28:	bd38      	pop	{r3, r4, r5, pc}
 8008b2a:	0781      	lsls	r1, r0, #30
 8008b2c:	bf58      	it	pl
 8008b2e:	6963      	ldrpl	r3, [r4, #20]
 8008b30:	60a3      	str	r3, [r4, #8]
 8008b32:	e7f4      	b.n	8008b1e <__swsetup_r+0x92>
 8008b34:	2000      	movs	r0, #0
 8008b36:	e7f7      	b.n	8008b28 <__swsetup_r+0x9c>
 8008b38:	20000068 	.word	0x20000068

08008b3c <memset>:
 8008b3c:	4402      	add	r2, r0
 8008b3e:	4603      	mov	r3, r0
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d100      	bne.n	8008b46 <memset+0xa>
 8008b44:	4770      	bx	lr
 8008b46:	f803 1b01 	strb.w	r1, [r3], #1
 8008b4a:	e7f9      	b.n	8008b40 <memset+0x4>

08008b4c <_localeconv_r>:
 8008b4c:	4800      	ldr	r0, [pc, #0]	; (8008b50 <_localeconv_r+0x4>)
 8008b4e:	4770      	bx	lr
 8008b50:	2000015c 	.word	0x2000015c

08008b54 <_close_r>:
 8008b54:	b538      	push	{r3, r4, r5, lr}
 8008b56:	4d06      	ldr	r5, [pc, #24]	; (8008b70 <_close_r+0x1c>)
 8008b58:	2300      	movs	r3, #0
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	4608      	mov	r0, r1
 8008b5e:	602b      	str	r3, [r5, #0]
 8008b60:	f7f9 f856 	bl	8001c10 <_close>
 8008b64:	1c43      	adds	r3, r0, #1
 8008b66:	d102      	bne.n	8008b6e <_close_r+0x1a>
 8008b68:	682b      	ldr	r3, [r5, #0]
 8008b6a:	b103      	cbz	r3, 8008b6e <_close_r+0x1a>
 8008b6c:	6023      	str	r3, [r4, #0]
 8008b6e:	bd38      	pop	{r3, r4, r5, pc}
 8008b70:	20000510 	.word	0x20000510

08008b74 <_lseek_r>:
 8008b74:	b538      	push	{r3, r4, r5, lr}
 8008b76:	4d07      	ldr	r5, [pc, #28]	; (8008b94 <_lseek_r+0x20>)
 8008b78:	4604      	mov	r4, r0
 8008b7a:	4608      	mov	r0, r1
 8008b7c:	4611      	mov	r1, r2
 8008b7e:	2200      	movs	r2, #0
 8008b80:	602a      	str	r2, [r5, #0]
 8008b82:	461a      	mov	r2, r3
 8008b84:	f7f9 f86b 	bl	8001c5e <_lseek>
 8008b88:	1c43      	adds	r3, r0, #1
 8008b8a:	d102      	bne.n	8008b92 <_lseek_r+0x1e>
 8008b8c:	682b      	ldr	r3, [r5, #0]
 8008b8e:	b103      	cbz	r3, 8008b92 <_lseek_r+0x1e>
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	bd38      	pop	{r3, r4, r5, pc}
 8008b94:	20000510 	.word	0x20000510

08008b98 <_read_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	4d07      	ldr	r5, [pc, #28]	; (8008bb8 <_read_r+0x20>)
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	4608      	mov	r0, r1
 8008ba0:	4611      	mov	r1, r2
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	602a      	str	r2, [r5, #0]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	f7f9 f800 	bl	8001bac <_read>
 8008bac:	1c43      	adds	r3, r0, #1
 8008bae:	d102      	bne.n	8008bb6 <_read_r+0x1e>
 8008bb0:	682b      	ldr	r3, [r5, #0]
 8008bb2:	b103      	cbz	r3, 8008bb6 <_read_r+0x1e>
 8008bb4:	6023      	str	r3, [r4, #0]
 8008bb6:	bd38      	pop	{r3, r4, r5, pc}
 8008bb8:	20000510 	.word	0x20000510

08008bbc <_write_r>:
 8008bbc:	b538      	push	{r3, r4, r5, lr}
 8008bbe:	4d07      	ldr	r5, [pc, #28]	; (8008bdc <_write_r+0x20>)
 8008bc0:	4604      	mov	r4, r0
 8008bc2:	4608      	mov	r0, r1
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	602a      	str	r2, [r5, #0]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	f7f9 f80c 	bl	8001be8 <_write>
 8008bd0:	1c43      	adds	r3, r0, #1
 8008bd2:	d102      	bne.n	8008bda <_write_r+0x1e>
 8008bd4:	682b      	ldr	r3, [r5, #0]
 8008bd6:	b103      	cbz	r3, 8008bda <_write_r+0x1e>
 8008bd8:	6023      	str	r3, [r4, #0]
 8008bda:	bd38      	pop	{r3, r4, r5, pc}
 8008bdc:	20000510 	.word	0x20000510

08008be0 <__errno>:
 8008be0:	4b01      	ldr	r3, [pc, #4]	; (8008be8 <__errno+0x8>)
 8008be2:	6818      	ldr	r0, [r3, #0]
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	20000068 	.word	0x20000068

08008bec <__libc_init_array>:
 8008bec:	b570      	push	{r4, r5, r6, lr}
 8008bee:	4d0d      	ldr	r5, [pc, #52]	; (8008c24 <__libc_init_array+0x38>)
 8008bf0:	4c0d      	ldr	r4, [pc, #52]	; (8008c28 <__libc_init_array+0x3c>)
 8008bf2:	1b64      	subs	r4, r4, r5
 8008bf4:	10a4      	asrs	r4, r4, #2
 8008bf6:	2600      	movs	r6, #0
 8008bf8:	42a6      	cmp	r6, r4
 8008bfa:	d109      	bne.n	8008c10 <__libc_init_array+0x24>
 8008bfc:	4d0b      	ldr	r5, [pc, #44]	; (8008c2c <__libc_init_array+0x40>)
 8008bfe:	4c0c      	ldr	r4, [pc, #48]	; (8008c30 <__libc_init_array+0x44>)
 8008c00:	f001 fe56 	bl	800a8b0 <_init>
 8008c04:	1b64      	subs	r4, r4, r5
 8008c06:	10a4      	asrs	r4, r4, #2
 8008c08:	2600      	movs	r6, #0
 8008c0a:	42a6      	cmp	r6, r4
 8008c0c:	d105      	bne.n	8008c1a <__libc_init_array+0x2e>
 8008c0e:	bd70      	pop	{r4, r5, r6, pc}
 8008c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c14:	4798      	blx	r3
 8008c16:	3601      	adds	r6, #1
 8008c18:	e7ee      	b.n	8008bf8 <__libc_init_array+0xc>
 8008c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c1e:	4798      	blx	r3
 8008c20:	3601      	adds	r6, #1
 8008c22:	e7f2      	b.n	8008c0a <__libc_init_array+0x1e>
 8008c24:	0800ad1c 	.word	0x0800ad1c
 8008c28:	0800ad1c 	.word	0x0800ad1c
 8008c2c:	0800ad1c 	.word	0x0800ad1c
 8008c30:	0800ad20 	.word	0x0800ad20

08008c34 <__retarget_lock_acquire_recursive>:
 8008c34:	4770      	bx	lr

08008c36 <__retarget_lock_release_recursive>:
 8008c36:	4770      	bx	lr

08008c38 <quorem>:
 8008c38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3c:	6903      	ldr	r3, [r0, #16]
 8008c3e:	690c      	ldr	r4, [r1, #16]
 8008c40:	42a3      	cmp	r3, r4
 8008c42:	4607      	mov	r7, r0
 8008c44:	db7e      	blt.n	8008d44 <quorem+0x10c>
 8008c46:	3c01      	subs	r4, #1
 8008c48:	f101 0814 	add.w	r8, r1, #20
 8008c4c:	f100 0514 	add.w	r5, r0, #20
 8008c50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c54:	9301      	str	r3, [sp, #4]
 8008c56:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	429a      	cmp	r2, r3
 8008c62:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008c66:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c6a:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c6e:	d331      	bcc.n	8008cd4 <quorem+0x9c>
 8008c70:	f04f 0e00 	mov.w	lr, #0
 8008c74:	4640      	mov	r0, r8
 8008c76:	46ac      	mov	ip, r5
 8008c78:	46f2      	mov	sl, lr
 8008c7a:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c7e:	b293      	uxth	r3, r2
 8008c80:	fb06 e303 	mla	r3, r6, r3, lr
 8008c84:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c88:	0c1a      	lsrs	r2, r3, #16
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	ebaa 0303 	sub.w	r3, sl, r3
 8008c90:	f8dc a000 	ldr.w	sl, [ip]
 8008c94:	fa13 f38a 	uxtah	r3, r3, sl
 8008c98:	fb06 220e 	mla	r2, r6, lr, r2
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	9b00      	ldr	r3, [sp, #0]
 8008ca0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ca4:	b292      	uxth	r2, r2
 8008ca6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008caa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008cae:	f8bd 3000 	ldrh.w	r3, [sp]
 8008cb2:	4581      	cmp	r9, r0
 8008cb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cb8:	f84c 3b04 	str.w	r3, [ip], #4
 8008cbc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008cc0:	d2db      	bcs.n	8008c7a <quorem+0x42>
 8008cc2:	f855 300b 	ldr.w	r3, [r5, fp]
 8008cc6:	b92b      	cbnz	r3, 8008cd4 <quorem+0x9c>
 8008cc8:	9b01      	ldr	r3, [sp, #4]
 8008cca:	3b04      	subs	r3, #4
 8008ccc:	429d      	cmp	r5, r3
 8008cce:	461a      	mov	r2, r3
 8008cd0:	d32c      	bcc.n	8008d2c <quorem+0xf4>
 8008cd2:	613c      	str	r4, [r7, #16]
 8008cd4:	4638      	mov	r0, r7
 8008cd6:	f001 f9a5 	bl	800a024 <__mcmp>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	db22      	blt.n	8008d24 <quorem+0xec>
 8008cde:	3601      	adds	r6, #1
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	2000      	movs	r0, #0
 8008ce4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ce8:	f8d1 c000 	ldr.w	ip, [r1]
 8008cec:	b293      	uxth	r3, r2
 8008cee:	1ac3      	subs	r3, r0, r3
 8008cf0:	0c12      	lsrs	r2, r2, #16
 8008cf2:	fa13 f38c 	uxtah	r3, r3, ip
 8008cf6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008cfa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d04:	45c1      	cmp	r9, r8
 8008d06:	f841 3b04 	str.w	r3, [r1], #4
 8008d0a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008d0e:	d2e9      	bcs.n	8008ce4 <quorem+0xac>
 8008d10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d18:	b922      	cbnz	r2, 8008d24 <quorem+0xec>
 8008d1a:	3b04      	subs	r3, #4
 8008d1c:	429d      	cmp	r5, r3
 8008d1e:	461a      	mov	r2, r3
 8008d20:	d30a      	bcc.n	8008d38 <quorem+0x100>
 8008d22:	613c      	str	r4, [r7, #16]
 8008d24:	4630      	mov	r0, r6
 8008d26:	b003      	add	sp, #12
 8008d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d2c:	6812      	ldr	r2, [r2, #0]
 8008d2e:	3b04      	subs	r3, #4
 8008d30:	2a00      	cmp	r2, #0
 8008d32:	d1ce      	bne.n	8008cd2 <quorem+0x9a>
 8008d34:	3c01      	subs	r4, #1
 8008d36:	e7c9      	b.n	8008ccc <quorem+0x94>
 8008d38:	6812      	ldr	r2, [r2, #0]
 8008d3a:	3b04      	subs	r3, #4
 8008d3c:	2a00      	cmp	r2, #0
 8008d3e:	d1f0      	bne.n	8008d22 <quorem+0xea>
 8008d40:	3c01      	subs	r4, #1
 8008d42:	e7eb      	b.n	8008d1c <quorem+0xe4>
 8008d44:	2000      	movs	r0, #0
 8008d46:	e7ee      	b.n	8008d26 <quorem+0xee>

08008d48 <_dtoa_r>:
 8008d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4c:	ed2d 8b04 	vpush	{d8-d9}
 8008d50:	69c5      	ldr	r5, [r0, #28]
 8008d52:	b093      	sub	sp, #76	; 0x4c
 8008d54:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008d58:	ec57 6b10 	vmov	r6, r7, d0
 8008d5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008d60:	9107      	str	r1, [sp, #28]
 8008d62:	4604      	mov	r4, r0
 8008d64:	920a      	str	r2, [sp, #40]	; 0x28
 8008d66:	930d      	str	r3, [sp, #52]	; 0x34
 8008d68:	b975      	cbnz	r5, 8008d88 <_dtoa_r+0x40>
 8008d6a:	2010      	movs	r0, #16
 8008d6c:	f000 fe2a 	bl	80099c4 <malloc>
 8008d70:	4602      	mov	r2, r0
 8008d72:	61e0      	str	r0, [r4, #28]
 8008d74:	b920      	cbnz	r0, 8008d80 <_dtoa_r+0x38>
 8008d76:	4bae      	ldr	r3, [pc, #696]	; (8009030 <_dtoa_r+0x2e8>)
 8008d78:	21ef      	movs	r1, #239	; 0xef
 8008d7a:	48ae      	ldr	r0, [pc, #696]	; (8009034 <_dtoa_r+0x2ec>)
 8008d7c:	f001 fce6 	bl	800a74c <__assert_func>
 8008d80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d84:	6005      	str	r5, [r0, #0]
 8008d86:	60c5      	str	r5, [r0, #12]
 8008d88:	69e3      	ldr	r3, [r4, #28]
 8008d8a:	6819      	ldr	r1, [r3, #0]
 8008d8c:	b151      	cbz	r1, 8008da4 <_dtoa_r+0x5c>
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	604a      	str	r2, [r1, #4]
 8008d92:	2301      	movs	r3, #1
 8008d94:	4093      	lsls	r3, r2
 8008d96:	608b      	str	r3, [r1, #8]
 8008d98:	4620      	mov	r0, r4
 8008d9a:	f000 ff07 	bl	8009bac <_Bfree>
 8008d9e:	69e3      	ldr	r3, [r4, #28]
 8008da0:	2200      	movs	r2, #0
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	1e3b      	subs	r3, r7, #0
 8008da6:	bfbb      	ittet	lt
 8008da8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008dac:	9303      	strlt	r3, [sp, #12]
 8008dae:	2300      	movge	r3, #0
 8008db0:	2201      	movlt	r2, #1
 8008db2:	bfac      	ite	ge
 8008db4:	f8c8 3000 	strge.w	r3, [r8]
 8008db8:	f8c8 2000 	strlt.w	r2, [r8]
 8008dbc:	4b9e      	ldr	r3, [pc, #632]	; (8009038 <_dtoa_r+0x2f0>)
 8008dbe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008dc2:	ea33 0308 	bics.w	r3, r3, r8
 8008dc6:	d11b      	bne.n	8008e00 <_dtoa_r+0xb8>
 8008dc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008dca:	f242 730f 	movw	r3, #9999	; 0x270f
 8008dce:	6013      	str	r3, [r2, #0]
 8008dd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008dd4:	4333      	orrs	r3, r6
 8008dd6:	f000 8593 	beq.w	8009900 <_dtoa_r+0xbb8>
 8008dda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ddc:	b963      	cbnz	r3, 8008df8 <_dtoa_r+0xb0>
 8008dde:	4b97      	ldr	r3, [pc, #604]	; (800903c <_dtoa_r+0x2f4>)
 8008de0:	e027      	b.n	8008e32 <_dtoa_r+0xea>
 8008de2:	4b97      	ldr	r3, [pc, #604]	; (8009040 <_dtoa_r+0x2f8>)
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	3308      	adds	r3, #8
 8008de8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008dea:	6013      	str	r3, [r2, #0]
 8008dec:	9800      	ldr	r0, [sp, #0]
 8008dee:	b013      	add	sp, #76	; 0x4c
 8008df0:	ecbd 8b04 	vpop	{d8-d9}
 8008df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008df8:	4b90      	ldr	r3, [pc, #576]	; (800903c <_dtoa_r+0x2f4>)
 8008dfa:	9300      	str	r3, [sp, #0]
 8008dfc:	3303      	adds	r3, #3
 8008dfe:	e7f3      	b.n	8008de8 <_dtoa_r+0xa0>
 8008e00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e04:	2200      	movs	r2, #0
 8008e06:	ec51 0b17 	vmov	r0, r1, d7
 8008e0a:	eeb0 8a47 	vmov.f32	s16, s14
 8008e0e:	eef0 8a67 	vmov.f32	s17, s15
 8008e12:	2300      	movs	r3, #0
 8008e14:	f7f7 fe58 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e18:	4681      	mov	r9, r0
 8008e1a:	b160      	cbz	r0, 8008e36 <_dtoa_r+0xee>
 8008e1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e1e:	2301      	movs	r3, #1
 8008e20:	6013      	str	r3, [r2, #0]
 8008e22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f000 8568 	beq.w	80098fa <_dtoa_r+0xbb2>
 8008e2a:	4b86      	ldr	r3, [pc, #536]	; (8009044 <_dtoa_r+0x2fc>)
 8008e2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e2e:	6013      	str	r3, [r2, #0]
 8008e30:	3b01      	subs	r3, #1
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	e7da      	b.n	8008dec <_dtoa_r+0xa4>
 8008e36:	aa10      	add	r2, sp, #64	; 0x40
 8008e38:	a911      	add	r1, sp, #68	; 0x44
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	eeb0 0a48 	vmov.f32	s0, s16
 8008e40:	eef0 0a68 	vmov.f32	s1, s17
 8008e44:	f001 f994 	bl	800a170 <__d2b>
 8008e48:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008e4c:	4682      	mov	sl, r0
 8008e4e:	2d00      	cmp	r5, #0
 8008e50:	d07f      	beq.n	8008f52 <_dtoa_r+0x20a>
 8008e52:	ee18 3a90 	vmov	r3, s17
 8008e56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e5a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008e5e:	ec51 0b18 	vmov	r0, r1, d8
 8008e62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008e66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008e6a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008e6e:	4619      	mov	r1, r3
 8008e70:	2200      	movs	r2, #0
 8008e72:	4b75      	ldr	r3, [pc, #468]	; (8009048 <_dtoa_r+0x300>)
 8008e74:	f7f7 fa08 	bl	8000288 <__aeabi_dsub>
 8008e78:	a367      	add	r3, pc, #412	; (adr r3, 8009018 <_dtoa_r+0x2d0>)
 8008e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7e:	f7f7 fbbb 	bl	80005f8 <__aeabi_dmul>
 8008e82:	a367      	add	r3, pc, #412	; (adr r3, 8009020 <_dtoa_r+0x2d8>)
 8008e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e88:	f7f7 fa00 	bl	800028c <__adddf3>
 8008e8c:	4606      	mov	r6, r0
 8008e8e:	4628      	mov	r0, r5
 8008e90:	460f      	mov	r7, r1
 8008e92:	f7f7 fb47 	bl	8000524 <__aeabi_i2d>
 8008e96:	a364      	add	r3, pc, #400	; (adr r3, 8009028 <_dtoa_r+0x2e0>)
 8008e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9c:	f7f7 fbac 	bl	80005f8 <__aeabi_dmul>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	4639      	mov	r1, r7
 8008ea8:	f7f7 f9f0 	bl	800028c <__adddf3>
 8008eac:	4606      	mov	r6, r0
 8008eae:	460f      	mov	r7, r1
 8008eb0:	f7f7 fe52 	bl	8000b58 <__aeabi_d2iz>
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	4683      	mov	fp, r0
 8008eb8:	2300      	movs	r3, #0
 8008eba:	4630      	mov	r0, r6
 8008ebc:	4639      	mov	r1, r7
 8008ebe:	f7f7 fe0d 	bl	8000adc <__aeabi_dcmplt>
 8008ec2:	b148      	cbz	r0, 8008ed8 <_dtoa_r+0x190>
 8008ec4:	4658      	mov	r0, fp
 8008ec6:	f7f7 fb2d 	bl	8000524 <__aeabi_i2d>
 8008eca:	4632      	mov	r2, r6
 8008ecc:	463b      	mov	r3, r7
 8008ece:	f7f7 fdfb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ed2:	b908      	cbnz	r0, 8008ed8 <_dtoa_r+0x190>
 8008ed4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ed8:	f1bb 0f16 	cmp.w	fp, #22
 8008edc:	d857      	bhi.n	8008f8e <_dtoa_r+0x246>
 8008ede:	4b5b      	ldr	r3, [pc, #364]	; (800904c <_dtoa_r+0x304>)
 8008ee0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee8:	ec51 0b18 	vmov	r0, r1, d8
 8008eec:	f7f7 fdf6 	bl	8000adc <__aeabi_dcmplt>
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d04e      	beq.n	8008f92 <_dtoa_r+0x24a>
 8008ef4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ef8:	2300      	movs	r3, #0
 8008efa:	930c      	str	r3, [sp, #48]	; 0x30
 8008efc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008efe:	1b5b      	subs	r3, r3, r5
 8008f00:	1e5a      	subs	r2, r3, #1
 8008f02:	bf45      	ittet	mi
 8008f04:	f1c3 0301 	rsbmi	r3, r3, #1
 8008f08:	9305      	strmi	r3, [sp, #20]
 8008f0a:	2300      	movpl	r3, #0
 8008f0c:	2300      	movmi	r3, #0
 8008f0e:	9206      	str	r2, [sp, #24]
 8008f10:	bf54      	ite	pl
 8008f12:	9305      	strpl	r3, [sp, #20]
 8008f14:	9306      	strmi	r3, [sp, #24]
 8008f16:	f1bb 0f00 	cmp.w	fp, #0
 8008f1a:	db3c      	blt.n	8008f96 <_dtoa_r+0x24e>
 8008f1c:	9b06      	ldr	r3, [sp, #24]
 8008f1e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008f22:	445b      	add	r3, fp
 8008f24:	9306      	str	r3, [sp, #24]
 8008f26:	2300      	movs	r3, #0
 8008f28:	9308      	str	r3, [sp, #32]
 8008f2a:	9b07      	ldr	r3, [sp, #28]
 8008f2c:	2b09      	cmp	r3, #9
 8008f2e:	d868      	bhi.n	8009002 <_dtoa_r+0x2ba>
 8008f30:	2b05      	cmp	r3, #5
 8008f32:	bfc4      	itt	gt
 8008f34:	3b04      	subgt	r3, #4
 8008f36:	9307      	strgt	r3, [sp, #28]
 8008f38:	9b07      	ldr	r3, [sp, #28]
 8008f3a:	f1a3 0302 	sub.w	r3, r3, #2
 8008f3e:	bfcc      	ite	gt
 8008f40:	2500      	movgt	r5, #0
 8008f42:	2501      	movle	r5, #1
 8008f44:	2b03      	cmp	r3, #3
 8008f46:	f200 8085 	bhi.w	8009054 <_dtoa_r+0x30c>
 8008f4a:	e8df f003 	tbb	[pc, r3]
 8008f4e:	3b2e      	.short	0x3b2e
 8008f50:	5839      	.short	0x5839
 8008f52:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008f56:	441d      	add	r5, r3
 8008f58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008f5c:	2b20      	cmp	r3, #32
 8008f5e:	bfc1      	itttt	gt
 8008f60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008f64:	fa08 f803 	lslgt.w	r8, r8, r3
 8008f68:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008f6c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008f70:	bfd6      	itet	le
 8008f72:	f1c3 0320 	rsble	r3, r3, #32
 8008f76:	ea48 0003 	orrgt.w	r0, r8, r3
 8008f7a:	fa06 f003 	lslle.w	r0, r6, r3
 8008f7e:	f7f7 fac1 	bl	8000504 <__aeabi_ui2d>
 8008f82:	2201      	movs	r2, #1
 8008f84:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008f88:	3d01      	subs	r5, #1
 8008f8a:	920e      	str	r2, [sp, #56]	; 0x38
 8008f8c:	e76f      	b.n	8008e6e <_dtoa_r+0x126>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e7b3      	b.n	8008efa <_dtoa_r+0x1b2>
 8008f92:	900c      	str	r0, [sp, #48]	; 0x30
 8008f94:	e7b2      	b.n	8008efc <_dtoa_r+0x1b4>
 8008f96:	9b05      	ldr	r3, [sp, #20]
 8008f98:	eba3 030b 	sub.w	r3, r3, fp
 8008f9c:	9305      	str	r3, [sp, #20]
 8008f9e:	f1cb 0300 	rsb	r3, fp, #0
 8008fa2:	9308      	str	r3, [sp, #32]
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fa8:	e7bf      	b.n	8008f2a <_dtoa_r+0x1e2>
 8008faa:	2300      	movs	r3, #0
 8008fac:	9309      	str	r3, [sp, #36]	; 0x24
 8008fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	dc52      	bgt.n	800905a <_dtoa_r+0x312>
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	9301      	str	r3, [sp, #4]
 8008fb8:	9304      	str	r3, [sp, #16]
 8008fba:	461a      	mov	r2, r3
 8008fbc:	920a      	str	r2, [sp, #40]	; 0x28
 8008fbe:	e00b      	b.n	8008fd8 <_dtoa_r+0x290>
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e7f3      	b.n	8008fac <_dtoa_r+0x264>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fca:	445b      	add	r3, fp
 8008fcc:	9301      	str	r3, [sp, #4]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	9304      	str	r3, [sp, #16]
 8008fd4:	bfb8      	it	lt
 8008fd6:	2301      	movlt	r3, #1
 8008fd8:	69e0      	ldr	r0, [r4, #28]
 8008fda:	2100      	movs	r1, #0
 8008fdc:	2204      	movs	r2, #4
 8008fde:	f102 0614 	add.w	r6, r2, #20
 8008fe2:	429e      	cmp	r6, r3
 8008fe4:	d93d      	bls.n	8009062 <_dtoa_r+0x31a>
 8008fe6:	6041      	str	r1, [r0, #4]
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f000 fd9f 	bl	8009b2c <_Balloc>
 8008fee:	9000      	str	r0, [sp, #0]
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	d139      	bne.n	8009068 <_dtoa_r+0x320>
 8008ff4:	4b16      	ldr	r3, [pc, #88]	; (8009050 <_dtoa_r+0x308>)
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	f240 11af 	movw	r1, #431	; 0x1af
 8008ffc:	e6bd      	b.n	8008d7a <_dtoa_r+0x32>
 8008ffe:	2301      	movs	r3, #1
 8009000:	e7e1      	b.n	8008fc6 <_dtoa_r+0x27e>
 8009002:	2501      	movs	r5, #1
 8009004:	2300      	movs	r3, #0
 8009006:	9307      	str	r3, [sp, #28]
 8009008:	9509      	str	r5, [sp, #36]	; 0x24
 800900a:	f04f 33ff 	mov.w	r3, #4294967295
 800900e:	9301      	str	r3, [sp, #4]
 8009010:	9304      	str	r3, [sp, #16]
 8009012:	2200      	movs	r2, #0
 8009014:	2312      	movs	r3, #18
 8009016:	e7d1      	b.n	8008fbc <_dtoa_r+0x274>
 8009018:	636f4361 	.word	0x636f4361
 800901c:	3fd287a7 	.word	0x3fd287a7
 8009020:	8b60c8b3 	.word	0x8b60c8b3
 8009024:	3fc68a28 	.word	0x3fc68a28
 8009028:	509f79fb 	.word	0x509f79fb
 800902c:	3fd34413 	.word	0x3fd34413
 8009030:	0800a9e5 	.word	0x0800a9e5
 8009034:	0800a9fc 	.word	0x0800a9fc
 8009038:	7ff00000 	.word	0x7ff00000
 800903c:	0800a9e1 	.word	0x0800a9e1
 8009040:	0800a9d8 	.word	0x0800a9d8
 8009044:	0800a9b5 	.word	0x0800a9b5
 8009048:	3ff80000 	.word	0x3ff80000
 800904c:	0800aae8 	.word	0x0800aae8
 8009050:	0800aa54 	.word	0x0800aa54
 8009054:	2301      	movs	r3, #1
 8009056:	9309      	str	r3, [sp, #36]	; 0x24
 8009058:	e7d7      	b.n	800900a <_dtoa_r+0x2c2>
 800905a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800905c:	9301      	str	r3, [sp, #4]
 800905e:	9304      	str	r3, [sp, #16]
 8009060:	e7ba      	b.n	8008fd8 <_dtoa_r+0x290>
 8009062:	3101      	adds	r1, #1
 8009064:	0052      	lsls	r2, r2, #1
 8009066:	e7ba      	b.n	8008fde <_dtoa_r+0x296>
 8009068:	69e3      	ldr	r3, [r4, #28]
 800906a:	9a00      	ldr	r2, [sp, #0]
 800906c:	601a      	str	r2, [r3, #0]
 800906e:	9b04      	ldr	r3, [sp, #16]
 8009070:	2b0e      	cmp	r3, #14
 8009072:	f200 80a8 	bhi.w	80091c6 <_dtoa_r+0x47e>
 8009076:	2d00      	cmp	r5, #0
 8009078:	f000 80a5 	beq.w	80091c6 <_dtoa_r+0x47e>
 800907c:	f1bb 0f00 	cmp.w	fp, #0
 8009080:	dd38      	ble.n	80090f4 <_dtoa_r+0x3ac>
 8009082:	4bc0      	ldr	r3, [pc, #768]	; (8009384 <_dtoa_r+0x63c>)
 8009084:	f00b 020f 	and.w	r2, fp, #15
 8009088:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800908c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009090:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009094:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009098:	d019      	beq.n	80090ce <_dtoa_r+0x386>
 800909a:	4bbb      	ldr	r3, [pc, #748]	; (8009388 <_dtoa_r+0x640>)
 800909c:	ec51 0b18 	vmov	r0, r1, d8
 80090a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80090a4:	f7f7 fbd2 	bl	800084c <__aeabi_ddiv>
 80090a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090ac:	f008 080f 	and.w	r8, r8, #15
 80090b0:	2503      	movs	r5, #3
 80090b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009388 <_dtoa_r+0x640>
 80090b6:	f1b8 0f00 	cmp.w	r8, #0
 80090ba:	d10a      	bne.n	80090d2 <_dtoa_r+0x38a>
 80090bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090c0:	4632      	mov	r2, r6
 80090c2:	463b      	mov	r3, r7
 80090c4:	f7f7 fbc2 	bl	800084c <__aeabi_ddiv>
 80090c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090cc:	e02b      	b.n	8009126 <_dtoa_r+0x3de>
 80090ce:	2502      	movs	r5, #2
 80090d0:	e7ef      	b.n	80090b2 <_dtoa_r+0x36a>
 80090d2:	f018 0f01 	tst.w	r8, #1
 80090d6:	d008      	beq.n	80090ea <_dtoa_r+0x3a2>
 80090d8:	4630      	mov	r0, r6
 80090da:	4639      	mov	r1, r7
 80090dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80090e0:	f7f7 fa8a 	bl	80005f8 <__aeabi_dmul>
 80090e4:	3501      	adds	r5, #1
 80090e6:	4606      	mov	r6, r0
 80090e8:	460f      	mov	r7, r1
 80090ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80090ee:	f109 0908 	add.w	r9, r9, #8
 80090f2:	e7e0      	b.n	80090b6 <_dtoa_r+0x36e>
 80090f4:	f000 809f 	beq.w	8009236 <_dtoa_r+0x4ee>
 80090f8:	f1cb 0600 	rsb	r6, fp, #0
 80090fc:	4ba1      	ldr	r3, [pc, #644]	; (8009384 <_dtoa_r+0x63c>)
 80090fe:	4fa2      	ldr	r7, [pc, #648]	; (8009388 <_dtoa_r+0x640>)
 8009100:	f006 020f 	and.w	r2, r6, #15
 8009104:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910c:	ec51 0b18 	vmov	r0, r1, d8
 8009110:	f7f7 fa72 	bl	80005f8 <__aeabi_dmul>
 8009114:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009118:	1136      	asrs	r6, r6, #4
 800911a:	2300      	movs	r3, #0
 800911c:	2502      	movs	r5, #2
 800911e:	2e00      	cmp	r6, #0
 8009120:	d17e      	bne.n	8009220 <_dtoa_r+0x4d8>
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1d0      	bne.n	80090c8 <_dtoa_r+0x380>
 8009126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009128:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800912c:	2b00      	cmp	r3, #0
 800912e:	f000 8084 	beq.w	800923a <_dtoa_r+0x4f2>
 8009132:	4b96      	ldr	r3, [pc, #600]	; (800938c <_dtoa_r+0x644>)
 8009134:	2200      	movs	r2, #0
 8009136:	4640      	mov	r0, r8
 8009138:	4649      	mov	r1, r9
 800913a:	f7f7 fccf 	bl	8000adc <__aeabi_dcmplt>
 800913e:	2800      	cmp	r0, #0
 8009140:	d07b      	beq.n	800923a <_dtoa_r+0x4f2>
 8009142:	9b04      	ldr	r3, [sp, #16]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d078      	beq.n	800923a <_dtoa_r+0x4f2>
 8009148:	9b01      	ldr	r3, [sp, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	dd39      	ble.n	80091c2 <_dtoa_r+0x47a>
 800914e:	4b90      	ldr	r3, [pc, #576]	; (8009390 <_dtoa_r+0x648>)
 8009150:	2200      	movs	r2, #0
 8009152:	4640      	mov	r0, r8
 8009154:	4649      	mov	r1, r9
 8009156:	f7f7 fa4f 	bl	80005f8 <__aeabi_dmul>
 800915a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800915e:	9e01      	ldr	r6, [sp, #4]
 8009160:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009164:	3501      	adds	r5, #1
 8009166:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800916a:	4628      	mov	r0, r5
 800916c:	f7f7 f9da 	bl	8000524 <__aeabi_i2d>
 8009170:	4642      	mov	r2, r8
 8009172:	464b      	mov	r3, r9
 8009174:	f7f7 fa40 	bl	80005f8 <__aeabi_dmul>
 8009178:	4b86      	ldr	r3, [pc, #536]	; (8009394 <_dtoa_r+0x64c>)
 800917a:	2200      	movs	r2, #0
 800917c:	f7f7 f886 	bl	800028c <__adddf3>
 8009180:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009188:	9303      	str	r3, [sp, #12]
 800918a:	2e00      	cmp	r6, #0
 800918c:	d158      	bne.n	8009240 <_dtoa_r+0x4f8>
 800918e:	4b82      	ldr	r3, [pc, #520]	; (8009398 <_dtoa_r+0x650>)
 8009190:	2200      	movs	r2, #0
 8009192:	4640      	mov	r0, r8
 8009194:	4649      	mov	r1, r9
 8009196:	f7f7 f877 	bl	8000288 <__aeabi_dsub>
 800919a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800919e:	4680      	mov	r8, r0
 80091a0:	4689      	mov	r9, r1
 80091a2:	f7f7 fcb9 	bl	8000b18 <__aeabi_dcmpgt>
 80091a6:	2800      	cmp	r0, #0
 80091a8:	f040 8296 	bne.w	80096d8 <_dtoa_r+0x990>
 80091ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80091b0:	4640      	mov	r0, r8
 80091b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091b6:	4649      	mov	r1, r9
 80091b8:	f7f7 fc90 	bl	8000adc <__aeabi_dcmplt>
 80091bc:	2800      	cmp	r0, #0
 80091be:	f040 8289 	bne.w	80096d4 <_dtoa_r+0x98c>
 80091c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80091c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f2c0 814e 	blt.w	800946a <_dtoa_r+0x722>
 80091ce:	f1bb 0f0e 	cmp.w	fp, #14
 80091d2:	f300 814a 	bgt.w	800946a <_dtoa_r+0x722>
 80091d6:	4b6b      	ldr	r3, [pc, #428]	; (8009384 <_dtoa_r+0x63c>)
 80091d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80091dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f280 80dc 	bge.w	80093a0 <_dtoa_r+0x658>
 80091e8:	9b04      	ldr	r3, [sp, #16]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f300 80d8 	bgt.w	80093a0 <_dtoa_r+0x658>
 80091f0:	f040 826f 	bne.w	80096d2 <_dtoa_r+0x98a>
 80091f4:	4b68      	ldr	r3, [pc, #416]	; (8009398 <_dtoa_r+0x650>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	4640      	mov	r0, r8
 80091fa:	4649      	mov	r1, r9
 80091fc:	f7f7 f9fc 	bl	80005f8 <__aeabi_dmul>
 8009200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009204:	f7f7 fc7e 	bl	8000b04 <__aeabi_dcmpge>
 8009208:	9e04      	ldr	r6, [sp, #16]
 800920a:	4637      	mov	r7, r6
 800920c:	2800      	cmp	r0, #0
 800920e:	f040 8245 	bne.w	800969c <_dtoa_r+0x954>
 8009212:	9d00      	ldr	r5, [sp, #0]
 8009214:	2331      	movs	r3, #49	; 0x31
 8009216:	f805 3b01 	strb.w	r3, [r5], #1
 800921a:	f10b 0b01 	add.w	fp, fp, #1
 800921e:	e241      	b.n	80096a4 <_dtoa_r+0x95c>
 8009220:	07f2      	lsls	r2, r6, #31
 8009222:	d505      	bpl.n	8009230 <_dtoa_r+0x4e8>
 8009224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009228:	f7f7 f9e6 	bl	80005f8 <__aeabi_dmul>
 800922c:	3501      	adds	r5, #1
 800922e:	2301      	movs	r3, #1
 8009230:	1076      	asrs	r6, r6, #1
 8009232:	3708      	adds	r7, #8
 8009234:	e773      	b.n	800911e <_dtoa_r+0x3d6>
 8009236:	2502      	movs	r5, #2
 8009238:	e775      	b.n	8009126 <_dtoa_r+0x3de>
 800923a:	9e04      	ldr	r6, [sp, #16]
 800923c:	465f      	mov	r7, fp
 800923e:	e792      	b.n	8009166 <_dtoa_r+0x41e>
 8009240:	9900      	ldr	r1, [sp, #0]
 8009242:	4b50      	ldr	r3, [pc, #320]	; (8009384 <_dtoa_r+0x63c>)
 8009244:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009248:	4431      	add	r1, r6
 800924a:	9102      	str	r1, [sp, #8]
 800924c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800924e:	eeb0 9a47 	vmov.f32	s18, s14
 8009252:	eef0 9a67 	vmov.f32	s19, s15
 8009256:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800925a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800925e:	2900      	cmp	r1, #0
 8009260:	d044      	beq.n	80092ec <_dtoa_r+0x5a4>
 8009262:	494e      	ldr	r1, [pc, #312]	; (800939c <_dtoa_r+0x654>)
 8009264:	2000      	movs	r0, #0
 8009266:	f7f7 faf1 	bl	800084c <__aeabi_ddiv>
 800926a:	ec53 2b19 	vmov	r2, r3, d9
 800926e:	f7f7 f80b 	bl	8000288 <__aeabi_dsub>
 8009272:	9d00      	ldr	r5, [sp, #0]
 8009274:	ec41 0b19 	vmov	d9, r0, r1
 8009278:	4649      	mov	r1, r9
 800927a:	4640      	mov	r0, r8
 800927c:	f7f7 fc6c 	bl	8000b58 <__aeabi_d2iz>
 8009280:	4606      	mov	r6, r0
 8009282:	f7f7 f94f 	bl	8000524 <__aeabi_i2d>
 8009286:	4602      	mov	r2, r0
 8009288:	460b      	mov	r3, r1
 800928a:	4640      	mov	r0, r8
 800928c:	4649      	mov	r1, r9
 800928e:	f7f6 fffb 	bl	8000288 <__aeabi_dsub>
 8009292:	3630      	adds	r6, #48	; 0x30
 8009294:	f805 6b01 	strb.w	r6, [r5], #1
 8009298:	ec53 2b19 	vmov	r2, r3, d9
 800929c:	4680      	mov	r8, r0
 800929e:	4689      	mov	r9, r1
 80092a0:	f7f7 fc1c 	bl	8000adc <__aeabi_dcmplt>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d164      	bne.n	8009372 <_dtoa_r+0x62a>
 80092a8:	4642      	mov	r2, r8
 80092aa:	464b      	mov	r3, r9
 80092ac:	4937      	ldr	r1, [pc, #220]	; (800938c <_dtoa_r+0x644>)
 80092ae:	2000      	movs	r0, #0
 80092b0:	f7f6 ffea 	bl	8000288 <__aeabi_dsub>
 80092b4:	ec53 2b19 	vmov	r2, r3, d9
 80092b8:	f7f7 fc10 	bl	8000adc <__aeabi_dcmplt>
 80092bc:	2800      	cmp	r0, #0
 80092be:	f040 80b6 	bne.w	800942e <_dtoa_r+0x6e6>
 80092c2:	9b02      	ldr	r3, [sp, #8]
 80092c4:	429d      	cmp	r5, r3
 80092c6:	f43f af7c 	beq.w	80091c2 <_dtoa_r+0x47a>
 80092ca:	4b31      	ldr	r3, [pc, #196]	; (8009390 <_dtoa_r+0x648>)
 80092cc:	ec51 0b19 	vmov	r0, r1, d9
 80092d0:	2200      	movs	r2, #0
 80092d2:	f7f7 f991 	bl	80005f8 <__aeabi_dmul>
 80092d6:	4b2e      	ldr	r3, [pc, #184]	; (8009390 <_dtoa_r+0x648>)
 80092d8:	ec41 0b19 	vmov	d9, r0, r1
 80092dc:	2200      	movs	r2, #0
 80092de:	4640      	mov	r0, r8
 80092e0:	4649      	mov	r1, r9
 80092e2:	f7f7 f989 	bl	80005f8 <__aeabi_dmul>
 80092e6:	4680      	mov	r8, r0
 80092e8:	4689      	mov	r9, r1
 80092ea:	e7c5      	b.n	8009278 <_dtoa_r+0x530>
 80092ec:	ec51 0b17 	vmov	r0, r1, d7
 80092f0:	f7f7 f982 	bl	80005f8 <__aeabi_dmul>
 80092f4:	9b02      	ldr	r3, [sp, #8]
 80092f6:	9d00      	ldr	r5, [sp, #0]
 80092f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80092fa:	ec41 0b19 	vmov	d9, r0, r1
 80092fe:	4649      	mov	r1, r9
 8009300:	4640      	mov	r0, r8
 8009302:	f7f7 fc29 	bl	8000b58 <__aeabi_d2iz>
 8009306:	4606      	mov	r6, r0
 8009308:	f7f7 f90c 	bl	8000524 <__aeabi_i2d>
 800930c:	3630      	adds	r6, #48	; 0x30
 800930e:	4602      	mov	r2, r0
 8009310:	460b      	mov	r3, r1
 8009312:	4640      	mov	r0, r8
 8009314:	4649      	mov	r1, r9
 8009316:	f7f6 ffb7 	bl	8000288 <__aeabi_dsub>
 800931a:	f805 6b01 	strb.w	r6, [r5], #1
 800931e:	9b02      	ldr	r3, [sp, #8]
 8009320:	429d      	cmp	r5, r3
 8009322:	4680      	mov	r8, r0
 8009324:	4689      	mov	r9, r1
 8009326:	f04f 0200 	mov.w	r2, #0
 800932a:	d124      	bne.n	8009376 <_dtoa_r+0x62e>
 800932c:	4b1b      	ldr	r3, [pc, #108]	; (800939c <_dtoa_r+0x654>)
 800932e:	ec51 0b19 	vmov	r0, r1, d9
 8009332:	f7f6 ffab 	bl	800028c <__adddf3>
 8009336:	4602      	mov	r2, r0
 8009338:	460b      	mov	r3, r1
 800933a:	4640      	mov	r0, r8
 800933c:	4649      	mov	r1, r9
 800933e:	f7f7 fbeb 	bl	8000b18 <__aeabi_dcmpgt>
 8009342:	2800      	cmp	r0, #0
 8009344:	d173      	bne.n	800942e <_dtoa_r+0x6e6>
 8009346:	ec53 2b19 	vmov	r2, r3, d9
 800934a:	4914      	ldr	r1, [pc, #80]	; (800939c <_dtoa_r+0x654>)
 800934c:	2000      	movs	r0, #0
 800934e:	f7f6 ff9b 	bl	8000288 <__aeabi_dsub>
 8009352:	4602      	mov	r2, r0
 8009354:	460b      	mov	r3, r1
 8009356:	4640      	mov	r0, r8
 8009358:	4649      	mov	r1, r9
 800935a:	f7f7 fbbf 	bl	8000adc <__aeabi_dcmplt>
 800935e:	2800      	cmp	r0, #0
 8009360:	f43f af2f 	beq.w	80091c2 <_dtoa_r+0x47a>
 8009364:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009366:	1e6b      	subs	r3, r5, #1
 8009368:	930f      	str	r3, [sp, #60]	; 0x3c
 800936a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800936e:	2b30      	cmp	r3, #48	; 0x30
 8009370:	d0f8      	beq.n	8009364 <_dtoa_r+0x61c>
 8009372:	46bb      	mov	fp, r7
 8009374:	e04a      	b.n	800940c <_dtoa_r+0x6c4>
 8009376:	4b06      	ldr	r3, [pc, #24]	; (8009390 <_dtoa_r+0x648>)
 8009378:	f7f7 f93e 	bl	80005f8 <__aeabi_dmul>
 800937c:	4680      	mov	r8, r0
 800937e:	4689      	mov	r9, r1
 8009380:	e7bd      	b.n	80092fe <_dtoa_r+0x5b6>
 8009382:	bf00      	nop
 8009384:	0800aae8 	.word	0x0800aae8
 8009388:	0800aac0 	.word	0x0800aac0
 800938c:	3ff00000 	.word	0x3ff00000
 8009390:	40240000 	.word	0x40240000
 8009394:	401c0000 	.word	0x401c0000
 8009398:	40140000 	.word	0x40140000
 800939c:	3fe00000 	.word	0x3fe00000
 80093a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80093a4:	9d00      	ldr	r5, [sp, #0]
 80093a6:	4642      	mov	r2, r8
 80093a8:	464b      	mov	r3, r9
 80093aa:	4630      	mov	r0, r6
 80093ac:	4639      	mov	r1, r7
 80093ae:	f7f7 fa4d 	bl	800084c <__aeabi_ddiv>
 80093b2:	f7f7 fbd1 	bl	8000b58 <__aeabi_d2iz>
 80093b6:	9001      	str	r0, [sp, #4]
 80093b8:	f7f7 f8b4 	bl	8000524 <__aeabi_i2d>
 80093bc:	4642      	mov	r2, r8
 80093be:	464b      	mov	r3, r9
 80093c0:	f7f7 f91a 	bl	80005f8 <__aeabi_dmul>
 80093c4:	4602      	mov	r2, r0
 80093c6:	460b      	mov	r3, r1
 80093c8:	4630      	mov	r0, r6
 80093ca:	4639      	mov	r1, r7
 80093cc:	f7f6 ff5c 	bl	8000288 <__aeabi_dsub>
 80093d0:	9e01      	ldr	r6, [sp, #4]
 80093d2:	9f04      	ldr	r7, [sp, #16]
 80093d4:	3630      	adds	r6, #48	; 0x30
 80093d6:	f805 6b01 	strb.w	r6, [r5], #1
 80093da:	9e00      	ldr	r6, [sp, #0]
 80093dc:	1bae      	subs	r6, r5, r6
 80093de:	42b7      	cmp	r7, r6
 80093e0:	4602      	mov	r2, r0
 80093e2:	460b      	mov	r3, r1
 80093e4:	d134      	bne.n	8009450 <_dtoa_r+0x708>
 80093e6:	f7f6 ff51 	bl	800028c <__adddf3>
 80093ea:	4642      	mov	r2, r8
 80093ec:	464b      	mov	r3, r9
 80093ee:	4606      	mov	r6, r0
 80093f0:	460f      	mov	r7, r1
 80093f2:	f7f7 fb91 	bl	8000b18 <__aeabi_dcmpgt>
 80093f6:	b9c8      	cbnz	r0, 800942c <_dtoa_r+0x6e4>
 80093f8:	4642      	mov	r2, r8
 80093fa:	464b      	mov	r3, r9
 80093fc:	4630      	mov	r0, r6
 80093fe:	4639      	mov	r1, r7
 8009400:	f7f7 fb62 	bl	8000ac8 <__aeabi_dcmpeq>
 8009404:	b110      	cbz	r0, 800940c <_dtoa_r+0x6c4>
 8009406:	9b01      	ldr	r3, [sp, #4]
 8009408:	07db      	lsls	r3, r3, #31
 800940a:	d40f      	bmi.n	800942c <_dtoa_r+0x6e4>
 800940c:	4651      	mov	r1, sl
 800940e:	4620      	mov	r0, r4
 8009410:	f000 fbcc 	bl	8009bac <_Bfree>
 8009414:	2300      	movs	r3, #0
 8009416:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009418:	702b      	strb	r3, [r5, #0]
 800941a:	f10b 0301 	add.w	r3, fp, #1
 800941e:	6013      	str	r3, [r2, #0]
 8009420:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009422:	2b00      	cmp	r3, #0
 8009424:	f43f ace2 	beq.w	8008dec <_dtoa_r+0xa4>
 8009428:	601d      	str	r5, [r3, #0]
 800942a:	e4df      	b.n	8008dec <_dtoa_r+0xa4>
 800942c:	465f      	mov	r7, fp
 800942e:	462b      	mov	r3, r5
 8009430:	461d      	mov	r5, r3
 8009432:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009436:	2a39      	cmp	r2, #57	; 0x39
 8009438:	d106      	bne.n	8009448 <_dtoa_r+0x700>
 800943a:	9a00      	ldr	r2, [sp, #0]
 800943c:	429a      	cmp	r2, r3
 800943e:	d1f7      	bne.n	8009430 <_dtoa_r+0x6e8>
 8009440:	9900      	ldr	r1, [sp, #0]
 8009442:	2230      	movs	r2, #48	; 0x30
 8009444:	3701      	adds	r7, #1
 8009446:	700a      	strb	r2, [r1, #0]
 8009448:	781a      	ldrb	r2, [r3, #0]
 800944a:	3201      	adds	r2, #1
 800944c:	701a      	strb	r2, [r3, #0]
 800944e:	e790      	b.n	8009372 <_dtoa_r+0x62a>
 8009450:	4ba3      	ldr	r3, [pc, #652]	; (80096e0 <_dtoa_r+0x998>)
 8009452:	2200      	movs	r2, #0
 8009454:	f7f7 f8d0 	bl	80005f8 <__aeabi_dmul>
 8009458:	2200      	movs	r2, #0
 800945a:	2300      	movs	r3, #0
 800945c:	4606      	mov	r6, r0
 800945e:	460f      	mov	r7, r1
 8009460:	f7f7 fb32 	bl	8000ac8 <__aeabi_dcmpeq>
 8009464:	2800      	cmp	r0, #0
 8009466:	d09e      	beq.n	80093a6 <_dtoa_r+0x65e>
 8009468:	e7d0      	b.n	800940c <_dtoa_r+0x6c4>
 800946a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800946c:	2a00      	cmp	r2, #0
 800946e:	f000 80ca 	beq.w	8009606 <_dtoa_r+0x8be>
 8009472:	9a07      	ldr	r2, [sp, #28]
 8009474:	2a01      	cmp	r2, #1
 8009476:	f300 80ad 	bgt.w	80095d4 <_dtoa_r+0x88c>
 800947a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800947c:	2a00      	cmp	r2, #0
 800947e:	f000 80a5 	beq.w	80095cc <_dtoa_r+0x884>
 8009482:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009486:	9e08      	ldr	r6, [sp, #32]
 8009488:	9d05      	ldr	r5, [sp, #20]
 800948a:	9a05      	ldr	r2, [sp, #20]
 800948c:	441a      	add	r2, r3
 800948e:	9205      	str	r2, [sp, #20]
 8009490:	9a06      	ldr	r2, [sp, #24]
 8009492:	2101      	movs	r1, #1
 8009494:	441a      	add	r2, r3
 8009496:	4620      	mov	r0, r4
 8009498:	9206      	str	r2, [sp, #24]
 800949a:	f000 fc3d 	bl	8009d18 <__i2b>
 800949e:	4607      	mov	r7, r0
 80094a0:	b165      	cbz	r5, 80094bc <_dtoa_r+0x774>
 80094a2:	9b06      	ldr	r3, [sp, #24]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	dd09      	ble.n	80094bc <_dtoa_r+0x774>
 80094a8:	42ab      	cmp	r3, r5
 80094aa:	9a05      	ldr	r2, [sp, #20]
 80094ac:	bfa8      	it	ge
 80094ae:	462b      	movge	r3, r5
 80094b0:	1ad2      	subs	r2, r2, r3
 80094b2:	9205      	str	r2, [sp, #20]
 80094b4:	9a06      	ldr	r2, [sp, #24]
 80094b6:	1aed      	subs	r5, r5, r3
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	9306      	str	r3, [sp, #24]
 80094bc:	9b08      	ldr	r3, [sp, #32]
 80094be:	b1f3      	cbz	r3, 80094fe <_dtoa_r+0x7b6>
 80094c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f000 80a3 	beq.w	800960e <_dtoa_r+0x8c6>
 80094c8:	2e00      	cmp	r6, #0
 80094ca:	dd10      	ble.n	80094ee <_dtoa_r+0x7a6>
 80094cc:	4639      	mov	r1, r7
 80094ce:	4632      	mov	r2, r6
 80094d0:	4620      	mov	r0, r4
 80094d2:	f000 fce1 	bl	8009e98 <__pow5mult>
 80094d6:	4652      	mov	r2, sl
 80094d8:	4601      	mov	r1, r0
 80094da:	4607      	mov	r7, r0
 80094dc:	4620      	mov	r0, r4
 80094de:	f000 fc31 	bl	8009d44 <__multiply>
 80094e2:	4651      	mov	r1, sl
 80094e4:	4680      	mov	r8, r0
 80094e6:	4620      	mov	r0, r4
 80094e8:	f000 fb60 	bl	8009bac <_Bfree>
 80094ec:	46c2      	mov	sl, r8
 80094ee:	9b08      	ldr	r3, [sp, #32]
 80094f0:	1b9a      	subs	r2, r3, r6
 80094f2:	d004      	beq.n	80094fe <_dtoa_r+0x7b6>
 80094f4:	4651      	mov	r1, sl
 80094f6:	4620      	mov	r0, r4
 80094f8:	f000 fcce 	bl	8009e98 <__pow5mult>
 80094fc:	4682      	mov	sl, r0
 80094fe:	2101      	movs	r1, #1
 8009500:	4620      	mov	r0, r4
 8009502:	f000 fc09 	bl	8009d18 <__i2b>
 8009506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009508:	2b00      	cmp	r3, #0
 800950a:	4606      	mov	r6, r0
 800950c:	f340 8081 	ble.w	8009612 <_dtoa_r+0x8ca>
 8009510:	461a      	mov	r2, r3
 8009512:	4601      	mov	r1, r0
 8009514:	4620      	mov	r0, r4
 8009516:	f000 fcbf 	bl	8009e98 <__pow5mult>
 800951a:	9b07      	ldr	r3, [sp, #28]
 800951c:	2b01      	cmp	r3, #1
 800951e:	4606      	mov	r6, r0
 8009520:	dd7a      	ble.n	8009618 <_dtoa_r+0x8d0>
 8009522:	f04f 0800 	mov.w	r8, #0
 8009526:	6933      	ldr	r3, [r6, #16]
 8009528:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800952c:	6918      	ldr	r0, [r3, #16]
 800952e:	f000 fba5 	bl	8009c7c <__hi0bits>
 8009532:	f1c0 0020 	rsb	r0, r0, #32
 8009536:	9b06      	ldr	r3, [sp, #24]
 8009538:	4418      	add	r0, r3
 800953a:	f010 001f 	ands.w	r0, r0, #31
 800953e:	f000 8094 	beq.w	800966a <_dtoa_r+0x922>
 8009542:	f1c0 0320 	rsb	r3, r0, #32
 8009546:	2b04      	cmp	r3, #4
 8009548:	f340 8085 	ble.w	8009656 <_dtoa_r+0x90e>
 800954c:	9b05      	ldr	r3, [sp, #20]
 800954e:	f1c0 001c 	rsb	r0, r0, #28
 8009552:	4403      	add	r3, r0
 8009554:	9305      	str	r3, [sp, #20]
 8009556:	9b06      	ldr	r3, [sp, #24]
 8009558:	4403      	add	r3, r0
 800955a:	4405      	add	r5, r0
 800955c:	9306      	str	r3, [sp, #24]
 800955e:	9b05      	ldr	r3, [sp, #20]
 8009560:	2b00      	cmp	r3, #0
 8009562:	dd05      	ble.n	8009570 <_dtoa_r+0x828>
 8009564:	4651      	mov	r1, sl
 8009566:	461a      	mov	r2, r3
 8009568:	4620      	mov	r0, r4
 800956a:	f000 fcef 	bl	8009f4c <__lshift>
 800956e:	4682      	mov	sl, r0
 8009570:	9b06      	ldr	r3, [sp, #24]
 8009572:	2b00      	cmp	r3, #0
 8009574:	dd05      	ble.n	8009582 <_dtoa_r+0x83a>
 8009576:	4631      	mov	r1, r6
 8009578:	461a      	mov	r2, r3
 800957a:	4620      	mov	r0, r4
 800957c:	f000 fce6 	bl	8009f4c <__lshift>
 8009580:	4606      	mov	r6, r0
 8009582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009584:	2b00      	cmp	r3, #0
 8009586:	d072      	beq.n	800966e <_dtoa_r+0x926>
 8009588:	4631      	mov	r1, r6
 800958a:	4650      	mov	r0, sl
 800958c:	f000 fd4a 	bl	800a024 <__mcmp>
 8009590:	2800      	cmp	r0, #0
 8009592:	da6c      	bge.n	800966e <_dtoa_r+0x926>
 8009594:	2300      	movs	r3, #0
 8009596:	4651      	mov	r1, sl
 8009598:	220a      	movs	r2, #10
 800959a:	4620      	mov	r0, r4
 800959c:	f000 fb28 	bl	8009bf0 <__multadd>
 80095a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80095a6:	4682      	mov	sl, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f000 81b0 	beq.w	800990e <_dtoa_r+0xbc6>
 80095ae:	2300      	movs	r3, #0
 80095b0:	4639      	mov	r1, r7
 80095b2:	220a      	movs	r2, #10
 80095b4:	4620      	mov	r0, r4
 80095b6:	f000 fb1b 	bl	8009bf0 <__multadd>
 80095ba:	9b01      	ldr	r3, [sp, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	4607      	mov	r7, r0
 80095c0:	f300 8096 	bgt.w	80096f0 <_dtoa_r+0x9a8>
 80095c4:	9b07      	ldr	r3, [sp, #28]
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	dc59      	bgt.n	800967e <_dtoa_r+0x936>
 80095ca:	e091      	b.n	80096f0 <_dtoa_r+0x9a8>
 80095cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80095d2:	e758      	b.n	8009486 <_dtoa_r+0x73e>
 80095d4:	9b04      	ldr	r3, [sp, #16]
 80095d6:	1e5e      	subs	r6, r3, #1
 80095d8:	9b08      	ldr	r3, [sp, #32]
 80095da:	42b3      	cmp	r3, r6
 80095dc:	bfbf      	itttt	lt
 80095de:	9b08      	ldrlt	r3, [sp, #32]
 80095e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80095e2:	9608      	strlt	r6, [sp, #32]
 80095e4:	1af3      	sublt	r3, r6, r3
 80095e6:	bfb4      	ite	lt
 80095e8:	18d2      	addlt	r2, r2, r3
 80095ea:	1b9e      	subge	r6, r3, r6
 80095ec:	9b04      	ldr	r3, [sp, #16]
 80095ee:	bfbc      	itt	lt
 80095f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80095f2:	2600      	movlt	r6, #0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	bfb7      	itett	lt
 80095f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80095fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009600:	1a9d      	sublt	r5, r3, r2
 8009602:	2300      	movlt	r3, #0
 8009604:	e741      	b.n	800948a <_dtoa_r+0x742>
 8009606:	9e08      	ldr	r6, [sp, #32]
 8009608:	9d05      	ldr	r5, [sp, #20]
 800960a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800960c:	e748      	b.n	80094a0 <_dtoa_r+0x758>
 800960e:	9a08      	ldr	r2, [sp, #32]
 8009610:	e770      	b.n	80094f4 <_dtoa_r+0x7ac>
 8009612:	9b07      	ldr	r3, [sp, #28]
 8009614:	2b01      	cmp	r3, #1
 8009616:	dc19      	bgt.n	800964c <_dtoa_r+0x904>
 8009618:	9b02      	ldr	r3, [sp, #8]
 800961a:	b9bb      	cbnz	r3, 800964c <_dtoa_r+0x904>
 800961c:	9b03      	ldr	r3, [sp, #12]
 800961e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009622:	b99b      	cbnz	r3, 800964c <_dtoa_r+0x904>
 8009624:	9b03      	ldr	r3, [sp, #12]
 8009626:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800962a:	0d1b      	lsrs	r3, r3, #20
 800962c:	051b      	lsls	r3, r3, #20
 800962e:	b183      	cbz	r3, 8009652 <_dtoa_r+0x90a>
 8009630:	9b05      	ldr	r3, [sp, #20]
 8009632:	3301      	adds	r3, #1
 8009634:	9305      	str	r3, [sp, #20]
 8009636:	9b06      	ldr	r3, [sp, #24]
 8009638:	3301      	adds	r3, #1
 800963a:	9306      	str	r3, [sp, #24]
 800963c:	f04f 0801 	mov.w	r8, #1
 8009640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009642:	2b00      	cmp	r3, #0
 8009644:	f47f af6f 	bne.w	8009526 <_dtoa_r+0x7de>
 8009648:	2001      	movs	r0, #1
 800964a:	e774      	b.n	8009536 <_dtoa_r+0x7ee>
 800964c:	f04f 0800 	mov.w	r8, #0
 8009650:	e7f6      	b.n	8009640 <_dtoa_r+0x8f8>
 8009652:	4698      	mov	r8, r3
 8009654:	e7f4      	b.n	8009640 <_dtoa_r+0x8f8>
 8009656:	d082      	beq.n	800955e <_dtoa_r+0x816>
 8009658:	9a05      	ldr	r2, [sp, #20]
 800965a:	331c      	adds	r3, #28
 800965c:	441a      	add	r2, r3
 800965e:	9205      	str	r2, [sp, #20]
 8009660:	9a06      	ldr	r2, [sp, #24]
 8009662:	441a      	add	r2, r3
 8009664:	441d      	add	r5, r3
 8009666:	9206      	str	r2, [sp, #24]
 8009668:	e779      	b.n	800955e <_dtoa_r+0x816>
 800966a:	4603      	mov	r3, r0
 800966c:	e7f4      	b.n	8009658 <_dtoa_r+0x910>
 800966e:	9b04      	ldr	r3, [sp, #16]
 8009670:	2b00      	cmp	r3, #0
 8009672:	dc37      	bgt.n	80096e4 <_dtoa_r+0x99c>
 8009674:	9b07      	ldr	r3, [sp, #28]
 8009676:	2b02      	cmp	r3, #2
 8009678:	dd34      	ble.n	80096e4 <_dtoa_r+0x99c>
 800967a:	9b04      	ldr	r3, [sp, #16]
 800967c:	9301      	str	r3, [sp, #4]
 800967e:	9b01      	ldr	r3, [sp, #4]
 8009680:	b963      	cbnz	r3, 800969c <_dtoa_r+0x954>
 8009682:	4631      	mov	r1, r6
 8009684:	2205      	movs	r2, #5
 8009686:	4620      	mov	r0, r4
 8009688:	f000 fab2 	bl	8009bf0 <__multadd>
 800968c:	4601      	mov	r1, r0
 800968e:	4606      	mov	r6, r0
 8009690:	4650      	mov	r0, sl
 8009692:	f000 fcc7 	bl	800a024 <__mcmp>
 8009696:	2800      	cmp	r0, #0
 8009698:	f73f adbb 	bgt.w	8009212 <_dtoa_r+0x4ca>
 800969c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800969e:	9d00      	ldr	r5, [sp, #0]
 80096a0:	ea6f 0b03 	mvn.w	fp, r3
 80096a4:	f04f 0800 	mov.w	r8, #0
 80096a8:	4631      	mov	r1, r6
 80096aa:	4620      	mov	r0, r4
 80096ac:	f000 fa7e 	bl	8009bac <_Bfree>
 80096b0:	2f00      	cmp	r7, #0
 80096b2:	f43f aeab 	beq.w	800940c <_dtoa_r+0x6c4>
 80096b6:	f1b8 0f00 	cmp.w	r8, #0
 80096ba:	d005      	beq.n	80096c8 <_dtoa_r+0x980>
 80096bc:	45b8      	cmp	r8, r7
 80096be:	d003      	beq.n	80096c8 <_dtoa_r+0x980>
 80096c0:	4641      	mov	r1, r8
 80096c2:	4620      	mov	r0, r4
 80096c4:	f000 fa72 	bl	8009bac <_Bfree>
 80096c8:	4639      	mov	r1, r7
 80096ca:	4620      	mov	r0, r4
 80096cc:	f000 fa6e 	bl	8009bac <_Bfree>
 80096d0:	e69c      	b.n	800940c <_dtoa_r+0x6c4>
 80096d2:	2600      	movs	r6, #0
 80096d4:	4637      	mov	r7, r6
 80096d6:	e7e1      	b.n	800969c <_dtoa_r+0x954>
 80096d8:	46bb      	mov	fp, r7
 80096da:	4637      	mov	r7, r6
 80096dc:	e599      	b.n	8009212 <_dtoa_r+0x4ca>
 80096de:	bf00      	nop
 80096e0:	40240000 	.word	0x40240000
 80096e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f000 80c8 	beq.w	800987c <_dtoa_r+0xb34>
 80096ec:	9b04      	ldr	r3, [sp, #16]
 80096ee:	9301      	str	r3, [sp, #4]
 80096f0:	2d00      	cmp	r5, #0
 80096f2:	dd05      	ble.n	8009700 <_dtoa_r+0x9b8>
 80096f4:	4639      	mov	r1, r7
 80096f6:	462a      	mov	r2, r5
 80096f8:	4620      	mov	r0, r4
 80096fa:	f000 fc27 	bl	8009f4c <__lshift>
 80096fe:	4607      	mov	r7, r0
 8009700:	f1b8 0f00 	cmp.w	r8, #0
 8009704:	d05b      	beq.n	80097be <_dtoa_r+0xa76>
 8009706:	6879      	ldr	r1, [r7, #4]
 8009708:	4620      	mov	r0, r4
 800970a:	f000 fa0f 	bl	8009b2c <_Balloc>
 800970e:	4605      	mov	r5, r0
 8009710:	b928      	cbnz	r0, 800971e <_dtoa_r+0x9d6>
 8009712:	4b83      	ldr	r3, [pc, #524]	; (8009920 <_dtoa_r+0xbd8>)
 8009714:	4602      	mov	r2, r0
 8009716:	f240 21ef 	movw	r1, #751	; 0x2ef
 800971a:	f7ff bb2e 	b.w	8008d7a <_dtoa_r+0x32>
 800971e:	693a      	ldr	r2, [r7, #16]
 8009720:	3202      	adds	r2, #2
 8009722:	0092      	lsls	r2, r2, #2
 8009724:	f107 010c 	add.w	r1, r7, #12
 8009728:	300c      	adds	r0, #12
 800972a:	f001 f801 	bl	800a730 <memcpy>
 800972e:	2201      	movs	r2, #1
 8009730:	4629      	mov	r1, r5
 8009732:	4620      	mov	r0, r4
 8009734:	f000 fc0a 	bl	8009f4c <__lshift>
 8009738:	9b00      	ldr	r3, [sp, #0]
 800973a:	3301      	adds	r3, #1
 800973c:	9304      	str	r3, [sp, #16]
 800973e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009742:	4413      	add	r3, r2
 8009744:	9308      	str	r3, [sp, #32]
 8009746:	9b02      	ldr	r3, [sp, #8]
 8009748:	f003 0301 	and.w	r3, r3, #1
 800974c:	46b8      	mov	r8, r7
 800974e:	9306      	str	r3, [sp, #24]
 8009750:	4607      	mov	r7, r0
 8009752:	9b04      	ldr	r3, [sp, #16]
 8009754:	4631      	mov	r1, r6
 8009756:	3b01      	subs	r3, #1
 8009758:	4650      	mov	r0, sl
 800975a:	9301      	str	r3, [sp, #4]
 800975c:	f7ff fa6c 	bl	8008c38 <quorem>
 8009760:	4641      	mov	r1, r8
 8009762:	9002      	str	r0, [sp, #8]
 8009764:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009768:	4650      	mov	r0, sl
 800976a:	f000 fc5b 	bl	800a024 <__mcmp>
 800976e:	463a      	mov	r2, r7
 8009770:	9005      	str	r0, [sp, #20]
 8009772:	4631      	mov	r1, r6
 8009774:	4620      	mov	r0, r4
 8009776:	f000 fc71 	bl	800a05c <__mdiff>
 800977a:	68c2      	ldr	r2, [r0, #12]
 800977c:	4605      	mov	r5, r0
 800977e:	bb02      	cbnz	r2, 80097c2 <_dtoa_r+0xa7a>
 8009780:	4601      	mov	r1, r0
 8009782:	4650      	mov	r0, sl
 8009784:	f000 fc4e 	bl	800a024 <__mcmp>
 8009788:	4602      	mov	r2, r0
 800978a:	4629      	mov	r1, r5
 800978c:	4620      	mov	r0, r4
 800978e:	9209      	str	r2, [sp, #36]	; 0x24
 8009790:	f000 fa0c 	bl	8009bac <_Bfree>
 8009794:	9b07      	ldr	r3, [sp, #28]
 8009796:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009798:	9d04      	ldr	r5, [sp, #16]
 800979a:	ea43 0102 	orr.w	r1, r3, r2
 800979e:	9b06      	ldr	r3, [sp, #24]
 80097a0:	4319      	orrs	r1, r3
 80097a2:	d110      	bne.n	80097c6 <_dtoa_r+0xa7e>
 80097a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80097a8:	d029      	beq.n	80097fe <_dtoa_r+0xab6>
 80097aa:	9b05      	ldr	r3, [sp, #20]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	dd02      	ble.n	80097b6 <_dtoa_r+0xa6e>
 80097b0:	9b02      	ldr	r3, [sp, #8]
 80097b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80097b6:	9b01      	ldr	r3, [sp, #4]
 80097b8:	f883 9000 	strb.w	r9, [r3]
 80097bc:	e774      	b.n	80096a8 <_dtoa_r+0x960>
 80097be:	4638      	mov	r0, r7
 80097c0:	e7ba      	b.n	8009738 <_dtoa_r+0x9f0>
 80097c2:	2201      	movs	r2, #1
 80097c4:	e7e1      	b.n	800978a <_dtoa_r+0xa42>
 80097c6:	9b05      	ldr	r3, [sp, #20]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	db04      	blt.n	80097d6 <_dtoa_r+0xa8e>
 80097cc:	9907      	ldr	r1, [sp, #28]
 80097ce:	430b      	orrs	r3, r1
 80097d0:	9906      	ldr	r1, [sp, #24]
 80097d2:	430b      	orrs	r3, r1
 80097d4:	d120      	bne.n	8009818 <_dtoa_r+0xad0>
 80097d6:	2a00      	cmp	r2, #0
 80097d8:	dded      	ble.n	80097b6 <_dtoa_r+0xa6e>
 80097da:	4651      	mov	r1, sl
 80097dc:	2201      	movs	r2, #1
 80097de:	4620      	mov	r0, r4
 80097e0:	f000 fbb4 	bl	8009f4c <__lshift>
 80097e4:	4631      	mov	r1, r6
 80097e6:	4682      	mov	sl, r0
 80097e8:	f000 fc1c 	bl	800a024 <__mcmp>
 80097ec:	2800      	cmp	r0, #0
 80097ee:	dc03      	bgt.n	80097f8 <_dtoa_r+0xab0>
 80097f0:	d1e1      	bne.n	80097b6 <_dtoa_r+0xa6e>
 80097f2:	f019 0f01 	tst.w	r9, #1
 80097f6:	d0de      	beq.n	80097b6 <_dtoa_r+0xa6e>
 80097f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80097fc:	d1d8      	bne.n	80097b0 <_dtoa_r+0xa68>
 80097fe:	9a01      	ldr	r2, [sp, #4]
 8009800:	2339      	movs	r3, #57	; 0x39
 8009802:	7013      	strb	r3, [r2, #0]
 8009804:	462b      	mov	r3, r5
 8009806:	461d      	mov	r5, r3
 8009808:	3b01      	subs	r3, #1
 800980a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800980e:	2a39      	cmp	r2, #57	; 0x39
 8009810:	d06c      	beq.n	80098ec <_dtoa_r+0xba4>
 8009812:	3201      	adds	r2, #1
 8009814:	701a      	strb	r2, [r3, #0]
 8009816:	e747      	b.n	80096a8 <_dtoa_r+0x960>
 8009818:	2a00      	cmp	r2, #0
 800981a:	dd07      	ble.n	800982c <_dtoa_r+0xae4>
 800981c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009820:	d0ed      	beq.n	80097fe <_dtoa_r+0xab6>
 8009822:	9a01      	ldr	r2, [sp, #4]
 8009824:	f109 0301 	add.w	r3, r9, #1
 8009828:	7013      	strb	r3, [r2, #0]
 800982a:	e73d      	b.n	80096a8 <_dtoa_r+0x960>
 800982c:	9b04      	ldr	r3, [sp, #16]
 800982e:	9a08      	ldr	r2, [sp, #32]
 8009830:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009834:	4293      	cmp	r3, r2
 8009836:	d043      	beq.n	80098c0 <_dtoa_r+0xb78>
 8009838:	4651      	mov	r1, sl
 800983a:	2300      	movs	r3, #0
 800983c:	220a      	movs	r2, #10
 800983e:	4620      	mov	r0, r4
 8009840:	f000 f9d6 	bl	8009bf0 <__multadd>
 8009844:	45b8      	cmp	r8, r7
 8009846:	4682      	mov	sl, r0
 8009848:	f04f 0300 	mov.w	r3, #0
 800984c:	f04f 020a 	mov.w	r2, #10
 8009850:	4641      	mov	r1, r8
 8009852:	4620      	mov	r0, r4
 8009854:	d107      	bne.n	8009866 <_dtoa_r+0xb1e>
 8009856:	f000 f9cb 	bl	8009bf0 <__multadd>
 800985a:	4680      	mov	r8, r0
 800985c:	4607      	mov	r7, r0
 800985e:	9b04      	ldr	r3, [sp, #16]
 8009860:	3301      	adds	r3, #1
 8009862:	9304      	str	r3, [sp, #16]
 8009864:	e775      	b.n	8009752 <_dtoa_r+0xa0a>
 8009866:	f000 f9c3 	bl	8009bf0 <__multadd>
 800986a:	4639      	mov	r1, r7
 800986c:	4680      	mov	r8, r0
 800986e:	2300      	movs	r3, #0
 8009870:	220a      	movs	r2, #10
 8009872:	4620      	mov	r0, r4
 8009874:	f000 f9bc 	bl	8009bf0 <__multadd>
 8009878:	4607      	mov	r7, r0
 800987a:	e7f0      	b.n	800985e <_dtoa_r+0xb16>
 800987c:	9b04      	ldr	r3, [sp, #16]
 800987e:	9301      	str	r3, [sp, #4]
 8009880:	9d00      	ldr	r5, [sp, #0]
 8009882:	4631      	mov	r1, r6
 8009884:	4650      	mov	r0, sl
 8009886:	f7ff f9d7 	bl	8008c38 <quorem>
 800988a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800988e:	9b00      	ldr	r3, [sp, #0]
 8009890:	f805 9b01 	strb.w	r9, [r5], #1
 8009894:	1aea      	subs	r2, r5, r3
 8009896:	9b01      	ldr	r3, [sp, #4]
 8009898:	4293      	cmp	r3, r2
 800989a:	dd07      	ble.n	80098ac <_dtoa_r+0xb64>
 800989c:	4651      	mov	r1, sl
 800989e:	2300      	movs	r3, #0
 80098a0:	220a      	movs	r2, #10
 80098a2:	4620      	mov	r0, r4
 80098a4:	f000 f9a4 	bl	8009bf0 <__multadd>
 80098a8:	4682      	mov	sl, r0
 80098aa:	e7ea      	b.n	8009882 <_dtoa_r+0xb3a>
 80098ac:	9b01      	ldr	r3, [sp, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	bfc8      	it	gt
 80098b2:	461d      	movgt	r5, r3
 80098b4:	9b00      	ldr	r3, [sp, #0]
 80098b6:	bfd8      	it	le
 80098b8:	2501      	movle	r5, #1
 80098ba:	441d      	add	r5, r3
 80098bc:	f04f 0800 	mov.w	r8, #0
 80098c0:	4651      	mov	r1, sl
 80098c2:	2201      	movs	r2, #1
 80098c4:	4620      	mov	r0, r4
 80098c6:	f000 fb41 	bl	8009f4c <__lshift>
 80098ca:	4631      	mov	r1, r6
 80098cc:	4682      	mov	sl, r0
 80098ce:	f000 fba9 	bl	800a024 <__mcmp>
 80098d2:	2800      	cmp	r0, #0
 80098d4:	dc96      	bgt.n	8009804 <_dtoa_r+0xabc>
 80098d6:	d102      	bne.n	80098de <_dtoa_r+0xb96>
 80098d8:	f019 0f01 	tst.w	r9, #1
 80098dc:	d192      	bne.n	8009804 <_dtoa_r+0xabc>
 80098de:	462b      	mov	r3, r5
 80098e0:	461d      	mov	r5, r3
 80098e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098e6:	2a30      	cmp	r2, #48	; 0x30
 80098e8:	d0fa      	beq.n	80098e0 <_dtoa_r+0xb98>
 80098ea:	e6dd      	b.n	80096a8 <_dtoa_r+0x960>
 80098ec:	9a00      	ldr	r2, [sp, #0]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d189      	bne.n	8009806 <_dtoa_r+0xabe>
 80098f2:	f10b 0b01 	add.w	fp, fp, #1
 80098f6:	2331      	movs	r3, #49	; 0x31
 80098f8:	e796      	b.n	8009828 <_dtoa_r+0xae0>
 80098fa:	4b0a      	ldr	r3, [pc, #40]	; (8009924 <_dtoa_r+0xbdc>)
 80098fc:	f7ff ba99 	b.w	8008e32 <_dtoa_r+0xea>
 8009900:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009902:	2b00      	cmp	r3, #0
 8009904:	f47f aa6d 	bne.w	8008de2 <_dtoa_r+0x9a>
 8009908:	4b07      	ldr	r3, [pc, #28]	; (8009928 <_dtoa_r+0xbe0>)
 800990a:	f7ff ba92 	b.w	8008e32 <_dtoa_r+0xea>
 800990e:	9b01      	ldr	r3, [sp, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	dcb5      	bgt.n	8009880 <_dtoa_r+0xb38>
 8009914:	9b07      	ldr	r3, [sp, #28]
 8009916:	2b02      	cmp	r3, #2
 8009918:	f73f aeb1 	bgt.w	800967e <_dtoa_r+0x936>
 800991c:	e7b0      	b.n	8009880 <_dtoa_r+0xb38>
 800991e:	bf00      	nop
 8009920:	0800aa54 	.word	0x0800aa54
 8009924:	0800a9b4 	.word	0x0800a9b4
 8009928:	0800a9d8 	.word	0x0800a9d8

0800992c <_free_r>:
 800992c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800992e:	2900      	cmp	r1, #0
 8009930:	d044      	beq.n	80099bc <_free_r+0x90>
 8009932:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009936:	9001      	str	r0, [sp, #4]
 8009938:	2b00      	cmp	r3, #0
 800993a:	f1a1 0404 	sub.w	r4, r1, #4
 800993e:	bfb8      	it	lt
 8009940:	18e4      	addlt	r4, r4, r3
 8009942:	f000 f8e7 	bl	8009b14 <__malloc_lock>
 8009946:	4a1e      	ldr	r2, [pc, #120]	; (80099c0 <_free_r+0x94>)
 8009948:	9801      	ldr	r0, [sp, #4]
 800994a:	6813      	ldr	r3, [r2, #0]
 800994c:	b933      	cbnz	r3, 800995c <_free_r+0x30>
 800994e:	6063      	str	r3, [r4, #4]
 8009950:	6014      	str	r4, [r2, #0]
 8009952:	b003      	add	sp, #12
 8009954:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009958:	f000 b8e2 	b.w	8009b20 <__malloc_unlock>
 800995c:	42a3      	cmp	r3, r4
 800995e:	d908      	bls.n	8009972 <_free_r+0x46>
 8009960:	6825      	ldr	r5, [r4, #0]
 8009962:	1961      	adds	r1, r4, r5
 8009964:	428b      	cmp	r3, r1
 8009966:	bf01      	itttt	eq
 8009968:	6819      	ldreq	r1, [r3, #0]
 800996a:	685b      	ldreq	r3, [r3, #4]
 800996c:	1949      	addeq	r1, r1, r5
 800996e:	6021      	streq	r1, [r4, #0]
 8009970:	e7ed      	b.n	800994e <_free_r+0x22>
 8009972:	461a      	mov	r2, r3
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	b10b      	cbz	r3, 800997c <_free_r+0x50>
 8009978:	42a3      	cmp	r3, r4
 800997a:	d9fa      	bls.n	8009972 <_free_r+0x46>
 800997c:	6811      	ldr	r1, [r2, #0]
 800997e:	1855      	adds	r5, r2, r1
 8009980:	42a5      	cmp	r5, r4
 8009982:	d10b      	bne.n	800999c <_free_r+0x70>
 8009984:	6824      	ldr	r4, [r4, #0]
 8009986:	4421      	add	r1, r4
 8009988:	1854      	adds	r4, r2, r1
 800998a:	42a3      	cmp	r3, r4
 800998c:	6011      	str	r1, [r2, #0]
 800998e:	d1e0      	bne.n	8009952 <_free_r+0x26>
 8009990:	681c      	ldr	r4, [r3, #0]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	6053      	str	r3, [r2, #4]
 8009996:	440c      	add	r4, r1
 8009998:	6014      	str	r4, [r2, #0]
 800999a:	e7da      	b.n	8009952 <_free_r+0x26>
 800999c:	d902      	bls.n	80099a4 <_free_r+0x78>
 800999e:	230c      	movs	r3, #12
 80099a0:	6003      	str	r3, [r0, #0]
 80099a2:	e7d6      	b.n	8009952 <_free_r+0x26>
 80099a4:	6825      	ldr	r5, [r4, #0]
 80099a6:	1961      	adds	r1, r4, r5
 80099a8:	428b      	cmp	r3, r1
 80099aa:	bf04      	itt	eq
 80099ac:	6819      	ldreq	r1, [r3, #0]
 80099ae:	685b      	ldreq	r3, [r3, #4]
 80099b0:	6063      	str	r3, [r4, #4]
 80099b2:	bf04      	itt	eq
 80099b4:	1949      	addeq	r1, r1, r5
 80099b6:	6021      	streq	r1, [r4, #0]
 80099b8:	6054      	str	r4, [r2, #4]
 80099ba:	e7ca      	b.n	8009952 <_free_r+0x26>
 80099bc:	b003      	add	sp, #12
 80099be:	bd30      	pop	{r4, r5, pc}
 80099c0:	20000518 	.word	0x20000518

080099c4 <malloc>:
 80099c4:	4b02      	ldr	r3, [pc, #8]	; (80099d0 <malloc+0xc>)
 80099c6:	4601      	mov	r1, r0
 80099c8:	6818      	ldr	r0, [r3, #0]
 80099ca:	f000 b823 	b.w	8009a14 <_malloc_r>
 80099ce:	bf00      	nop
 80099d0:	20000068 	.word	0x20000068

080099d4 <sbrk_aligned>:
 80099d4:	b570      	push	{r4, r5, r6, lr}
 80099d6:	4e0e      	ldr	r6, [pc, #56]	; (8009a10 <sbrk_aligned+0x3c>)
 80099d8:	460c      	mov	r4, r1
 80099da:	6831      	ldr	r1, [r6, #0]
 80099dc:	4605      	mov	r5, r0
 80099de:	b911      	cbnz	r1, 80099e6 <sbrk_aligned+0x12>
 80099e0:	f000 fe96 	bl	800a710 <_sbrk_r>
 80099e4:	6030      	str	r0, [r6, #0]
 80099e6:	4621      	mov	r1, r4
 80099e8:	4628      	mov	r0, r5
 80099ea:	f000 fe91 	bl	800a710 <_sbrk_r>
 80099ee:	1c43      	adds	r3, r0, #1
 80099f0:	d00a      	beq.n	8009a08 <sbrk_aligned+0x34>
 80099f2:	1cc4      	adds	r4, r0, #3
 80099f4:	f024 0403 	bic.w	r4, r4, #3
 80099f8:	42a0      	cmp	r0, r4
 80099fa:	d007      	beq.n	8009a0c <sbrk_aligned+0x38>
 80099fc:	1a21      	subs	r1, r4, r0
 80099fe:	4628      	mov	r0, r5
 8009a00:	f000 fe86 	bl	800a710 <_sbrk_r>
 8009a04:	3001      	adds	r0, #1
 8009a06:	d101      	bne.n	8009a0c <sbrk_aligned+0x38>
 8009a08:	f04f 34ff 	mov.w	r4, #4294967295
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	bd70      	pop	{r4, r5, r6, pc}
 8009a10:	2000051c 	.word	0x2000051c

08009a14 <_malloc_r>:
 8009a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a18:	1ccd      	adds	r5, r1, #3
 8009a1a:	f025 0503 	bic.w	r5, r5, #3
 8009a1e:	3508      	adds	r5, #8
 8009a20:	2d0c      	cmp	r5, #12
 8009a22:	bf38      	it	cc
 8009a24:	250c      	movcc	r5, #12
 8009a26:	2d00      	cmp	r5, #0
 8009a28:	4607      	mov	r7, r0
 8009a2a:	db01      	blt.n	8009a30 <_malloc_r+0x1c>
 8009a2c:	42a9      	cmp	r1, r5
 8009a2e:	d905      	bls.n	8009a3c <_malloc_r+0x28>
 8009a30:	230c      	movs	r3, #12
 8009a32:	603b      	str	r3, [r7, #0]
 8009a34:	2600      	movs	r6, #0
 8009a36:	4630      	mov	r0, r6
 8009a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009b10 <_malloc_r+0xfc>
 8009a40:	f000 f868 	bl	8009b14 <__malloc_lock>
 8009a44:	f8d8 3000 	ldr.w	r3, [r8]
 8009a48:	461c      	mov	r4, r3
 8009a4a:	bb5c      	cbnz	r4, 8009aa4 <_malloc_r+0x90>
 8009a4c:	4629      	mov	r1, r5
 8009a4e:	4638      	mov	r0, r7
 8009a50:	f7ff ffc0 	bl	80099d4 <sbrk_aligned>
 8009a54:	1c43      	adds	r3, r0, #1
 8009a56:	4604      	mov	r4, r0
 8009a58:	d155      	bne.n	8009b06 <_malloc_r+0xf2>
 8009a5a:	f8d8 4000 	ldr.w	r4, [r8]
 8009a5e:	4626      	mov	r6, r4
 8009a60:	2e00      	cmp	r6, #0
 8009a62:	d145      	bne.n	8009af0 <_malloc_r+0xdc>
 8009a64:	2c00      	cmp	r4, #0
 8009a66:	d048      	beq.n	8009afa <_malloc_r+0xe6>
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	4631      	mov	r1, r6
 8009a6c:	4638      	mov	r0, r7
 8009a6e:	eb04 0903 	add.w	r9, r4, r3
 8009a72:	f000 fe4d 	bl	800a710 <_sbrk_r>
 8009a76:	4581      	cmp	r9, r0
 8009a78:	d13f      	bne.n	8009afa <_malloc_r+0xe6>
 8009a7a:	6821      	ldr	r1, [r4, #0]
 8009a7c:	1a6d      	subs	r5, r5, r1
 8009a7e:	4629      	mov	r1, r5
 8009a80:	4638      	mov	r0, r7
 8009a82:	f7ff ffa7 	bl	80099d4 <sbrk_aligned>
 8009a86:	3001      	adds	r0, #1
 8009a88:	d037      	beq.n	8009afa <_malloc_r+0xe6>
 8009a8a:	6823      	ldr	r3, [r4, #0]
 8009a8c:	442b      	add	r3, r5
 8009a8e:	6023      	str	r3, [r4, #0]
 8009a90:	f8d8 3000 	ldr.w	r3, [r8]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d038      	beq.n	8009b0a <_malloc_r+0xf6>
 8009a98:	685a      	ldr	r2, [r3, #4]
 8009a9a:	42a2      	cmp	r2, r4
 8009a9c:	d12b      	bne.n	8009af6 <_malloc_r+0xe2>
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	605a      	str	r2, [r3, #4]
 8009aa2:	e00f      	b.n	8009ac4 <_malloc_r+0xb0>
 8009aa4:	6822      	ldr	r2, [r4, #0]
 8009aa6:	1b52      	subs	r2, r2, r5
 8009aa8:	d41f      	bmi.n	8009aea <_malloc_r+0xd6>
 8009aaa:	2a0b      	cmp	r2, #11
 8009aac:	d917      	bls.n	8009ade <_malloc_r+0xca>
 8009aae:	1961      	adds	r1, r4, r5
 8009ab0:	42a3      	cmp	r3, r4
 8009ab2:	6025      	str	r5, [r4, #0]
 8009ab4:	bf18      	it	ne
 8009ab6:	6059      	strne	r1, [r3, #4]
 8009ab8:	6863      	ldr	r3, [r4, #4]
 8009aba:	bf08      	it	eq
 8009abc:	f8c8 1000 	streq.w	r1, [r8]
 8009ac0:	5162      	str	r2, [r4, r5]
 8009ac2:	604b      	str	r3, [r1, #4]
 8009ac4:	4638      	mov	r0, r7
 8009ac6:	f104 060b 	add.w	r6, r4, #11
 8009aca:	f000 f829 	bl	8009b20 <__malloc_unlock>
 8009ace:	f026 0607 	bic.w	r6, r6, #7
 8009ad2:	1d23      	adds	r3, r4, #4
 8009ad4:	1af2      	subs	r2, r6, r3
 8009ad6:	d0ae      	beq.n	8009a36 <_malloc_r+0x22>
 8009ad8:	1b9b      	subs	r3, r3, r6
 8009ada:	50a3      	str	r3, [r4, r2]
 8009adc:	e7ab      	b.n	8009a36 <_malloc_r+0x22>
 8009ade:	42a3      	cmp	r3, r4
 8009ae0:	6862      	ldr	r2, [r4, #4]
 8009ae2:	d1dd      	bne.n	8009aa0 <_malloc_r+0x8c>
 8009ae4:	f8c8 2000 	str.w	r2, [r8]
 8009ae8:	e7ec      	b.n	8009ac4 <_malloc_r+0xb0>
 8009aea:	4623      	mov	r3, r4
 8009aec:	6864      	ldr	r4, [r4, #4]
 8009aee:	e7ac      	b.n	8009a4a <_malloc_r+0x36>
 8009af0:	4634      	mov	r4, r6
 8009af2:	6876      	ldr	r6, [r6, #4]
 8009af4:	e7b4      	b.n	8009a60 <_malloc_r+0x4c>
 8009af6:	4613      	mov	r3, r2
 8009af8:	e7cc      	b.n	8009a94 <_malloc_r+0x80>
 8009afa:	230c      	movs	r3, #12
 8009afc:	603b      	str	r3, [r7, #0]
 8009afe:	4638      	mov	r0, r7
 8009b00:	f000 f80e 	bl	8009b20 <__malloc_unlock>
 8009b04:	e797      	b.n	8009a36 <_malloc_r+0x22>
 8009b06:	6025      	str	r5, [r4, #0]
 8009b08:	e7dc      	b.n	8009ac4 <_malloc_r+0xb0>
 8009b0a:	605b      	str	r3, [r3, #4]
 8009b0c:	deff      	udf	#255	; 0xff
 8009b0e:	bf00      	nop
 8009b10:	20000518 	.word	0x20000518

08009b14 <__malloc_lock>:
 8009b14:	4801      	ldr	r0, [pc, #4]	; (8009b1c <__malloc_lock+0x8>)
 8009b16:	f7ff b88d 	b.w	8008c34 <__retarget_lock_acquire_recursive>
 8009b1a:	bf00      	nop
 8009b1c:	20000514 	.word	0x20000514

08009b20 <__malloc_unlock>:
 8009b20:	4801      	ldr	r0, [pc, #4]	; (8009b28 <__malloc_unlock+0x8>)
 8009b22:	f7ff b888 	b.w	8008c36 <__retarget_lock_release_recursive>
 8009b26:	bf00      	nop
 8009b28:	20000514 	.word	0x20000514

08009b2c <_Balloc>:
 8009b2c:	b570      	push	{r4, r5, r6, lr}
 8009b2e:	69c6      	ldr	r6, [r0, #28]
 8009b30:	4604      	mov	r4, r0
 8009b32:	460d      	mov	r5, r1
 8009b34:	b976      	cbnz	r6, 8009b54 <_Balloc+0x28>
 8009b36:	2010      	movs	r0, #16
 8009b38:	f7ff ff44 	bl	80099c4 <malloc>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	61e0      	str	r0, [r4, #28]
 8009b40:	b920      	cbnz	r0, 8009b4c <_Balloc+0x20>
 8009b42:	4b18      	ldr	r3, [pc, #96]	; (8009ba4 <_Balloc+0x78>)
 8009b44:	4818      	ldr	r0, [pc, #96]	; (8009ba8 <_Balloc+0x7c>)
 8009b46:	216b      	movs	r1, #107	; 0x6b
 8009b48:	f000 fe00 	bl	800a74c <__assert_func>
 8009b4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b50:	6006      	str	r6, [r0, #0]
 8009b52:	60c6      	str	r6, [r0, #12]
 8009b54:	69e6      	ldr	r6, [r4, #28]
 8009b56:	68f3      	ldr	r3, [r6, #12]
 8009b58:	b183      	cbz	r3, 8009b7c <_Balloc+0x50>
 8009b5a:	69e3      	ldr	r3, [r4, #28]
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b62:	b9b8      	cbnz	r0, 8009b94 <_Balloc+0x68>
 8009b64:	2101      	movs	r1, #1
 8009b66:	fa01 f605 	lsl.w	r6, r1, r5
 8009b6a:	1d72      	adds	r2, r6, #5
 8009b6c:	0092      	lsls	r2, r2, #2
 8009b6e:	4620      	mov	r0, r4
 8009b70:	f000 fe0a 	bl	800a788 <_calloc_r>
 8009b74:	b160      	cbz	r0, 8009b90 <_Balloc+0x64>
 8009b76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b7a:	e00e      	b.n	8009b9a <_Balloc+0x6e>
 8009b7c:	2221      	movs	r2, #33	; 0x21
 8009b7e:	2104      	movs	r1, #4
 8009b80:	4620      	mov	r0, r4
 8009b82:	f000 fe01 	bl	800a788 <_calloc_r>
 8009b86:	69e3      	ldr	r3, [r4, #28]
 8009b88:	60f0      	str	r0, [r6, #12]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1e4      	bne.n	8009b5a <_Balloc+0x2e>
 8009b90:	2000      	movs	r0, #0
 8009b92:	bd70      	pop	{r4, r5, r6, pc}
 8009b94:	6802      	ldr	r2, [r0, #0]
 8009b96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ba0:	e7f7      	b.n	8009b92 <_Balloc+0x66>
 8009ba2:	bf00      	nop
 8009ba4:	0800a9e5 	.word	0x0800a9e5
 8009ba8:	0800aa65 	.word	0x0800aa65

08009bac <_Bfree>:
 8009bac:	b570      	push	{r4, r5, r6, lr}
 8009bae:	69c6      	ldr	r6, [r0, #28]
 8009bb0:	4605      	mov	r5, r0
 8009bb2:	460c      	mov	r4, r1
 8009bb4:	b976      	cbnz	r6, 8009bd4 <_Bfree+0x28>
 8009bb6:	2010      	movs	r0, #16
 8009bb8:	f7ff ff04 	bl	80099c4 <malloc>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	61e8      	str	r0, [r5, #28]
 8009bc0:	b920      	cbnz	r0, 8009bcc <_Bfree+0x20>
 8009bc2:	4b09      	ldr	r3, [pc, #36]	; (8009be8 <_Bfree+0x3c>)
 8009bc4:	4809      	ldr	r0, [pc, #36]	; (8009bec <_Bfree+0x40>)
 8009bc6:	218f      	movs	r1, #143	; 0x8f
 8009bc8:	f000 fdc0 	bl	800a74c <__assert_func>
 8009bcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bd0:	6006      	str	r6, [r0, #0]
 8009bd2:	60c6      	str	r6, [r0, #12]
 8009bd4:	b13c      	cbz	r4, 8009be6 <_Bfree+0x3a>
 8009bd6:	69eb      	ldr	r3, [r5, #28]
 8009bd8:	6862      	ldr	r2, [r4, #4]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009be0:	6021      	str	r1, [r4, #0]
 8009be2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009be6:	bd70      	pop	{r4, r5, r6, pc}
 8009be8:	0800a9e5 	.word	0x0800a9e5
 8009bec:	0800aa65 	.word	0x0800aa65

08009bf0 <__multadd>:
 8009bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bf4:	690d      	ldr	r5, [r1, #16]
 8009bf6:	4607      	mov	r7, r0
 8009bf8:	460c      	mov	r4, r1
 8009bfa:	461e      	mov	r6, r3
 8009bfc:	f101 0c14 	add.w	ip, r1, #20
 8009c00:	2000      	movs	r0, #0
 8009c02:	f8dc 3000 	ldr.w	r3, [ip]
 8009c06:	b299      	uxth	r1, r3
 8009c08:	fb02 6101 	mla	r1, r2, r1, r6
 8009c0c:	0c1e      	lsrs	r6, r3, #16
 8009c0e:	0c0b      	lsrs	r3, r1, #16
 8009c10:	fb02 3306 	mla	r3, r2, r6, r3
 8009c14:	b289      	uxth	r1, r1
 8009c16:	3001      	adds	r0, #1
 8009c18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c1c:	4285      	cmp	r5, r0
 8009c1e:	f84c 1b04 	str.w	r1, [ip], #4
 8009c22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c26:	dcec      	bgt.n	8009c02 <__multadd+0x12>
 8009c28:	b30e      	cbz	r6, 8009c6e <__multadd+0x7e>
 8009c2a:	68a3      	ldr	r3, [r4, #8]
 8009c2c:	42ab      	cmp	r3, r5
 8009c2e:	dc19      	bgt.n	8009c64 <__multadd+0x74>
 8009c30:	6861      	ldr	r1, [r4, #4]
 8009c32:	4638      	mov	r0, r7
 8009c34:	3101      	adds	r1, #1
 8009c36:	f7ff ff79 	bl	8009b2c <_Balloc>
 8009c3a:	4680      	mov	r8, r0
 8009c3c:	b928      	cbnz	r0, 8009c4a <__multadd+0x5a>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	4b0c      	ldr	r3, [pc, #48]	; (8009c74 <__multadd+0x84>)
 8009c42:	480d      	ldr	r0, [pc, #52]	; (8009c78 <__multadd+0x88>)
 8009c44:	21ba      	movs	r1, #186	; 0xba
 8009c46:	f000 fd81 	bl	800a74c <__assert_func>
 8009c4a:	6922      	ldr	r2, [r4, #16]
 8009c4c:	3202      	adds	r2, #2
 8009c4e:	f104 010c 	add.w	r1, r4, #12
 8009c52:	0092      	lsls	r2, r2, #2
 8009c54:	300c      	adds	r0, #12
 8009c56:	f000 fd6b 	bl	800a730 <memcpy>
 8009c5a:	4621      	mov	r1, r4
 8009c5c:	4638      	mov	r0, r7
 8009c5e:	f7ff ffa5 	bl	8009bac <_Bfree>
 8009c62:	4644      	mov	r4, r8
 8009c64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c68:	3501      	adds	r5, #1
 8009c6a:	615e      	str	r6, [r3, #20]
 8009c6c:	6125      	str	r5, [r4, #16]
 8009c6e:	4620      	mov	r0, r4
 8009c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c74:	0800aa54 	.word	0x0800aa54
 8009c78:	0800aa65 	.word	0x0800aa65

08009c7c <__hi0bits>:
 8009c7c:	0c03      	lsrs	r3, r0, #16
 8009c7e:	041b      	lsls	r3, r3, #16
 8009c80:	b9d3      	cbnz	r3, 8009cb8 <__hi0bits+0x3c>
 8009c82:	0400      	lsls	r0, r0, #16
 8009c84:	2310      	movs	r3, #16
 8009c86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009c8a:	bf04      	itt	eq
 8009c8c:	0200      	lsleq	r0, r0, #8
 8009c8e:	3308      	addeq	r3, #8
 8009c90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009c94:	bf04      	itt	eq
 8009c96:	0100      	lsleq	r0, r0, #4
 8009c98:	3304      	addeq	r3, #4
 8009c9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009c9e:	bf04      	itt	eq
 8009ca0:	0080      	lsleq	r0, r0, #2
 8009ca2:	3302      	addeq	r3, #2
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	db05      	blt.n	8009cb4 <__hi0bits+0x38>
 8009ca8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009cac:	f103 0301 	add.w	r3, r3, #1
 8009cb0:	bf08      	it	eq
 8009cb2:	2320      	moveq	r3, #32
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	4770      	bx	lr
 8009cb8:	2300      	movs	r3, #0
 8009cba:	e7e4      	b.n	8009c86 <__hi0bits+0xa>

08009cbc <__lo0bits>:
 8009cbc:	6803      	ldr	r3, [r0, #0]
 8009cbe:	f013 0207 	ands.w	r2, r3, #7
 8009cc2:	d00c      	beq.n	8009cde <__lo0bits+0x22>
 8009cc4:	07d9      	lsls	r1, r3, #31
 8009cc6:	d422      	bmi.n	8009d0e <__lo0bits+0x52>
 8009cc8:	079a      	lsls	r2, r3, #30
 8009cca:	bf49      	itett	mi
 8009ccc:	085b      	lsrmi	r3, r3, #1
 8009cce:	089b      	lsrpl	r3, r3, #2
 8009cd0:	6003      	strmi	r3, [r0, #0]
 8009cd2:	2201      	movmi	r2, #1
 8009cd4:	bf5c      	itt	pl
 8009cd6:	6003      	strpl	r3, [r0, #0]
 8009cd8:	2202      	movpl	r2, #2
 8009cda:	4610      	mov	r0, r2
 8009cdc:	4770      	bx	lr
 8009cde:	b299      	uxth	r1, r3
 8009ce0:	b909      	cbnz	r1, 8009ce6 <__lo0bits+0x2a>
 8009ce2:	0c1b      	lsrs	r3, r3, #16
 8009ce4:	2210      	movs	r2, #16
 8009ce6:	b2d9      	uxtb	r1, r3
 8009ce8:	b909      	cbnz	r1, 8009cee <__lo0bits+0x32>
 8009cea:	3208      	adds	r2, #8
 8009cec:	0a1b      	lsrs	r3, r3, #8
 8009cee:	0719      	lsls	r1, r3, #28
 8009cf0:	bf04      	itt	eq
 8009cf2:	091b      	lsreq	r3, r3, #4
 8009cf4:	3204      	addeq	r2, #4
 8009cf6:	0799      	lsls	r1, r3, #30
 8009cf8:	bf04      	itt	eq
 8009cfa:	089b      	lsreq	r3, r3, #2
 8009cfc:	3202      	addeq	r2, #2
 8009cfe:	07d9      	lsls	r1, r3, #31
 8009d00:	d403      	bmi.n	8009d0a <__lo0bits+0x4e>
 8009d02:	085b      	lsrs	r3, r3, #1
 8009d04:	f102 0201 	add.w	r2, r2, #1
 8009d08:	d003      	beq.n	8009d12 <__lo0bits+0x56>
 8009d0a:	6003      	str	r3, [r0, #0]
 8009d0c:	e7e5      	b.n	8009cda <__lo0bits+0x1e>
 8009d0e:	2200      	movs	r2, #0
 8009d10:	e7e3      	b.n	8009cda <__lo0bits+0x1e>
 8009d12:	2220      	movs	r2, #32
 8009d14:	e7e1      	b.n	8009cda <__lo0bits+0x1e>
	...

08009d18 <__i2b>:
 8009d18:	b510      	push	{r4, lr}
 8009d1a:	460c      	mov	r4, r1
 8009d1c:	2101      	movs	r1, #1
 8009d1e:	f7ff ff05 	bl	8009b2c <_Balloc>
 8009d22:	4602      	mov	r2, r0
 8009d24:	b928      	cbnz	r0, 8009d32 <__i2b+0x1a>
 8009d26:	4b05      	ldr	r3, [pc, #20]	; (8009d3c <__i2b+0x24>)
 8009d28:	4805      	ldr	r0, [pc, #20]	; (8009d40 <__i2b+0x28>)
 8009d2a:	f240 1145 	movw	r1, #325	; 0x145
 8009d2e:	f000 fd0d 	bl	800a74c <__assert_func>
 8009d32:	2301      	movs	r3, #1
 8009d34:	6144      	str	r4, [r0, #20]
 8009d36:	6103      	str	r3, [r0, #16]
 8009d38:	bd10      	pop	{r4, pc}
 8009d3a:	bf00      	nop
 8009d3c:	0800aa54 	.word	0x0800aa54
 8009d40:	0800aa65 	.word	0x0800aa65

08009d44 <__multiply>:
 8009d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d48:	4691      	mov	r9, r2
 8009d4a:	690a      	ldr	r2, [r1, #16]
 8009d4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	bfb8      	it	lt
 8009d54:	460b      	movlt	r3, r1
 8009d56:	460c      	mov	r4, r1
 8009d58:	bfbc      	itt	lt
 8009d5a:	464c      	movlt	r4, r9
 8009d5c:	4699      	movlt	r9, r3
 8009d5e:	6927      	ldr	r7, [r4, #16]
 8009d60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d64:	68a3      	ldr	r3, [r4, #8]
 8009d66:	6861      	ldr	r1, [r4, #4]
 8009d68:	eb07 060a 	add.w	r6, r7, sl
 8009d6c:	42b3      	cmp	r3, r6
 8009d6e:	b085      	sub	sp, #20
 8009d70:	bfb8      	it	lt
 8009d72:	3101      	addlt	r1, #1
 8009d74:	f7ff feda 	bl	8009b2c <_Balloc>
 8009d78:	b930      	cbnz	r0, 8009d88 <__multiply+0x44>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	4b44      	ldr	r3, [pc, #272]	; (8009e90 <__multiply+0x14c>)
 8009d7e:	4845      	ldr	r0, [pc, #276]	; (8009e94 <__multiply+0x150>)
 8009d80:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009d84:	f000 fce2 	bl	800a74c <__assert_func>
 8009d88:	f100 0514 	add.w	r5, r0, #20
 8009d8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d90:	462b      	mov	r3, r5
 8009d92:	2200      	movs	r2, #0
 8009d94:	4543      	cmp	r3, r8
 8009d96:	d321      	bcc.n	8009ddc <__multiply+0x98>
 8009d98:	f104 0314 	add.w	r3, r4, #20
 8009d9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009da0:	f109 0314 	add.w	r3, r9, #20
 8009da4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009da8:	9202      	str	r2, [sp, #8]
 8009daa:	1b3a      	subs	r2, r7, r4
 8009dac:	3a15      	subs	r2, #21
 8009dae:	f022 0203 	bic.w	r2, r2, #3
 8009db2:	3204      	adds	r2, #4
 8009db4:	f104 0115 	add.w	r1, r4, #21
 8009db8:	428f      	cmp	r7, r1
 8009dba:	bf38      	it	cc
 8009dbc:	2204      	movcc	r2, #4
 8009dbe:	9201      	str	r2, [sp, #4]
 8009dc0:	9a02      	ldr	r2, [sp, #8]
 8009dc2:	9303      	str	r3, [sp, #12]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d80c      	bhi.n	8009de2 <__multiply+0x9e>
 8009dc8:	2e00      	cmp	r6, #0
 8009dca:	dd03      	ble.n	8009dd4 <__multiply+0x90>
 8009dcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d05b      	beq.n	8009e8c <__multiply+0x148>
 8009dd4:	6106      	str	r6, [r0, #16]
 8009dd6:	b005      	add	sp, #20
 8009dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ddc:	f843 2b04 	str.w	r2, [r3], #4
 8009de0:	e7d8      	b.n	8009d94 <__multiply+0x50>
 8009de2:	f8b3 a000 	ldrh.w	sl, [r3]
 8009de6:	f1ba 0f00 	cmp.w	sl, #0
 8009dea:	d024      	beq.n	8009e36 <__multiply+0xf2>
 8009dec:	f104 0e14 	add.w	lr, r4, #20
 8009df0:	46a9      	mov	r9, r5
 8009df2:	f04f 0c00 	mov.w	ip, #0
 8009df6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009dfa:	f8d9 1000 	ldr.w	r1, [r9]
 8009dfe:	fa1f fb82 	uxth.w	fp, r2
 8009e02:	b289      	uxth	r1, r1
 8009e04:	fb0a 110b 	mla	r1, sl, fp, r1
 8009e08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009e0c:	f8d9 2000 	ldr.w	r2, [r9]
 8009e10:	4461      	add	r1, ip
 8009e12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e16:	fb0a c20b 	mla	r2, sl, fp, ip
 8009e1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e1e:	b289      	uxth	r1, r1
 8009e20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e24:	4577      	cmp	r7, lr
 8009e26:	f849 1b04 	str.w	r1, [r9], #4
 8009e2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e2e:	d8e2      	bhi.n	8009df6 <__multiply+0xb2>
 8009e30:	9a01      	ldr	r2, [sp, #4]
 8009e32:	f845 c002 	str.w	ip, [r5, r2]
 8009e36:	9a03      	ldr	r2, [sp, #12]
 8009e38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009e3c:	3304      	adds	r3, #4
 8009e3e:	f1b9 0f00 	cmp.w	r9, #0
 8009e42:	d021      	beq.n	8009e88 <__multiply+0x144>
 8009e44:	6829      	ldr	r1, [r5, #0]
 8009e46:	f104 0c14 	add.w	ip, r4, #20
 8009e4a:	46ae      	mov	lr, r5
 8009e4c:	f04f 0a00 	mov.w	sl, #0
 8009e50:	f8bc b000 	ldrh.w	fp, [ip]
 8009e54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009e58:	fb09 220b 	mla	r2, r9, fp, r2
 8009e5c:	4452      	add	r2, sl
 8009e5e:	b289      	uxth	r1, r1
 8009e60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e64:	f84e 1b04 	str.w	r1, [lr], #4
 8009e68:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009e6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e70:	f8be 1000 	ldrh.w	r1, [lr]
 8009e74:	fb09 110a 	mla	r1, r9, sl, r1
 8009e78:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009e7c:	4567      	cmp	r7, ip
 8009e7e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e82:	d8e5      	bhi.n	8009e50 <__multiply+0x10c>
 8009e84:	9a01      	ldr	r2, [sp, #4]
 8009e86:	50a9      	str	r1, [r5, r2]
 8009e88:	3504      	adds	r5, #4
 8009e8a:	e799      	b.n	8009dc0 <__multiply+0x7c>
 8009e8c:	3e01      	subs	r6, #1
 8009e8e:	e79b      	b.n	8009dc8 <__multiply+0x84>
 8009e90:	0800aa54 	.word	0x0800aa54
 8009e94:	0800aa65 	.word	0x0800aa65

08009e98 <__pow5mult>:
 8009e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e9c:	4615      	mov	r5, r2
 8009e9e:	f012 0203 	ands.w	r2, r2, #3
 8009ea2:	4606      	mov	r6, r0
 8009ea4:	460f      	mov	r7, r1
 8009ea6:	d007      	beq.n	8009eb8 <__pow5mult+0x20>
 8009ea8:	4c25      	ldr	r4, [pc, #148]	; (8009f40 <__pow5mult+0xa8>)
 8009eaa:	3a01      	subs	r2, #1
 8009eac:	2300      	movs	r3, #0
 8009eae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009eb2:	f7ff fe9d 	bl	8009bf0 <__multadd>
 8009eb6:	4607      	mov	r7, r0
 8009eb8:	10ad      	asrs	r5, r5, #2
 8009eba:	d03d      	beq.n	8009f38 <__pow5mult+0xa0>
 8009ebc:	69f4      	ldr	r4, [r6, #28]
 8009ebe:	b97c      	cbnz	r4, 8009ee0 <__pow5mult+0x48>
 8009ec0:	2010      	movs	r0, #16
 8009ec2:	f7ff fd7f 	bl	80099c4 <malloc>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	61f0      	str	r0, [r6, #28]
 8009eca:	b928      	cbnz	r0, 8009ed8 <__pow5mult+0x40>
 8009ecc:	4b1d      	ldr	r3, [pc, #116]	; (8009f44 <__pow5mult+0xac>)
 8009ece:	481e      	ldr	r0, [pc, #120]	; (8009f48 <__pow5mult+0xb0>)
 8009ed0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009ed4:	f000 fc3a 	bl	800a74c <__assert_func>
 8009ed8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009edc:	6004      	str	r4, [r0, #0]
 8009ede:	60c4      	str	r4, [r0, #12]
 8009ee0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009ee4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ee8:	b94c      	cbnz	r4, 8009efe <__pow5mult+0x66>
 8009eea:	f240 2171 	movw	r1, #625	; 0x271
 8009eee:	4630      	mov	r0, r6
 8009ef0:	f7ff ff12 	bl	8009d18 <__i2b>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009efa:	4604      	mov	r4, r0
 8009efc:	6003      	str	r3, [r0, #0]
 8009efe:	f04f 0900 	mov.w	r9, #0
 8009f02:	07eb      	lsls	r3, r5, #31
 8009f04:	d50a      	bpl.n	8009f1c <__pow5mult+0x84>
 8009f06:	4639      	mov	r1, r7
 8009f08:	4622      	mov	r2, r4
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	f7ff ff1a 	bl	8009d44 <__multiply>
 8009f10:	4639      	mov	r1, r7
 8009f12:	4680      	mov	r8, r0
 8009f14:	4630      	mov	r0, r6
 8009f16:	f7ff fe49 	bl	8009bac <_Bfree>
 8009f1a:	4647      	mov	r7, r8
 8009f1c:	106d      	asrs	r5, r5, #1
 8009f1e:	d00b      	beq.n	8009f38 <__pow5mult+0xa0>
 8009f20:	6820      	ldr	r0, [r4, #0]
 8009f22:	b938      	cbnz	r0, 8009f34 <__pow5mult+0x9c>
 8009f24:	4622      	mov	r2, r4
 8009f26:	4621      	mov	r1, r4
 8009f28:	4630      	mov	r0, r6
 8009f2a:	f7ff ff0b 	bl	8009d44 <__multiply>
 8009f2e:	6020      	str	r0, [r4, #0]
 8009f30:	f8c0 9000 	str.w	r9, [r0]
 8009f34:	4604      	mov	r4, r0
 8009f36:	e7e4      	b.n	8009f02 <__pow5mult+0x6a>
 8009f38:	4638      	mov	r0, r7
 8009f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f3e:	bf00      	nop
 8009f40:	0800abb0 	.word	0x0800abb0
 8009f44:	0800a9e5 	.word	0x0800a9e5
 8009f48:	0800aa65 	.word	0x0800aa65

08009f4c <__lshift>:
 8009f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f50:	460c      	mov	r4, r1
 8009f52:	6849      	ldr	r1, [r1, #4]
 8009f54:	6923      	ldr	r3, [r4, #16]
 8009f56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f5a:	68a3      	ldr	r3, [r4, #8]
 8009f5c:	4607      	mov	r7, r0
 8009f5e:	4691      	mov	r9, r2
 8009f60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f64:	f108 0601 	add.w	r6, r8, #1
 8009f68:	42b3      	cmp	r3, r6
 8009f6a:	db0b      	blt.n	8009f84 <__lshift+0x38>
 8009f6c:	4638      	mov	r0, r7
 8009f6e:	f7ff fddd 	bl	8009b2c <_Balloc>
 8009f72:	4605      	mov	r5, r0
 8009f74:	b948      	cbnz	r0, 8009f8a <__lshift+0x3e>
 8009f76:	4602      	mov	r2, r0
 8009f78:	4b28      	ldr	r3, [pc, #160]	; (800a01c <__lshift+0xd0>)
 8009f7a:	4829      	ldr	r0, [pc, #164]	; (800a020 <__lshift+0xd4>)
 8009f7c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009f80:	f000 fbe4 	bl	800a74c <__assert_func>
 8009f84:	3101      	adds	r1, #1
 8009f86:	005b      	lsls	r3, r3, #1
 8009f88:	e7ee      	b.n	8009f68 <__lshift+0x1c>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	f100 0114 	add.w	r1, r0, #20
 8009f90:	f100 0210 	add.w	r2, r0, #16
 8009f94:	4618      	mov	r0, r3
 8009f96:	4553      	cmp	r3, sl
 8009f98:	db33      	blt.n	800a002 <__lshift+0xb6>
 8009f9a:	6920      	ldr	r0, [r4, #16]
 8009f9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fa0:	f104 0314 	add.w	r3, r4, #20
 8009fa4:	f019 091f 	ands.w	r9, r9, #31
 8009fa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009fac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009fb0:	d02b      	beq.n	800a00a <__lshift+0xbe>
 8009fb2:	f1c9 0e20 	rsb	lr, r9, #32
 8009fb6:	468a      	mov	sl, r1
 8009fb8:	2200      	movs	r2, #0
 8009fba:	6818      	ldr	r0, [r3, #0]
 8009fbc:	fa00 f009 	lsl.w	r0, r0, r9
 8009fc0:	4310      	orrs	r0, r2
 8009fc2:	f84a 0b04 	str.w	r0, [sl], #4
 8009fc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fca:	459c      	cmp	ip, r3
 8009fcc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009fd0:	d8f3      	bhi.n	8009fba <__lshift+0x6e>
 8009fd2:	ebac 0304 	sub.w	r3, ip, r4
 8009fd6:	3b15      	subs	r3, #21
 8009fd8:	f023 0303 	bic.w	r3, r3, #3
 8009fdc:	3304      	adds	r3, #4
 8009fde:	f104 0015 	add.w	r0, r4, #21
 8009fe2:	4584      	cmp	ip, r0
 8009fe4:	bf38      	it	cc
 8009fe6:	2304      	movcc	r3, #4
 8009fe8:	50ca      	str	r2, [r1, r3]
 8009fea:	b10a      	cbz	r2, 8009ff0 <__lshift+0xa4>
 8009fec:	f108 0602 	add.w	r6, r8, #2
 8009ff0:	3e01      	subs	r6, #1
 8009ff2:	4638      	mov	r0, r7
 8009ff4:	612e      	str	r6, [r5, #16]
 8009ff6:	4621      	mov	r1, r4
 8009ff8:	f7ff fdd8 	bl	8009bac <_Bfree>
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a002:	f842 0f04 	str.w	r0, [r2, #4]!
 800a006:	3301      	adds	r3, #1
 800a008:	e7c5      	b.n	8009f96 <__lshift+0x4a>
 800a00a:	3904      	subs	r1, #4
 800a00c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a010:	f841 2f04 	str.w	r2, [r1, #4]!
 800a014:	459c      	cmp	ip, r3
 800a016:	d8f9      	bhi.n	800a00c <__lshift+0xc0>
 800a018:	e7ea      	b.n	8009ff0 <__lshift+0xa4>
 800a01a:	bf00      	nop
 800a01c:	0800aa54 	.word	0x0800aa54
 800a020:	0800aa65 	.word	0x0800aa65

0800a024 <__mcmp>:
 800a024:	b530      	push	{r4, r5, lr}
 800a026:	6902      	ldr	r2, [r0, #16]
 800a028:	690c      	ldr	r4, [r1, #16]
 800a02a:	1b12      	subs	r2, r2, r4
 800a02c:	d10e      	bne.n	800a04c <__mcmp+0x28>
 800a02e:	f100 0314 	add.w	r3, r0, #20
 800a032:	3114      	adds	r1, #20
 800a034:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a038:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a03c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a040:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a044:	42a5      	cmp	r5, r4
 800a046:	d003      	beq.n	800a050 <__mcmp+0x2c>
 800a048:	d305      	bcc.n	800a056 <__mcmp+0x32>
 800a04a:	2201      	movs	r2, #1
 800a04c:	4610      	mov	r0, r2
 800a04e:	bd30      	pop	{r4, r5, pc}
 800a050:	4283      	cmp	r3, r0
 800a052:	d3f3      	bcc.n	800a03c <__mcmp+0x18>
 800a054:	e7fa      	b.n	800a04c <__mcmp+0x28>
 800a056:	f04f 32ff 	mov.w	r2, #4294967295
 800a05a:	e7f7      	b.n	800a04c <__mcmp+0x28>

0800a05c <__mdiff>:
 800a05c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a060:	460c      	mov	r4, r1
 800a062:	4606      	mov	r6, r0
 800a064:	4611      	mov	r1, r2
 800a066:	4620      	mov	r0, r4
 800a068:	4690      	mov	r8, r2
 800a06a:	f7ff ffdb 	bl	800a024 <__mcmp>
 800a06e:	1e05      	subs	r5, r0, #0
 800a070:	d110      	bne.n	800a094 <__mdiff+0x38>
 800a072:	4629      	mov	r1, r5
 800a074:	4630      	mov	r0, r6
 800a076:	f7ff fd59 	bl	8009b2c <_Balloc>
 800a07a:	b930      	cbnz	r0, 800a08a <__mdiff+0x2e>
 800a07c:	4b3a      	ldr	r3, [pc, #232]	; (800a168 <__mdiff+0x10c>)
 800a07e:	4602      	mov	r2, r0
 800a080:	f240 2137 	movw	r1, #567	; 0x237
 800a084:	4839      	ldr	r0, [pc, #228]	; (800a16c <__mdiff+0x110>)
 800a086:	f000 fb61 	bl	800a74c <__assert_func>
 800a08a:	2301      	movs	r3, #1
 800a08c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a090:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a094:	bfa4      	itt	ge
 800a096:	4643      	movge	r3, r8
 800a098:	46a0      	movge	r8, r4
 800a09a:	4630      	mov	r0, r6
 800a09c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a0a0:	bfa6      	itte	ge
 800a0a2:	461c      	movge	r4, r3
 800a0a4:	2500      	movge	r5, #0
 800a0a6:	2501      	movlt	r5, #1
 800a0a8:	f7ff fd40 	bl	8009b2c <_Balloc>
 800a0ac:	b920      	cbnz	r0, 800a0b8 <__mdiff+0x5c>
 800a0ae:	4b2e      	ldr	r3, [pc, #184]	; (800a168 <__mdiff+0x10c>)
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	f240 2145 	movw	r1, #581	; 0x245
 800a0b6:	e7e5      	b.n	800a084 <__mdiff+0x28>
 800a0b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a0bc:	6926      	ldr	r6, [r4, #16]
 800a0be:	60c5      	str	r5, [r0, #12]
 800a0c0:	f104 0914 	add.w	r9, r4, #20
 800a0c4:	f108 0514 	add.w	r5, r8, #20
 800a0c8:	f100 0e14 	add.w	lr, r0, #20
 800a0cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a0d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a0d4:	f108 0210 	add.w	r2, r8, #16
 800a0d8:	46f2      	mov	sl, lr
 800a0da:	2100      	movs	r1, #0
 800a0dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800a0e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a0e4:	fa11 f88b 	uxtah	r8, r1, fp
 800a0e8:	b299      	uxth	r1, r3
 800a0ea:	0c1b      	lsrs	r3, r3, #16
 800a0ec:	eba8 0801 	sub.w	r8, r8, r1
 800a0f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a0f4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a0f8:	fa1f f888 	uxth.w	r8, r8
 800a0fc:	1419      	asrs	r1, r3, #16
 800a0fe:	454e      	cmp	r6, r9
 800a100:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a104:	f84a 3b04 	str.w	r3, [sl], #4
 800a108:	d8e8      	bhi.n	800a0dc <__mdiff+0x80>
 800a10a:	1b33      	subs	r3, r6, r4
 800a10c:	3b15      	subs	r3, #21
 800a10e:	f023 0303 	bic.w	r3, r3, #3
 800a112:	3304      	adds	r3, #4
 800a114:	3415      	adds	r4, #21
 800a116:	42a6      	cmp	r6, r4
 800a118:	bf38      	it	cc
 800a11a:	2304      	movcc	r3, #4
 800a11c:	441d      	add	r5, r3
 800a11e:	4473      	add	r3, lr
 800a120:	469e      	mov	lr, r3
 800a122:	462e      	mov	r6, r5
 800a124:	4566      	cmp	r6, ip
 800a126:	d30e      	bcc.n	800a146 <__mdiff+0xea>
 800a128:	f10c 0203 	add.w	r2, ip, #3
 800a12c:	1b52      	subs	r2, r2, r5
 800a12e:	f022 0203 	bic.w	r2, r2, #3
 800a132:	3d03      	subs	r5, #3
 800a134:	45ac      	cmp	ip, r5
 800a136:	bf38      	it	cc
 800a138:	2200      	movcc	r2, #0
 800a13a:	4413      	add	r3, r2
 800a13c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a140:	b17a      	cbz	r2, 800a162 <__mdiff+0x106>
 800a142:	6107      	str	r7, [r0, #16]
 800a144:	e7a4      	b.n	800a090 <__mdiff+0x34>
 800a146:	f856 8b04 	ldr.w	r8, [r6], #4
 800a14a:	fa11 f288 	uxtah	r2, r1, r8
 800a14e:	1414      	asrs	r4, r2, #16
 800a150:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a154:	b292      	uxth	r2, r2
 800a156:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a15a:	f84e 2b04 	str.w	r2, [lr], #4
 800a15e:	1421      	asrs	r1, r4, #16
 800a160:	e7e0      	b.n	800a124 <__mdiff+0xc8>
 800a162:	3f01      	subs	r7, #1
 800a164:	e7ea      	b.n	800a13c <__mdiff+0xe0>
 800a166:	bf00      	nop
 800a168:	0800aa54 	.word	0x0800aa54
 800a16c:	0800aa65 	.word	0x0800aa65

0800a170 <__d2b>:
 800a170:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a174:	460f      	mov	r7, r1
 800a176:	2101      	movs	r1, #1
 800a178:	ec59 8b10 	vmov	r8, r9, d0
 800a17c:	4616      	mov	r6, r2
 800a17e:	f7ff fcd5 	bl	8009b2c <_Balloc>
 800a182:	4604      	mov	r4, r0
 800a184:	b930      	cbnz	r0, 800a194 <__d2b+0x24>
 800a186:	4602      	mov	r2, r0
 800a188:	4b24      	ldr	r3, [pc, #144]	; (800a21c <__d2b+0xac>)
 800a18a:	4825      	ldr	r0, [pc, #148]	; (800a220 <__d2b+0xb0>)
 800a18c:	f240 310f 	movw	r1, #783	; 0x30f
 800a190:	f000 fadc 	bl	800a74c <__assert_func>
 800a194:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a198:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a19c:	bb2d      	cbnz	r5, 800a1ea <__d2b+0x7a>
 800a19e:	9301      	str	r3, [sp, #4]
 800a1a0:	f1b8 0300 	subs.w	r3, r8, #0
 800a1a4:	d026      	beq.n	800a1f4 <__d2b+0x84>
 800a1a6:	4668      	mov	r0, sp
 800a1a8:	9300      	str	r3, [sp, #0]
 800a1aa:	f7ff fd87 	bl	8009cbc <__lo0bits>
 800a1ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a1b2:	b1e8      	cbz	r0, 800a1f0 <__d2b+0x80>
 800a1b4:	f1c0 0320 	rsb	r3, r0, #32
 800a1b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1bc:	430b      	orrs	r3, r1
 800a1be:	40c2      	lsrs	r2, r0
 800a1c0:	6163      	str	r3, [r4, #20]
 800a1c2:	9201      	str	r2, [sp, #4]
 800a1c4:	9b01      	ldr	r3, [sp, #4]
 800a1c6:	61a3      	str	r3, [r4, #24]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	bf14      	ite	ne
 800a1cc:	2202      	movne	r2, #2
 800a1ce:	2201      	moveq	r2, #1
 800a1d0:	6122      	str	r2, [r4, #16]
 800a1d2:	b1bd      	cbz	r5, 800a204 <__d2b+0x94>
 800a1d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a1d8:	4405      	add	r5, r0
 800a1da:	603d      	str	r5, [r7, #0]
 800a1dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a1e0:	6030      	str	r0, [r6, #0]
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	b003      	add	sp, #12
 800a1e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1ee:	e7d6      	b.n	800a19e <__d2b+0x2e>
 800a1f0:	6161      	str	r1, [r4, #20]
 800a1f2:	e7e7      	b.n	800a1c4 <__d2b+0x54>
 800a1f4:	a801      	add	r0, sp, #4
 800a1f6:	f7ff fd61 	bl	8009cbc <__lo0bits>
 800a1fa:	9b01      	ldr	r3, [sp, #4]
 800a1fc:	6163      	str	r3, [r4, #20]
 800a1fe:	3020      	adds	r0, #32
 800a200:	2201      	movs	r2, #1
 800a202:	e7e5      	b.n	800a1d0 <__d2b+0x60>
 800a204:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a208:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a20c:	6038      	str	r0, [r7, #0]
 800a20e:	6918      	ldr	r0, [r3, #16]
 800a210:	f7ff fd34 	bl	8009c7c <__hi0bits>
 800a214:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a218:	e7e2      	b.n	800a1e0 <__d2b+0x70>
 800a21a:	bf00      	nop
 800a21c:	0800aa54 	.word	0x0800aa54
 800a220:	0800aa65 	.word	0x0800aa65

0800a224 <__sfputc_r>:
 800a224:	6893      	ldr	r3, [r2, #8]
 800a226:	3b01      	subs	r3, #1
 800a228:	2b00      	cmp	r3, #0
 800a22a:	b410      	push	{r4}
 800a22c:	6093      	str	r3, [r2, #8]
 800a22e:	da08      	bge.n	800a242 <__sfputc_r+0x1e>
 800a230:	6994      	ldr	r4, [r2, #24]
 800a232:	42a3      	cmp	r3, r4
 800a234:	db01      	blt.n	800a23a <__sfputc_r+0x16>
 800a236:	290a      	cmp	r1, #10
 800a238:	d103      	bne.n	800a242 <__sfputc_r+0x1e>
 800a23a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a23e:	f7fe bbe8 	b.w	8008a12 <__swbuf_r>
 800a242:	6813      	ldr	r3, [r2, #0]
 800a244:	1c58      	adds	r0, r3, #1
 800a246:	6010      	str	r0, [r2, #0]
 800a248:	7019      	strb	r1, [r3, #0]
 800a24a:	4608      	mov	r0, r1
 800a24c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a250:	4770      	bx	lr

0800a252 <__sfputs_r>:
 800a252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a254:	4606      	mov	r6, r0
 800a256:	460f      	mov	r7, r1
 800a258:	4614      	mov	r4, r2
 800a25a:	18d5      	adds	r5, r2, r3
 800a25c:	42ac      	cmp	r4, r5
 800a25e:	d101      	bne.n	800a264 <__sfputs_r+0x12>
 800a260:	2000      	movs	r0, #0
 800a262:	e007      	b.n	800a274 <__sfputs_r+0x22>
 800a264:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a268:	463a      	mov	r2, r7
 800a26a:	4630      	mov	r0, r6
 800a26c:	f7ff ffda 	bl	800a224 <__sfputc_r>
 800a270:	1c43      	adds	r3, r0, #1
 800a272:	d1f3      	bne.n	800a25c <__sfputs_r+0xa>
 800a274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a278 <_vfiprintf_r>:
 800a278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a27c:	460d      	mov	r5, r1
 800a27e:	b09d      	sub	sp, #116	; 0x74
 800a280:	4614      	mov	r4, r2
 800a282:	4698      	mov	r8, r3
 800a284:	4606      	mov	r6, r0
 800a286:	b118      	cbz	r0, 800a290 <_vfiprintf_r+0x18>
 800a288:	6a03      	ldr	r3, [r0, #32]
 800a28a:	b90b      	cbnz	r3, 800a290 <_vfiprintf_r+0x18>
 800a28c:	f7fe fada 	bl	8008844 <__sinit>
 800a290:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a292:	07d9      	lsls	r1, r3, #31
 800a294:	d405      	bmi.n	800a2a2 <_vfiprintf_r+0x2a>
 800a296:	89ab      	ldrh	r3, [r5, #12]
 800a298:	059a      	lsls	r2, r3, #22
 800a29a:	d402      	bmi.n	800a2a2 <_vfiprintf_r+0x2a>
 800a29c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a29e:	f7fe fcc9 	bl	8008c34 <__retarget_lock_acquire_recursive>
 800a2a2:	89ab      	ldrh	r3, [r5, #12]
 800a2a4:	071b      	lsls	r3, r3, #28
 800a2a6:	d501      	bpl.n	800a2ac <_vfiprintf_r+0x34>
 800a2a8:	692b      	ldr	r3, [r5, #16]
 800a2aa:	b99b      	cbnz	r3, 800a2d4 <_vfiprintf_r+0x5c>
 800a2ac:	4629      	mov	r1, r5
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	f7fe fbec 	bl	8008a8c <__swsetup_r>
 800a2b4:	b170      	cbz	r0, 800a2d4 <_vfiprintf_r+0x5c>
 800a2b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2b8:	07dc      	lsls	r4, r3, #31
 800a2ba:	d504      	bpl.n	800a2c6 <_vfiprintf_r+0x4e>
 800a2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c0:	b01d      	add	sp, #116	; 0x74
 800a2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c6:	89ab      	ldrh	r3, [r5, #12]
 800a2c8:	0598      	lsls	r0, r3, #22
 800a2ca:	d4f7      	bmi.n	800a2bc <_vfiprintf_r+0x44>
 800a2cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2ce:	f7fe fcb2 	bl	8008c36 <__retarget_lock_release_recursive>
 800a2d2:	e7f3      	b.n	800a2bc <_vfiprintf_r+0x44>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2d8:	2320      	movs	r3, #32
 800a2da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2de:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2e2:	2330      	movs	r3, #48	; 0x30
 800a2e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a498 <_vfiprintf_r+0x220>
 800a2e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2ec:	f04f 0901 	mov.w	r9, #1
 800a2f0:	4623      	mov	r3, r4
 800a2f2:	469a      	mov	sl, r3
 800a2f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2f8:	b10a      	cbz	r2, 800a2fe <_vfiprintf_r+0x86>
 800a2fa:	2a25      	cmp	r2, #37	; 0x25
 800a2fc:	d1f9      	bne.n	800a2f2 <_vfiprintf_r+0x7a>
 800a2fe:	ebba 0b04 	subs.w	fp, sl, r4
 800a302:	d00b      	beq.n	800a31c <_vfiprintf_r+0xa4>
 800a304:	465b      	mov	r3, fp
 800a306:	4622      	mov	r2, r4
 800a308:	4629      	mov	r1, r5
 800a30a:	4630      	mov	r0, r6
 800a30c:	f7ff ffa1 	bl	800a252 <__sfputs_r>
 800a310:	3001      	adds	r0, #1
 800a312:	f000 80a9 	beq.w	800a468 <_vfiprintf_r+0x1f0>
 800a316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a318:	445a      	add	r2, fp
 800a31a:	9209      	str	r2, [sp, #36]	; 0x24
 800a31c:	f89a 3000 	ldrb.w	r3, [sl]
 800a320:	2b00      	cmp	r3, #0
 800a322:	f000 80a1 	beq.w	800a468 <_vfiprintf_r+0x1f0>
 800a326:	2300      	movs	r3, #0
 800a328:	f04f 32ff 	mov.w	r2, #4294967295
 800a32c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a330:	f10a 0a01 	add.w	sl, sl, #1
 800a334:	9304      	str	r3, [sp, #16]
 800a336:	9307      	str	r3, [sp, #28]
 800a338:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a33c:	931a      	str	r3, [sp, #104]	; 0x68
 800a33e:	4654      	mov	r4, sl
 800a340:	2205      	movs	r2, #5
 800a342:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a346:	4854      	ldr	r0, [pc, #336]	; (800a498 <_vfiprintf_r+0x220>)
 800a348:	f7f5 ff42 	bl	80001d0 <memchr>
 800a34c:	9a04      	ldr	r2, [sp, #16]
 800a34e:	b9d8      	cbnz	r0, 800a388 <_vfiprintf_r+0x110>
 800a350:	06d1      	lsls	r1, r2, #27
 800a352:	bf44      	itt	mi
 800a354:	2320      	movmi	r3, #32
 800a356:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a35a:	0713      	lsls	r3, r2, #28
 800a35c:	bf44      	itt	mi
 800a35e:	232b      	movmi	r3, #43	; 0x2b
 800a360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a364:	f89a 3000 	ldrb.w	r3, [sl]
 800a368:	2b2a      	cmp	r3, #42	; 0x2a
 800a36a:	d015      	beq.n	800a398 <_vfiprintf_r+0x120>
 800a36c:	9a07      	ldr	r2, [sp, #28]
 800a36e:	4654      	mov	r4, sl
 800a370:	2000      	movs	r0, #0
 800a372:	f04f 0c0a 	mov.w	ip, #10
 800a376:	4621      	mov	r1, r4
 800a378:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a37c:	3b30      	subs	r3, #48	; 0x30
 800a37e:	2b09      	cmp	r3, #9
 800a380:	d94d      	bls.n	800a41e <_vfiprintf_r+0x1a6>
 800a382:	b1b0      	cbz	r0, 800a3b2 <_vfiprintf_r+0x13a>
 800a384:	9207      	str	r2, [sp, #28]
 800a386:	e014      	b.n	800a3b2 <_vfiprintf_r+0x13a>
 800a388:	eba0 0308 	sub.w	r3, r0, r8
 800a38c:	fa09 f303 	lsl.w	r3, r9, r3
 800a390:	4313      	orrs	r3, r2
 800a392:	9304      	str	r3, [sp, #16]
 800a394:	46a2      	mov	sl, r4
 800a396:	e7d2      	b.n	800a33e <_vfiprintf_r+0xc6>
 800a398:	9b03      	ldr	r3, [sp, #12]
 800a39a:	1d19      	adds	r1, r3, #4
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	9103      	str	r1, [sp, #12]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	bfbb      	ittet	lt
 800a3a4:	425b      	neglt	r3, r3
 800a3a6:	f042 0202 	orrlt.w	r2, r2, #2
 800a3aa:	9307      	strge	r3, [sp, #28]
 800a3ac:	9307      	strlt	r3, [sp, #28]
 800a3ae:	bfb8      	it	lt
 800a3b0:	9204      	strlt	r2, [sp, #16]
 800a3b2:	7823      	ldrb	r3, [r4, #0]
 800a3b4:	2b2e      	cmp	r3, #46	; 0x2e
 800a3b6:	d10c      	bne.n	800a3d2 <_vfiprintf_r+0x15a>
 800a3b8:	7863      	ldrb	r3, [r4, #1]
 800a3ba:	2b2a      	cmp	r3, #42	; 0x2a
 800a3bc:	d134      	bne.n	800a428 <_vfiprintf_r+0x1b0>
 800a3be:	9b03      	ldr	r3, [sp, #12]
 800a3c0:	1d1a      	adds	r2, r3, #4
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	9203      	str	r2, [sp, #12]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	bfb8      	it	lt
 800a3ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3ce:	3402      	adds	r4, #2
 800a3d0:	9305      	str	r3, [sp, #20]
 800a3d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a4a8 <_vfiprintf_r+0x230>
 800a3d6:	7821      	ldrb	r1, [r4, #0]
 800a3d8:	2203      	movs	r2, #3
 800a3da:	4650      	mov	r0, sl
 800a3dc:	f7f5 fef8 	bl	80001d0 <memchr>
 800a3e0:	b138      	cbz	r0, 800a3f2 <_vfiprintf_r+0x17a>
 800a3e2:	9b04      	ldr	r3, [sp, #16]
 800a3e4:	eba0 000a 	sub.w	r0, r0, sl
 800a3e8:	2240      	movs	r2, #64	; 0x40
 800a3ea:	4082      	lsls	r2, r0
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	3401      	adds	r4, #1
 800a3f0:	9304      	str	r3, [sp, #16]
 800a3f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3f6:	4829      	ldr	r0, [pc, #164]	; (800a49c <_vfiprintf_r+0x224>)
 800a3f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3fc:	2206      	movs	r2, #6
 800a3fe:	f7f5 fee7 	bl	80001d0 <memchr>
 800a402:	2800      	cmp	r0, #0
 800a404:	d03f      	beq.n	800a486 <_vfiprintf_r+0x20e>
 800a406:	4b26      	ldr	r3, [pc, #152]	; (800a4a0 <_vfiprintf_r+0x228>)
 800a408:	bb1b      	cbnz	r3, 800a452 <_vfiprintf_r+0x1da>
 800a40a:	9b03      	ldr	r3, [sp, #12]
 800a40c:	3307      	adds	r3, #7
 800a40e:	f023 0307 	bic.w	r3, r3, #7
 800a412:	3308      	adds	r3, #8
 800a414:	9303      	str	r3, [sp, #12]
 800a416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a418:	443b      	add	r3, r7
 800a41a:	9309      	str	r3, [sp, #36]	; 0x24
 800a41c:	e768      	b.n	800a2f0 <_vfiprintf_r+0x78>
 800a41e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a422:	460c      	mov	r4, r1
 800a424:	2001      	movs	r0, #1
 800a426:	e7a6      	b.n	800a376 <_vfiprintf_r+0xfe>
 800a428:	2300      	movs	r3, #0
 800a42a:	3401      	adds	r4, #1
 800a42c:	9305      	str	r3, [sp, #20]
 800a42e:	4619      	mov	r1, r3
 800a430:	f04f 0c0a 	mov.w	ip, #10
 800a434:	4620      	mov	r0, r4
 800a436:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a43a:	3a30      	subs	r2, #48	; 0x30
 800a43c:	2a09      	cmp	r2, #9
 800a43e:	d903      	bls.n	800a448 <_vfiprintf_r+0x1d0>
 800a440:	2b00      	cmp	r3, #0
 800a442:	d0c6      	beq.n	800a3d2 <_vfiprintf_r+0x15a>
 800a444:	9105      	str	r1, [sp, #20]
 800a446:	e7c4      	b.n	800a3d2 <_vfiprintf_r+0x15a>
 800a448:	fb0c 2101 	mla	r1, ip, r1, r2
 800a44c:	4604      	mov	r4, r0
 800a44e:	2301      	movs	r3, #1
 800a450:	e7f0      	b.n	800a434 <_vfiprintf_r+0x1bc>
 800a452:	ab03      	add	r3, sp, #12
 800a454:	9300      	str	r3, [sp, #0]
 800a456:	462a      	mov	r2, r5
 800a458:	4b12      	ldr	r3, [pc, #72]	; (800a4a4 <_vfiprintf_r+0x22c>)
 800a45a:	a904      	add	r1, sp, #16
 800a45c:	4630      	mov	r0, r6
 800a45e:	f7fd fdb1 	bl	8007fc4 <_printf_float>
 800a462:	4607      	mov	r7, r0
 800a464:	1c78      	adds	r0, r7, #1
 800a466:	d1d6      	bne.n	800a416 <_vfiprintf_r+0x19e>
 800a468:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a46a:	07d9      	lsls	r1, r3, #31
 800a46c:	d405      	bmi.n	800a47a <_vfiprintf_r+0x202>
 800a46e:	89ab      	ldrh	r3, [r5, #12]
 800a470:	059a      	lsls	r2, r3, #22
 800a472:	d402      	bmi.n	800a47a <_vfiprintf_r+0x202>
 800a474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a476:	f7fe fbde 	bl	8008c36 <__retarget_lock_release_recursive>
 800a47a:	89ab      	ldrh	r3, [r5, #12]
 800a47c:	065b      	lsls	r3, r3, #25
 800a47e:	f53f af1d 	bmi.w	800a2bc <_vfiprintf_r+0x44>
 800a482:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a484:	e71c      	b.n	800a2c0 <_vfiprintf_r+0x48>
 800a486:	ab03      	add	r3, sp, #12
 800a488:	9300      	str	r3, [sp, #0]
 800a48a:	462a      	mov	r2, r5
 800a48c:	4b05      	ldr	r3, [pc, #20]	; (800a4a4 <_vfiprintf_r+0x22c>)
 800a48e:	a904      	add	r1, sp, #16
 800a490:	4630      	mov	r0, r6
 800a492:	f7fe f83b 	bl	800850c <_printf_i>
 800a496:	e7e4      	b.n	800a462 <_vfiprintf_r+0x1ea>
 800a498:	0800abbc 	.word	0x0800abbc
 800a49c:	0800abc6 	.word	0x0800abc6
 800a4a0:	08007fc5 	.word	0x08007fc5
 800a4a4:	0800a253 	.word	0x0800a253
 800a4a8:	0800abc2 	.word	0x0800abc2

0800a4ac <__sflush_r>:
 800a4ac:	898a      	ldrh	r2, [r1, #12]
 800a4ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b2:	4605      	mov	r5, r0
 800a4b4:	0710      	lsls	r0, r2, #28
 800a4b6:	460c      	mov	r4, r1
 800a4b8:	d458      	bmi.n	800a56c <__sflush_r+0xc0>
 800a4ba:	684b      	ldr	r3, [r1, #4]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	dc05      	bgt.n	800a4cc <__sflush_r+0x20>
 800a4c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	dc02      	bgt.n	800a4cc <__sflush_r+0x20>
 800a4c6:	2000      	movs	r0, #0
 800a4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4ce:	2e00      	cmp	r6, #0
 800a4d0:	d0f9      	beq.n	800a4c6 <__sflush_r+0x1a>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4d8:	682f      	ldr	r7, [r5, #0]
 800a4da:	6a21      	ldr	r1, [r4, #32]
 800a4dc:	602b      	str	r3, [r5, #0]
 800a4de:	d032      	beq.n	800a546 <__sflush_r+0x9a>
 800a4e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4e2:	89a3      	ldrh	r3, [r4, #12]
 800a4e4:	075a      	lsls	r2, r3, #29
 800a4e6:	d505      	bpl.n	800a4f4 <__sflush_r+0x48>
 800a4e8:	6863      	ldr	r3, [r4, #4]
 800a4ea:	1ac0      	subs	r0, r0, r3
 800a4ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4ee:	b10b      	cbz	r3, 800a4f4 <__sflush_r+0x48>
 800a4f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4f2:	1ac0      	subs	r0, r0, r3
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4fa:	6a21      	ldr	r1, [r4, #32]
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	47b0      	blx	r6
 800a500:	1c43      	adds	r3, r0, #1
 800a502:	89a3      	ldrh	r3, [r4, #12]
 800a504:	d106      	bne.n	800a514 <__sflush_r+0x68>
 800a506:	6829      	ldr	r1, [r5, #0]
 800a508:	291d      	cmp	r1, #29
 800a50a:	d82b      	bhi.n	800a564 <__sflush_r+0xb8>
 800a50c:	4a29      	ldr	r2, [pc, #164]	; (800a5b4 <__sflush_r+0x108>)
 800a50e:	410a      	asrs	r2, r1
 800a510:	07d6      	lsls	r6, r2, #31
 800a512:	d427      	bmi.n	800a564 <__sflush_r+0xb8>
 800a514:	2200      	movs	r2, #0
 800a516:	6062      	str	r2, [r4, #4]
 800a518:	04d9      	lsls	r1, r3, #19
 800a51a:	6922      	ldr	r2, [r4, #16]
 800a51c:	6022      	str	r2, [r4, #0]
 800a51e:	d504      	bpl.n	800a52a <__sflush_r+0x7e>
 800a520:	1c42      	adds	r2, r0, #1
 800a522:	d101      	bne.n	800a528 <__sflush_r+0x7c>
 800a524:	682b      	ldr	r3, [r5, #0]
 800a526:	b903      	cbnz	r3, 800a52a <__sflush_r+0x7e>
 800a528:	6560      	str	r0, [r4, #84]	; 0x54
 800a52a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a52c:	602f      	str	r7, [r5, #0]
 800a52e:	2900      	cmp	r1, #0
 800a530:	d0c9      	beq.n	800a4c6 <__sflush_r+0x1a>
 800a532:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a536:	4299      	cmp	r1, r3
 800a538:	d002      	beq.n	800a540 <__sflush_r+0x94>
 800a53a:	4628      	mov	r0, r5
 800a53c:	f7ff f9f6 	bl	800992c <_free_r>
 800a540:	2000      	movs	r0, #0
 800a542:	6360      	str	r0, [r4, #52]	; 0x34
 800a544:	e7c0      	b.n	800a4c8 <__sflush_r+0x1c>
 800a546:	2301      	movs	r3, #1
 800a548:	4628      	mov	r0, r5
 800a54a:	47b0      	blx	r6
 800a54c:	1c41      	adds	r1, r0, #1
 800a54e:	d1c8      	bne.n	800a4e2 <__sflush_r+0x36>
 800a550:	682b      	ldr	r3, [r5, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d0c5      	beq.n	800a4e2 <__sflush_r+0x36>
 800a556:	2b1d      	cmp	r3, #29
 800a558:	d001      	beq.n	800a55e <__sflush_r+0xb2>
 800a55a:	2b16      	cmp	r3, #22
 800a55c:	d101      	bne.n	800a562 <__sflush_r+0xb6>
 800a55e:	602f      	str	r7, [r5, #0]
 800a560:	e7b1      	b.n	800a4c6 <__sflush_r+0x1a>
 800a562:	89a3      	ldrh	r3, [r4, #12]
 800a564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a568:	81a3      	strh	r3, [r4, #12]
 800a56a:	e7ad      	b.n	800a4c8 <__sflush_r+0x1c>
 800a56c:	690f      	ldr	r7, [r1, #16]
 800a56e:	2f00      	cmp	r7, #0
 800a570:	d0a9      	beq.n	800a4c6 <__sflush_r+0x1a>
 800a572:	0793      	lsls	r3, r2, #30
 800a574:	680e      	ldr	r6, [r1, #0]
 800a576:	bf08      	it	eq
 800a578:	694b      	ldreq	r3, [r1, #20]
 800a57a:	600f      	str	r7, [r1, #0]
 800a57c:	bf18      	it	ne
 800a57e:	2300      	movne	r3, #0
 800a580:	eba6 0807 	sub.w	r8, r6, r7
 800a584:	608b      	str	r3, [r1, #8]
 800a586:	f1b8 0f00 	cmp.w	r8, #0
 800a58a:	dd9c      	ble.n	800a4c6 <__sflush_r+0x1a>
 800a58c:	6a21      	ldr	r1, [r4, #32]
 800a58e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a590:	4643      	mov	r3, r8
 800a592:	463a      	mov	r2, r7
 800a594:	4628      	mov	r0, r5
 800a596:	47b0      	blx	r6
 800a598:	2800      	cmp	r0, #0
 800a59a:	dc06      	bgt.n	800a5aa <__sflush_r+0xfe>
 800a59c:	89a3      	ldrh	r3, [r4, #12]
 800a59e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5a2:	81a3      	strh	r3, [r4, #12]
 800a5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a8:	e78e      	b.n	800a4c8 <__sflush_r+0x1c>
 800a5aa:	4407      	add	r7, r0
 800a5ac:	eba8 0800 	sub.w	r8, r8, r0
 800a5b0:	e7e9      	b.n	800a586 <__sflush_r+0xda>
 800a5b2:	bf00      	nop
 800a5b4:	dfbffffe 	.word	0xdfbffffe

0800a5b8 <_fflush_r>:
 800a5b8:	b538      	push	{r3, r4, r5, lr}
 800a5ba:	690b      	ldr	r3, [r1, #16]
 800a5bc:	4605      	mov	r5, r0
 800a5be:	460c      	mov	r4, r1
 800a5c0:	b913      	cbnz	r3, 800a5c8 <_fflush_r+0x10>
 800a5c2:	2500      	movs	r5, #0
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	bd38      	pop	{r3, r4, r5, pc}
 800a5c8:	b118      	cbz	r0, 800a5d2 <_fflush_r+0x1a>
 800a5ca:	6a03      	ldr	r3, [r0, #32]
 800a5cc:	b90b      	cbnz	r3, 800a5d2 <_fflush_r+0x1a>
 800a5ce:	f7fe f939 	bl	8008844 <__sinit>
 800a5d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d0f3      	beq.n	800a5c2 <_fflush_r+0xa>
 800a5da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a5dc:	07d0      	lsls	r0, r2, #31
 800a5de:	d404      	bmi.n	800a5ea <_fflush_r+0x32>
 800a5e0:	0599      	lsls	r1, r3, #22
 800a5e2:	d402      	bmi.n	800a5ea <_fflush_r+0x32>
 800a5e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5e6:	f7fe fb25 	bl	8008c34 <__retarget_lock_acquire_recursive>
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	f7ff ff5d 	bl	800a4ac <__sflush_r>
 800a5f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5f4:	07da      	lsls	r2, r3, #31
 800a5f6:	4605      	mov	r5, r0
 800a5f8:	d4e4      	bmi.n	800a5c4 <_fflush_r+0xc>
 800a5fa:	89a3      	ldrh	r3, [r4, #12]
 800a5fc:	059b      	lsls	r3, r3, #22
 800a5fe:	d4e1      	bmi.n	800a5c4 <_fflush_r+0xc>
 800a600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a602:	f7fe fb18 	bl	8008c36 <__retarget_lock_release_recursive>
 800a606:	e7dd      	b.n	800a5c4 <_fflush_r+0xc>

0800a608 <__swhatbuf_r>:
 800a608:	b570      	push	{r4, r5, r6, lr}
 800a60a:	460c      	mov	r4, r1
 800a60c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a610:	2900      	cmp	r1, #0
 800a612:	b096      	sub	sp, #88	; 0x58
 800a614:	4615      	mov	r5, r2
 800a616:	461e      	mov	r6, r3
 800a618:	da0d      	bge.n	800a636 <__swhatbuf_r+0x2e>
 800a61a:	89a3      	ldrh	r3, [r4, #12]
 800a61c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a620:	f04f 0100 	mov.w	r1, #0
 800a624:	bf0c      	ite	eq
 800a626:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a62a:	2340      	movne	r3, #64	; 0x40
 800a62c:	2000      	movs	r0, #0
 800a62e:	6031      	str	r1, [r6, #0]
 800a630:	602b      	str	r3, [r5, #0]
 800a632:	b016      	add	sp, #88	; 0x58
 800a634:	bd70      	pop	{r4, r5, r6, pc}
 800a636:	466a      	mov	r2, sp
 800a638:	f000 f848 	bl	800a6cc <_fstat_r>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	dbec      	blt.n	800a61a <__swhatbuf_r+0x12>
 800a640:	9901      	ldr	r1, [sp, #4]
 800a642:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a646:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a64a:	4259      	negs	r1, r3
 800a64c:	4159      	adcs	r1, r3
 800a64e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a652:	e7eb      	b.n	800a62c <__swhatbuf_r+0x24>

0800a654 <__smakebuf_r>:
 800a654:	898b      	ldrh	r3, [r1, #12]
 800a656:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a658:	079d      	lsls	r5, r3, #30
 800a65a:	4606      	mov	r6, r0
 800a65c:	460c      	mov	r4, r1
 800a65e:	d507      	bpl.n	800a670 <__smakebuf_r+0x1c>
 800a660:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a664:	6023      	str	r3, [r4, #0]
 800a666:	6123      	str	r3, [r4, #16]
 800a668:	2301      	movs	r3, #1
 800a66a:	6163      	str	r3, [r4, #20]
 800a66c:	b002      	add	sp, #8
 800a66e:	bd70      	pop	{r4, r5, r6, pc}
 800a670:	ab01      	add	r3, sp, #4
 800a672:	466a      	mov	r2, sp
 800a674:	f7ff ffc8 	bl	800a608 <__swhatbuf_r>
 800a678:	9900      	ldr	r1, [sp, #0]
 800a67a:	4605      	mov	r5, r0
 800a67c:	4630      	mov	r0, r6
 800a67e:	f7ff f9c9 	bl	8009a14 <_malloc_r>
 800a682:	b948      	cbnz	r0, 800a698 <__smakebuf_r+0x44>
 800a684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a688:	059a      	lsls	r2, r3, #22
 800a68a:	d4ef      	bmi.n	800a66c <__smakebuf_r+0x18>
 800a68c:	f023 0303 	bic.w	r3, r3, #3
 800a690:	f043 0302 	orr.w	r3, r3, #2
 800a694:	81a3      	strh	r3, [r4, #12]
 800a696:	e7e3      	b.n	800a660 <__smakebuf_r+0xc>
 800a698:	89a3      	ldrh	r3, [r4, #12]
 800a69a:	6020      	str	r0, [r4, #0]
 800a69c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6a0:	81a3      	strh	r3, [r4, #12]
 800a6a2:	9b00      	ldr	r3, [sp, #0]
 800a6a4:	6163      	str	r3, [r4, #20]
 800a6a6:	9b01      	ldr	r3, [sp, #4]
 800a6a8:	6120      	str	r0, [r4, #16]
 800a6aa:	b15b      	cbz	r3, 800a6c4 <__smakebuf_r+0x70>
 800a6ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	f000 f81d 	bl	800a6f0 <_isatty_r>
 800a6b6:	b128      	cbz	r0, 800a6c4 <__smakebuf_r+0x70>
 800a6b8:	89a3      	ldrh	r3, [r4, #12]
 800a6ba:	f023 0303 	bic.w	r3, r3, #3
 800a6be:	f043 0301 	orr.w	r3, r3, #1
 800a6c2:	81a3      	strh	r3, [r4, #12]
 800a6c4:	89a3      	ldrh	r3, [r4, #12]
 800a6c6:	431d      	orrs	r5, r3
 800a6c8:	81a5      	strh	r5, [r4, #12]
 800a6ca:	e7cf      	b.n	800a66c <__smakebuf_r+0x18>

0800a6cc <_fstat_r>:
 800a6cc:	b538      	push	{r3, r4, r5, lr}
 800a6ce:	4d07      	ldr	r5, [pc, #28]	; (800a6ec <_fstat_r+0x20>)
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	4604      	mov	r4, r0
 800a6d4:	4608      	mov	r0, r1
 800a6d6:	4611      	mov	r1, r2
 800a6d8:	602b      	str	r3, [r5, #0]
 800a6da:	f7f7 faa5 	bl	8001c28 <_fstat>
 800a6de:	1c43      	adds	r3, r0, #1
 800a6e0:	d102      	bne.n	800a6e8 <_fstat_r+0x1c>
 800a6e2:	682b      	ldr	r3, [r5, #0]
 800a6e4:	b103      	cbz	r3, 800a6e8 <_fstat_r+0x1c>
 800a6e6:	6023      	str	r3, [r4, #0]
 800a6e8:	bd38      	pop	{r3, r4, r5, pc}
 800a6ea:	bf00      	nop
 800a6ec:	20000510 	.word	0x20000510

0800a6f0 <_isatty_r>:
 800a6f0:	b538      	push	{r3, r4, r5, lr}
 800a6f2:	4d06      	ldr	r5, [pc, #24]	; (800a70c <_isatty_r+0x1c>)
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	4604      	mov	r4, r0
 800a6f8:	4608      	mov	r0, r1
 800a6fa:	602b      	str	r3, [r5, #0]
 800a6fc:	f7f7 faa4 	bl	8001c48 <_isatty>
 800a700:	1c43      	adds	r3, r0, #1
 800a702:	d102      	bne.n	800a70a <_isatty_r+0x1a>
 800a704:	682b      	ldr	r3, [r5, #0]
 800a706:	b103      	cbz	r3, 800a70a <_isatty_r+0x1a>
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	bd38      	pop	{r3, r4, r5, pc}
 800a70c:	20000510 	.word	0x20000510

0800a710 <_sbrk_r>:
 800a710:	b538      	push	{r3, r4, r5, lr}
 800a712:	4d06      	ldr	r5, [pc, #24]	; (800a72c <_sbrk_r+0x1c>)
 800a714:	2300      	movs	r3, #0
 800a716:	4604      	mov	r4, r0
 800a718:	4608      	mov	r0, r1
 800a71a:	602b      	str	r3, [r5, #0]
 800a71c:	f7f7 faac 	bl	8001c78 <_sbrk>
 800a720:	1c43      	adds	r3, r0, #1
 800a722:	d102      	bne.n	800a72a <_sbrk_r+0x1a>
 800a724:	682b      	ldr	r3, [r5, #0]
 800a726:	b103      	cbz	r3, 800a72a <_sbrk_r+0x1a>
 800a728:	6023      	str	r3, [r4, #0]
 800a72a:	bd38      	pop	{r3, r4, r5, pc}
 800a72c:	20000510 	.word	0x20000510

0800a730 <memcpy>:
 800a730:	440a      	add	r2, r1
 800a732:	4291      	cmp	r1, r2
 800a734:	f100 33ff 	add.w	r3, r0, #4294967295
 800a738:	d100      	bne.n	800a73c <memcpy+0xc>
 800a73a:	4770      	bx	lr
 800a73c:	b510      	push	{r4, lr}
 800a73e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a742:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a746:	4291      	cmp	r1, r2
 800a748:	d1f9      	bne.n	800a73e <memcpy+0xe>
 800a74a:	bd10      	pop	{r4, pc}

0800a74c <__assert_func>:
 800a74c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a74e:	4614      	mov	r4, r2
 800a750:	461a      	mov	r2, r3
 800a752:	4b09      	ldr	r3, [pc, #36]	; (800a778 <__assert_func+0x2c>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4605      	mov	r5, r0
 800a758:	68d8      	ldr	r0, [r3, #12]
 800a75a:	b14c      	cbz	r4, 800a770 <__assert_func+0x24>
 800a75c:	4b07      	ldr	r3, [pc, #28]	; (800a77c <__assert_func+0x30>)
 800a75e:	9100      	str	r1, [sp, #0]
 800a760:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a764:	4906      	ldr	r1, [pc, #24]	; (800a780 <__assert_func+0x34>)
 800a766:	462b      	mov	r3, r5
 800a768:	f000 f844 	bl	800a7f4 <fiprintf>
 800a76c:	f000 f854 	bl	800a818 <abort>
 800a770:	4b04      	ldr	r3, [pc, #16]	; (800a784 <__assert_func+0x38>)
 800a772:	461c      	mov	r4, r3
 800a774:	e7f3      	b.n	800a75e <__assert_func+0x12>
 800a776:	bf00      	nop
 800a778:	20000068 	.word	0x20000068
 800a77c:	0800abd7 	.word	0x0800abd7
 800a780:	0800abe4 	.word	0x0800abe4
 800a784:	0800ac12 	.word	0x0800ac12

0800a788 <_calloc_r>:
 800a788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a78a:	fba1 2402 	umull	r2, r4, r1, r2
 800a78e:	b94c      	cbnz	r4, 800a7a4 <_calloc_r+0x1c>
 800a790:	4611      	mov	r1, r2
 800a792:	9201      	str	r2, [sp, #4]
 800a794:	f7ff f93e 	bl	8009a14 <_malloc_r>
 800a798:	9a01      	ldr	r2, [sp, #4]
 800a79a:	4605      	mov	r5, r0
 800a79c:	b930      	cbnz	r0, 800a7ac <_calloc_r+0x24>
 800a79e:	4628      	mov	r0, r5
 800a7a0:	b003      	add	sp, #12
 800a7a2:	bd30      	pop	{r4, r5, pc}
 800a7a4:	220c      	movs	r2, #12
 800a7a6:	6002      	str	r2, [r0, #0]
 800a7a8:	2500      	movs	r5, #0
 800a7aa:	e7f8      	b.n	800a79e <_calloc_r+0x16>
 800a7ac:	4621      	mov	r1, r4
 800a7ae:	f7fe f9c5 	bl	8008b3c <memset>
 800a7b2:	e7f4      	b.n	800a79e <_calloc_r+0x16>

0800a7b4 <__ascii_mbtowc>:
 800a7b4:	b082      	sub	sp, #8
 800a7b6:	b901      	cbnz	r1, 800a7ba <__ascii_mbtowc+0x6>
 800a7b8:	a901      	add	r1, sp, #4
 800a7ba:	b142      	cbz	r2, 800a7ce <__ascii_mbtowc+0x1a>
 800a7bc:	b14b      	cbz	r3, 800a7d2 <__ascii_mbtowc+0x1e>
 800a7be:	7813      	ldrb	r3, [r2, #0]
 800a7c0:	600b      	str	r3, [r1, #0]
 800a7c2:	7812      	ldrb	r2, [r2, #0]
 800a7c4:	1e10      	subs	r0, r2, #0
 800a7c6:	bf18      	it	ne
 800a7c8:	2001      	movne	r0, #1
 800a7ca:	b002      	add	sp, #8
 800a7cc:	4770      	bx	lr
 800a7ce:	4610      	mov	r0, r2
 800a7d0:	e7fb      	b.n	800a7ca <__ascii_mbtowc+0x16>
 800a7d2:	f06f 0001 	mvn.w	r0, #1
 800a7d6:	e7f8      	b.n	800a7ca <__ascii_mbtowc+0x16>

0800a7d8 <__ascii_wctomb>:
 800a7d8:	b149      	cbz	r1, 800a7ee <__ascii_wctomb+0x16>
 800a7da:	2aff      	cmp	r2, #255	; 0xff
 800a7dc:	bf85      	ittet	hi
 800a7de:	238a      	movhi	r3, #138	; 0x8a
 800a7e0:	6003      	strhi	r3, [r0, #0]
 800a7e2:	700a      	strbls	r2, [r1, #0]
 800a7e4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a7e8:	bf98      	it	ls
 800a7ea:	2001      	movls	r0, #1
 800a7ec:	4770      	bx	lr
 800a7ee:	4608      	mov	r0, r1
 800a7f0:	4770      	bx	lr
	...

0800a7f4 <fiprintf>:
 800a7f4:	b40e      	push	{r1, r2, r3}
 800a7f6:	b503      	push	{r0, r1, lr}
 800a7f8:	4601      	mov	r1, r0
 800a7fa:	ab03      	add	r3, sp, #12
 800a7fc:	4805      	ldr	r0, [pc, #20]	; (800a814 <fiprintf+0x20>)
 800a7fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a802:	6800      	ldr	r0, [r0, #0]
 800a804:	9301      	str	r3, [sp, #4]
 800a806:	f7ff fd37 	bl	800a278 <_vfiprintf_r>
 800a80a:	b002      	add	sp, #8
 800a80c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a810:	b003      	add	sp, #12
 800a812:	4770      	bx	lr
 800a814:	20000068 	.word	0x20000068

0800a818 <abort>:
 800a818:	b508      	push	{r3, lr}
 800a81a:	2006      	movs	r0, #6
 800a81c:	f000 f82c 	bl	800a878 <raise>
 800a820:	2001      	movs	r0, #1
 800a822:	f7f7 f9b9 	bl	8001b98 <_exit>

0800a826 <_raise_r>:
 800a826:	291f      	cmp	r1, #31
 800a828:	b538      	push	{r3, r4, r5, lr}
 800a82a:	4604      	mov	r4, r0
 800a82c:	460d      	mov	r5, r1
 800a82e:	d904      	bls.n	800a83a <_raise_r+0x14>
 800a830:	2316      	movs	r3, #22
 800a832:	6003      	str	r3, [r0, #0]
 800a834:	f04f 30ff 	mov.w	r0, #4294967295
 800a838:	bd38      	pop	{r3, r4, r5, pc}
 800a83a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a83c:	b112      	cbz	r2, 800a844 <_raise_r+0x1e>
 800a83e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a842:	b94b      	cbnz	r3, 800a858 <_raise_r+0x32>
 800a844:	4620      	mov	r0, r4
 800a846:	f000 f831 	bl	800a8ac <_getpid_r>
 800a84a:	462a      	mov	r2, r5
 800a84c:	4601      	mov	r1, r0
 800a84e:	4620      	mov	r0, r4
 800a850:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a854:	f000 b818 	b.w	800a888 <_kill_r>
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d00a      	beq.n	800a872 <_raise_r+0x4c>
 800a85c:	1c59      	adds	r1, r3, #1
 800a85e:	d103      	bne.n	800a868 <_raise_r+0x42>
 800a860:	2316      	movs	r3, #22
 800a862:	6003      	str	r3, [r0, #0]
 800a864:	2001      	movs	r0, #1
 800a866:	e7e7      	b.n	800a838 <_raise_r+0x12>
 800a868:	2400      	movs	r4, #0
 800a86a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a86e:	4628      	mov	r0, r5
 800a870:	4798      	blx	r3
 800a872:	2000      	movs	r0, #0
 800a874:	e7e0      	b.n	800a838 <_raise_r+0x12>
	...

0800a878 <raise>:
 800a878:	4b02      	ldr	r3, [pc, #8]	; (800a884 <raise+0xc>)
 800a87a:	4601      	mov	r1, r0
 800a87c:	6818      	ldr	r0, [r3, #0]
 800a87e:	f7ff bfd2 	b.w	800a826 <_raise_r>
 800a882:	bf00      	nop
 800a884:	20000068 	.word	0x20000068

0800a888 <_kill_r>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	4d07      	ldr	r5, [pc, #28]	; (800a8a8 <_kill_r+0x20>)
 800a88c:	2300      	movs	r3, #0
 800a88e:	4604      	mov	r4, r0
 800a890:	4608      	mov	r0, r1
 800a892:	4611      	mov	r1, r2
 800a894:	602b      	str	r3, [r5, #0]
 800a896:	f7f7 f96f 	bl	8001b78 <_kill>
 800a89a:	1c43      	adds	r3, r0, #1
 800a89c:	d102      	bne.n	800a8a4 <_kill_r+0x1c>
 800a89e:	682b      	ldr	r3, [r5, #0]
 800a8a0:	b103      	cbz	r3, 800a8a4 <_kill_r+0x1c>
 800a8a2:	6023      	str	r3, [r4, #0]
 800a8a4:	bd38      	pop	{r3, r4, r5, pc}
 800a8a6:	bf00      	nop
 800a8a8:	20000510 	.word	0x20000510

0800a8ac <_getpid_r>:
 800a8ac:	f7f7 b95c 	b.w	8001b68 <_getpid>

0800a8b0 <_init>:
 800a8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8b2:	bf00      	nop
 800a8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8b6:	bc08      	pop	{r3}
 800a8b8:	469e      	mov	lr, r3
 800a8ba:	4770      	bx	lr

0800a8bc <_fini>:
 800a8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8be:	bf00      	nop
 800a8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8c2:	bc08      	pop	{r3}
 800a8c4:	469e      	mov	lr, r3
 800a8c6:	4770      	bx	lr
