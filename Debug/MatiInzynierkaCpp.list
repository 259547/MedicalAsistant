
MatiInzynierkaCpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b8c  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08006d20  08006d20  00016d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006db0  08006db0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006db0  08006db0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006db0  08006db0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006db0  08006db0  00016db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006db4  08006db4  00016db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006db8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000070  08006e28  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08006e28  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d433  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026a3  00000000  00000000  0002d516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  0002fbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009aa  00000000  00000000  000308b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022790  00000000  00000000  0003125a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010329  00000000  00000000  000539ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7470  00000000  00000000  00063d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003938  00000000  00000000  0012b184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0012eabc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d04 	.word	0x08006d04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006d04 	.word	0x08006d04

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <IncPing>:


////// INCLINOMETER //////

//Ret 0 if the sensor works
int32_t IncPing(void){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
	transfer In,Out;
	Out.buf[0] = 0x0F | (0x80);
 8000b4e:	238f      	movs	r3, #143	; 0x8f
 8000b50:	703b      	strb	r3, [r7, #0]
	Out.buf[1] = 0x00;
 8000b52:	2300      	movs	r3, #0
 8000b54:	707b      	strb	r3, [r7, #1]
	//6Bh - who I am
	SPIIncSend(Out.buf, In.buf, 2);
 8000b56:	1d39      	adds	r1, r7, #4
 8000b58:	463b      	mov	r3, r7
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 f943 	bl	8000de8 <SPIIncSend>

	if(In.buf[1] == 0x6B)
 8000b62:	797b      	ldrb	r3, [r7, #5]
 8000b64:	2b6b      	cmp	r3, #107	; 0x6b
 8000b66:	d101      	bne.n	8000b6c <IncPing+0x24>
			return 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	e000      	b.n	8000b6e <IncPing+0x26>

	return 1;
 8000b6c:	2301      	movs	r3, #1
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <ImuPing>:


/////// IMU //////

//ret 0 if sensor works
int32_t ImuPing(void){
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
	transfer In,Out;
	Out.buf[0] = 0x0F | (0x80);
 8000b7c:	238f      	movs	r3, #143	; 0x8f
 8000b7e:	703b      	strb	r3, [r7, #0]
	Out.buf[1] = 0x00;
 8000b80:	2300      	movs	r3, #0
 8000b82:	707b      	strb	r3, [r7, #1]
	In.dane = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
	//6Bh - who I am
	SPIImuSend(Out.buf, In.buf, 2);
 8000b88:	1d39      	adds	r1, r7, #4
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f954 	bl	8000e3c <SPIImuSend>

	if(In.buf[1] == 0x22)
 8000b94:	797b      	ldrb	r3, [r7, #5]
 8000b96:	2b22      	cmp	r3, #34	; 0x22
 8000b98:	d101      	bne.n	8000b9e <ImuPing+0x28>
			return 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e000      	b.n	8000ba0 <ImuPing+0x2a>

	return 1;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <PSSetSeaLevelPressure>:
#define CTRL_REG_DEF_OSM	(CTRL_REG_DEF | 1)
#define SA_READ				(0x80)

static float referencePressure = 101325.0f;

void PSSetSeaLevelPressure(float pressure){
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	ed87 0a01 	vstr	s0, [r7, #4]
	referencePressure = pressure;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <PSSetSeaLevelPressure+0x1c>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6013      	str	r3, [r2, #0]
	return;
 8000bb8:	bf00      	nop
}
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	20000000 	.word	0x20000000

08000bc8 <PSGetSeaLevelPressure>:

__attribute__((weak)) float PSGetSeaLevelPressure(void){
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

	return referencePressure;
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <PSGetSeaLevelPressure+0x18>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	ee07 3a90 	vmov	s15, r3
}
 8000bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	20000000 	.word	0x20000000
 8000be4:	00000000 	.word	0x00000000

08000be8 <PSCalculateAlt>:

__attribute__((weak)) float PSCalculateAlt(float pressure, float temp){
 8000be8:	b5b0      	push	{r4, r5, r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bf2:	edc7 0a00 	vstr	s1, [r7]


	return ((pow((PSGetSeaLevelPressure() / pressure), 1/5.257) - 1.0) * (temp + 273.15)) / 0.0065;
 8000bf6:	f7ff ffe7 	bl	8000bc8 <PSGetSeaLevelPressure>
 8000bfa:	eeb0 7a40 	vmov.f32	s14, s0
 8000bfe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c02:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000c06:	ee16 0a90 	vmov	r0, s13
 8000c0a:	f7ff fc45 	bl	8000498 <__aeabi_f2d>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	460b      	mov	r3, r1
 8000c12:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8000c80 <PSCalculateAlt+0x98>
 8000c16:	ec43 2b10 	vmov	d0, r2, r3
 8000c1a:	f005 f907 	bl	8005e2c <pow>
 8000c1e:	ec51 0b10 	vmov	r0, r1, d0
 8000c22:	f04f 0200 	mov.w	r2, #0
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <PSCalculateAlt+0xb0>)
 8000c28:	f7ff fad6 	bl	80001d8 <__aeabi_dsub>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4614      	mov	r4, r2
 8000c32:	461d      	mov	r5, r3
 8000c34:	6838      	ldr	r0, [r7, #0]
 8000c36:	f7ff fc2f 	bl	8000498 <__aeabi_f2d>
 8000c3a:	a313      	add	r3, pc, #76	; (adr r3, 8000c88 <PSCalculateAlt+0xa0>)
 8000c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c40:	f7ff facc 	bl	80001dc <__adddf3>
 8000c44:	4602      	mov	r2, r0
 8000c46:	460b      	mov	r3, r1
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	f7ff fc7c 	bl	8000548 <__aeabi_dmul>
 8000c50:	4602      	mov	r2, r0
 8000c52:	460b      	mov	r3, r1
 8000c54:	4610      	mov	r0, r2
 8000c56:	4619      	mov	r1, r3
 8000c58:	a30d      	add	r3, pc, #52	; (adr r3, 8000c90 <PSCalculateAlt+0xa8>)
 8000c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c5e:	f7ff fd9d 	bl	800079c <__aeabi_ddiv>
 8000c62:	4602      	mov	r2, r0
 8000c64:	460b      	mov	r3, r1
 8000c66:	4610      	mov	r0, r2
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f7ff ff1d 	bl	8000aa8 <__aeabi_d2f>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	ee07 3a90 	vmov	s15, r3
}
 8000c74:	eeb0 0a67 	vmov.f32	s0, s15
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	7dee2d4a 	.word	0x7dee2d4a
 8000c84:	3fc85936 	.word	0x3fc85936
 8000c88:	66666666 	.word	0x66666666
 8000c8c:	40711266 	.word	0x40711266
 8000c90:	76c8b439 	.word	0x76c8b439
 8000c94:	3f7a9fbe 	.word	0x3f7a9fbe
 8000c98:	3ff00000 	.word	0x3ff00000

08000c9c <PsPing>:

int32_t PsPing(void){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
	transfer In,Out;
	Out.buf[0] = 0x0F | SA_READ;
 8000ca2:	238f      	movs	r3, #143	; 0x8f
 8000ca4:	703b      	strb	r3, [r7, #0]
	Out.buf[1] = 0x00;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	707b      	strb	r3, [r7, #1]
	In.dane = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
	//6Bh - who I am
	SPIPsSend(Out.buf, In.buf, 2);
 8000cae:	1d39      	adds	r1, r7, #4
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 f8eb 	bl	8000e90 <SPIPsSend>

	if(In.buf[1] == 0xB1)
 8000cba:	797b      	ldrb	r3, [r7, #5]
 8000cbc:	2bb1      	cmp	r3, #177	; 0xb1
 8000cbe:	d101      	bne.n	8000cc4 <PsPing+0x28>
			return 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	e000      	b.n	8000cc6 <PsPing+0x2a>

	return 1;
 8000cc4:	2301      	movs	r3, #1
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <PSRead>:


//No error checking!
int32_t PSRead(PSReading * data){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retVal;
	transfer In,Out;
	//Force one shoot:
	Out.buf[0] = 0x11;
 8000cd8:	2311      	movs	r3, #17
 8000cda:	733b      	strb	r3, [r7, #12]
	Out.buf[1] = CTRL_REG_DEF_OSM;
 8000cdc:	2311      	movs	r3, #17
 8000cde:	737b      	strb	r3, [r7, #13]
	retVal = SPIPsSend(Out.buf, In.buf, 2);
 8000ce0:	f107 0110 	add.w	r1, r7, #16
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	2202      	movs	r2, #2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f8d0 	bl	8000e90 <SPIPsSend>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	75fb      	strb	r3, [r7, #23]
	//Wait for one shoot done:
	Out.buf[0] = 0x11 | SA_READ;
 8000cf4:	2391      	movs	r3, #145	; 0x91
 8000cf6:	733b      	strb	r3, [r7, #12]
	Out.buf[1] = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	737b      	strb	r3, [r7, #13]
	while(In.buf[1] != CTRL_REG_DEF){
 8000cfc:	e009      	b.n	8000d12 <PSRead+0x42>
		retVal = SPIPsSend(Out.buf, In.buf, 2);
 8000cfe:	f107 0110 	add.w	r1, r7, #16
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	2202      	movs	r2, #2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 f8c1 	bl	8000e90 <SPIPsSend>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	75fb      	strb	r3, [r7, #23]
	while(In.buf[1] != CTRL_REG_DEF){
 8000d12:	7c7b      	ldrb	r3, [r7, #17]
 8000d14:	2b10      	cmp	r3, #16
 8000d16:	d1f2      	bne.n	8000cfe <PSRead+0x2e>
		//todo: add timeout!
	}
	//Read values:
	//Pressure:
	Out.dane = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
	In.dane = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	613b      	str	r3, [r7, #16]
	Out.buf[0] = 0x28 | SA_READ;
 8000d20:	23a8      	movs	r3, #168	; 0xa8
 8000d22:	733b      	strb	r3, [r7, #12]
	retVal = SPIPsSend(Out.buf, In.buf, 4);
 8000d24:	f107 0110 	add.w	r1, r7, #16
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f8ae 	bl	8000e90 <SPIPsSend>
 8000d34:	4603      	mov	r3, r0
 8000d36:	75fb      	strb	r3, [r7, #23]

	//24 bit 2's complement
	In.dane >>=8; //skip nulls
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	0a1b      	lsrs	r3, r3, #8
 8000d3c:	613b      	str	r3, [r7, #16]
	if(In.buf[3] & 0x80){
 8000d3e:	7cfb      	ldrb	r3, [r7, #19]
 8000d40:	b25b      	sxtb	r3, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	da01      	bge.n	8000d4a <PSRead+0x7a>
		//negative
		In.buf[4]=0xff;
 8000d46:	23ff      	movs	r3, #255	; 0xff
 8000d48:	753b      	strb	r3, [r7, #20]
	}

	data->pres = (float)*(int32_t *)(In.buf)/40.96f;
 8000d4a:	f107 0310 	add.w	r3, r7, #16
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	ee07 3a90 	vmov	s15, r3
 8000d54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d58:	eddf 6a21 	vldr	s13, [pc, #132]	; 8000de0 <PSRead+0x110>
 8000d5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	edc3 7a01 	vstr	s15, [r3, #4]


	//Temperature:
	Out.dane = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
	In.dane = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
	Out.buf[0] = 0x2B | SA_READ;
 8000d6e:	23ab      	movs	r3, #171	; 0xab
 8000d70:	733b      	strb	r3, [r7, #12]
	retVal = SPIPsSend(Out.buf, In.buf, 3);
 8000d72:	f107 0110 	add.w	r1, r7, #16
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 f887 	bl	8000e90 <SPIPsSend>
 8000d82:	4603      	mov	r3, r0
 8000d84:	75fb      	strb	r3, [r7, #23]

	data->temp = (float)*((int16_t *)(In.buf+1));
 8000d86:	f107 0310 	add.w	r3, r7, #16
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d90:	ee07 3a90 	vmov	s15, r3
 8000d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	edc3 7a00 	vstr	s15, [r3]
	data->temp /= 100;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	ed93 7a00 	vldr	s14, [r3]
 8000da4:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000de4 <PSRead+0x114>
 8000da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	edc3 7a00 	vstr	s15, [r3]

	//calculate Altitude:

	data->alt = PSCalculateAlt(data->pres,data->temp);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	edd3 7a01 	vldr	s15, [r3, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	ed93 7a00 	vldr	s14, [r3]
 8000dbe:	eef0 0a47 	vmov.f32	s1, s14
 8000dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc6:	f7ff ff0f 	bl	8000be8 <PSCalculateAlt>
 8000dca:	eef0 7a40 	vmov.f32	s15, s0
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	edc3 7a02 	vstr	s15, [r3, #8]

	return retVal;
 8000dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	4223d70a 	.word	0x4223d70a
 8000de4:	42c80000 	.word	0x42c80000

08000de8 <SPIIncSend>:


extern SPI_HandleTypeDef hspi2;


HAL_StatusTypeDef SPIIncSend(char* dataOut,char * dataIn, uint16_t len){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af02      	add	r7, sp, #8
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	4613      	mov	r3, r2
 8000df4:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef retVal;

	HAL_GPIO_WritePin(CS_INC_GPIO_Port, CS_INC_Pin, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <SPIIncSend+0x4c>)
 8000dfe:	f000 fe2b 	bl	8001a58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f000 fba4 	bl	8001550 <HAL_Delay>

	retVal = HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)dataOut, (uint8_t*)dataIn, len, 100);
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	2264      	movs	r2, #100	; 0x64
 8000e0c:	9200      	str	r2, [sp, #0]
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	68f9      	ldr	r1, [r7, #12]
 8000e12:	4809      	ldr	r0, [pc, #36]	; (8000e38 <SPIIncSend+0x50>)
 8000e14:	f003 fd7d 	bl	8004912 <HAL_SPI_TransmitReceive>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(CS_INC_GPIO_Port, CS_INC_Pin, 1);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e22:	4804      	ldr	r0, [pc, #16]	; (8000e34 <SPIIncSend+0x4c>)
 8000e24:	f000 fe18 	bl	8001a58 <HAL_GPIO_WritePin>

	return retVal;
 8000e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	48000400 	.word	0x48000400
 8000e38:	20000110 	.word	0x20000110

08000e3c <SPIImuSend>:

HAL_StatusTypeDef SPIImuSend(char* dataOut,char * dataIn, uint16_t len){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af02      	add	r7, sp, #8
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	4613      	mov	r3, r2
 8000e48:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef retVal;

	HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e50:	480d      	ldr	r0, [pc, #52]	; (8000e88 <SPIImuSend+0x4c>)
 8000e52:	f000 fe01 	bl	8001a58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e56:	2001      	movs	r0, #1
 8000e58:	f000 fb7a 	bl	8001550 <HAL_Delay>

	retVal = HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)dataOut, (uint8_t*)dataIn, len, 100);
 8000e5c:	88fb      	ldrh	r3, [r7, #6]
 8000e5e:	2264      	movs	r2, #100	; 0x64
 8000e60:	9200      	str	r2, [sp, #0]
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	68f9      	ldr	r1, [r7, #12]
 8000e66:	4809      	ldr	r0, [pc, #36]	; (8000e8c <SPIImuSend+0x50>)
 8000e68:	f003 fd53 	bl	8004912 <HAL_SPI_TransmitReceive>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, 1);
 8000e70:	2201      	movs	r2, #1
 8000e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e76:	4804      	ldr	r0, [pc, #16]	; (8000e88 <SPIImuSend+0x4c>)
 8000e78:	f000 fdee 	bl	8001a58 <HAL_GPIO_WritePin>

	return retVal;
 8000e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	48000400 	.word	0x48000400
 8000e8c:	20000110 	.word	0x20000110

08000e90 <SPIPsSend>:

HAL_StatusTypeDef SPIPsSend(char* dataOut,char * dataIn, uint16_t len){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af02      	add	r7, sp, #8
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef retVal;

	HAL_GPIO_WritePin(CS_PS_GPIO_Port, CS_PS_Pin, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2140      	movs	r1, #64	; 0x40
 8000ea2:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <SPIPsSend+0x48>)
 8000ea4:	f000 fdd8 	bl	8001a58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f000 fb51 	bl	8001550 <HAL_Delay>

	retVal = HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)dataOut, (uint8_t*)dataIn, len, 100);
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	2264      	movs	r2, #100	; 0x64
 8000eb2:	9200      	str	r2, [sp, #0]
 8000eb4:	68ba      	ldr	r2, [r7, #8]
 8000eb6:	68f9      	ldr	r1, [r7, #12]
 8000eb8:	4808      	ldr	r0, [pc, #32]	; (8000edc <SPIPsSend+0x4c>)
 8000eba:	f003 fd2a 	bl	8004912 <HAL_SPI_TransmitReceive>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(CS_PS_GPIO_Port, CS_PS_Pin, 1);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2140      	movs	r1, #64	; 0x40
 8000ec6:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <SPIPsSend+0x48>)
 8000ec8:	f000 fdc6 	bl	8001a58 <HAL_GPIO_WritePin>

	return retVal;
 8000ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	48000400 	.word	0x48000400
 8000edc:	20000110 	.word	0x20000110

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee6:	f000 fabe 	bl	8001466 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 f82a 	bl	8000f42 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eee:	f000 f8d9 	bl	80010a4 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000ef2:	f000 f877 	bl	8000fe4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000ef6:	f004 fdc7 	bl	8005a88 <MX_FATFS_Init>
  MX_SPI2_Init();
 8000efa:	f000 f895 	bl	8001028 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  PSReading PSData;
  if(!PsPing()){
 8000efe:	f7ff fecd 	bl	8000c9c <PsPing>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d109      	bne.n	8000f1c <main+0x3c>
  		  PSRead(&PSData);
 8000f08:	463b      	mov	r3, r7
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fee0 	bl	8000cd0 <PSRead>
  		  PSSetSeaLevelPressure(PSData.pres);
 8000f10:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f14:	eeb0 0a67 	vmov.f32	s0, s15
 8000f18:	f7ff fe46 	bl	8000ba8 <PSSetSeaLevelPressure>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int x = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
  while (1)
  {
	  IncPing();
 8000f20:	f7ff fe12 	bl	8000b48 <IncPing>
	  ImuPing();
 8000f24:	f7ff fe27 	bl	8000b76 <ImuPing>
	  if(!PsPing()){
 8000f28:	f7ff feb8 	bl	8000c9c <PsPing>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d103      	bne.n	8000f3a <main+0x5a>
		  PSRead(&PSData);
 8000f32:	463b      	mov	r3, r7
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fecb 	bl	8000cd0 <PSRead>
	  }



	  HAL_Delay(10);
 8000f3a:	200a      	movs	r0, #10
 8000f3c:	f000 fb08 	bl	8001550 <HAL_Delay>
  {
 8000f40:	e7ee      	b.n	8000f20 <main+0x40>

08000f42 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b096      	sub	sp, #88	; 0x58
 8000f46:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2244      	movs	r2, #68	; 0x44
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f005 fea5 	bl	8006ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f56:	463b      	mov	r3, r7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f64:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f68:	f000 fd9c 	bl	8001aa4 <HAL_PWREx_ControlVoltageScaling>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f72:	f000 f8fb 	bl	800116c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f76:	2302      	movs	r3, #2
 8000f78:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f80:	2310      	movs	r3, #16
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f84:	2302      	movs	r3, #2
 8000f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f90:	230a      	movs	r3, #10
 8000f92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f94:	2307      	movs	r3, #7
 8000f96:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 fdd3 	bl	8001b50 <HAL_RCC_OscConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fb0:	f000 f8dc 	bl	800116c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	2104      	movs	r1, #4
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f001 f9d3 	bl	8002378 <HAL_RCC_ClockConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fd8:	f000 f8c8 	bl	800116c <Error_Handler>
  }
}
 8000fdc:	bf00      	nop
 8000fde:	3758      	adds	r7, #88	; 0x58
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <MX_SDMMC1_SD_Init+0x3c>)
 8000fea:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <MX_SDMMC1_SD_Init+0x40>)
 8000fec:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_SDMMC1_SD_Init+0x3c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_ENABLE;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <MX_SDMMC1_SD_Init+0x3c>)
 8000ff6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ffa:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <MX_SDMMC1_SD_Init+0x3c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <MX_SDMMC1_SD_Init+0x3c>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <MX_SDMMC1_SD_Init+0x3c>)
 800100a:	2200      	movs	r2, #0
 800100c:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 4;
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <MX_SDMMC1_SD_Init+0x3c>)
 8001010:	2204      	movs	r2, #4
 8001012:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	2000008c 	.word	0x2000008c
 8001024:	40012800 	.word	0x40012800

08001028 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800102c:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_SPI2_Init+0x74>)
 800102e:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <MX_SPI2_Init+0x78>)
 8001030:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_SPI2_Init+0x74>)
 8001034:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001038:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <MX_SPI2_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <MX_SPI2_Init+0x74>)
 8001042:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001046:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_SPI2_Init+0x74>)
 800104a:	2202      	movs	r2, #2
 800104c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <MX_SPI2_Init+0x74>)
 8001050:	2201      	movs	r2, #1
 8001052:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_SPI2_Init+0x74>)
 8001056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800105a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_SPI2_Init+0x74>)
 800105e:	2238      	movs	r2, #56	; 0x38
 8001060:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_SPI2_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_SPI2_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <MX_SPI2_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_SPI2_Init+0x74>)
 8001076:	2207      	movs	r2, #7
 8001078:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <MX_SPI2_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_SPI2_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_SPI2_Init+0x74>)
 8001088:	f003 fba0 	bl	80047cc <HAL_SPI_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001092:	f000 f86b 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000110 	.word	0x20000110
 80010a0:	40003800 	.word	0x40003800

080010a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ba:	4b2a      	ldr	r3, [pc, #168]	; (8001164 <MX_GPIO_Init+0xc0>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4a29      	ldr	r2, [pc, #164]	; (8001164 <MX_GPIO_Init+0xc0>)
 80010c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4b27      	ldr	r3, [pc, #156]	; (8001164 <MX_GPIO_Init+0xc0>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d2:	4b24      	ldr	r3, [pc, #144]	; (8001164 <MX_GPIO_Init+0xc0>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	4a23      	ldr	r2, [pc, #140]	; (8001164 <MX_GPIO_Init+0xc0>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <MX_GPIO_Init+0xc0>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <MX_GPIO_Init+0xc0>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <MX_GPIO_Init+0xc0>)
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f6:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <MX_GPIO_Init+0xc0>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <MX_GPIO_Init+0xc0>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	4a17      	ldr	r2, [pc, #92]	; (8001164 <MX_GPIO_Init+0xc0>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <MX_GPIO_Init+0xc0>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <MX_GPIO_Init+0xc0>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	4a11      	ldr	r2, [pc, #68]	; (8001164 <MX_GPIO_Init+0xc0>)
 8001120:	f043 0308 	orr.w	r3, r3, #8
 8001124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <MX_GPIO_Init+0xc0>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_PS_Pin|CS_IMU_Pin|CS_INC_Pin, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 7150 	mov.w	r1, #832	; 0x340
 8001138:	480b      	ldr	r0, [pc, #44]	; (8001168 <MX_GPIO_Init+0xc4>)
 800113a:	f000 fc8d 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_PS_Pin CS_IMU_Pin CS_INC_Pin */
  GPIO_InitStruct.Pin = CS_PS_Pin|CS_IMU_Pin|CS_INC_Pin;
 800113e:	f44f 7350 	mov.w	r3, #832	; 0x340
 8001142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001144:	2301      	movs	r3, #1
 8001146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	4804      	ldr	r0, [pc, #16]	; (8001168 <MX_GPIO_Init+0xc4>)
 8001158:	f000 fb04 	bl	8001764 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	; 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40021000 	.word	0x40021000
 8001168:	48000400 	.word	0x48000400

0800116c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001170:	b672      	cpsid	i
}
 8001172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001174:	e7fe      	b.n	8001174 <Error_Handler+0x8>
	...

08001178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_MspInit+0x44>)
 8001180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001182:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <HAL_MspInit+0x44>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6613      	str	r3, [r2, #96]	; 0x60
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HAL_MspInit+0x44>)
 800118c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_MspInit+0x44>)
 8001198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119a:	4a08      	ldr	r2, [pc, #32]	; (80011bc <HAL_MspInit+0x44>)
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a0:	6593      	str	r3, [r2, #88]	; 0x58
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_MspInit+0x44>)
 80011a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000

080011c0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b0a2      	sub	sp, #136	; 0x88
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011d8:	f107 0318 	add.w	r3, r7, #24
 80011dc:	225c      	movs	r2, #92	; 0x5c
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f005 fd5d 	bl	8006ca0 <memset>
  if(hsd->Instance==SDMMC1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a37      	ldr	r2, [pc, #220]	; (80012c8 <HAL_SD_MspInit+0x108>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d167      	bne.n	80012c0 <HAL_SD_MspInit+0x100>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80011f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80011f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80011f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80011fa:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80011fc:	2302      	movs	r3, #2
 80011fe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001200:	2301      	movs	r3, #1
 8001202:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 8001204:	230a      	movs	r3, #10
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001208:	2307      	movs	r3, #7
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800120c:	2304      	movs	r3, #4
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001210:	2302      	movs	r3, #2
 8001212:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001214:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800121a:	f107 0318 	add.w	r3, r7, #24
 800121e:	4618      	mov	r0, r3
 8001220:	f001 facc 	bl	80027bc <HAL_RCCEx_PeriphCLKConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_SD_MspInit+0x6e>
    {
      Error_Handler();
 800122a:	f7ff ff9f 	bl	800116c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800122e:	4b27      	ldr	r3, [pc, #156]	; (80012cc <HAL_SD_MspInit+0x10c>)
 8001230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001232:	4a26      	ldr	r2, [pc, #152]	; (80012cc <HAL_SD_MspInit+0x10c>)
 8001234:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001238:	6613      	str	r3, [r2, #96]	; 0x60
 800123a:	4b24      	ldr	r3, [pc, #144]	; (80012cc <HAL_SD_MspInit+0x10c>)
 800123c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001246:	4b21      	ldr	r3, [pc, #132]	; (80012cc <HAL_SD_MspInit+0x10c>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	4a20      	ldr	r2, [pc, #128]	; (80012cc <HAL_SD_MspInit+0x10c>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001252:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <HAL_SD_MspInit+0x10c>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800125e:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <HAL_SD_MspInit+0x10c>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a1a      	ldr	r2, [pc, #104]	; (80012cc <HAL_SD_MspInit+0x10c>)
 8001264:	f043 0308 	orr.w	r3, r3, #8
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <HAL_SD_MspInit+0x10c>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001276:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800127a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001280:	2301      	movs	r3, #1
 8001282:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800128a:	230c      	movs	r3, #12
 800128c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001290:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001294:	4619      	mov	r1, r3
 8001296:	480e      	ldr	r0, [pc, #56]	; (80012d0 <HAL_SD_MspInit+0x110>)
 8001298:	f000 fa64 	bl	8001764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800129c:	2304      	movs	r3, #4
 800129e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012ae:	230c      	movs	r3, #12
 80012b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012b8:	4619      	mov	r1, r3
 80012ba:	4806      	ldr	r0, [pc, #24]	; (80012d4 <HAL_SD_MspInit+0x114>)
 80012bc:	f000 fa52 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80012c0:	bf00      	nop
 80012c2:	3788      	adds	r7, #136	; 0x88
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40012800 	.word	0x40012800
 80012cc:	40021000 	.word	0x40021000
 80012d0:	48000800 	.word	0x48000800
 80012d4:	48000c00 	.word	0x48000c00

080012d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a25      	ldr	r2, [pc, #148]	; (800138c <HAL_SPI_MspInit+0xb4>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d144      	bne.n	8001384 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012fa:	4b25      	ldr	r3, [pc, #148]	; (8001390 <HAL_SPI_MspInit+0xb8>)
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	4a24      	ldr	r2, [pc, #144]	; (8001390 <HAL_SPI_MspInit+0xb8>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001304:	6593      	str	r3, [r2, #88]	; 0x58
 8001306:	4b22      	ldr	r3, [pc, #136]	; (8001390 <HAL_SPI_MspInit+0xb8>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <HAL_SPI_MspInit+0xb8>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	4a1e      	ldr	r2, [pc, #120]	; (8001390 <HAL_SPI_MspInit+0xb8>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131e:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <HAL_SPI_MspInit+0xb8>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	4b19      	ldr	r3, [pc, #100]	; (8001390 <HAL_SPI_MspInit+0xb8>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	4a18      	ldr	r2, [pc, #96]	; (8001390 <HAL_SPI_MspInit+0xb8>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <HAL_SPI_MspInit+0xb8>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001342:	230c      	movs	r3, #12
 8001344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001352:	2305      	movs	r3, #5
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <HAL_SPI_MspInit+0xbc>)
 800135e:	f000 fa01 	bl	8001764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001374:	2305      	movs	r3, #5
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	4806      	ldr	r0, [pc, #24]	; (8001398 <HAL_SPI_MspInit+0xc0>)
 8001380:	f000 f9f0 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001384:	bf00      	nop
 8001386:	3728      	adds	r7, #40	; 0x28
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40003800 	.word	0x40003800
 8001390:	40021000 	.word	0x40021000
 8001394:	48000800 	.word	0x48000800
 8001398:	48000400 	.word	0x48000400

0800139c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <NMI_Handler+0x4>

080013a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <HardFault_Handler+0x4>

080013a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <MemManage_Handler+0x4>

080013ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <BusFault_Handler+0x4>

080013b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <UsageFault_Handler+0x4>

080013ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e8:	f000 f892 	bl	8001510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <SystemInit+0x20>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <SystemInit+0x20>)
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800144c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001418:	f7ff ffea 	bl	80013f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <LoopForever+0x6>)
  ldr r1, =_edata
 800141e:	490d      	ldr	r1, [pc, #52]	; (8001454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001420:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <LoopForever+0xe>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001434:	4c0a      	ldr	r4, [pc, #40]	; (8001460 <LoopForever+0x16>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001442:	f005 fc3b 	bl	8006cbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001446:	f7ff fd4b 	bl	8000ee0 <main>

0800144a <LoopForever>:

LoopForever:
    b LoopForever
 800144a:	e7fe      	b.n	800144a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800144c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001454:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001458:	08006db8 	.word	0x08006db8
  ldr r2, =_sbss
 800145c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001460:	200002c4 	.word	0x200002c4

08001464 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001464:	e7fe      	b.n	8001464 <ADC1_IRQHandler>

08001466 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001470:	2003      	movs	r0, #3
 8001472:	f000 f943 	bl	80016fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001476:	200f      	movs	r0, #15
 8001478:	f000 f80e 	bl	8001498 <HAL_InitTick>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d002      	beq.n	8001488 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	71fb      	strb	r3, [r7, #7]
 8001486:	e001      	b.n	800148c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001488:	f7ff fe76 	bl	8001178 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800148c:	79fb      	ldrb	r3, [r7, #7]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014a4:	4b17      	ldr	r3, [pc, #92]	; (8001504 <HAL_InitTick+0x6c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d023      	beq.n	80014f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014ac:	4b16      	ldr	r3, [pc, #88]	; (8001508 <HAL_InitTick+0x70>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <HAL_InitTick+0x6c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80014be:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f941 	bl	800174a <HAL_SYSTICK_Config>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10f      	bne.n	80014ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b0f      	cmp	r3, #15
 80014d2:	d809      	bhi.n	80014e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d4:	2200      	movs	r2, #0
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295
 80014dc:	f000 f919 	bl	8001712 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014e0:	4a0a      	ldr	r2, [pc, #40]	; (800150c <HAL_InitTick+0x74>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e007      	b.n	80014f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	73fb      	strb	r3, [r7, #15]
 80014ec:	e004      	b.n	80014f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	73fb      	strb	r3, [r7, #15]
 80014f2:	e001      	b.n	80014f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000000c 	.word	0x2000000c
 8001508:	20000004 	.word	0x20000004
 800150c:	20000008 	.word	0x20000008

08001510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_IncTick+0x20>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_IncTick+0x24>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4413      	add	r3, r2
 8001520:	4a04      	ldr	r2, [pc, #16]	; (8001534 <HAL_IncTick+0x24>)
 8001522:	6013      	str	r3, [r2, #0]
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	2000000c 	.word	0x2000000c
 8001534:	20000174 	.word	0x20000174

08001538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return uwTick;
 800153c:	4b03      	ldr	r3, [pc, #12]	; (800154c <HAL_GetTick+0x14>)
 800153e:	681b      	ldr	r3, [r3, #0]
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000174 	.word	0x20000174

08001550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001558:	f7ff ffee 	bl	8001538 <HAL_GetTick>
 800155c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001568:	d005      	beq.n	8001576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_Delay+0x44>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4413      	add	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001576:	bf00      	nop
 8001578:	f7ff ffde 	bl	8001538 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	429a      	cmp	r2, r3
 8001586:	d8f7      	bhi.n	8001578 <HAL_Delay+0x28>
  {
  }
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	2000000c 	.word	0x2000000c

08001598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b4:	4013      	ands	r3, r2
 80015b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ca:	4a04      	ldr	r2, [pc, #16]	; (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	60d3      	str	r3, [r2, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <__NVIC_GetPriorityGrouping+0x18>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	0a1b      	lsrs	r3, r3, #8
 80015ea:	f003 0307 	and.w	r3, r3, #7
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	; (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	; (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
         );
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c8:	d301      	bcc.n	80016ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00f      	b.n	80016ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <SysTick_Config+0x40>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d6:	210f      	movs	r1, #15
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f7ff ff8e 	bl	80015fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <SysTick_Config+0x40>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <SysTick_Config+0x40>)
 80016e8:	2207      	movs	r2, #7
 80016ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	e000e010 	.word	0xe000e010

080016fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ff47 	bl	8001598 <__NVIC_SetPriorityGrouping>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001724:	f7ff ff5c 	bl	80015e0 <__NVIC_GetPriorityGrouping>
 8001728:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	6978      	ldr	r0, [r7, #20]
 8001730:	f7ff ff8e 	bl	8001650 <NVIC_EncodePriority>
 8001734:	4602      	mov	r2, r0
 8001736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff5d 	bl	80015fc <__NVIC_SetPriority>
}
 8001742:	bf00      	nop
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ffb0 	bl	80016b8 <SysTick_Config>
 8001758:	4603      	mov	r3, r0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001764:	b480      	push	{r7}
 8001766:	b087      	sub	sp, #28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001772:	e154      	b.n	8001a1e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	2101      	movs	r1, #1
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	fa01 f303 	lsl.w	r3, r1, r3
 8001780:	4013      	ands	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 8146 	beq.w	8001a18 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b01      	cmp	r3, #1
 8001796:	d005      	beq.n	80017a4 <HAL_GPIO_Init+0x40>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d130      	bne.n	8001806 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	2203      	movs	r2, #3
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017da:	2201      	movs	r2, #1
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	091b      	lsrs	r3, r3, #4
 80017f0:	f003 0201 	and.w	r2, r3, #1
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	2b03      	cmp	r3, #3
 8001810:	d017      	beq.n	8001842 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	2203      	movs	r2, #3
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d123      	bne.n	8001896 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	08da      	lsrs	r2, r3, #3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3208      	adds	r2, #8
 8001856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800185a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	220f      	movs	r2, #15
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	691a      	ldr	r2, [r3, #16]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	08da      	lsrs	r2, r3, #3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3208      	adds	r2, #8
 8001890:	6939      	ldr	r1, [r7, #16]
 8001892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	2203      	movs	r2, #3
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0203 	and.w	r2, r3, #3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 80a0 	beq.w	8001a18 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d8:	4b58      	ldr	r3, [pc, #352]	; (8001a3c <HAL_GPIO_Init+0x2d8>)
 80018da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018dc:	4a57      	ldr	r2, [pc, #348]	; (8001a3c <HAL_GPIO_Init+0x2d8>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6613      	str	r3, [r2, #96]	; 0x60
 80018e4:	4b55      	ldr	r3, [pc, #340]	; (8001a3c <HAL_GPIO_Init+0x2d8>)
 80018e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018f0:	4a53      	ldr	r2, [pc, #332]	; (8001a40 <HAL_GPIO_Init+0x2dc>)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	089b      	lsrs	r3, r3, #2
 80018f6:	3302      	adds	r3, #2
 80018f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	220f      	movs	r2, #15
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800191a:	d019      	beq.n	8001950 <HAL_GPIO_Init+0x1ec>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a49      	ldr	r2, [pc, #292]	; (8001a44 <HAL_GPIO_Init+0x2e0>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d013      	beq.n	800194c <HAL_GPIO_Init+0x1e8>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a48      	ldr	r2, [pc, #288]	; (8001a48 <HAL_GPIO_Init+0x2e4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d00d      	beq.n	8001948 <HAL_GPIO_Init+0x1e4>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a47      	ldr	r2, [pc, #284]	; (8001a4c <HAL_GPIO_Init+0x2e8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d007      	beq.n	8001944 <HAL_GPIO_Init+0x1e0>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a46      	ldr	r2, [pc, #280]	; (8001a50 <HAL_GPIO_Init+0x2ec>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d101      	bne.n	8001940 <HAL_GPIO_Init+0x1dc>
 800193c:	2304      	movs	r3, #4
 800193e:	e008      	b.n	8001952 <HAL_GPIO_Init+0x1ee>
 8001940:	2307      	movs	r3, #7
 8001942:	e006      	b.n	8001952 <HAL_GPIO_Init+0x1ee>
 8001944:	2303      	movs	r3, #3
 8001946:	e004      	b.n	8001952 <HAL_GPIO_Init+0x1ee>
 8001948:	2302      	movs	r3, #2
 800194a:	e002      	b.n	8001952 <HAL_GPIO_Init+0x1ee>
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_GPIO_Init+0x1ee>
 8001950:	2300      	movs	r3, #0
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	f002 0203 	and.w	r2, r2, #3
 8001958:	0092      	lsls	r2, r2, #2
 800195a:	4093      	lsls	r3, r2
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001962:	4937      	ldr	r1, [pc, #220]	; (8001a40 <HAL_GPIO_Init+0x2dc>)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	089b      	lsrs	r3, r3, #2
 8001968:	3302      	adds	r3, #2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001970:	4b38      	ldr	r3, [pc, #224]	; (8001a54 <HAL_GPIO_Init+0x2f0>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	43db      	mvns	r3, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001994:	4a2f      	ldr	r2, [pc, #188]	; (8001a54 <HAL_GPIO_Init+0x2f0>)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800199a:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <HAL_GPIO_Init+0x2f0>)
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019be:	4a25      	ldr	r2, [pc, #148]	; (8001a54 <HAL_GPIO_Init+0x2f0>)
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019c4:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <HAL_GPIO_Init+0x2f0>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019e8:	4a1a      	ldr	r2, [pc, #104]	; (8001a54 <HAL_GPIO_Init+0x2f0>)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019ee:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <HAL_GPIO_Init+0x2f0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a12:	4a10      	ldr	r2, [pc, #64]	; (8001a54 <HAL_GPIO_Init+0x2f0>)
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	fa22 f303 	lsr.w	r3, r2, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f47f aea3 	bne.w	8001774 <HAL_GPIO_Init+0x10>
  }
}
 8001a2e:	bf00      	nop
 8001a30:	bf00      	nop
 8001a32:	371c      	adds	r7, #28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40010000 	.word	0x40010000
 8001a44:	48000400 	.word	0x48000400
 8001a48:	48000800 	.word	0x48000800
 8001a4c:	48000c00 	.word	0x48000c00
 8001a50:	48001000 	.word	0x48001000
 8001a54:	40010400 	.word	0x40010400

08001a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a68:	787b      	ldrb	r3, [r7, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a74:	e002      	b.n	8001a7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a76:	887a      	ldrh	r2, [r7, #2]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40007000 	.word	0x40007000

08001aa4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ab2:	d130      	bne.n	8001b16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ab4:	4b23      	ldr	r3, [pc, #140]	; (8001b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ac0:	d038      	beq.n	8001b34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ac2:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aca:	4a1e      	ldr	r2, [pc, #120]	; (8001b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001acc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2232      	movs	r2, #50	; 0x32
 8001ad8:	fb02 f303 	mul.w	r3, r2, r3
 8001adc:	4a1b      	ldr	r2, [pc, #108]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ade:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae2:	0c9b      	lsrs	r3, r3, #18
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ae8:	e002      	b.n	8001af0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001af0:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001afc:	d102      	bne.n	8001b04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1f2      	bne.n	8001aea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b10:	d110      	bne.n	8001b34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e00f      	b.n	8001b36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b22:	d007      	beq.n	8001b34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b24:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b2c:	4a05      	ldr	r2, [pc, #20]	; (8001b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40007000 	.word	0x40007000
 8001b48:	20000004 	.word	0x20000004
 8001b4c:	431bde83 	.word	0x431bde83

08001b50 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d102      	bne.n	8001b64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f000 bc02 	b.w	8002368 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b64:	4b96      	ldr	r3, [pc, #600]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 030c 	and.w	r3, r3, #12
 8001b6c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b6e:	4b94      	ldr	r3, [pc, #592]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 80e4 	beq.w	8001d4e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d007      	beq.n	8001b9c <HAL_RCC_OscConfig+0x4c>
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2b0c      	cmp	r3, #12
 8001b90:	f040 808b 	bne.w	8001caa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	f040 8087 	bne.w	8001caa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b9c:	4b88      	ldr	r3, [pc, #544]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x64>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e3d9      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a1a      	ldr	r2, [r3, #32]
 8001bb8:	4b81      	ldr	r3, [pc, #516]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d004      	beq.n	8001bce <HAL_RCC_OscConfig+0x7e>
 8001bc4:	4b7e      	ldr	r3, [pc, #504]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bcc:	e005      	b.n	8001bda <HAL_RCC_OscConfig+0x8a>
 8001bce:	4b7c      	ldr	r3, [pc, #496]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd4:	091b      	lsrs	r3, r3, #4
 8001bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d223      	bcs.n	8001c26 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 fd8a 	bl	80026fc <RCC_SetFlashLatencyFromMSIRange>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e3ba      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bf2:	4b73      	ldr	r3, [pc, #460]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a72      	ldr	r2, [pc, #456]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001bf8:	f043 0308 	orr.w	r3, r3, #8
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b70      	ldr	r3, [pc, #448]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	496d      	ldr	r1, [pc, #436]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c10:	4b6b      	ldr	r3, [pc, #428]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	4968      	ldr	r1, [pc, #416]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
 8001c24:	e025      	b.n	8001c72 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c26:	4b66      	ldr	r3, [pc, #408]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a65      	ldr	r2, [pc, #404]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c2c:	f043 0308 	orr.w	r3, r3, #8
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	4b63      	ldr	r3, [pc, #396]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	4960      	ldr	r1, [pc, #384]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c44:	4b5e      	ldr	r3, [pc, #376]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	021b      	lsls	r3, r3, #8
 8001c52:	495b      	ldr	r1, [pc, #364]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 fd4a 	bl	80026fc <RCC_SetFlashLatencyFromMSIRange>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e37a      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c72:	f000 fc81 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8001c76:	4602      	mov	r2, r0
 8001c78:	4b51      	ldr	r3, [pc, #324]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	4950      	ldr	r1, [pc, #320]	; (8001dc4 <HAL_RCC_OscConfig+0x274>)
 8001c84:	5ccb      	ldrb	r3, [r1, r3]
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8e:	4a4e      	ldr	r2, [pc, #312]	; (8001dc8 <HAL_RCC_OscConfig+0x278>)
 8001c90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c92:	4b4e      	ldr	r3, [pc, #312]	; (8001dcc <HAL_RCC_OscConfig+0x27c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fbfe 	bl	8001498 <HAL_InitTick>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d052      	beq.n	8001d4c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	e35e      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d032      	beq.n	8001d18 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cb2:	4b43      	ldr	r3, [pc, #268]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a42      	ldr	r2, [pc, #264]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cbe:	f7ff fc3b 	bl	8001538 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cc6:	f7ff fc37 	bl	8001538 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e347      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cd8:	4b39      	ldr	r3, [pc, #228]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ce4:	4b36      	ldr	r3, [pc, #216]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a35      	ldr	r2, [pc, #212]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001cea:	f043 0308 	orr.w	r3, r3, #8
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b33      	ldr	r3, [pc, #204]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4930      	ldr	r1, [pc, #192]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d02:	4b2f      	ldr	r3, [pc, #188]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	492b      	ldr	r1, [pc, #172]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	604b      	str	r3, [r1, #4]
 8001d16:	e01a      	b.n	8001d4e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d18:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a28      	ldr	r2, [pc, #160]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001d1e:	f023 0301 	bic.w	r3, r3, #1
 8001d22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d24:	f7ff fc08 	bl	8001538 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d2c:	f7ff fc04 	bl	8001538 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e314      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d3e:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x1dc>
 8001d4a:	e000      	b.n	8001d4e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d073      	beq.n	8001e42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d005      	beq.n	8001d6c <HAL_RCC_OscConfig+0x21c>
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	2b0c      	cmp	r3, #12
 8001d64:	d10e      	bne.n	8001d84 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d10b      	bne.n	8001d84 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d063      	beq.n	8001e40 <HAL_RCC_OscConfig+0x2f0>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d15f      	bne.n	8001e40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e2f1      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8c:	d106      	bne.n	8001d9c <HAL_RCC_OscConfig+0x24c>
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a0b      	ldr	r2, [pc, #44]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e025      	b.n	8001de8 <HAL_RCC_OscConfig+0x298>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da4:	d114      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x280>
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a02      	ldr	r2, [pc, #8]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e013      	b.n	8001de8 <HAL_RCC_OscConfig+0x298>
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	08006d20 	.word	0x08006d20
 8001dc8:	20000004 	.word	0x20000004
 8001dcc:	20000008 	.word	0x20000008
 8001dd0:	4ba0      	ldr	r3, [pc, #640]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a9f      	ldr	r2, [pc, #636]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	4b9d      	ldr	r3, [pc, #628]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a9c      	ldr	r2, [pc, #624]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7ff fba2 	bl	8001538 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df8:	f7ff fb9e 	bl	8001538 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	; 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e2ae      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e0a:	4b92      	ldr	r3, [pc, #584]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x2a8>
 8001e16:	e014      	b.n	8001e42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7ff fb8e 	bl	8001538 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e20:	f7ff fb8a 	bl	8001538 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	; 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e29a      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e32:	4b88      	ldr	r3, [pc, #544]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x2d0>
 8001e3e:	e000      	b.n	8001e42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d060      	beq.n	8001f10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d005      	beq.n	8001e60 <HAL_RCC_OscConfig+0x310>
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2b0c      	cmp	r3, #12
 8001e58:	d119      	bne.n	8001e8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d116      	bne.n	8001e8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e60:	4b7c      	ldr	r3, [pc, #496]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <HAL_RCC_OscConfig+0x328>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e277      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e78:	4b76      	ldr	r3, [pc, #472]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	061b      	lsls	r3, r3, #24
 8001e86:	4973      	ldr	r1, [pc, #460]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e8c:	e040      	b.n	8001f10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d023      	beq.n	8001ede <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e96:	4b6f      	ldr	r3, [pc, #444]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a6e      	ldr	r2, [pc, #440]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea2:	f7ff fb49 	bl	8001538 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eaa:	f7ff fb45 	bl	8001538 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e255      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ebc:	4b65      	ldr	r3, [pc, #404]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec8:	4b62      	ldr	r3, [pc, #392]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	061b      	lsls	r3, r3, #24
 8001ed6:	495f      	ldr	r1, [pc, #380]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
 8001edc:	e018      	b.n	8001f10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ede:	4b5d      	ldr	r3, [pc, #372]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a5c      	ldr	r2, [pc, #368]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7ff fb25 	bl	8001538 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef2:	f7ff fb21 	bl	8001538 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e231      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f04:	4b53      	ldr	r3, [pc, #332]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f0      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d03c      	beq.n	8001f96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01c      	beq.n	8001f5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f24:	4b4b      	ldr	r3, [pc, #300]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2a:	4a4a      	ldr	r2, [pc, #296]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f34:	f7ff fb00 	bl	8001538 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f3c:	f7ff fafc 	bl	8001538 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e20c      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f4e:	4b41      	ldr	r3, [pc, #260]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0ef      	beq.n	8001f3c <HAL_RCC_OscConfig+0x3ec>
 8001f5c:	e01b      	b.n	8001f96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f5e:	4b3d      	ldr	r3, [pc, #244]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f64:	4a3b      	ldr	r2, [pc, #236]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001f66:	f023 0301 	bic.w	r3, r3, #1
 8001f6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6e:	f7ff fae3 	bl	8001538 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f76:	f7ff fadf 	bl	8001538 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e1ef      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f88:	4b32      	ldr	r3, [pc, #200]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1ef      	bne.n	8001f76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 80a6 	beq.w	80020f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fa8:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10d      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb4:	4b27      	ldr	r3, [pc, #156]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb8:	4a26      	ldr	r2, [pc, #152]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	6593      	str	r3, [r2, #88]	; 0x58
 8001fc0:	4b24      	ldr	r3, [pc, #144]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd0:	4b21      	ldr	r3, [pc, #132]	; (8002058 <HAL_RCC_OscConfig+0x508>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d118      	bne.n	800200e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fdc:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <HAL_RCC_OscConfig+0x508>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1d      	ldr	r2, [pc, #116]	; (8002058 <HAL_RCC_OscConfig+0x508>)
 8001fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe8:	f7ff faa6 	bl	8001538 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff0:	f7ff faa2 	bl	8001538 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e1b2      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <HAL_RCC_OscConfig+0x508>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d108      	bne.n	8002028 <HAL_RCC_OscConfig+0x4d8>
 8002016:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8002018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201c:	4a0d      	ldr	r2, [pc, #52]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002026:	e029      	b.n	800207c <HAL_RCC_OscConfig+0x52c>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2b05      	cmp	r3, #5
 800202e:	d115      	bne.n	800205c <HAL_RCC_OscConfig+0x50c>
 8002030:	4b08      	ldr	r3, [pc, #32]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002036:	4a07      	ldr	r2, [pc, #28]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8002038:	f043 0304 	orr.w	r3, r3, #4
 800203c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002046:	4a03      	ldr	r2, [pc, #12]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002050:	e014      	b.n	800207c <HAL_RCC_OscConfig+0x52c>
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	40007000 	.word	0x40007000
 800205c:	4b9a      	ldr	r3, [pc, #616]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002062:	4a99      	ldr	r2, [pc, #612]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002064:	f023 0301 	bic.w	r3, r3, #1
 8002068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800206c:	4b96      	ldr	r3, [pc, #600]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 800206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002072:	4a95      	ldr	r2, [pc, #596]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d016      	beq.n	80020b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002084:	f7ff fa58 	bl	8001538 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800208a:	e00a      	b.n	80020a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208c:	f7ff fa54 	bl	8001538 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f241 3288 	movw	r2, #5000	; 0x1388
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e162      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a2:	4b89      	ldr	r3, [pc, #548]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 80020a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0ed      	beq.n	800208c <HAL_RCC_OscConfig+0x53c>
 80020b0:	e015      	b.n	80020de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b2:	f7ff fa41 	bl	8001538 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020b8:	e00a      	b.n	80020d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7ff fa3d 	bl	8001538 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e14b      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020d0:	4b7d      	ldr	r3, [pc, #500]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 80020d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1ed      	bne.n	80020ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020de:	7ffb      	ldrb	r3, [r7, #31]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d105      	bne.n	80020f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e4:	4b78      	ldr	r3, [pc, #480]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e8:	4a77      	ldr	r2, [pc, #476]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 80020ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0320 	and.w	r3, r3, #32
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d03c      	beq.n	8002176 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	2b00      	cmp	r3, #0
 8002102:	d01c      	beq.n	800213e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002104:	4b70      	ldr	r3, [pc, #448]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002106:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800210a:	4a6f      	ldr	r2, [pc, #444]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002114:	f7ff fa10 	bl	8001538 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800211c:	f7ff fa0c 	bl	8001538 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e11c      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800212e:	4b66      	ldr	r3, [pc, #408]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002130:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0ef      	beq.n	800211c <HAL_RCC_OscConfig+0x5cc>
 800213c:	e01b      	b.n	8002176 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800213e:	4b62      	ldr	r3, [pc, #392]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002140:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002144:	4a60      	ldr	r2, [pc, #384]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002146:	f023 0301 	bic.w	r3, r3, #1
 800214a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214e:	f7ff f9f3 	bl	8001538 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002156:	f7ff f9ef 	bl	8001538 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e0ff      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002168:	4b57      	ldr	r3, [pc, #348]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 800216a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1ef      	bne.n	8002156 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80f3 	beq.w	8002366 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	2b02      	cmp	r3, #2
 8002186:	f040 80c9 	bne.w	800231c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800218a:	4b4f      	ldr	r3, [pc, #316]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f003 0203 	and.w	r2, r3, #3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	429a      	cmp	r2, r3
 800219c:	d12c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	3b01      	subs	r3, #1
 80021aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d123      	bne.n	80021f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d11b      	bne.n	80021f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d113      	bne.n	80021f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021da:	085b      	lsrs	r3, r3, #1
 80021dc:	3b01      	subs	r3, #1
 80021de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d109      	bne.n	80021f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	085b      	lsrs	r3, r3, #1
 80021f0:	3b01      	subs	r3, #1
 80021f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d06b      	beq.n	80022d0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	2b0c      	cmp	r3, #12
 80021fc:	d062      	beq.n	80022c4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021fe:	4b32      	ldr	r3, [pc, #200]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e0ac      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800220e:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a2d      	ldr	r2, [pc, #180]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002214:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002218:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800221a:	f7ff f98d 	bl	8001538 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002222:	f7ff f989 	bl	8001538 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e099      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002234:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f0      	bne.n	8002222 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002240:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	4b21      	ldr	r3, [pc, #132]	; (80022cc <HAL_RCC_OscConfig+0x77c>)
 8002246:	4013      	ands	r3, r2
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002250:	3a01      	subs	r2, #1
 8002252:	0112      	lsls	r2, r2, #4
 8002254:	4311      	orrs	r1, r2
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800225a:	0212      	lsls	r2, r2, #8
 800225c:	4311      	orrs	r1, r2
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002262:	0852      	lsrs	r2, r2, #1
 8002264:	3a01      	subs	r2, #1
 8002266:	0552      	lsls	r2, r2, #21
 8002268:	4311      	orrs	r1, r2
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800226e:	0852      	lsrs	r2, r2, #1
 8002270:	3a01      	subs	r2, #1
 8002272:	0652      	lsls	r2, r2, #25
 8002274:	4311      	orrs	r1, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800227a:	06d2      	lsls	r2, r2, #27
 800227c:	430a      	orrs	r2, r1
 800227e:	4912      	ldr	r1, [pc, #72]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002280:	4313      	orrs	r3, r2
 8002282:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002284:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0f      	ldr	r2, [pc, #60]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 800228a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800228e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002290:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4a0c      	ldr	r2, [pc, #48]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800229a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800229c:	f7ff f94c 	bl	8001538 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a4:	f7ff f948 	bl	8001538 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e058      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b6:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <HAL_RCC_OscConfig+0x778>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022c2:	e050      	b.n	8002366 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e04f      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
 80022c8:	40021000 	.word	0x40021000
 80022cc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d0:	4b27      	ldr	r3, [pc, #156]	; (8002370 <HAL_RCC_OscConfig+0x820>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d144      	bne.n	8002366 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022dc:	4b24      	ldr	r3, [pc, #144]	; (8002370 <HAL_RCC_OscConfig+0x820>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a23      	ldr	r2, [pc, #140]	; (8002370 <HAL_RCC_OscConfig+0x820>)
 80022e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022e8:	4b21      	ldr	r3, [pc, #132]	; (8002370 <HAL_RCC_OscConfig+0x820>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4a20      	ldr	r2, [pc, #128]	; (8002370 <HAL_RCC_OscConfig+0x820>)
 80022ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022f4:	f7ff f920 	bl	8001538 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fc:	f7ff f91c 	bl	8001538 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e02c      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800230e:	4b18      	ldr	r3, [pc, #96]	; (8002370 <HAL_RCC_OscConfig+0x820>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0x7ac>
 800231a:	e024      	b.n	8002366 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2b0c      	cmp	r3, #12
 8002320:	d01f      	beq.n	8002362 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002322:	4b13      	ldr	r3, [pc, #76]	; (8002370 <HAL_RCC_OscConfig+0x820>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a12      	ldr	r2, [pc, #72]	; (8002370 <HAL_RCC_OscConfig+0x820>)
 8002328:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800232c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232e:	f7ff f903 	bl	8001538 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002336:	f7ff f8ff 	bl	8001538 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e00f      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <HAL_RCC_OscConfig+0x820>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f0      	bne.n	8002336 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_RCC_OscConfig+0x820>)
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	4905      	ldr	r1, [pc, #20]	; (8002370 <HAL_RCC_OscConfig+0x820>)
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_RCC_OscConfig+0x824>)
 800235c:	4013      	ands	r3, r2
 800235e:	60cb      	str	r3, [r1, #12]
 8002360:	e001      	b.n	8002366 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3720      	adds	r7, #32
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021000 	.word	0x40021000
 8002374:	feeefffc 	.word	0xfeeefffc

08002378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e0e7      	b.n	800255c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800238c:	4b75      	ldr	r3, [pc, #468]	; (8002564 <HAL_RCC_ClockConfig+0x1ec>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d910      	bls.n	80023bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239a:	4b72      	ldr	r3, [pc, #456]	; (8002564 <HAL_RCC_ClockConfig+0x1ec>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 0207 	bic.w	r2, r3, #7
 80023a2:	4970      	ldr	r1, [pc, #448]	; (8002564 <HAL_RCC_ClockConfig+0x1ec>)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b6e      	ldr	r3, [pc, #440]	; (8002564 <HAL_RCC_ClockConfig+0x1ec>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0cf      	b.n	800255c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d010      	beq.n	80023ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	4b66      	ldr	r3, [pc, #408]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d908      	bls.n	80023ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d8:	4b63      	ldr	r3, [pc, #396]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4960      	ldr	r1, [pc, #384]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d04c      	beq.n	8002490 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fe:	4b5a      	ldr	r3, [pc, #360]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d121      	bne.n	800244e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e0a6      	b.n	800255c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002416:	4b54      	ldr	r3, [pc, #336]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d115      	bne.n	800244e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e09a      	b.n	800255c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800242e:	4b4e      	ldr	r3, [pc, #312]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e08e      	b.n	800255c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800243e:	4b4a      	ldr	r3, [pc, #296]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e086      	b.n	800255c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800244e:	4b46      	ldr	r3, [pc, #280]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f023 0203 	bic.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4943      	ldr	r1, [pc, #268]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 800245c:	4313      	orrs	r3, r2
 800245e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002460:	f7ff f86a 	bl	8001538 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	e00a      	b.n	800247e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f7ff f866 	bl	8001538 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e06e      	b.n	800255c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	4b3a      	ldr	r3, [pc, #232]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 020c 	and.w	r2, r3, #12
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	429a      	cmp	r2, r3
 800248e:	d1eb      	bne.n	8002468 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d010      	beq.n	80024be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	4b31      	ldr	r3, [pc, #196]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d208      	bcs.n	80024be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ac:	4b2e      	ldr	r3, [pc, #184]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	492b      	ldr	r1, [pc, #172]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024be:	4b29      	ldr	r3, [pc, #164]	; (8002564 <HAL_RCC_ClockConfig+0x1ec>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d210      	bcs.n	80024ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024cc:	4b25      	ldr	r3, [pc, #148]	; (8002564 <HAL_RCC_ClockConfig+0x1ec>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f023 0207 	bic.w	r2, r3, #7
 80024d4:	4923      	ldr	r1, [pc, #140]	; (8002564 <HAL_RCC_ClockConfig+0x1ec>)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	4313      	orrs	r3, r2
 80024da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024dc:	4b21      	ldr	r3, [pc, #132]	; (8002564 <HAL_RCC_ClockConfig+0x1ec>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d001      	beq.n	80024ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e036      	b.n	800255c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d008      	beq.n	800250c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024fa:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	4918      	ldr	r1, [pc, #96]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 8002508:	4313      	orrs	r3, r2
 800250a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d009      	beq.n	800252c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002518:	4b13      	ldr	r3, [pc, #76]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4910      	ldr	r1, [pc, #64]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 8002528:	4313      	orrs	r3, r2
 800252a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800252c:	f000 f824 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8002530:	4602      	mov	r2, r0
 8002532:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	091b      	lsrs	r3, r3, #4
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	490b      	ldr	r1, [pc, #44]	; (800256c <HAL_RCC_ClockConfig+0x1f4>)
 800253e:	5ccb      	ldrb	r3, [r1, r3]
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	fa22 f303 	lsr.w	r3, r2, r3
 8002548:	4a09      	ldr	r2, [pc, #36]	; (8002570 <HAL_RCC_ClockConfig+0x1f8>)
 800254a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800254c:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_RCC_ClockConfig+0x1fc>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe ffa1 	bl	8001498 <HAL_InitTick>
 8002556:	4603      	mov	r3, r0
 8002558:	72fb      	strb	r3, [r7, #11]

  return status;
 800255a:	7afb      	ldrb	r3, [r7, #11]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40022000 	.word	0x40022000
 8002568:	40021000 	.word	0x40021000
 800256c:	08006d20 	.word	0x08006d20
 8002570:	20000004 	.word	0x20000004
 8002574:	20000008 	.word	0x20000008

08002578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002578:	b480      	push	{r7}
 800257a:	b089      	sub	sp, #36	; 0x24
 800257c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002586:	4b3e      	ldr	r3, [pc, #248]	; (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002590:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x34>
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	2b0c      	cmp	r3, #12
 80025a4:	d121      	bne.n	80025ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d11e      	bne.n	80025ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025ac:	4b34      	ldr	r3, [pc, #208]	; (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d107      	bne.n	80025c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025b8:	4b31      	ldr	r3, [pc, #196]	; (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	e005      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025c8:	4b2d      	ldr	r3, [pc, #180]	; (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025d4:	4a2b      	ldr	r2, [pc, #172]	; (8002684 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10d      	bne.n	8002600 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025e8:	e00a      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d102      	bne.n	80025f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <HAL_RCC_GetSysClockFreq+0x110>)
 80025f2:	61bb      	str	r3, [r7, #24]
 80025f4:	e004      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025fc:	4b22      	ldr	r3, [pc, #136]	; (8002688 <HAL_RCC_GetSysClockFreq+0x110>)
 80025fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	2b0c      	cmp	r3, #12
 8002604:	d134      	bne.n	8002670 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002606:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d003      	beq.n	800261e <HAL_RCC_GetSysClockFreq+0xa6>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b03      	cmp	r3, #3
 800261a:	d003      	beq.n	8002624 <HAL_RCC_GetSysClockFreq+0xac>
 800261c:	e005      	b.n	800262a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800261e:	4b1a      	ldr	r3, [pc, #104]	; (8002688 <HAL_RCC_GetSysClockFreq+0x110>)
 8002620:	617b      	str	r3, [r7, #20]
      break;
 8002622:	e005      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002624:	4b18      	ldr	r3, [pc, #96]	; (8002688 <HAL_RCC_GetSysClockFreq+0x110>)
 8002626:	617b      	str	r3, [r7, #20]
      break;
 8002628:	e002      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	617b      	str	r3, [r7, #20]
      break;
 800262e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002630:	4b13      	ldr	r3, [pc, #76]	; (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	3301      	adds	r3, #1
 800263c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800263e:	4b10      	ldr	r3, [pc, #64]	; (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	0a1b      	lsrs	r3, r3, #8
 8002644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	fb03 f202 	mul.w	r2, r3, r2
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	fbb2 f3f3 	udiv	r3, r2, r3
 8002654:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	0e5b      	lsrs	r3, r3, #25
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	3301      	adds	r3, #1
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	fbb2 f3f3 	udiv	r3, r2, r3
 800266e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002670:	69bb      	ldr	r3, [r7, #24]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3724      	adds	r7, #36	; 0x24
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	08006d38 	.word	0x08006d38
 8002688:	00f42400 	.word	0x00f42400

0800268c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002692:	681b      	ldr	r3, [r3, #0]
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000004 	.word	0x20000004

080026a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026a8:	f7ff fff0 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4904      	ldr	r1, [pc, #16]	; (80026cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80026ba:	5ccb      	ldrb	r3, [r1, r3]
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000
 80026cc:	08006d30 	.word	0x08006d30

080026d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026d4:	f7ff ffda 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	0adb      	lsrs	r3, r3, #11
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4904      	ldr	r1, [pc, #16]	; (80026f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40021000 	.word	0x40021000
 80026f8:	08006d30 	.word	0x08006d30

080026fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002704:	2300      	movs	r3, #0
 8002706:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002708:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800270a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002714:	f7ff f9b8 	bl	8001a88 <HAL_PWREx_GetVoltageRange>
 8002718:	6178      	str	r0, [r7, #20]
 800271a:	e014      	b.n	8002746 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800271c:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800271e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002720:	4a24      	ldr	r2, [pc, #144]	; (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002726:	6593      	str	r3, [r2, #88]	; 0x58
 8002728:	4b22      	ldr	r3, [pc, #136]	; (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002734:	f7ff f9a8 	bl	8001a88 <HAL_PWREx_GetVoltageRange>
 8002738:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800273a:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800273c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273e:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002744:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800274c:	d10b      	bne.n	8002766 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b80      	cmp	r3, #128	; 0x80
 8002752:	d919      	bls.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2ba0      	cmp	r3, #160	; 0xa0
 8002758:	d902      	bls.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800275a:	2302      	movs	r3, #2
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	e013      	b.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002760:	2301      	movs	r3, #1
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	e010      	b.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b80      	cmp	r3, #128	; 0x80
 800276a:	d902      	bls.n	8002772 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800276c:	2303      	movs	r3, #3
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	e00a      	b.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b80      	cmp	r3, #128	; 0x80
 8002776:	d102      	bne.n	800277e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002778:	2302      	movs	r3, #2
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	e004      	b.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b70      	cmp	r3, #112	; 0x70
 8002782:	d101      	bne.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002784:	2301      	movs	r3, #1
 8002786:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f023 0207 	bic.w	r2, r3, #7
 8002790:	4909      	ldr	r1, [pc, #36]	; (80027b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002798:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d001      	beq.n	80027aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40022000 	.word	0x40022000

080027bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027c4:	2300      	movs	r3, #0
 80027c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027c8:	2300      	movs	r3, #0
 80027ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d031      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027e0:	d01a      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80027e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027e6:	d814      	bhi.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d009      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027f0:	d10f      	bne.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80027f2:	4b5d      	ldr	r3, [pc, #372]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	4a5c      	ldr	r2, [pc, #368]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027fe:	e00c      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3304      	adds	r3, #4
 8002804:	2100      	movs	r1, #0
 8002806:	4618      	mov	r0, r3
 8002808:	f000 fe84 	bl	8003514 <RCCEx_PLLSAI1_Config>
 800280c:	4603      	mov	r3, r0
 800280e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002810:	e003      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	74fb      	strb	r3, [r7, #19]
      break;
 8002816:	e000      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002818:	bf00      	nop
    }

    if(ret == HAL_OK)
 800281a:	7cfb      	ldrb	r3, [r7, #19]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10b      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002820:	4b51      	ldr	r3, [pc, #324]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	494e      	ldr	r1, [pc, #312]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002836:	e001      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002838:	7cfb      	ldrb	r3, [r7, #19]
 800283a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 809e 	beq.w	8002986 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284a:	2300      	movs	r3, #0
 800284c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800284e:	4b46      	ldr	r3, [pc, #280]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800285e:	2300      	movs	r3, #0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00d      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002864:	4b40      	ldr	r3, [pc, #256]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002868:	4a3f      	ldr	r2, [pc, #252]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800286a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286e:	6593      	str	r3, [r2, #88]	; 0x58
 8002870:	4b3d      	ldr	r3, [pc, #244]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287c:	2301      	movs	r3, #1
 800287e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002880:	4b3a      	ldr	r3, [pc, #232]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a39      	ldr	r2, [pc, #228]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800288c:	f7fe fe54 	bl	8001538 <HAL_GetTick>
 8002890:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002892:	e009      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002894:	f7fe fe50 	bl	8001538 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d902      	bls.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	74fb      	strb	r3, [r7, #19]
        break;
 80028a6:	e005      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028a8:	4b30      	ldr	r3, [pc, #192]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0ef      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80028b4:	7cfb      	ldrb	r3, [r7, #19]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d15a      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028ba:	4b2b      	ldr	r3, [pc, #172]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d01e      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d019      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028d6:	4b24      	ldr	r3, [pc, #144]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028e2:	4b21      	ldr	r3, [pc, #132]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e8:	4a1f      	ldr	r2, [pc, #124]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028f2:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f8:	4a1b      	ldr	r2, [pc, #108]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002902:	4a19      	ldr	r2, [pc, #100]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d016      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fe fe10 	bl	8001538 <HAL_GetTick>
 8002918:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800291a:	e00b      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291c:	f7fe fe0c 	bl	8001538 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	; 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d902      	bls.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	74fb      	strb	r3, [r7, #19]
            break;
 8002932:	e006      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0ec      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002942:	7cfb      	ldrb	r3, [r7, #19]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10b      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002948:	4b07      	ldr	r3, [pc, #28]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002956:	4904      	ldr	r1, [pc, #16]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800295e:	e009      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002960:	7cfb      	ldrb	r3, [r7, #19]
 8002962:	74bb      	strb	r3, [r7, #18]
 8002964:	e006      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000
 800296c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002970:	7cfb      	ldrb	r3, [r7, #19]
 8002972:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002974:	7c7b      	ldrb	r3, [r7, #17]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d105      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297a:	4b9b      	ldr	r3, [pc, #620]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297e:	4a9a      	ldr	r2, [pc, #616]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002984:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002992:	4b95      	ldr	r3, [pc, #596]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002998:	f023 0203 	bic.w	r2, r3, #3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	4991      	ldr	r1, [pc, #580]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00a      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029b4:	4b8c      	ldr	r3, [pc, #560]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ba:	f023 020c 	bic.w	r2, r3, #12
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	4989      	ldr	r1, [pc, #548]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0304 	and.w	r3, r3, #4
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00a      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029d6:	4b84      	ldr	r3, [pc, #528]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80029d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	4980      	ldr	r1, [pc, #512]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00a      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029f8:	4b7b      	ldr	r3, [pc, #492]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a06:	4978      	ldr	r1, [pc, #480]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a1a:	4b73      	ldr	r3, [pc, #460]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a28:	496f      	ldr	r1, [pc, #444]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00a      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a3c:	4b6a      	ldr	r3, [pc, #424]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	4967      	ldr	r1, [pc, #412]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a5e:	4b62      	ldr	r3, [pc, #392]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	495e      	ldr	r1, [pc, #376]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00a      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a80:	4b59      	ldr	r3, [pc, #356]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8e:	4956      	ldr	r1, [pc, #344]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002aa2:	4b51      	ldr	r3, [pc, #324]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab0:	494d      	ldr	r1, [pc, #308]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d028      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ac4:	4b48      	ldr	r3, [pc, #288]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad2:	4945      	ldr	r1, [pc, #276]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ae2:	d106      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae4:	4b40      	ldr	r3, [pc, #256]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4a3f      	ldr	r2, [pc, #252]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aee:	60d3      	str	r3, [r2, #12]
 8002af0:	e011      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002afa:	d10c      	bne.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3304      	adds	r3, #4
 8002b00:	2101      	movs	r1, #1
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fd06 	bl	8003514 <RCCEx_PLLSAI1_Config>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b0c:	7cfb      	ldrb	r3, [r7, #19]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8002b12:	7cfb      	ldrb	r3, [r7, #19]
 8002b14:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d028      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b22:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b30:	492d      	ldr	r1, [pc, #180]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b40:	d106      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b42:	4b29      	ldr	r3, [pc, #164]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	4a28      	ldr	r2, [pc, #160]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b4c:	60d3      	str	r3, [r2, #12]
 8002b4e:	e011      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	2101      	movs	r1, #1
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 fcd7 	bl	8003514 <RCCEx_PLLSAI1_Config>
 8002b66:	4603      	mov	r3, r0
 8002b68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b6a:	7cfb      	ldrb	r3, [r7, #19]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002b70:	7cfb      	ldrb	r3, [r7, #19]
 8002b72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01c      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b80:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8e:	4916      	ldr	r1, [pc, #88]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b9e:	d10c      	bne.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	2102      	movs	r1, #2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fcb4 	bl	8003514 <RCCEx_PLLSAI1_Config>
 8002bac:	4603      	mov	r3, r0
 8002bae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bb0:	7cfb      	ldrb	r3, [r7, #19]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8002bb6:	7cfb      	ldrb	r3, [r7, #19]
 8002bb8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002bc6:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bcc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd4:	4904      	ldr	r1, [pc, #16]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bdc:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000

08002bec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bfe:	d13e      	bne.n	8002c7e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002c00:	4bb0      	ldr	r3, [pc, #704]	; (8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8002c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c12:	d028      	beq.n	8002c66 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c1a:	f200 8469 	bhi.w	80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c24:	d005      	beq.n	8002c32 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c2c:	d00e      	beq.n	8002c4c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8002c2e:	f000 bc5f 	b.w	80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002c32:	4ba4      	ldr	r3, [pc, #656]	; (8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8002c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	f040 8459 	bne.w	80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>
        frequency = LSE_VALUE;
 8002c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c46:	61fb      	str	r3, [r7, #28]
      break;
 8002c48:	f000 bc54 	b.w	80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002c4c:	4b9d      	ldr	r3, [pc, #628]	; (8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8002c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	f040 844e 	bne.w	80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
          frequency = LSI_VALUE;
 8002c5c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002c60:	61fb      	str	r3, [r7, #28]
      break;
 8002c62:	f000 bc49 	b.w	80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002c66:	4b97      	ldr	r3, [pc, #604]	; (8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c72:	f040 8443 	bne.w	80034fc <HAL_RCCEx_GetPeriphCLKFreq+0x910>
        frequency = HSE_VALUE / 32U;
 8002c76:	4b94      	ldr	r3, [pc, #592]	; (8002ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8002c78:	61fb      	str	r3, [r7, #28]
      break;
 8002c7a:	f000 bc3f 	b.w	80034fc <HAL_RCCEx_GetPeriphCLKFreq+0x910>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c7e:	4b91      	ldr	r3, [pc, #580]	; (8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d036      	beq.n	8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d840      	bhi.n	8002d16 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d003      	beq.n	8002ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d020      	beq.n	8002ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8002ca0:	e039      	b.n	8002d16 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002ca2:	4b88      	ldr	r3, [pc, #544]	; (8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d116      	bne.n	8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002cae:	4b85      	ldr	r3, [pc, #532]	; (8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d005      	beq.n	8002cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8002cba:	4b82      	ldr	r3, [pc, #520]	; (8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	e005      	b.n	8002cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8002cc6:	4b7f      	ldr	r3, [pc, #508]	; (8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8002cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ccc:	0a1b      	lsrs	r3, r3, #8
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	4a7e      	ldr	r2, [pc, #504]	; (8002ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002cda:	e01f      	b.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61bb      	str	r3, [r7, #24]
      break;
 8002ce0:	e01c      	b.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002ce2:	4b78      	ldr	r3, [pc, #480]	; (8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cee:	d102      	bne.n	8002cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8002cf0:	4b77      	ldr	r3, [pc, #476]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8002cf2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002cf4:	e012      	b.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
      break;
 8002cfa:	e00f      	b.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002cfc:	4b71      	ldr	r3, [pc, #452]	; (8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d08:	d102      	bne.n	8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8002d0a:	4b71      	ldr	r3, [pc, #452]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8002d0c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002d0e:	e005      	b.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61bb      	str	r3, [r7, #24]
      break;
 8002d14:	e002      	b.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61bb      	str	r3, [r7, #24]
      break;
 8002d1a:	bf00      	nop
    }

    switch(PeriphClk)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d22:	f000 80ad 	beq.w	8002e80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d2c:	f200 83e8 	bhi.w	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d36:	f000 80a3 	beq.w	8002e80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d40:	f200 83de 	bhi.w	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d4a:	f000 83b4 	beq.w	80034b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d54:	f200 83d4 	bhi.w	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d5e:	f000 824c 	beq.w	80031fa <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d68:	f200 83ca 	bhi.w	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d72:	d07e      	beq.n	8002e72 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d7a:	f200 83c1 	bhi.w	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d84:	f000 834d 	beq.w	8003422 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8e:	f200 83b7 	bhi.w	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d98:	f000 82f5 	beq.w	8003386 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da2:	f200 83ad 	bhi.w	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dac:	f000 82bf 	beq.w	800332e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002db6:	f200 83a3 	bhi.w	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b80      	cmp	r3, #128	; 0x80
 8002dbe:	f000 828a 	beq.w	80032d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b80      	cmp	r3, #128	; 0x80
 8002dc6:	f200 839b 	bhi.w	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d84b      	bhi.n	8002e68 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 8394 	beq.w	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	2b1f      	cmp	r3, #31
 8002dde:	f200 838f 	bhi.w	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8002de2:	a201      	add	r2, pc, #4	; (adr r2, 8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8002de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de8:	08002feb 	.word	0x08002feb
 8002dec:	0800305b 	.word	0x0800305b
 8002df0:	08003501 	.word	0x08003501
 8002df4:	080030ef 	.word	0x080030ef
 8002df8:	08003501 	.word	0x08003501
 8002dfc:	08003501 	.word	0x08003501
 8002e00:	08003501 	.word	0x08003501
 8002e04:	08003501 	.word	0x08003501
 8002e08:	08003501 	.word	0x08003501
 8002e0c:	08003501 	.word	0x08003501
 8002e10:	08003501 	.word	0x08003501
 8002e14:	08003501 	.word	0x08003501
 8002e18:	08003501 	.word	0x08003501
 8002e1c:	08003501 	.word	0x08003501
 8002e20:	08003501 	.word	0x08003501
 8002e24:	08003501 	.word	0x08003501
 8002e28:	08003501 	.word	0x08003501
 8002e2c:	08003501 	.word	0x08003501
 8002e30:	08003501 	.word	0x08003501
 8002e34:	08003501 	.word	0x08003501
 8002e38:	08003501 	.word	0x08003501
 8002e3c:	08003501 	.word	0x08003501
 8002e40:	08003501 	.word	0x08003501
 8002e44:	08003501 	.word	0x08003501
 8002e48:	08003501 	.word	0x08003501
 8002e4c:	08003501 	.word	0x08003501
 8002e50:	08003501 	.word	0x08003501
 8002e54:	08003501 	.word	0x08003501
 8002e58:	08003501 	.word	0x08003501
 8002e5c:	08003501 	.word	0x08003501
 8002e60:	08003501 	.word	0x08003501
 8002e64:	08003179 	.word	0x08003179
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b40      	cmp	r3, #64	; 0x40
 8002e6c:	f000 8207 	beq.w	800327e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8002e70:	e346      	b.n	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8002e72:	69b9      	ldr	r1, [r7, #24]
 8002e74:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002e78:	f000 fc3e 	bl	80036f8 <RCCEx_GetSAIxPeriphCLKFreq>
 8002e7c:	61f8      	str	r0, [r7, #28]
      break;
 8002e7e:	e340      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8002e80:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002e92:	d01f      	beq.n	8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002e9a:	f200 809c 	bhi.w	8002fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ea4:	d033      	beq.n	8002f0e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eac:	f200 8093 	bhi.w	8002fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8085 	beq.w	8002fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ebe:	d053      	beq.n	8002f68 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          break;
 8002ec0:	e089      	b.n	8002fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8002ec2:	bf00      	nop
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	0007a120 	.word	0x0007a120
 8002ecc:	08006d38 	.word	0x08006d38
 8002ed0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002ed4:	4ba4      	ldr	r3, [pc, #656]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d17c      	bne.n	8002fda <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002ee0:	4ba1      	ldr	r3, [pc, #644]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8002eec:	4b9e      	ldr	r3, [pc, #632]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	e005      	b.n	8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8002ef8:	4b9b      	ldr	r3, [pc, #620]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8002efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002efe:	0a1b      	lsrs	r3, r3, #8
 8002f00:	f003 030f 	and.w	r3, r3, #15
 8002f04:	4a99      	ldr	r2, [pc, #612]	; (800316c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8002f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f0a:	61fb      	str	r3, [r7, #28]
          break;
 8002f0c:	e065      	b.n	8002fda <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8002f0e:	4b96      	ldr	r3, [pc, #600]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f1a:	d160      	bne.n	8002fde <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8002f1c:	4b92      	ldr	r3, [pc, #584]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f28:	d159      	bne.n	8002fde <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002f2a:	4b8f      	ldr	r3, [pc, #572]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f34:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	fb03 f202 	mul.w	r2, r3, r2
 8002f3e:	4b8a      	ldr	r3, [pc, #552]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	091b      	lsrs	r3, r3, #4
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	3301      	adds	r3, #1
 8002f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8002f50:	4b85      	ldr	r3, [pc, #532]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	0d5b      	lsrs	r3, r3, #21
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f64:	61fb      	str	r3, [r7, #28]
          break;
 8002f66:	e03a      	b.n	8002fde <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8002f68:	4b7f      	ldr	r3, [pc, #508]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f74:	d135      	bne.n	8002fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8002f76:	4b7c      	ldr	r3, [pc, #496]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f82:	d12e      	bne.n	8002fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002f84:	4b78      	ldr	r3, [pc, #480]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	0a1b      	lsrs	r3, r3, #8
 8002f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f8e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	fb03 f202 	mul.w	r2, r3, r2
 8002f98:	4b73      	ldr	r3, [pc, #460]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8002faa:	4b6f      	ldr	r3, [pc, #444]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	0d5b      	lsrs	r3, r3, #21
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbe:	61fb      	str	r3, [r7, #28]
          break;
 8002fc0:	e00f      	b.n	8002fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8002fc2:	4b69      	ldr	r3, [pc, #420]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8002fc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d10a      	bne.n	8002fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
            frequency = HSI48_VALUE;
 8002fd0:	4b67      	ldr	r3, [pc, #412]	; (8003170 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8002fd2:	61fb      	str	r3, [r7, #28]
          break;
 8002fd4:	e007      	b.n	8002fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          break;
 8002fd6:	bf00      	nop
 8002fd8:	e293      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8002fda:	bf00      	nop
 8002fdc:	e291      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8002fde:	bf00      	nop
 8002fe0:	e28f      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8002fe2:	bf00      	nop
 8002fe4:	e28d      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8002fe6:	bf00      	nop
        break;
 8002fe8:	e28b      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002fea:	4b5f      	ldr	r3, [pc, #380]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8002fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d828      	bhi.n	800304e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8002ffc:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 8002ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003002:	bf00      	nop
 8003004:	08003015 	.word	0x08003015
 8003008:	0800301d 	.word	0x0800301d
 800300c:	08003025 	.word	0x08003025
 8003010:	08003039 	.word	0x08003039
          frequency = HAL_RCC_GetPCLK2Freq();
 8003014:	f7ff fb5c 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
 8003018:	61f8      	str	r0, [r7, #28]
          break;
 800301a:	e01d      	b.n	8003058 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          frequency = HAL_RCC_GetSysClockFreq();
 800301c:	f7ff faac 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8003020:	61f8      	str	r0, [r7, #28]
          break;
 8003022:	e019      	b.n	8003058 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003024:	4b50      	ldr	r3, [pc, #320]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003030:	d10f      	bne.n	8003052 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
            frequency = HSI_VALUE;
 8003032:	4b50      	ldr	r3, [pc, #320]	; (8003174 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003034:	61fb      	str	r3, [r7, #28]
          break;
 8003036:	e00c      	b.n	8003052 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003038:	4b4b      	ldr	r3, [pc, #300]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b02      	cmp	r3, #2
 8003044:	d107      	bne.n	8003056 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
            frequency = LSE_VALUE;
 8003046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800304a:	61fb      	str	r3, [r7, #28]
          break;
 800304c:	e003      	b.n	8003056 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
          break;
 800304e:	bf00      	nop
 8003050:	e257      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003052:	bf00      	nop
 8003054:	e255      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003056:	bf00      	nop
        break;
 8003058:	e253      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800305a:	4b43      	ldr	r3, [pc, #268]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800305c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003060:	f003 030c 	and.w	r3, r3, #12
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	2b0c      	cmp	r3, #12
 800306a:	d83a      	bhi.n	80030e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800306c:	a201      	add	r2, pc, #4	; (adr r2, 8003074 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800306e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003072:	bf00      	nop
 8003074:	080030a9 	.word	0x080030a9
 8003078:	080030e3 	.word	0x080030e3
 800307c:	080030e3 	.word	0x080030e3
 8003080:	080030e3 	.word	0x080030e3
 8003084:	080030b1 	.word	0x080030b1
 8003088:	080030e3 	.word	0x080030e3
 800308c:	080030e3 	.word	0x080030e3
 8003090:	080030e3 	.word	0x080030e3
 8003094:	080030b9 	.word	0x080030b9
 8003098:	080030e3 	.word	0x080030e3
 800309c:	080030e3 	.word	0x080030e3
 80030a0:	080030e3 	.word	0x080030e3
 80030a4:	080030cd 	.word	0x080030cd
          frequency = HAL_RCC_GetPCLK1Freq();
 80030a8:	f7ff fafc 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 80030ac:	61f8      	str	r0, [r7, #28]
          break;
 80030ae:	e01d      	b.n	80030ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>
          frequency = HAL_RCC_GetSysClockFreq();
 80030b0:	f7ff fa62 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 80030b4:	61f8      	str	r0, [r7, #28]
          break;
 80030b6:	e019      	b.n	80030ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80030b8:	4b2b      	ldr	r3, [pc, #172]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c4:	d10f      	bne.n	80030e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
            frequency = HSI_VALUE;
 80030c6:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80030c8:	61fb      	str	r3, [r7, #28]
          break;
 80030ca:	e00c      	b.n	80030e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80030cc:	4b26      	ldr	r3, [pc, #152]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d107      	bne.n	80030ea <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
            frequency = LSE_VALUE;
 80030da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030de:	61fb      	str	r3, [r7, #28]
          break;
 80030e0:	e003      	b.n	80030ea <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          break;
 80030e2:	bf00      	nop
 80030e4:	e20d      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 80030e6:	bf00      	nop
 80030e8:	e20b      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 80030ea:	bf00      	nop
        break;
 80030ec:	e209      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80030ee:	4b1e      	ldr	r3, [pc, #120]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	2b30      	cmp	r3, #48	; 0x30
 80030fe:	d021      	beq.n	8003144 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	2b30      	cmp	r3, #48	; 0x30
 8003104:	d829      	bhi.n	800315a <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	2b20      	cmp	r3, #32
 800310a:	d011      	beq.n	8003130 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	2b20      	cmp	r3, #32
 8003110:	d823      	bhi.n	800315a <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	2b10      	cmp	r3, #16
 800311c:	d004      	beq.n	8003128 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 800311e:	e01c      	b.n	800315a <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003120:	f7ff fac0 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8003124:	61f8      	str	r0, [r7, #28]
          break;
 8003126:	e01d      	b.n	8003164 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
          frequency = HAL_RCC_GetSysClockFreq();
 8003128:	f7ff fa26 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 800312c:	61f8      	str	r0, [r7, #28]
          break;
 800312e:	e019      	b.n	8003164 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003130:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313c:	d10f      	bne.n	800315e <HAL_RCCEx_GetPeriphCLKFreq+0x572>
            frequency = HSI_VALUE;
 800313e:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003140:	61fb      	str	r3, [r7, #28]
          break;
 8003142:	e00c      	b.n	800315e <HAL_RCCEx_GetPeriphCLKFreq+0x572>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003144:	4b08      	ldr	r3, [pc, #32]	; (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b02      	cmp	r3, #2
 8003150:	d107      	bne.n	8003162 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
            frequency = LSE_VALUE;
 8003152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003156:	61fb      	str	r3, [r7, #28]
          break;
 8003158:	e003      	b.n	8003162 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
          break;
 800315a:	bf00      	nop
 800315c:	e1d1      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 800315e:	bf00      	nop
 8003160:	e1cf      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003162:	bf00      	nop
        break;
 8003164:	e1cd      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000
 800316c:	08006d38 	.word	0x08006d38
 8003170:	02dc6c00 	.word	0x02dc6c00
 8003174:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003178:	4b99      	ldr	r3, [pc, #612]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800318a:	d025      	beq.n	80031d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003192:	d82c      	bhi.n	80031ee <HAL_RCCEx_GetPeriphCLKFreq+0x602>
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800319a:	d013      	beq.n	80031c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031a2:	d824      	bhi.n	80031ee <HAL_RCCEx_GetPeriphCLKFreq+0x602>
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d004      	beq.n	80031b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b0:	d004      	beq.n	80031bc <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
          break;
 80031b2:	e01c      	b.n	80031ee <HAL_RCCEx_GetPeriphCLKFreq+0x602>
          frequency = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7ff fa76 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 80031b8:	61f8      	str	r0, [r7, #28]
          break;
 80031ba:	e01d      	b.n	80031f8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
          frequency = HAL_RCC_GetSysClockFreq();
 80031bc:	f7ff f9dc 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 80031c0:	61f8      	str	r0, [r7, #28]
          break;
 80031c2:	e019      	b.n	80031f8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80031c4:	4b86      	ldr	r3, [pc, #536]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d0:	d10f      	bne.n	80031f2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
            frequency = HSI_VALUE;
 80031d2:	4b84      	ldr	r3, [pc, #528]	; (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80031d4:	61fb      	str	r3, [r7, #28]
          break;
 80031d6:	e00c      	b.n	80031f2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80031d8:	4b81      	ldr	r3, [pc, #516]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d107      	bne.n	80031f6 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
            frequency = LSE_VALUE;
 80031e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ea:	61fb      	str	r3, [r7, #28]
          break;
 80031ec:	e003      	b.n	80031f6 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          break;
 80031ee:	bf00      	nop
 80031f0:	e187      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 80031f2:	bf00      	nop
 80031f4:	e185      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 80031f6:	bf00      	nop
        break;
 80031f8:	e183      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80031fa:	4b79      	ldr	r3, [pc, #484]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80031fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003200:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800320c:	d007      	beq.n	800321e <HAL_RCCEx_GetPeriphCLKFreq+0x632>
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003214:	d12f      	bne.n	8003276 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
          frequency = HAL_RCC_GetSysClockFreq();
 8003216:	f7ff f9af 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 800321a:	61f8      	str	r0, [r7, #28]
          break;
 800321c:	e02e      	b.n	800327c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800321e:	4b70      	ldr	r3, [pc, #448]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003226:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800322a:	d126      	bne.n	800327a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
 800322c:	4b6c      	ldr	r3, [pc, #432]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d020      	beq.n	800327a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003238:	4b69      	ldr	r3, [pc, #420]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	0a1b      	lsrs	r3, r3, #8
 800323e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003242:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	fb03 f202 	mul.w	r2, r3, r2
 800324c:	4b64      	ldr	r3, [pc, #400]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	3301      	adds	r3, #1
 8003258:	fbb2 f3f3 	udiv	r3, r2, r3
 800325c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800325e:	4b60      	ldr	r3, [pc, #384]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	0e5b      	lsrs	r3, r3, #25
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	3301      	adds	r3, #1
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003272:	61fb      	str	r3, [r7, #28]
          break;
 8003274:	e001      	b.n	800327a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
          break;
 8003276:	bf00      	nop
 8003278:	e143      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 800327a:	bf00      	nop
        break;
 800327c:	e141      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800327e:	4b58      	ldr	r3, [pc, #352]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003284:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003290:	d013      	beq.n	80032ba <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003298:	d819      	bhi.n	80032ce <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d004      	beq.n	80032aa <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a6:	d004      	beq.n	80032b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
          break;
 80032a8:	e011      	b.n	80032ce <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 80032aa:	f7ff f9fb 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 80032ae:	61f8      	str	r0, [r7, #28]
          break;
 80032b0:	e010      	b.n	80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          frequency = HAL_RCC_GetSysClockFreq();
 80032b2:	f7ff f961 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 80032b6:	61f8      	str	r0, [r7, #28]
          break;
 80032b8:	e00c      	b.n	80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80032ba:	4b49      	ldr	r3, [pc, #292]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c6:	d104      	bne.n	80032d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
            frequency = HSI_VALUE;
 80032c8:	4b46      	ldr	r3, [pc, #280]	; (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80032ca:	61fb      	str	r3, [r7, #28]
          break;
 80032cc:	e001      	b.n	80032d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 80032ce:	bf00      	nop
 80032d0:	e117      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 80032d2:	bf00      	nop
        break;
 80032d4:	e115      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80032d6:	4b42      	ldr	r3, [pc, #264]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032e8:	d013      	beq.n	8003312 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f0:	d819      	bhi.n	8003326 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d004      	beq.n	8003302 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032fe:	d004      	beq.n	800330a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
          break;
 8003300:	e011      	b.n	8003326 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003302:	f7ff f9cf 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8003306:	61f8      	str	r0, [r7, #28]
          break;
 8003308:	e010      	b.n	800332c <HAL_RCCEx_GetPeriphCLKFreq+0x740>
          frequency = HAL_RCC_GetSysClockFreq();
 800330a:	f7ff f935 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 800330e:	61f8      	str	r0, [r7, #28]
          break;
 8003310:	e00c      	b.n	800332c <HAL_RCCEx_GetPeriphCLKFreq+0x740>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003312:	4b33      	ldr	r3, [pc, #204]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800331a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331e:	d104      	bne.n	800332a <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
            frequency = HSI_VALUE;
 8003320:	4b30      	ldr	r3, [pc, #192]	; (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003322:	61fb      	str	r3, [r7, #28]
          break;
 8003324:	e001      	b.n	800332a <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
          break;
 8003326:	bf00      	nop
 8003328:	e0eb      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 800332a:	bf00      	nop
        break;
 800332c:	e0e9      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800332e:	4b2c      	ldr	r3, [pc, #176]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003334:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003340:	d013      	beq.n	800336a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003348:	d819      	bhi.n	800337e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d004      	beq.n	800335a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003356:	d004      	beq.n	8003362 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8003358:	e011      	b.n	800337e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
          frequency = HAL_RCC_GetPCLK1Freq();
 800335a:	f7ff f9a3 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 800335e:	61f8      	str	r0, [r7, #28]
          break;
 8003360:	e010      	b.n	8003384 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
          frequency = HAL_RCC_GetSysClockFreq();
 8003362:	f7ff f909 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8003366:	61f8      	str	r0, [r7, #28]
          break;
 8003368:	e00c      	b.n	8003384 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800336a:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003376:	d104      	bne.n	8003382 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
            frequency = HSI_VALUE;
 8003378:	4b1a      	ldr	r3, [pc, #104]	; (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800337a:	61fb      	str	r3, [r7, #28]
          break;
 800337c:	e001      	b.n	8003382 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
          break;
 800337e:	bf00      	nop
 8003380:	e0bf      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003382:	bf00      	nop
        break;
 8003384:	e0bd      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003386:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003398:	d030      	beq.n	80033fc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033a0:	d837      	bhi.n	8003412 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033a8:	d01e      	beq.n	80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033b0:	d82f      	bhi.n	8003412 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d004      	beq.n	80033c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033be:	d004      	beq.n	80033ca <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
          break;
 80033c0:	e027      	b.n	8003412 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = HAL_RCC_GetPCLK1Freq();
 80033c2:	f7ff f96f 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 80033c6:	61f8      	str	r0, [r7, #28]
          break;
 80033c8:	e02a      	b.n	8003420 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80033cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d11e      	bne.n	8003416 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
              frequency = LSI_VALUE;
 80033d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80033dc:	61fb      	str	r3, [r7, #28]
          break;
 80033de:	e01a      	b.n	8003416 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 80033e0:	40021000 	.word	0x40021000
 80033e4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80033e8:	4b48      	ldr	r3, [pc, #288]	; (800350c <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f4:	d111      	bne.n	800341a <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
            frequency = HSI_VALUE;
 80033f6:	4b46      	ldr	r3, [pc, #280]	; (8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 80033f8:	61fb      	str	r3, [r7, #28]
          break;
 80033fa:	e00e      	b.n	800341a <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80033fc:	4b43      	ldr	r3, [pc, #268]	; (800350c <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 80033fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b02      	cmp	r3, #2
 8003408:	d109      	bne.n	800341e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
            frequency = LSE_VALUE;
 800340a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800340e:	61fb      	str	r3, [r7, #28]
          break;
 8003410:	e005      	b.n	800341e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
          break;
 8003412:	bf00      	nop
 8003414:	e075      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8003416:	bf00      	nop
 8003418:	e073      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 800341a:	bf00      	nop
 800341c:	e071      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 800341e:	bf00      	nop
        break;
 8003420:	e06f      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003422:	4b3a      	ldr	r3, [pc, #232]	; (800350c <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 8003424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003428:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003434:	d02c      	beq.n	8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800343c:	d833      	bhi.n	80034a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003444:	d01a      	beq.n	800347c <HAL_RCCEx_GetPeriphCLKFreq+0x890>
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800344c:	d82b      	bhi.n	80034a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d004      	beq.n	800345e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800345a:	d004      	beq.n	8003466 <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
          break;
 800345c:	e023      	b.n	80034a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          frequency = HAL_RCC_GetPCLK1Freq();
 800345e:	f7ff f921 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8003462:	61f8      	str	r0, [r7, #28]
          break;
 8003464:	e026      	b.n	80034b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003466:	4b29      	ldr	r3, [pc, #164]	; (800350c <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 8003468:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b02      	cmp	r3, #2
 8003472:	d11a      	bne.n	80034aa <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
              frequency = LSI_VALUE;
 8003474:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003478:	61fb      	str	r3, [r7, #28]
          break;
 800347a:	e016      	b.n	80034aa <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800347c:	4b23      	ldr	r3, [pc, #140]	; (800350c <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003488:	d111      	bne.n	80034ae <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            frequency = HSI_VALUE;
 800348a:	4b21      	ldr	r3, [pc, #132]	; (8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 800348c:	61fb      	str	r3, [r7, #28]
          break;
 800348e:	e00e      	b.n	80034ae <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003490:	4b1e      	ldr	r3, [pc, #120]	; (800350c <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b02      	cmp	r3, #2
 800349c:	d109      	bne.n	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
            frequency = LSE_VALUE;
 800349e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034a2:	61fb      	str	r3, [r7, #28]
          break;
 80034a4:	e005      	b.n	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
          break;
 80034a6:	bf00      	nop
 80034a8:	e02b      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 80034aa:	bf00      	nop
 80034ac:	e029      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 80034ae:	bf00      	nop
 80034b0:	e027      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 80034b2:	bf00      	nop
        break;
 80034b4:	e025      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80034b6:	4b15      	ldr	r3, [pc, #84]	; (800350c <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 80034b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d004      	beq.n	80034d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ce:	d004      	beq.n	80034da <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80034d0:	e00d      	b.n	80034ee <HAL_RCCEx_GetPeriphCLKFreq+0x902>
          frequency = HAL_RCC_GetPCLK1Freq();
 80034d2:	f7ff f8e7 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 80034d6:	61f8      	str	r0, [r7, #28]
          break;
 80034d8:	e009      	b.n	80034ee <HAL_RCCEx_GetPeriphCLKFreq+0x902>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80034da:	4b0c      	ldr	r3, [pc, #48]	; (800350c <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e6:	d101      	bne.n	80034ec <HAL_RCCEx_GetPeriphCLKFreq+0x900>
            frequency = HSI_VALUE;
 80034e8:	4b09      	ldr	r3, [pc, #36]	; (8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 80034ea:	61fb      	str	r3, [r7, #28]
          break;
 80034ec:	bf00      	nop
        break;
 80034ee:	e008      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
      break;
 80034f0:	bf00      	nop
 80034f2:	e006      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
      break;
 80034f4:	bf00      	nop
 80034f6:	e004      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
      break;
 80034f8:	bf00      	nop
 80034fa:	e002      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
      break;
 80034fc:	bf00      	nop
 80034fe:	e000      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
      break;
 8003500:	bf00      	nop
    }
  }

  return(frequency);
 8003502:	69fb      	ldr	r3, [r7, #28]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3720      	adds	r7, #32
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40021000 	.word	0x40021000
 8003510:	00f42400 	.word	0x00f42400

08003514 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003522:	4b74      	ldr	r3, [pc, #464]	; (80036f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d018      	beq.n	8003560 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800352e:	4b71      	ldr	r3, [pc, #452]	; (80036f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f003 0203 	and.w	r2, r3, #3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d10d      	bne.n	800355a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
       ||
 8003542:	2b00      	cmp	r3, #0
 8003544:	d009      	beq.n	800355a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003546:	4b6b      	ldr	r3, [pc, #428]	; (80036f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	091b      	lsrs	r3, r3, #4
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
       ||
 8003556:	429a      	cmp	r2, r3
 8003558:	d047      	beq.n	80035ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	73fb      	strb	r3, [r7, #15]
 800355e:	e044      	b.n	80035ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b03      	cmp	r3, #3
 8003566:	d018      	beq.n	800359a <RCCEx_PLLSAI1_Config+0x86>
 8003568:	2b03      	cmp	r3, #3
 800356a:	d825      	bhi.n	80035b8 <RCCEx_PLLSAI1_Config+0xa4>
 800356c:	2b01      	cmp	r3, #1
 800356e:	d002      	beq.n	8003576 <RCCEx_PLLSAI1_Config+0x62>
 8003570:	2b02      	cmp	r3, #2
 8003572:	d009      	beq.n	8003588 <RCCEx_PLLSAI1_Config+0x74>
 8003574:	e020      	b.n	80035b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003576:	4b5f      	ldr	r3, [pc, #380]	; (80036f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d11d      	bne.n	80035be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003586:	e01a      	b.n	80035be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003588:	4b5a      	ldr	r3, [pc, #360]	; (80036f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003590:	2b00      	cmp	r3, #0
 8003592:	d116      	bne.n	80035c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003598:	e013      	b.n	80035c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800359a:	4b56      	ldr	r3, [pc, #344]	; (80036f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10f      	bne.n	80035c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035a6:	4b53      	ldr	r3, [pc, #332]	; (80036f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d109      	bne.n	80035c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035b6:	e006      	b.n	80035c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
      break;
 80035bc:	e004      	b.n	80035c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035be:	bf00      	nop
 80035c0:	e002      	b.n	80035c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035c2:	bf00      	nop
 80035c4:	e000      	b.n	80035c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10d      	bne.n	80035ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035ce:	4b49      	ldr	r3, [pc, #292]	; (80036f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6819      	ldr	r1, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	3b01      	subs	r3, #1
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	430b      	orrs	r3, r1
 80035e4:	4943      	ldr	r1, [pc, #268]	; (80036f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d17c      	bne.n	80036ea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035f0:	4b40      	ldr	r3, [pc, #256]	; (80036f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a3f      	ldr	r2, [pc, #252]	; (80036f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035fc:	f7fd ff9c 	bl	8001538 <HAL_GetTick>
 8003600:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003602:	e009      	b.n	8003618 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003604:	f7fd ff98 	bl	8001538 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d902      	bls.n	8003618 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	73fb      	strb	r3, [r7, #15]
        break;
 8003616:	e005      	b.n	8003624 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003618:	4b36      	ldr	r3, [pc, #216]	; (80036f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1ef      	bne.n	8003604 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003624:	7bfb      	ldrb	r3, [r7, #15]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d15f      	bne.n	80036ea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d110      	bne.n	8003652 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003630:	4b30      	ldr	r3, [pc, #192]	; (80036f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003638:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6892      	ldr	r2, [r2, #8]
 8003640:	0211      	lsls	r1, r2, #8
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	68d2      	ldr	r2, [r2, #12]
 8003646:	06d2      	lsls	r2, r2, #27
 8003648:	430a      	orrs	r2, r1
 800364a:	492a      	ldr	r1, [pc, #168]	; (80036f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800364c:	4313      	orrs	r3, r2
 800364e:	610b      	str	r3, [r1, #16]
 8003650:	e027      	b.n	80036a2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d112      	bne.n	800367e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003658:	4b26      	ldr	r3, [pc, #152]	; (80036f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003660:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6892      	ldr	r2, [r2, #8]
 8003668:	0211      	lsls	r1, r2, #8
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6912      	ldr	r2, [r2, #16]
 800366e:	0852      	lsrs	r2, r2, #1
 8003670:	3a01      	subs	r2, #1
 8003672:	0552      	lsls	r2, r2, #21
 8003674:	430a      	orrs	r2, r1
 8003676:	491f      	ldr	r1, [pc, #124]	; (80036f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003678:	4313      	orrs	r3, r2
 800367a:	610b      	str	r3, [r1, #16]
 800367c:	e011      	b.n	80036a2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800367e:	4b1d      	ldr	r3, [pc, #116]	; (80036f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003686:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6892      	ldr	r2, [r2, #8]
 800368e:	0211      	lsls	r1, r2, #8
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6952      	ldr	r2, [r2, #20]
 8003694:	0852      	lsrs	r2, r2, #1
 8003696:	3a01      	subs	r2, #1
 8003698:	0652      	lsls	r2, r2, #25
 800369a:	430a      	orrs	r2, r1
 800369c:	4915      	ldr	r1, [pc, #84]	; (80036f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036a2:	4b14      	ldr	r3, [pc, #80]	; (80036f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a13      	ldr	r2, [pc, #76]	; (80036f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ae:	f7fd ff43 	bl	8001538 <HAL_GetTick>
 80036b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036b4:	e009      	b.n	80036ca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036b6:	f7fd ff3f 	bl	8001538 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d902      	bls.n	80036ca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	73fb      	strb	r3, [r7, #15]
          break;
 80036c8:	e005      	b.n	80036d6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036ca:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0ef      	beq.n	80036b6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d106      	bne.n	80036ea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	4903      	ldr	r1, [pc, #12]	; (80036f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40021000 	.word	0x40021000

080036f8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b089      	sub	sp, #36	; 0x24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003714:	d10b      	bne.n	800372e <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003716:	4b53      	ldr	r3, [pc, #332]	; (8003864 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003720:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003728:	d101      	bne.n	800372e <RCCEx_GetSAIxPeriphCLKFreq+0x36>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800372a:	4b4f      	ldr	r3, [pc, #316]	; (8003868 <RCCEx_GetSAIxPeriphCLKFreq+0x170>)
 800372c:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	2b00      	cmp	r3, #0
 8003732:	f040 8090 	bne.w	8003856 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
  {
    pllvco = InputFrequency;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	613b      	str	r3, [r7, #16]
      }
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

#else
    if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003740:	d143      	bne.n	80037ca <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI2CLK) != 0U))
 8003742:	4b48      	ldr	r3, [pc, #288]	; (8003864 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800374e:	d132      	bne.n	80037b6 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
 8003750:	4b44      	ldr	r3, [pc, #272]	; (8003864 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d02c      	beq.n	80037b6 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800375c:	4b41      	ldr	r3, [pc, #260]	; (8003864 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	3301      	adds	r3, #1
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	fbb2 f3f3 	udiv	r3, r2, r3
 800376e:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003770:	4b3c      	ldr	r3, [pc, #240]	; (8003864 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	0a1b      	lsrs	r3, r3, #8
 8003776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800377a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800377c:	4b39      	ldr	r3, [pc, #228]	; (8003864 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	0edb      	lsrs	r3, r3, #27
 8003782:	f003 031f 	and.w	r3, r3, #31
 8003786:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10a      	bne.n	80037a4 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800378e:	4b35      	ldr	r3, [pc, #212]	; (8003864 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <RCCEx_GetSAIxPeriphCLKFreq+0xa8>
          {
            pllp = 17U;
 800379a:	2311      	movs	r3, #17
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	e001      	b.n	80037a4 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
          }
          else
          {
            pllp = 7U;
 80037a0:	2307      	movs	r3, #7
 80037a2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	fb03 f202 	mul.w	r2, r3, r2
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b2:	61fb      	str	r3, [r7, #28]
 80037b4:	e04f      	b.n	8003856 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80037b6:	4b2b      	ldr	r3, [pc, #172]	; (8003864 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c2:	d148      	bne.n	8003856 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      {
        /* HSI automatically selected as clock source if PLLs not enabled */
        frequency = HSI_VALUE;
 80037c4:	4b29      	ldr	r3, [pc, #164]	; (800386c <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 80037c6:	61fb      	str	r3, [r7, #28]
 80037c8:	e045      	b.n	8003856 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      else
      {
        /* No clock source, frequency default init at 0 */
      }
    }
    else if(srcclk == RCC_SAI1CLKSOURCE_PLLSAI1)
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d142      	bne.n	8003856 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80037d0:	4b24      	ldr	r3, [pc, #144]	; (8003864 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037dc:	d132      	bne.n	8003844 <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
 80037de:	4b21      	ldr	r3, [pc, #132]	; (8003864 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d02c      	beq.n	8003844 <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80037ea:	4b1e      	ldr	r3, [pc, #120]	; (8003864 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	3301      	adds	r3, #1
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80037fe:	4b19      	ldr	r3, [pc, #100]	; (8003864 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	0a1b      	lsrs	r3, r3, #8
 8003804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003808:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800380a:	4b16      	ldr	r3, [pc, #88]	; (8003864 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	0edb      	lsrs	r3, r3, #27
 8003810:	f003 031f 	and.w	r3, r3, #31
 8003814:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10a      	bne.n	8003832 <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800381c:	4b11      	ldr	r3, [pc, #68]	; (8003864 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <RCCEx_GetSAIxPeriphCLKFreq+0x136>
          {
            pllp = 17U;
 8003828:	2311      	movs	r3, #17
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	e001      	b.n	8003832 <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
          }
          else
          {
            pllp = 7U;
 800382e:	2307      	movs	r3, #7
 8003830:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	fb03 f202 	mul.w	r2, r3, r2
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	e008      	b.n	8003856 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003844:	4b07      	ldr	r3, [pc, #28]	; (8003864 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003850:	d101      	bne.n	8003856 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      {
        /* HSI automatically selected as clock source if PLLs not enabled */
        frequency = HSI_VALUE;
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 8003854:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8003856:	69fb      	ldr	r3, [r7, #28]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3724      	adds	r7, #36	; 0x24
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	40021000 	.word	0x40021000
 8003868:	001fff68 	.word	0x001fff68
 800386c:	00f42400 	.word	0x00f42400

08003870 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e022      	b.n	80038c8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d105      	bne.n	800389a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7fd fc93 	bl	80011c0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2203      	movs	r2, #3
 800389e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f814 	bl	80038d0 <HAL_SD_InitCard>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e00a      	b.n	80038c8 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80038d0:	b5b0      	push	{r4, r5, r7, lr}
 80038d2:	b08e      	sub	sp, #56	; 0x38
 80038d4:	af04      	add	r7, sp, #16
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80038d8:	2300      	movs	r3, #0
 80038da:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80038e0:	2300      	movs	r3, #0
 80038e2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80038e8:	2300      	movs	r3, #0
 80038ea:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80038ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80038f0:	f7ff f97c 	bl	8002bec <HAL_RCCEx_GetPeriphCLKFreq>
 80038f4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d109      	bne.n	8003910 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800390a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e07b      	b.n	8003a08 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	09db      	lsrs	r3, r3, #7
 8003914:	4a3e      	ldr	r2, [pc, #248]	; (8003a10 <HAL_SD_InitCard+0x140>)
 8003916:	fba2 2303 	umull	r2, r3, r2, r3
 800391a:	091b      	lsrs	r3, r3, #4
 800391c:	3b02      	subs	r3, #2
 800391e:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681d      	ldr	r5, [r3, #0]
 8003924:	466c      	mov	r4, sp
 8003926:	f107 0314 	add.w	r3, r7, #20
 800392a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800392e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003932:	f107 0308 	add.w	r3, r7, #8
 8003936:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003938:	4628      	mov	r0, r5
 800393a:	f001 fb71 	bl	8005020 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800394c:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f001 fbaf 	bl	80050b6 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003966:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	3302      	adds	r3, #2
 800396c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8003974:	4a27      	ldr	r2, [pc, #156]	; (8003a14 <HAL_SD_InitCard+0x144>)
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	3301      	adds	r3, #1
 800397e:	4618      	mov	r0, r3
 8003980:	f7fd fde6 	bl	8001550 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 fe6b 	bl	8004660 <SD_PowerON>
 800398a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00b      	beq.n	80039aa <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e02e      	b.n	8003a08 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fd8a 	bl	80044c4 <SD_InitCard>
 80039b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00b      	beq.n	80039d0 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e01b      	b.n	8003a08 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039d8:	4618      	mov	r0, r3
 80039da:	f001 fbff 	bl	80051dc <SDMMC_CmdBlockLength>
 80039de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00f      	beq.n	8003a06 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a0b      	ldr	r2, [pc, #44]	; (8003a18 <HAL_SD_InitCard+0x148>)
 80039ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3728      	adds	r7, #40	; 0x28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a10:	014f8b59 	.word	0x014f8b59
 8003a14:	00012110 	.word	0x00012110
 8003a18:	004005ff 	.word	0x004005ff

08003a1c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b092      	sub	sp, #72	; 0x48
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003a2a:	f7fd fd85 	bl	8001538 <HAL_GetTick>
 8003a2e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d107      	bne.n	8003a4e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e1bd      	b.n	8003dca <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	f040 81b0 	bne.w	8003dbc <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003a62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	441a      	add	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d907      	bls.n	8003a80 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e1a4      	b.n	8003dca <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2203      	movs	r2, #3
 8003a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d002      	beq.n	8003a9e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9a:	025b      	lsls	r3, r3, #9
 8003a9c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	025b      	lsls	r3, r3, #9
 8003aa8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003aaa:	2390      	movs	r3, #144	; 0x90
 8003aac:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f107 0214 	add.w	r2, r7, #20
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f001 fb5d 	bl	8005184 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d90a      	bls.n	8003ae6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003adc:	4618      	mov	r0, r3
 8003ade:	f001 fbc1 	bl	8005264 <SDMMC_CmdReadMultiBlock>
 8003ae2:	6478      	str	r0, [r7, #68]	; 0x44
 8003ae4:	e009      	b.n	8003afa <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003af2:	4618      	mov	r0, r3
 8003af4:	f001 fb94 	bl	8005220 <SDMMC_CmdReadSingleBlock>
 8003af8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d012      	beq.n	8003b26 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a7a      	ldr	r2, [pc, #488]	; (8003cf0 <HAL_SD_ReadBlocks+0x2d4>)
 8003b06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e151      	b.n	8003dca <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003b2a:	e061      	b.n	8003bf0 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d03c      	beq.n	8003bb4 <HAL_SD_ReadBlocks+0x198>
 8003b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d039      	beq.n	8003bb4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003b40:	2300      	movs	r3, #0
 8003b42:	643b      	str	r3, [r7, #64]	; 0x40
 8003b44:	e033      	b.n	8003bae <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f001 fa95 	bl	800507a <SDMMC_ReadFIFO>
 8003b50:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b58:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b62:	3b01      	subs	r3, #1
 8003b64:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	0a1b      	lsrs	r3, r3, #8
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b72:	3301      	adds	r3, #1
 8003b74:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7e:	0c1b      	lsrs	r3, r3, #16
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b84:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b88:	3301      	adds	r3, #1
 8003b8a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b94:	0e1b      	lsrs	r3, r3, #24
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003baa:	3301      	adds	r3, #1
 8003bac:	643b      	str	r3, [r7, #64]	; 0x40
 8003bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb0:	2b07      	cmp	r3, #7
 8003bb2:	d9c8      	bls.n	8003b46 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003bb4:	f7fd fcc0 	bl	8001538 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d902      	bls.n	8003bca <HAL_SD_ReadBlocks+0x1ae>
 8003bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d112      	bne.n	8003bf0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a48      	ldr	r2, [pc, #288]	; (8003cf0 <HAL_SD_ReadBlocks+0x2d4>)
 8003bd0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e0ec      	b.n	8003dca <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d096      	beq.n	8003b2c <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d022      	beq.n	8003c52 <HAL_SD_ReadBlocks+0x236>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d91f      	bls.n	8003c52 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d01b      	beq.n	8003c52 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f001 fb86 	bl	8005330 <SDMMC_CmdStopTransfer>
 8003c24:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d012      	beq.n	8003c52 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a2f      	ldr	r2, [pc, #188]	; (8003cf0 <HAL_SD_ReadBlocks+0x2d4>)
 8003c32:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e0bb      	b.n	8003dca <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d012      	beq.n	8003c86 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a22      	ldr	r2, [pc, #136]	; (8003cf0 <HAL_SD_ReadBlocks+0x2d4>)
 8003c66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	f043 0208 	orr.w	r2, r3, #8
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e0a1      	b.n	8003dca <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d012      	beq.n	8003cba <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a15      	ldr	r2, [pc, #84]	; (8003cf0 <HAL_SD_ReadBlocks+0x2d4>)
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	f043 0202 	orr.w	r2, r3, #2
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e087      	b.n	8003dca <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d064      	beq.n	8003d92 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a08      	ldr	r2, [pc, #32]	; (8003cf0 <HAL_SD_ReadBlocks+0x2d4>)
 8003cce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	f043 0220 	orr.w	r2, r3, #32
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e06d      	b.n	8003dca <HAL_SD_ReadBlocks+0x3ae>
 8003cee:	bf00      	nop
 8003cf0:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f001 f9be 	bl	800507a <SDMMC_ReadFIFO>
 8003cfe:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d06:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d10:	3b01      	subs	r3, #1
 8003d12:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d16:	0a1b      	lsrs	r3, r3, #8
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d20:	3301      	adds	r3, #1
 8003d22:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d26:	3b01      	subs	r3, #1
 8003d28:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d32:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d36:	3301      	adds	r3, #1
 8003d38:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d42:	0e1b      	lsrs	r3, r3, #24
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d48:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d52:	3b01      	subs	r3, #1
 8003d54:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003d56:	f7fd fbef 	bl	8001538 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d902      	bls.n	8003d6c <HAL_SD_ReadBlocks+0x350>
 8003d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d112      	bne.n	8003d92 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a18      	ldr	r2, [pc, #96]	; (8003dd4 <HAL_SD_ReadBlocks+0x3b8>)
 8003d72:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d78:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e01b      	b.n	8003dca <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <HAL_SD_ReadBlocks+0x38a>
 8003da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1a6      	bne.n	8003cf4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f240 523a 	movw	r2, #1338	; 0x53a
 8003dae:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e006      	b.n	8003dca <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
  }
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3748      	adds	r7, #72	; 0x48
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	004005ff 	.word	0x004005ff

08003dd8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b092      	sub	sp, #72	; 0x48
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
 8003de4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003de6:	f7fd fba7 	bl	8001538 <HAL_GetTick>
 8003dea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d107      	bne.n	8003e0a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e165      	b.n	80040d6 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	f040 8158 	bne.w	80040c8 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003e1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	441a      	add	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d907      	bls.n	8003e3c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e30:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e14c      	b.n	80040d6 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2203      	movs	r2, #3
 8003e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d002      	beq.n	8003e5a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e56:	025b      	lsls	r3, r3, #9
 8003e58:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e5e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	025b      	lsls	r3, r3, #9
 8003e64:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003e66:	2390      	movs	r3, #144	; 0x90
 8003e68:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003e72:	2301      	movs	r3, #1
 8003e74:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f107 0218 	add.w	r2, r7, #24
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f001 f97f 	bl	8005184 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d90a      	bls.n	8003ea2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f001 fa27 	bl	80052ec <SDMMC_CmdWriteMultiBlock>
 8003e9e:	6478      	str	r0, [r7, #68]	; 0x44
 8003ea0:	e009      	b.n	8003eb6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2210      	movs	r2, #16
 8003ea6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f001 f9fa 	bl	80052a8 <SDMMC_CmdWriteSingleBlock>
 8003eb4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d012      	beq.n	8003ee2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a87      	ldr	r2, [pc, #540]	; (80040e0 <HAL_SD_WriteBlocks+0x308>)
 8003ec2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e0f9      	b.n	80040d6 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003ee6:	e065      	b.n	8003fb4 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d040      	beq.n	8003f78 <HAL_SD_WriteBlocks+0x1a0>
 8003ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d03d      	beq.n	8003f78 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003efc:	2300      	movs	r3, #0
 8003efe:	643b      	str	r3, [r7, #64]	; 0x40
 8003f00:	e037      	b.n	8003f72 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f10:	3b01      	subs	r3, #1
 8003f12:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	021a      	lsls	r2, r3, #8
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f22:	3301      	adds	r3, #1
 8003f24:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	041a      	lsls	r2, r3, #16
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f40:	3b01      	subs	r3, #1
 8003f42:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	061a      	lsls	r2, r3, #24
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f52:	3301      	adds	r3, #1
 8003f54:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f107 0214 	add.w	r2, r7, #20
 8003f64:	4611      	mov	r1, r2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f001 f894 	bl	8005094 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f6e:	3301      	adds	r3, #1
 8003f70:	643b      	str	r3, [r7, #64]	; 0x40
 8003f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f74:	2b07      	cmp	r3, #7
 8003f76:	d9c4      	bls.n	8003f02 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003f78:	f7fd fade 	bl	8001538 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d902      	bls.n	8003f8e <HAL_SD_WriteBlocks+0x1b6>
 8003f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d112      	bne.n	8003fb4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a53      	ldr	r2, [pc, #332]	; (80040e0 <HAL_SD_WriteBlocks+0x308>)
 8003f94:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e090      	b.n	80040d6 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fba:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d092      	beq.n	8003ee8 <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d022      	beq.n	8004016 <HAL_SD_WriteBlocks+0x23e>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d91f      	bls.n	8004016 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d01b      	beq.n	8004016 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f001 f9a4 	bl	8005330 <SDMMC_CmdStopTransfer>
 8003fe8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003fea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d012      	beq.n	8004016 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a3a      	ldr	r2, [pc, #232]	; (80040e0 <HAL_SD_WriteBlocks+0x308>)
 8003ff6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ffe:	431a      	orrs	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e05f      	b.n	80040d6 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b00      	cmp	r3, #0
 8004022:	d012      	beq.n	800404a <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a2d      	ldr	r2, [pc, #180]	; (80040e0 <HAL_SD_WriteBlocks+0x308>)
 800402a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004030:	f043 0208 	orr.w	r2, r3, #8
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e045      	b.n	80040d6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d012      	beq.n	800407e <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a20      	ldr	r2, [pc, #128]	; (80040e0 <HAL_SD_WriteBlocks+0x308>)
 800405e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004064:	f043 0202 	orr.w	r2, r3, #2
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e02b      	b.n	80040d6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	2b00      	cmp	r3, #0
 800408a:	d012      	beq.n	80040b2 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a13      	ldr	r2, [pc, #76]	; (80040e0 <HAL_SD_WriteBlocks+0x308>)
 8004092:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004098:	f043 0210 	orr.w	r2, r3, #16
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e011      	b.n	80040d6 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f240 523a 	movw	r2, #1338	; 0x53a
 80040ba:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	e006      	b.n	80040d6 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
  }
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3748      	adds	r7, #72	; 0x48
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	004005ff 	.word	0x004005ff

080040e4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f2:	0f9b      	lsrs	r3, r3, #30
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040fe:	0e9b      	lsrs	r3, r3, #26
 8004100:	b2db      	uxtb	r3, r3
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	b2da      	uxtb	r2, r3
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004110:	0e1b      	lsrs	r3, r3, #24
 8004112:	b2db      	uxtb	r3, r3
 8004114:	f003 0303 	and.w	r3, r3, #3
 8004118:	b2da      	uxtb	r2, r3
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004122:	0c1b      	lsrs	r3, r3, #16
 8004124:	b2da      	uxtb	r2, r3
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800412e:	0a1b      	lsrs	r3, r3, #8
 8004130:	b2da      	uxtb	r2, r3
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800413a:	b2da      	uxtb	r2, r3
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004144:	0d1b      	lsrs	r3, r3, #20
 8004146:	b29a      	uxth	r2, r3
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004150:	0c1b      	lsrs	r3, r3, #16
 8004152:	b2db      	uxtb	r3, r3
 8004154:	f003 030f 	and.w	r3, r3, #15
 8004158:	b2da      	uxtb	r2, r3
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004162:	0bdb      	lsrs	r3, r3, #15
 8004164:	b2db      	uxtb	r3, r3
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	b2da      	uxtb	r2, r3
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004174:	0b9b      	lsrs	r3, r3, #14
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	b2da      	uxtb	r2, r3
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004186:	0b5b      	lsrs	r3, r3, #13
 8004188:	b2db      	uxtb	r3, r3
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	b2da      	uxtb	r2, r3
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004198:	0b1b      	lsrs	r3, r3, #12
 800419a:	b2db      	uxtb	r3, r3
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2200      	movs	r2, #0
 80041aa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d163      	bne.n	800427c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041b8:	009a      	lsls	r2, r3, #2
 80041ba:	f640 73fc 	movw	r3, #4092	; 0xffc
 80041be:	4013      	ands	r3, r2
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80041c4:	0f92      	lsrs	r2, r2, #30
 80041c6:	431a      	orrs	r2, r3
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d0:	0edb      	lsrs	r3, r3, #27
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041e2:	0e1b      	lsrs	r3, r3, #24
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f4:	0d5b      	lsrs	r3, r3, #21
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004206:	0c9b      	lsrs	r3, r3, #18
 8004208:	b2db      	uxtb	r3, r3
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	b2da      	uxtb	r2, r3
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004218:	0bdb      	lsrs	r3, r3, #15
 800421a:	b2db      	uxtb	r3, r3
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	b2da      	uxtb	r2, r3
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	7e1b      	ldrb	r3, [r3, #24]
 8004234:	b2db      	uxtb	r3, r3
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	3302      	adds	r3, #2
 800423c:	2201      	movs	r2, #1
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004246:	fb03 f202 	mul.w	r2, r3, r2
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	7a1b      	ldrb	r3, [r3, #8]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	f003 030f 	and.w	r3, r3, #15
 8004258:	2201      	movs	r2, #1
 800425a:	409a      	lsls	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004268:	0a52      	lsrs	r2, r2, #9
 800426a:	fb03 f202 	mul.w	r2, r3, r2
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004278:	661a      	str	r2, [r3, #96]	; 0x60
 800427a:	e031      	b.n	80042e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004280:	2b01      	cmp	r3, #1
 8004282:	d11d      	bne.n	80042c0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004288:	041b      	lsls	r3, r3, #16
 800428a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004292:	0c1b      	lsrs	r3, r3, #16
 8004294:	431a      	orrs	r2, r3
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	3301      	adds	r3, #1
 80042a0:	029a      	lsls	r2, r3, #10
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	661a      	str	r2, [r3, #96]	; 0x60
 80042be:	e00f      	b.n	80042e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a58      	ldr	r2, [pc, #352]	; (8004428 <HAL_SD_GetCardCSD+0x344>)
 80042c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e09d      	b.n	800441c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042e4:	0b9b      	lsrs	r3, r3, #14
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042f6:	09db      	lsrs	r3, r3, #7
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004308:	b2db      	uxtb	r3, r3
 800430a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800430e:	b2da      	uxtb	r2, r3
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004318:	0fdb      	lsrs	r3, r3, #31
 800431a:	b2da      	uxtb	r2, r3
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	0f5b      	lsrs	r3, r3, #29
 8004326:	b2db      	uxtb	r3, r3
 8004328:	f003 0303 	and.w	r3, r3, #3
 800432c:	b2da      	uxtb	r2, r3
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004336:	0e9b      	lsrs	r3, r3, #26
 8004338:	b2db      	uxtb	r3, r3
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	b2da      	uxtb	r2, r3
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	0d9b      	lsrs	r3, r3, #22
 800434a:	b2db      	uxtb	r3, r3
 800434c:	f003 030f 	and.w	r3, r3, #15
 8004350:	b2da      	uxtb	r2, r3
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435a:	0d5b      	lsrs	r3, r3, #21
 800435c:	b2db      	uxtb	r3, r3
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	b2da      	uxtb	r2, r3
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004376:	0c1b      	lsrs	r3, r3, #16
 8004378:	b2db      	uxtb	r3, r3
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	b2da      	uxtb	r2, r3
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	0bdb      	lsrs	r3, r3, #15
 800438c:	b2db      	uxtb	r3, r3
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	b2da      	uxtb	r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439e:	0b9b      	lsrs	r3, r3, #14
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	0b5b      	lsrs	r3, r3, #13
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c6:	0b1b      	lsrs	r3, r3, #12
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043da:	0a9b      	lsrs	r3, r3, #10
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ee:	0a1b      	lsrs	r3, r3, #8
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	085b      	lsrs	r3, r3, #1
 8004404:	b2db      	uxtb	r3, r3
 8004406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800440a:	b2da      	uxtb	r2, r3
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	004005ff 	.word	0x004005ff

0800442c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004490:	f107 030c 	add.w	r3, r7, #12
 8004494:	4619      	mov	r1, r3
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f970 	bl	800477c <SD_SendStatus>
 800449c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	0a5b      	lsrs	r3, r3, #9
 80044b4:	f003 030f 	and.w	r3, r3, #15
 80044b8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80044ba:	693b      	ldr	r3, [r7, #16]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3718      	adds	r7, #24
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80044c4:	b5b0      	push	{r4, r5, r7, lr}
 80044c6:	b094      	sub	sp, #80	; 0x50
 80044c8:	af04      	add	r7, sp, #16
 80044ca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80044cc:	2301      	movs	r3, #1
 80044ce:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 fdfd 	bl	80050d4 <SDMMC_GetPowerState>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d102      	bne.n	80044e6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80044e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80044e4:	e0b8      	b.n	8004658 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d02f      	beq.n	800454e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 ffe3 	bl	80054be <SDMMC_CmdSendCID>
 80044f8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80044fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <SD_InitCard+0x40>
    {
      return errorstate;
 8004500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004502:	e0a9      	b.n	8004658 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2100      	movs	r1, #0
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fe27 	bl	800515e <SDMMC_GetResponse>
 8004510:	4602      	mov	r2, r0
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2104      	movs	r1, #4
 800451c:	4618      	mov	r0, r3
 800451e:	f000 fe1e 	bl	800515e <SDMMC_GetResponse>
 8004522:	4602      	mov	r2, r0
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2108      	movs	r1, #8
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fe15 	bl	800515e <SDMMC_GetResponse>
 8004534:	4602      	mov	r2, r0
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	210c      	movs	r1, #12
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fe0c 	bl	800515e <SDMMC_GetResponse>
 8004546:	4602      	mov	r2, r0
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004552:	2b03      	cmp	r3, #3
 8004554:	d00d      	beq.n	8004572 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f107 020e 	add.w	r2, r7, #14
 800455e:	4611      	mov	r1, r2
 8004560:	4618      	mov	r0, r3
 8004562:	f000 ffe9 	bl	8005538 <SDMMC_CmdSetRelAdd>
 8004566:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <SD_InitCard+0xae>
    {
      return errorstate;
 800456e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004570:	e072      	b.n	8004658 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004576:	2b03      	cmp	r3, #3
 8004578:	d036      	beq.n	80045e8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800457a:	89fb      	ldrh	r3, [r7, #14]
 800457c:	461a      	mov	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458a:	041b      	lsls	r3, r3, #16
 800458c:	4619      	mov	r1, r3
 800458e:	4610      	mov	r0, r2
 8004590:	f000 ffb3 	bl	80054fa <SDMMC_CmdSendCSD>
 8004594:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800459c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800459e:	e05b      	b.n	8004658 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2100      	movs	r1, #0
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fdd9 	bl	800515e <SDMMC_GetResponse>
 80045ac:	4602      	mov	r2, r0
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2104      	movs	r1, #4
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 fdd0 	bl	800515e <SDMMC_GetResponse>
 80045be:	4602      	mov	r2, r0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2108      	movs	r1, #8
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fdc7 	bl	800515e <SDMMC_GetResponse>
 80045d0:	4602      	mov	r2, r0
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	210c      	movs	r1, #12
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fdbe 	bl	800515e <SDMMC_GetResponse>
 80045e2:	4602      	mov	r2, r0
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2104      	movs	r1, #4
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fdb5 	bl	800515e <SDMMC_GetResponse>
 80045f4:	4603      	mov	r3, r0
 80045f6:	0d1a      	lsrs	r2, r3, #20
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80045fc:	f107 0310 	add.w	r3, r7, #16
 8004600:	4619      	mov	r1, r3
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7ff fd6e 	bl	80040e4 <HAL_SD_GetCardCSD>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800460e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004612:	e021      	b.n	8004658 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6819      	ldr	r1, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461c:	041b      	lsls	r3, r3, #16
 800461e:	2200      	movs	r2, #0
 8004620:	461c      	mov	r4, r3
 8004622:	4615      	mov	r5, r2
 8004624:	4622      	mov	r2, r4
 8004626:	462b      	mov	r3, r5
 8004628:	4608      	mov	r0, r1
 800462a:	f000 fea3 	bl	8005374 <SDMMC_CmdSelDesel>
 800462e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <SD_InitCard+0x176>
  {
    return errorstate;
 8004636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004638:	e00e      	b.n	8004658 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681d      	ldr	r5, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	466c      	mov	r4, sp
 8004642:	f103 0210 	add.w	r2, r3, #16
 8004646:	ca07      	ldmia	r2, {r0, r1, r2}
 8004648:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800464c:	3304      	adds	r3, #4
 800464e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004650:	4628      	mov	r0, r5
 8004652:	f000 fce5 	bl	8005020 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3740      	adds	r7, #64	; 0x40
 800465c:	46bd      	mov	sp, r7
 800465e:	bdb0      	pop	{r4, r5, r7, pc}

08004660 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	2300      	movs	r3, #0
 8004672:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f000 fe9e 	bl	80053ba <SDMMC_CmdGoIdleState>
 800467e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	e072      	b.n	8004770 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f000 feb1 	bl	80053f6 <SDMMC_CmdOperCond>
 8004694:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00d      	beq.n	80046b8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fe87 	bl	80053ba <SDMMC_CmdGoIdleState>
 80046ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d004      	beq.n	80046be <SD_PowerON+0x5e>
    {
      return errorstate;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	e05b      	b.n	8004770 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d137      	bne.n	8004736 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2100      	movs	r1, #0
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 feb1 	bl	8005434 <SDMMC_CmdAppCommand>
 80046d2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d02d      	beq.n	8004736 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80046de:	e047      	b.n	8004770 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2100      	movs	r1, #0
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fea4 	bl	8005434 <SDMMC_CmdAppCommand>
 80046ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <SD_PowerON+0x98>
    {
      return errorstate;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	e03b      	b.n	8004770 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	491e      	ldr	r1, [pc, #120]	; (8004778 <SD_PowerON+0x118>)
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 feba 	bl	8005478 <SDMMC_CmdAppOperCommand>
 8004704:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800470c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004710:	e02e      	b.n	8004770 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2100      	movs	r1, #0
 8004718:	4618      	mov	r0, r3
 800471a:	f000 fd20 	bl	800515e <SDMMC_GetResponse>
 800471e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	0fdb      	lsrs	r3, r3, #31
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <SD_PowerON+0xcc>
 8004728:	2301      	movs	r3, #1
 800472a:	e000      	b.n	800472e <SD_PowerON+0xce>
 800472c:	2300      	movs	r3, #0
 800472e:	613b      	str	r3, [r7, #16]

    count++;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	3301      	adds	r3, #1
 8004734:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800473c:	4293      	cmp	r3, r2
 800473e:	d802      	bhi.n	8004746 <SD_PowerON+0xe6>
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0cc      	beq.n	80046e0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800474c:	4293      	cmp	r3, r2
 800474e:	d902      	bls.n	8004756 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004750:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004754:	e00c      	b.n	8004770 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	645a      	str	r2, [r3, #68]	; 0x44
 8004766:	e002      	b.n	800476e <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	c1100000 	.word	0xc1100000

0800477c <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d102      	bne.n	8004792 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800478c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004790:	e018      	b.n	80047c4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479a:	041b      	lsls	r3, r3, #16
 800479c:	4619      	mov	r1, r3
 800479e:	4610      	mov	r0, r2
 80047a0:	f000 feeb 	bl	800557a <SDMMC_CmdSendStatus>
 80047a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	e009      	b.n	80047c4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2100      	movs	r1, #0
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fcd1 	bl	800515e <SDMMC_GetResponse>
 80047bc:	4602      	mov	r2, r0
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e095      	b.n	800490a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d108      	bne.n	80047f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047ee:	d009      	beq.n	8004804 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	61da      	str	r2, [r3, #28]
 80047f6:	e005      	b.n	8004804 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d106      	bne.n	8004824 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fc fd5a 	bl	80012d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800483a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004844:	d902      	bls.n	800484c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	e002      	b.n	8004852 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800484c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004850:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800485a:	d007      	beq.n	800486c <HAL_SPI_Init+0xa0>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004864:	d002      	beq.n	800486c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	431a      	orrs	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048a4:	431a      	orrs	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ae:	ea42 0103 	orr.w	r1, r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	0c1b      	lsrs	r3, r3, #16
 80048c8:	f003 0204 	and.w	r2, r3, #4
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80048e8:	ea42 0103 	orr.w	r1, r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b08a      	sub	sp, #40	; 0x28
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	607a      	str	r2, [r7, #4]
 800491e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004920:	2301      	movs	r3, #1
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_SPI_TransmitReceive+0x26>
 8004934:	2302      	movs	r3, #2
 8004936:	e20a      	b.n	8004d4e <HAL_SPI_TransmitReceive+0x43c>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004940:	f7fc fdfa 	bl	8001538 <HAL_GetTick>
 8004944:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800494c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004954:	887b      	ldrh	r3, [r7, #2]
 8004956:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004958:	887b      	ldrh	r3, [r7, #2]
 800495a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800495c:	7efb      	ldrb	r3, [r7, #27]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d00e      	beq.n	8004980 <HAL_SPI_TransmitReceive+0x6e>
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004968:	d106      	bne.n	8004978 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d102      	bne.n	8004978 <HAL_SPI_TransmitReceive+0x66>
 8004972:	7efb      	ldrb	r3, [r7, #27]
 8004974:	2b04      	cmp	r3, #4
 8004976:	d003      	beq.n	8004980 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004978:	2302      	movs	r3, #2
 800497a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800497e:	e1e0      	b.n	8004d42 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d005      	beq.n	8004992 <HAL_SPI_TransmitReceive+0x80>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <HAL_SPI_TransmitReceive+0x80>
 800498c:	887b      	ldrh	r3, [r7, #2]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d103      	bne.n	800499a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004998:	e1d3      	b.n	8004d42 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d003      	beq.n	80049ae <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2205      	movs	r2, #5
 80049aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	887a      	ldrh	r2, [r7, #2]
 80049be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	887a      	ldrh	r2, [r7, #2]
 80049c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	887a      	ldrh	r2, [r7, #2]
 80049d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	887a      	ldrh	r2, [r7, #2]
 80049da:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049f0:	d802      	bhi.n	80049f8 <HAL_SPI_TransmitReceive+0xe6>
 80049f2:	8a3b      	ldrh	r3, [r7, #16]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d908      	bls.n	8004a0a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a06:	605a      	str	r2, [r3, #4]
 8004a08:	e007      	b.n	8004a1a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a18:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a24:	2b40      	cmp	r3, #64	; 0x40
 8004a26:	d007      	beq.n	8004a38 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a40:	f240 8081 	bls.w	8004b46 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <HAL_SPI_TransmitReceive+0x140>
 8004a4c:	8a7b      	ldrh	r3, [r7, #18]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d16d      	bne.n	8004b2e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	881a      	ldrh	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a62:	1c9a      	adds	r2, r3, #2
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a76:	e05a      	b.n	8004b2e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d11b      	bne.n	8004abe <HAL_SPI_TransmitReceive+0x1ac>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d016      	beq.n	8004abe <HAL_SPI_TransmitReceive+0x1ac>
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d113      	bne.n	8004abe <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	881a      	ldrh	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	1c9a      	adds	r2, r3, #2
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d11c      	bne.n	8004b06 <HAL_SPI_TransmitReceive+0x1f4>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d016      	beq.n	8004b06 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68da      	ldr	r2, [r3, #12]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	b292      	uxth	r2, r2
 8004ae4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	1c9a      	adds	r2, r3, #2
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b02:	2301      	movs	r3, #1
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b06:	f7fc fd17 	bl	8001538 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d80b      	bhi.n	8004b2e <HAL_SPI_TransmitReceive+0x21c>
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1c:	d007      	beq.n	8004b2e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004b2c:	e109      	b.n	8004d42 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d19f      	bne.n	8004a78 <HAL_SPI_TransmitReceive+0x166>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d199      	bne.n	8004a78 <HAL_SPI_TransmitReceive+0x166>
 8004b44:	e0e3      	b.n	8004d0e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_SPI_TransmitReceive+0x244>
 8004b4e:	8a7b      	ldrh	r3, [r7, #18]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	f040 80cf 	bne.w	8004cf4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d912      	bls.n	8004b86 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b64:	881a      	ldrh	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	1c9a      	adds	r2, r3, #2
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b02      	subs	r3, #2
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b84:	e0b6      	b.n	8004cf4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	330c      	adds	r3, #12
 8004b90:	7812      	ldrb	r2, [r2, #0]
 8004b92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bac:	e0a2      	b.n	8004cf4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d134      	bne.n	8004c26 <HAL_SPI_TransmitReceive+0x314>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d02f      	beq.n	8004c26 <HAL_SPI_TransmitReceive+0x314>
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d12c      	bne.n	8004c26 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d912      	bls.n	8004bfc <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bda:	881a      	ldrh	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be6:	1c9a      	adds	r2, r3, #2
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b02      	subs	r3, #2
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bfa:	e012      	b.n	8004c22 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	330c      	adds	r3, #12
 8004c06:	7812      	ldrb	r2, [r2, #0]
 8004c08:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d148      	bne.n	8004cc6 <HAL_SPI_TransmitReceive+0x3b4>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d042      	beq.n	8004cc6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d923      	bls.n	8004c94 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	b292      	uxth	r2, r2
 8004c58:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	1c9a      	adds	r2, r3, #2
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b02      	subs	r3, #2
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d81f      	bhi.n	8004cc2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c90:	605a      	str	r2, [r3, #4]
 8004c92:	e016      	b.n	8004cc2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f103 020c 	add.w	r2, r3, #12
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	7812      	ldrb	r2, [r2, #0]
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cc6:	f7fc fc37 	bl	8001538 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d803      	bhi.n	8004cde <HAL_SPI_TransmitReceive+0x3cc>
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cdc:	d102      	bne.n	8004ce4 <HAL_SPI_TransmitReceive+0x3d2>
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d107      	bne.n	8004cf4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004cf2:	e026      	b.n	8004d42 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f47f af57 	bne.w	8004bae <HAL_SPI_TransmitReceive+0x29c>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f47f af50 	bne.w	8004bae <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d0e:	69fa      	ldr	r2, [r7, #28]
 8004d10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 f93e 	bl	8004f94 <SPI_EndRxTxTransaction>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d005      	beq.n	8004d2a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2220      	movs	r2, #32
 8004d28:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d38:	e003      	b.n	8004d42 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3728      	adds	r7, #40	; 0x28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	603b      	str	r3, [r7, #0]
 8004d64:	4613      	mov	r3, r2
 8004d66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d68:	f7fc fbe6 	bl	8001538 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	4413      	add	r3, r2
 8004d76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d78:	f7fc fbde 	bl	8001538 <HAL_GetTick>
 8004d7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d7e:	4b39      	ldr	r3, [pc, #228]	; (8004e64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	015b      	lsls	r3, r3, #5
 8004d84:	0d1b      	lsrs	r3, r3, #20
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	fb02 f303 	mul.w	r3, r2, r3
 8004d8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d8e:	e054      	b.n	8004e3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d96:	d050      	beq.n	8004e3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d98:	f7fc fbce 	bl	8001538 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	69fa      	ldr	r2, [r7, #28]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d902      	bls.n	8004dae <SPI_WaitFlagStateUntilTimeout+0x56>
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d13d      	bne.n	8004e2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004dbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dc6:	d111      	bne.n	8004dec <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd0:	d004      	beq.n	8004ddc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dda:	d107      	bne.n	8004dec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df4:	d10f      	bne.n	8004e16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e017      	b.n	8004e5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	3b01      	subs	r3, #1
 8004e38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	4013      	ands	r3, r2
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	bf0c      	ite	eq
 8004e4a:	2301      	moveq	r3, #1
 8004e4c:	2300      	movne	r3, #0
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	461a      	mov	r2, r3
 8004e52:	79fb      	ldrb	r3, [r7, #7]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d19b      	bne.n	8004d90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3720      	adds	r7, #32
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20000004 	.word	0x20000004

08004e68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08a      	sub	sp, #40	; 0x28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004e76:	2300      	movs	r3, #0
 8004e78:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004e7a:	f7fc fb5d 	bl	8001538 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e82:	1a9b      	subs	r3, r3, r2
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	4413      	add	r3, r2
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004e8a:	f7fc fb55 	bl	8001538 <HAL_GetTick>
 8004e8e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	330c      	adds	r3, #12
 8004e96:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e98:	4b3d      	ldr	r3, [pc, #244]	; (8004f90 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	00da      	lsls	r2, r3, #3
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	0d1b      	lsrs	r3, r3, #20
 8004ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eaa:	fb02 f303 	mul.w	r3, r2, r3
 8004eae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004eb0:	e060      	b.n	8004f74 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004eb8:	d107      	bne.n	8004eca <SPI_WaitFifoStateUntilTimeout+0x62>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d104      	bne.n	8004eca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ec8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed0:	d050      	beq.n	8004f74 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ed2:	f7fc fb31 	bl	8001538 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d902      	bls.n	8004ee8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d13d      	bne.n	8004f64 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ef6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f00:	d111      	bne.n	8004f26 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f0a:	d004      	beq.n	8004f16 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f14:	d107      	bne.n	8004f26 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f2e:	d10f      	bne.n	8004f50 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e010      	b.n	8004f86 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d196      	bne.n	8004eb2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3728      	adds	r7, #40	; 0x28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20000004 	.word	0x20000004

08004f94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af02      	add	r7, sp, #8
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f7ff ff5b 	bl	8004e68 <SPI_WaitFifoStateUntilTimeout>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d007      	beq.n	8004fc8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fbc:	f043 0220 	orr.w	r2, r3, #32
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e027      	b.n	8005018 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	2180      	movs	r1, #128	; 0x80
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f7ff fec0 	bl	8004d58 <SPI_WaitFlagStateUntilTimeout>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d007      	beq.n	8004fee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe2:	f043 0220 	orr.w	r2, r3, #32
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e014      	b.n	8005018 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f7ff ff34 	bl	8004e68 <SPI_WaitFifoStateUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d007      	beq.n	8005016 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800500a:	f043 0220 	orr.w	r2, r3, #32
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e000      	b.n	8005018 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005020:	b084      	sub	sp, #16
 8005022:	b480      	push	{r7}
 8005024:	b085      	sub	sp, #20
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	f107 001c 	add.w	r0, r7, #28
 800502e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005032:	2300      	movs	r3, #0
 8005034:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800503e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8005042:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005044:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005046:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800504a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800504e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800505e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	b004      	add	sp, #16
 8005078:	4770      	bx	lr

0800507a <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005088:	4618      	mov	r0, r3
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2203      	movs	r2, #3
 80050c2:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80050c4:	2002      	movs	r0, #2
 80050c6:	f7fc fa43 	bl	8001550 <HAL_Delay>

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0303 	and.w	r3, r3, #3
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800510e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005114:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800511a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	4313      	orrs	r3, r2
 8005120:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800512a:	f023 030f 	bic.w	r3, r3, #15
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	431a      	orrs	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	b2db      	uxtb	r3, r3
}
 8005152:	4618      	mov	r0, r3
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800515e:	b480      	push	{r7}
 8005160:	b085      	sub	sp, #20
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
 8005166:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3314      	adds	r3, #20
 800516c:	461a      	mov	r2, r3
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	4413      	add	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800518e:	2300      	movs	r3, #0
 8005190:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80051aa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80051b0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80051b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	431a      	orrs	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0

}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b088      	sub	sp, #32
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80051ea:	2310      	movs	r3, #16
 80051ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80051ee:	2340      	movs	r3, #64	; 0x40
 80051f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051fc:	f107 0308 	add.w	r3, r7, #8
 8005200:	4619      	mov	r1, r3
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7ff ff74 	bl	80050f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005208:	f241 3288 	movw	r2, #5000	; 0x1388
 800520c:	2110      	movs	r1, #16
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f9d6 	bl	80055c0 <SDMMC_GetCmdResp1>
 8005214:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005216:	69fb      	ldr	r3, [r7, #28]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3720      	adds	r7, #32
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800522e:	2311      	movs	r3, #17
 8005230:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005232:	2340      	movs	r3, #64	; 0x40
 8005234:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005236:	2300      	movs	r3, #0
 8005238:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800523a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800523e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005240:	f107 0308 	add.w	r3, r7, #8
 8005244:	4619      	mov	r1, r3
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7ff ff52 	bl	80050f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800524c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005250:	2111      	movs	r1, #17
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f9b4 	bl	80055c0 <SDMMC_GetCmdResp1>
 8005258:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800525a:	69fb      	ldr	r3, [r7, #28]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3720      	adds	r7, #32
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005272:	2312      	movs	r3, #18
 8005274:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005276:	2340      	movs	r3, #64	; 0x40
 8005278:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800527e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005282:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005284:	f107 0308 	add.w	r3, r7, #8
 8005288:	4619      	mov	r1, r3
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7ff ff30 	bl	80050f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005290:	f241 3288 	movw	r2, #5000	; 0x1388
 8005294:	2112      	movs	r1, #18
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f992 	bl	80055c0 <SDMMC_GetCmdResp1>
 800529c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800529e:	69fb      	ldr	r3, [r7, #28]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3720      	adds	r7, #32
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80052b6:	2318      	movs	r3, #24
 80052b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80052ba:	2340      	movs	r3, #64	; 0x40
 80052bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80052be:	2300      	movs	r3, #0
 80052c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80052c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80052c8:	f107 0308 	add.w	r3, r7, #8
 80052cc:	4619      	mov	r1, r3
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7ff ff0e 	bl	80050f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80052d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d8:	2118      	movs	r1, #24
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f970 	bl	80055c0 <SDMMC_GetCmdResp1>
 80052e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052e2:	69fb      	ldr	r3, [r7, #28]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3720      	adds	r7, #32
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80052fa:	2319      	movs	r3, #25
 80052fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80052fe:	2340      	movs	r3, #64	; 0x40
 8005300:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005302:	2300      	movs	r3, #0
 8005304:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800530a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800530c:	f107 0308 	add.w	r3, r7, #8
 8005310:	4619      	mov	r1, r3
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7ff feec 	bl	80050f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005318:	f241 3288 	movw	r2, #5000	; 0x1388
 800531c:	2119      	movs	r1, #25
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f94e 	bl	80055c0 <SDMMC_GetCmdResp1>
 8005324:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005326:	69fb      	ldr	r3, [r7, #28]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3720      	adds	r7, #32
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800533c:	230c      	movs	r3, #12
 800533e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005340:	2340      	movs	r3, #64	; 0x40
 8005342:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800534c:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800534e:	f107 0308 	add.w	r3, r7, #8
 8005352:	4619      	mov	r1, r3
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff fecb 	bl	80050f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800535a:	4a05      	ldr	r2, [pc, #20]	; (8005370 <SDMMC_CmdStopTransfer+0x40>)
 800535c:	210c      	movs	r1, #12
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f92e 	bl	80055c0 <SDMMC_GetCmdResp1>
 8005364:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8005366:	69fb      	ldr	r3, [r7, #28]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3720      	adds	r7, #32
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	05f5e100 	.word	0x05f5e100

08005374 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08a      	sub	sp, #40	; 0x28
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005384:	2307      	movs	r3, #7
 8005386:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005388:	2340      	movs	r3, #64	; 0x40
 800538a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800538c:	2300      	movs	r3, #0
 800538e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005394:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005396:	f107 0310 	add.w	r3, r7, #16
 800539a:	4619      	mov	r1, r3
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f7ff fea7 	bl	80050f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80053a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a6:	2107      	movs	r1, #7
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 f909 	bl	80055c0 <SDMMC_GetCmdResp1>
 80053ae:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3728      	adds	r7, #40	; 0x28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b088      	sub	sp, #32
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80053ca:	2300      	movs	r3, #0
 80053cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80053ce:	2300      	movs	r3, #0
 80053d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80053d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80053d8:	f107 0308 	add.w	r3, r7, #8
 80053dc:	4619      	mov	r1, r3
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7ff fe86 	bl	80050f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fb23 	bl	8005a30 <SDMMC_GetCmdError>
 80053ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053ec:	69fb      	ldr	r3, [r7, #28]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3720      	adds	r7, #32
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b088      	sub	sp, #32
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80053fe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005402:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005404:	2308      	movs	r3, #8
 8005406:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005408:	2340      	movs	r3, #64	; 0x40
 800540a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800540c:	2300      	movs	r3, #0
 800540e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005414:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005416:	f107 0308 	add.w	r3, r7, #8
 800541a:	4619      	mov	r1, r3
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff fe67 	bl	80050f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 fab6 	bl	8005994 <SDMMC_GetCmdResp7>
 8005428:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800542a:	69fb      	ldr	r3, [r7, #28]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3720      	adds	r7, #32
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005442:	2337      	movs	r3, #55	; 0x37
 8005444:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005446:	2340      	movs	r3, #64	; 0x40
 8005448:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800544e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005452:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005454:	f107 0308 	add.w	r3, r7, #8
 8005458:	4619      	mov	r1, r3
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7ff fe48 	bl	80050f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005460:	f241 3288 	movw	r2, #5000	; 0x1388
 8005464:	2137      	movs	r1, #55	; 0x37
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f8aa 	bl	80055c0 <SDMMC_GetCmdResp1>
 800546c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800546e:	69fb      	ldr	r3, [r7, #28]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3720      	adds	r7, #32
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b088      	sub	sp, #32
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005488:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800548c:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800548e:	2329      	movs	r3, #41	; 0x29
 8005490:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005492:	2340      	movs	r3, #64	; 0x40
 8005494:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005496:	2300      	movs	r3, #0
 8005498:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800549a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800549e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80054a0:	f107 0308 	add.w	r3, r7, #8
 80054a4:	4619      	mov	r1, r3
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7ff fe22 	bl	80050f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f9bd 	bl	800582c <SDMMC_GetCmdResp3>
 80054b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054b4:	69fb      	ldr	r3, [r7, #28]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3720      	adds	r7, #32
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b088      	sub	sp, #32
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80054ca:	2302      	movs	r3, #2
 80054cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80054ce:	23c0      	movs	r3, #192	; 0xc0
 80054d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80054d2:	2300      	movs	r3, #0
 80054d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80054d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80054dc:	f107 0308 	add.w	r3, r7, #8
 80054e0:	4619      	mov	r1, r3
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7ff fe04 	bl	80050f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f957 	bl	800579c <SDMMC_GetCmdResp2>
 80054ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054f0:	69fb      	ldr	r3, [r7, #28]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3720      	adds	r7, #32
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b088      	sub	sp, #32
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005508:	2309      	movs	r3, #9
 800550a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800550c:	23c0      	movs	r3, #192	; 0xc0
 800550e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005510:	2300      	movs	r3, #0
 8005512:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005518:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800551a:	f107 0308 	add.w	r3, r7, #8
 800551e:	4619      	mov	r1, r3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7ff fde5 	bl	80050f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f938 	bl	800579c <SDMMC_GetCmdResp2>
 800552c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800552e:	69fb      	ldr	r3, [r7, #28]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3720      	adds	r7, #32
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b088      	sub	sp, #32
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005546:	2303      	movs	r3, #3
 8005548:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800554a:	2340      	movs	r3, #64	; 0x40
 800554c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800554e:	2300      	movs	r3, #0
 8005550:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005556:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005558:	f107 0308 	add.w	r3, r7, #8
 800555c:	4619      	mov	r1, r3
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7ff fdc6 	bl	80050f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	2103      	movs	r1, #3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f99d 	bl	80058a8 <SDMMC_GetCmdResp6>
 800556e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005570:	69fb      	ldr	r3, [r7, #28]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b088      	sub	sp, #32
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005588:	230d      	movs	r3, #13
 800558a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800558c:	2340      	movs	r3, #64	; 0x40
 800558e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005598:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800559a:	f107 0308 	add.w	r3, r7, #8
 800559e:	4619      	mov	r1, r3
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7ff fda5 	bl	80050f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80055a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055aa:	210d      	movs	r1, #13
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f807 	bl	80055c0 <SDMMC_GetCmdResp1>
 80055b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055b4:	69fb      	ldr	r3, [r7, #28]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3720      	adds	r7, #32
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b088      	sub	sp, #32
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	460b      	mov	r3, r1
 80055ca:	607a      	str	r2, [r7, #4]
 80055cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80055ce:	4b70      	ldr	r3, [pc, #448]	; (8005790 <SDMMC_GetCmdResp1+0x1d0>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a70      	ldr	r2, [pc, #448]	; (8005794 <SDMMC_GetCmdResp1+0x1d4>)
 80055d4:	fba2 2303 	umull	r2, r3, r2, r3
 80055d8:	0a5a      	lsrs	r2, r3, #9
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	fb02 f303 	mul.w	r3, r2, r3
 80055e0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	1e5a      	subs	r2, r3, #1
 80055e6:	61fa      	str	r2, [r7, #28]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d102      	bne.n	80055f2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80055ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055f0:	e0c9      	b.n	8005786 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f6:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0ef      	beq.n	80055e2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1ea      	bne.n	80055e2 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b00      	cmp	r3, #0
 8005616:	d004      	beq.n	8005622 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2204      	movs	r2, #4
 800561c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800561e:	2304      	movs	r3, #4
 8005620:	e0b1      	b.n	8005786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d004      	beq.n	8005638 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005634:	2301      	movs	r3, #1
 8005636:	e0a6      	b.n	8005786 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	22c5      	movs	r2, #197	; 0xc5
 800563c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f7ff fd80 	bl	8005144 <SDMMC_GetCommandResponse>
 8005644:	4603      	mov	r3, r0
 8005646:	461a      	mov	r2, r3
 8005648:	7afb      	ldrb	r3, [r7, #11]
 800564a:	4293      	cmp	r3, r2
 800564c:	d001      	beq.n	8005652 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800564e:	2301      	movs	r3, #1
 8005650:	e099      	b.n	8005786 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005652:	2100      	movs	r1, #0
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f7ff fd82 	bl	800515e <SDMMC_GetResponse>
 800565a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	4b4e      	ldr	r3, [pc, #312]	; (8005798 <SDMMC_GetCmdResp1+0x1d8>)
 8005660:	4013      	ands	r3, r2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005666:	2300      	movs	r3, #0
 8005668:	e08d      	b.n	8005786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2b00      	cmp	r3, #0
 800566e:	da02      	bge.n	8005676 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005670:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005674:	e087      	b.n	8005786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005680:	2340      	movs	r3, #64	; 0x40
 8005682:	e080      	b.n	8005786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800568e:	2380      	movs	r3, #128	; 0x80
 8005690:	e079      	b.n	8005786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800569c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056a0:	e071      	b.n	8005786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80056ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056b0:	e069      	b.n	8005786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80056bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056c0:	e061      	b.n	8005786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80056cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056d0:	e059      	b.n	8005786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80056dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056e0:	e051      	b.n	8005786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80056ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056f0:	e049      	b.n	8005786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80056fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005700:	e041      	b.n	8005786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800570c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005710:	e039      	b.n	8005786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800571c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005720:	e031      	b.n	8005786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800572c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005730:	e029      	b.n	8005786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d002      	beq.n	8005742 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800573c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005740:	e021      	b.n	8005786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800574c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005750:	e019      	b.n	8005786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800575c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005760:	e011      	b.n	8005786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800576c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005770:	e009      	b.n	8005786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f003 0308 	and.w	r3, r3, #8
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800577c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005780:	e001      	b.n	8005786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005782:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005786:	4618      	mov	r0, r3
 8005788:	3720      	adds	r7, #32
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	20000004 	.word	0x20000004
 8005794:	10624dd3 	.word	0x10624dd3
 8005798:	fdffe008 	.word	0xfdffe008

0800579c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80057a4:	4b1f      	ldr	r3, [pc, #124]	; (8005824 <SDMMC_GetCmdResp2+0x88>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a1f      	ldr	r2, [pc, #124]	; (8005828 <SDMMC_GetCmdResp2+0x8c>)
 80057aa:	fba2 2303 	umull	r2, r3, r2, r3
 80057ae:	0a5b      	lsrs	r3, r3, #9
 80057b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b4:	fb02 f303 	mul.w	r3, r2, r3
 80057b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	1e5a      	subs	r2, r3, #1
 80057be:	60fa      	str	r2, [r7, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d102      	bne.n	80057ca <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057c8:	e026      	b.n	8005818 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0ef      	beq.n	80057ba <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1ea      	bne.n	80057ba <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d004      	beq.n	80057fa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2204      	movs	r2, #4
 80057f4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057f6:	2304      	movs	r3, #4
 80057f8:	e00e      	b.n	8005818 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d004      	beq.n	8005810 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800580c:	2301      	movs	r3, #1
 800580e:	e003      	b.n	8005818 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	22c5      	movs	r2, #197	; 0xc5
 8005814:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	20000004 	.word	0x20000004
 8005828:	10624dd3 	.word	0x10624dd3

0800582c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005834:	4b1a      	ldr	r3, [pc, #104]	; (80058a0 <SDMMC_GetCmdResp3+0x74>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a1a      	ldr	r2, [pc, #104]	; (80058a4 <SDMMC_GetCmdResp3+0x78>)
 800583a:	fba2 2303 	umull	r2, r3, r2, r3
 800583e:	0a5b      	lsrs	r3, r3, #9
 8005840:	f241 3288 	movw	r2, #5000	; 0x1388
 8005844:	fb02 f303 	mul.w	r3, r2, r3
 8005848:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	1e5a      	subs	r2, r3, #1
 800584e:	60fa      	str	r2, [r7, #12]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d102      	bne.n	800585a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005854:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005858:	e01b      	b.n	8005892 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0ef      	beq.n	800584a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1ea      	bne.n	800584a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d004      	beq.n	800588a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2204      	movs	r2, #4
 8005884:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005886:	2304      	movs	r3, #4
 8005888:	e003      	b.n	8005892 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	22c5      	movs	r2, #197	; 0xc5
 800588e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	20000004 	.word	0x20000004
 80058a4:	10624dd3 	.word	0x10624dd3

080058a8 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	460b      	mov	r3, r1
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058b6:	4b35      	ldr	r3, [pc, #212]	; (800598c <SDMMC_GetCmdResp6+0xe4>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a35      	ldr	r2, [pc, #212]	; (8005990 <SDMMC_GetCmdResp6+0xe8>)
 80058bc:	fba2 2303 	umull	r2, r3, r2, r3
 80058c0:	0a5b      	lsrs	r3, r3, #9
 80058c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c6:	fb02 f303 	mul.w	r3, r2, r3
 80058ca:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	1e5a      	subs	r2, r3, #1
 80058d0:	61fa      	str	r2, [r7, #28]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d102      	bne.n	80058dc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058da:	e052      	b.n	8005982 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0ef      	beq.n	80058cc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1ea      	bne.n	80058cc <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058fa:	f003 0304 	and.w	r3, r3, #4
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d004      	beq.n	800590c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2204      	movs	r2, #4
 8005906:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005908:	2304      	movs	r3, #4
 800590a:	e03a      	b.n	8005982 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d004      	beq.n	8005922 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2201      	movs	r2, #1
 800591c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800591e:	2301      	movs	r3, #1
 8005920:	e02f      	b.n	8005982 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f7ff fc0e 	bl	8005144 <SDMMC_GetCommandResponse>
 8005928:	4603      	mov	r3, r0
 800592a:	461a      	mov	r2, r3
 800592c:	7afb      	ldrb	r3, [r7, #11]
 800592e:	4293      	cmp	r3, r2
 8005930:	d001      	beq.n	8005936 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005932:	2301      	movs	r3, #1
 8005934:	e025      	b.n	8005982 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	22c5      	movs	r2, #197	; 0xc5
 800593a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800593c:	2100      	movs	r1, #0
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f7ff fc0d 	bl	800515e <SDMMC_GetResponse>
 8005944:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d106      	bne.n	800595e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	0c1b      	lsrs	r3, r3, #16
 8005954:	b29a      	uxth	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800595a:	2300      	movs	r3, #0
 800595c:	e011      	b.n	8005982 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800596c:	e009      	b.n	8005982 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800597c:	e001      	b.n	8005982 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800597e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005982:	4618      	mov	r0, r3
 8005984:	3720      	adds	r7, #32
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20000004 	.word	0x20000004
 8005990:	10624dd3 	.word	0x10624dd3

08005994 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800599c:	4b22      	ldr	r3, [pc, #136]	; (8005a28 <SDMMC_GetCmdResp7+0x94>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a22      	ldr	r2, [pc, #136]	; (8005a2c <SDMMC_GetCmdResp7+0x98>)
 80059a2:	fba2 2303 	umull	r2, r3, r2, r3
 80059a6:	0a5b      	lsrs	r3, r3, #9
 80059a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ac:	fb02 f303 	mul.w	r3, r2, r3
 80059b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	1e5a      	subs	r2, r3, #1
 80059b6:	60fa      	str	r2, [r7, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d102      	bne.n	80059c2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80059bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80059c0:	e02c      	b.n	8005a1c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0ef      	beq.n	80059b2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1ea      	bne.n	80059b2 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d004      	beq.n	80059f2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2204      	movs	r2, #4
 80059ec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059ee:	2304      	movs	r3, #4
 80059f0:	e014      	b.n	8005a1c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d004      	beq.n	8005a08 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e009      	b.n	8005a1c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2240      	movs	r2, #64	; 0x40
 8005a18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005a1a:	2300      	movs	r3, #0

}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	20000004 	.word	0x20000004
 8005a2c:	10624dd3 	.word	0x10624dd3

08005a30 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a38:	4b11      	ldr	r3, [pc, #68]	; (8005a80 <SDMMC_GetCmdError+0x50>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a11      	ldr	r2, [pc, #68]	; (8005a84 <SDMMC_GetCmdError+0x54>)
 8005a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a42:	0a5b      	lsrs	r3, r3, #9
 8005a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a48:	fb02 f303 	mul.w	r3, r2, r3
 8005a4c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	1e5a      	subs	r2, r3, #1
 8005a52:	60fa      	str	r2, [r7, #12]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d102      	bne.n	8005a5e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a5c:	e009      	b.n	8005a72 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0f1      	beq.n	8005a4e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	22c5      	movs	r2, #197	; 0xc5
 8005a6e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	20000004 	.word	0x20000004
 8005a84:	10624dd3 	.word	0x10624dd3

08005a88 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005a8c:	4904      	ldr	r1, [pc, #16]	; (8005aa0 <MX_FATFS_Init+0x18>)
 8005a8e:	4805      	ldr	r0, [pc, #20]	; (8005aa4 <MX_FATFS_Init+0x1c>)
 8005a90:	f000 f9bc 	bl	8005e0c <FATFS_LinkDriver>
 8005a94:	4603      	mov	r3, r0
 8005a96:	461a      	mov	r2, r3
 8005a98:	4b03      	ldr	r3, [pc, #12]	; (8005aa8 <MX_FATFS_Init+0x20>)
 8005a9a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005a9c:	bf00      	nop
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	2000017c 	.word	0x2000017c
 8005aa4:	08006d68 	.word	0x08006d68
 8005aa8:	20000178 	.word	0x20000178

08005aac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005ab6:	f000 f86b 	bl	8005b90 <BSP_SD_IsDetected>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d001      	beq.n	8005ac4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	e005      	b.n	8005ad0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8005ac4:	4804      	ldr	r0, [pc, #16]	; (8005ad8 <BSP_SD_Init+0x2c>)
 8005ac6:	f7fd fed3 	bl	8003870 <HAL_SD_Init>
 8005aca:	4603      	mov	r3, r0
 8005acc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005ace:	79fb      	ldrb	r3, [r7, #7]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	2000008c 	.word	0x2000008c

08005adc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b088      	sub	sp, #32
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	68f9      	ldr	r1, [r7, #12]
 8005af8:	4806      	ldr	r0, [pc, #24]	; (8005b14 <BSP_SD_ReadBlocks+0x38>)
 8005afa:	f7fd ff8f 	bl	8003a1c <HAL_SD_ReadBlocks>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	2000008c 	.word	0x2000008c

08005b18 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af02      	add	r7, sp, #8
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
 8005b24:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	68f9      	ldr	r1, [r7, #12]
 8005b34:	4806      	ldr	r0, [pc, #24]	; (8005b50 <BSP_SD_WriteBlocks+0x38>)
 8005b36:	f7fe f94f 	bl	8003dd8 <HAL_SD_WriteBlocks>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	2000008c 	.word	0x2000008c

08005b54 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005b58:	4805      	ldr	r0, [pc, #20]	; (8005b70 <BSP_SD_GetCardState+0x1c>)
 8005b5a:	f7fe fc93 	bl	8004484 <HAL_SD_GetCardState>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b04      	cmp	r3, #4
 8005b62:	bf14      	ite	ne
 8005b64:	2301      	movne	r3, #1
 8005b66:	2300      	moveq	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	2000008c 	.word	0x2000008c

08005b74 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8005b7c:	6879      	ldr	r1, [r7, #4]
 8005b7e:	4803      	ldr	r0, [pc, #12]	; (8005b8c <BSP_SD_GetCardInfo+0x18>)
 8005b80:	f7fe fc54 	bl	800442c <HAL_SD_GetCardInfo>
}
 8005b84:	bf00      	nop
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	2000008c 	.word	0x2000008c

08005b90 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005b96:	2301      	movs	r3, #1
 8005b98:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	b2db      	uxtb	r3, r3
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
	...

08005bac <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005bb6:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <SD_CheckStatus+0x38>)
 8005bb8:	2201      	movs	r2, #1
 8005bba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005bbc:	f7ff ffca 	bl	8005b54 <BSP_SD_GetCardState>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d107      	bne.n	8005bd6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005bc6:	4b07      	ldr	r3, [pc, #28]	; (8005be4 <SD_CheckStatus+0x38>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	f023 0301 	bic.w	r3, r3, #1
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	4b04      	ldr	r3, [pc, #16]	; (8005be4 <SD_CheckStatus+0x38>)
 8005bd4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005bd6:	4b03      	ldr	r3, [pc, #12]	; (8005be4 <SD_CheckStatus+0x38>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	b2db      	uxtb	r3, r3
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	2000000d 	.word	0x2000000d

08005be8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005bf2:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <SD_initialize+0x38>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005bf8:	f7ff ff58 	bl	8005aac <BSP_SD_Init>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d107      	bne.n	8005c12 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005c02:	79fb      	ldrb	r3, [r7, #7]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7ff ffd1 	bl	8005bac <SD_CheckStatus>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	4b04      	ldr	r3, [pc, #16]	; (8005c20 <SD_initialize+0x38>)
 8005c10:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005c12:	4b03      	ldr	r3, [pc, #12]	; (8005c20 <SD_initialize+0x38>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	b2db      	uxtb	r3, r3
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	2000000d 	.word	0x2000000d

08005c24 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005c2e:	79fb      	ldrb	r3, [r7, #7]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff ffbb 	bl	8005bac <SD_CheckStatus>
 8005c36:	4603      	mov	r3, r0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	607a      	str	r2, [r7, #4]
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005c54:	f04f 33ff 	mov.w	r3, #4294967295
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	6879      	ldr	r1, [r7, #4]
 8005c5c:	68b8      	ldr	r0, [r7, #8]
 8005c5e:	f7ff ff3d 	bl	8005adc <BSP_SD_ReadBlocks>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d107      	bne.n	8005c78 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005c68:	bf00      	nop
 8005c6a:	f7ff ff73 	bl	8005b54 <BSP_SD_GetCardState>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1fa      	bne.n	8005c6a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b086      	sub	sp, #24
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
 8005c8e:	4603      	mov	r3, r0
 8005c90:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005c96:	f04f 33ff 	mov.w	r3, #4294967295
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	6879      	ldr	r1, [r7, #4]
 8005c9e:	68b8      	ldr	r0, [r7, #8]
 8005ca0:	f7ff ff3a 	bl	8005b18 <BSP_SD_WriteBlocks>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d107      	bne.n	8005cba <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005caa:	bf00      	nop
 8005cac:	f7ff ff52 	bl	8005b54 <BSP_SD_GetCardState>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1fa      	bne.n	8005cac <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08c      	sub	sp, #48	; 0x30
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	4603      	mov	r3, r0
 8005ccc:	603a      	str	r2, [r7, #0]
 8005cce:	71fb      	strb	r3, [r7, #7]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005cda:	4b25      	ldr	r3, [pc, #148]	; (8005d70 <SD_ioctl+0xac>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <SD_ioctl+0x28>
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e03c      	b.n	8005d66 <SD_ioctl+0xa2>

  switch (cmd)
 8005cec:	79bb      	ldrb	r3, [r7, #6]
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d834      	bhi.n	8005d5c <SD_ioctl+0x98>
 8005cf2:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <SD_ioctl+0x34>)
 8005cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf8:	08005d09 	.word	0x08005d09
 8005cfc:	08005d11 	.word	0x08005d11
 8005d00:	08005d29 	.word	0x08005d29
 8005d04:	08005d43 	.word	0x08005d43
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005d0e:	e028      	b.n	8005d62 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005d10:	f107 030c 	add.w	r3, r7, #12
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff ff2d 	bl	8005b74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005d26:	e01c      	b.n	8005d62 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005d28:	f107 030c 	add.w	r3, r7, #12
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7ff ff21 	bl	8005b74 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005d40:	e00f      	b.n	8005d62 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005d42:	f107 030c 	add.w	r3, r7, #12
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7ff ff14 	bl	8005b74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	0a5a      	lsrs	r2, r3, #9
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005d5a:	e002      	b.n	8005d62 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005d5c:	2304      	movs	r3, #4
 8005d5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005d62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3730      	adds	r7, #48	; 0x30
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	2000000d 	.word	0x2000000d

08005d74 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005d82:	2301      	movs	r3, #1
 8005d84:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005d86:	2300      	movs	r3, #0
 8005d88:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005d8a:	4b1f      	ldr	r3, [pc, #124]	; (8005e08 <FATFS_LinkDriverEx+0x94>)
 8005d8c:	7a5b      	ldrb	r3, [r3, #9]
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d131      	bne.n	8005df8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005d94:	4b1c      	ldr	r3, [pc, #112]	; (8005e08 <FATFS_LinkDriverEx+0x94>)
 8005d96:	7a5b      	ldrb	r3, [r3, #9]
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	4b1a      	ldr	r3, [pc, #104]	; (8005e08 <FATFS_LinkDriverEx+0x94>)
 8005d9e:	2100      	movs	r1, #0
 8005da0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005da2:	4b19      	ldr	r3, [pc, #100]	; (8005e08 <FATFS_LinkDriverEx+0x94>)
 8005da4:	7a5b      	ldrb	r3, [r3, #9]
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	4a17      	ldr	r2, [pc, #92]	; (8005e08 <FATFS_LinkDriverEx+0x94>)
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005db2:	4b15      	ldr	r3, [pc, #84]	; (8005e08 <FATFS_LinkDriverEx+0x94>)
 8005db4:	7a5b      	ldrb	r3, [r3, #9]
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	461a      	mov	r2, r3
 8005dba:	4b13      	ldr	r3, [pc, #76]	; (8005e08 <FATFS_LinkDriverEx+0x94>)
 8005dbc:	4413      	add	r3, r2
 8005dbe:	79fa      	ldrb	r2, [r7, #7]
 8005dc0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005dc2:	4b11      	ldr	r3, [pc, #68]	; (8005e08 <FATFS_LinkDriverEx+0x94>)
 8005dc4:	7a5b      	ldrb	r3, [r3, #9]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	b2d1      	uxtb	r1, r2
 8005dcc:	4a0e      	ldr	r2, [pc, #56]	; (8005e08 <FATFS_LinkDriverEx+0x94>)
 8005dce:	7251      	strb	r1, [r2, #9]
 8005dd0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005dd2:	7dbb      	ldrb	r3, [r7, #22]
 8005dd4:	3330      	adds	r3, #48	; 0x30
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	3301      	adds	r3, #1
 8005de0:	223a      	movs	r2, #58	; 0x3a
 8005de2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	3302      	adds	r3, #2
 8005de8:	222f      	movs	r2, #47	; 0x2f
 8005dea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	3303      	adds	r3, #3
 8005df0:	2200      	movs	r2, #0
 8005df2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005df4:	2300      	movs	r3, #0
 8005df6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	20000180 	.word	0x20000180

08005e0c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005e16:	2200      	movs	r2, #0
 8005e18:	6839      	ldr	r1, [r7, #0]
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7ff ffaa 	bl	8005d74 <FATFS_LinkDriverEx>
 8005e20:	4603      	mov	r3, r0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <pow>:
 8005e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2e:	ed2d 8b02 	vpush	{d8}
 8005e32:	eeb0 8a40 	vmov.f32	s16, s0
 8005e36:	eef0 8a60 	vmov.f32	s17, s1
 8005e3a:	ec55 4b11 	vmov	r4, r5, d1
 8005e3e:	f000 f873 	bl	8005f28 <__ieee754_pow>
 8005e42:	4622      	mov	r2, r4
 8005e44:	462b      	mov	r3, r5
 8005e46:	4620      	mov	r0, r4
 8005e48:	4629      	mov	r1, r5
 8005e4a:	ec57 6b10 	vmov	r6, r7, d0
 8005e4e:	f7fa fe15 	bl	8000a7c <__aeabi_dcmpun>
 8005e52:	2800      	cmp	r0, #0
 8005e54:	d13b      	bne.n	8005ece <pow+0xa2>
 8005e56:	ec51 0b18 	vmov	r0, r1, d8
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f7fa fddb 	bl	8000a18 <__aeabi_dcmpeq>
 8005e62:	b1b8      	cbz	r0, 8005e94 <pow+0x68>
 8005e64:	2200      	movs	r2, #0
 8005e66:	2300      	movs	r3, #0
 8005e68:	4620      	mov	r0, r4
 8005e6a:	4629      	mov	r1, r5
 8005e6c:	f7fa fdd4 	bl	8000a18 <__aeabi_dcmpeq>
 8005e70:	2800      	cmp	r0, #0
 8005e72:	d146      	bne.n	8005f02 <pow+0xd6>
 8005e74:	ec45 4b10 	vmov	d0, r4, r5
 8005e78:	f000 f848 	bl	8005f0c <finite>
 8005e7c:	b338      	cbz	r0, 8005ece <pow+0xa2>
 8005e7e:	2200      	movs	r2, #0
 8005e80:	2300      	movs	r3, #0
 8005e82:	4620      	mov	r0, r4
 8005e84:	4629      	mov	r1, r5
 8005e86:	f7fa fdd1 	bl	8000a2c <__aeabi_dcmplt>
 8005e8a:	b300      	cbz	r0, 8005ece <pow+0xa2>
 8005e8c:	f000 ff10 	bl	8006cb0 <__errno>
 8005e90:	2322      	movs	r3, #34	; 0x22
 8005e92:	e01b      	b.n	8005ecc <pow+0xa0>
 8005e94:	ec47 6b10 	vmov	d0, r6, r7
 8005e98:	f000 f838 	bl	8005f0c <finite>
 8005e9c:	b9e0      	cbnz	r0, 8005ed8 <pow+0xac>
 8005e9e:	eeb0 0a48 	vmov.f32	s0, s16
 8005ea2:	eef0 0a68 	vmov.f32	s1, s17
 8005ea6:	f000 f831 	bl	8005f0c <finite>
 8005eaa:	b1a8      	cbz	r0, 8005ed8 <pow+0xac>
 8005eac:	ec45 4b10 	vmov	d0, r4, r5
 8005eb0:	f000 f82c 	bl	8005f0c <finite>
 8005eb4:	b180      	cbz	r0, 8005ed8 <pow+0xac>
 8005eb6:	4632      	mov	r2, r6
 8005eb8:	463b      	mov	r3, r7
 8005eba:	4630      	mov	r0, r6
 8005ebc:	4639      	mov	r1, r7
 8005ebe:	f7fa fddd 	bl	8000a7c <__aeabi_dcmpun>
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	d0e2      	beq.n	8005e8c <pow+0x60>
 8005ec6:	f000 fef3 	bl	8006cb0 <__errno>
 8005eca:	2321      	movs	r3, #33	; 0x21
 8005ecc:	6003      	str	r3, [r0, #0]
 8005ece:	ecbd 8b02 	vpop	{d8}
 8005ed2:	ec47 6b10 	vmov	d0, r6, r7
 8005ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2300      	movs	r3, #0
 8005edc:	4630      	mov	r0, r6
 8005ede:	4639      	mov	r1, r7
 8005ee0:	f7fa fd9a 	bl	8000a18 <__aeabi_dcmpeq>
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d0f2      	beq.n	8005ece <pow+0xa2>
 8005ee8:	eeb0 0a48 	vmov.f32	s0, s16
 8005eec:	eef0 0a68 	vmov.f32	s1, s17
 8005ef0:	f000 f80c 	bl	8005f0c <finite>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	d0ea      	beq.n	8005ece <pow+0xa2>
 8005ef8:	ec45 4b10 	vmov	d0, r4, r5
 8005efc:	f000 f806 	bl	8005f0c <finite>
 8005f00:	e7c3      	b.n	8005e8a <pow+0x5e>
 8005f02:	4f01      	ldr	r7, [pc, #4]	; (8005f08 <pow+0xdc>)
 8005f04:	2600      	movs	r6, #0
 8005f06:	e7e2      	b.n	8005ece <pow+0xa2>
 8005f08:	3ff00000 	.word	0x3ff00000

08005f0c <finite>:
 8005f0c:	b082      	sub	sp, #8
 8005f0e:	ed8d 0b00 	vstr	d0, [sp]
 8005f12:	9801      	ldr	r0, [sp, #4]
 8005f14:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005f18:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005f1c:	0fc0      	lsrs	r0, r0, #31
 8005f1e:	b002      	add	sp, #8
 8005f20:	4770      	bx	lr
 8005f22:	0000      	movs	r0, r0
 8005f24:	0000      	movs	r0, r0
	...

08005f28 <__ieee754_pow>:
 8005f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f2c:	ed2d 8b06 	vpush	{d8-d10}
 8005f30:	b089      	sub	sp, #36	; 0x24
 8005f32:	ed8d 1b00 	vstr	d1, [sp]
 8005f36:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005f3a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005f3e:	ea58 0102 	orrs.w	r1, r8, r2
 8005f42:	ec57 6b10 	vmov	r6, r7, d0
 8005f46:	d115      	bne.n	8005f74 <__ieee754_pow+0x4c>
 8005f48:	19b3      	adds	r3, r6, r6
 8005f4a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005f4e:	4152      	adcs	r2, r2
 8005f50:	4299      	cmp	r1, r3
 8005f52:	4b89      	ldr	r3, [pc, #548]	; (8006178 <__ieee754_pow+0x250>)
 8005f54:	4193      	sbcs	r3, r2
 8005f56:	f080 84d1 	bcs.w	80068fc <__ieee754_pow+0x9d4>
 8005f5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f5e:	4630      	mov	r0, r6
 8005f60:	4639      	mov	r1, r7
 8005f62:	f7fa f93b 	bl	80001dc <__adddf3>
 8005f66:	ec41 0b10 	vmov	d0, r0, r1
 8005f6a:	b009      	add	sp, #36	; 0x24
 8005f6c:	ecbd 8b06 	vpop	{d8-d10}
 8005f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f74:	4b81      	ldr	r3, [pc, #516]	; (800617c <__ieee754_pow+0x254>)
 8005f76:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005f7a:	429c      	cmp	r4, r3
 8005f7c:	ee10 aa10 	vmov	sl, s0
 8005f80:	463d      	mov	r5, r7
 8005f82:	dc06      	bgt.n	8005f92 <__ieee754_pow+0x6a>
 8005f84:	d101      	bne.n	8005f8a <__ieee754_pow+0x62>
 8005f86:	2e00      	cmp	r6, #0
 8005f88:	d1e7      	bne.n	8005f5a <__ieee754_pow+0x32>
 8005f8a:	4598      	cmp	r8, r3
 8005f8c:	dc01      	bgt.n	8005f92 <__ieee754_pow+0x6a>
 8005f8e:	d10f      	bne.n	8005fb0 <__ieee754_pow+0x88>
 8005f90:	b172      	cbz	r2, 8005fb0 <__ieee754_pow+0x88>
 8005f92:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005f96:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005f9a:	ea55 050a 	orrs.w	r5, r5, sl
 8005f9e:	d1dc      	bne.n	8005f5a <__ieee754_pow+0x32>
 8005fa0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005fa4:	18db      	adds	r3, r3, r3
 8005fa6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005faa:	4152      	adcs	r2, r2
 8005fac:	429d      	cmp	r5, r3
 8005fae:	e7d0      	b.n	8005f52 <__ieee754_pow+0x2a>
 8005fb0:	2d00      	cmp	r5, #0
 8005fb2:	da3b      	bge.n	800602c <__ieee754_pow+0x104>
 8005fb4:	4b72      	ldr	r3, [pc, #456]	; (8006180 <__ieee754_pow+0x258>)
 8005fb6:	4598      	cmp	r8, r3
 8005fb8:	dc51      	bgt.n	800605e <__ieee754_pow+0x136>
 8005fba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005fbe:	4598      	cmp	r8, r3
 8005fc0:	f340 84ab 	ble.w	800691a <__ieee754_pow+0x9f2>
 8005fc4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005fc8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005fcc:	2b14      	cmp	r3, #20
 8005fce:	dd0f      	ble.n	8005ff0 <__ieee754_pow+0xc8>
 8005fd0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005fd4:	fa22 f103 	lsr.w	r1, r2, r3
 8005fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	f040 849c 	bne.w	800691a <__ieee754_pow+0x9f2>
 8005fe2:	f001 0101 	and.w	r1, r1, #1
 8005fe6:	f1c1 0302 	rsb	r3, r1, #2
 8005fea:	9304      	str	r3, [sp, #16]
 8005fec:	b182      	cbz	r2, 8006010 <__ieee754_pow+0xe8>
 8005fee:	e05f      	b.n	80060b0 <__ieee754_pow+0x188>
 8005ff0:	2a00      	cmp	r2, #0
 8005ff2:	d15b      	bne.n	80060ac <__ieee754_pow+0x184>
 8005ff4:	f1c3 0314 	rsb	r3, r3, #20
 8005ff8:	fa48 f103 	asr.w	r1, r8, r3
 8005ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8006000:	4543      	cmp	r3, r8
 8006002:	f040 8487 	bne.w	8006914 <__ieee754_pow+0x9ec>
 8006006:	f001 0101 	and.w	r1, r1, #1
 800600a:	f1c1 0302 	rsb	r3, r1, #2
 800600e:	9304      	str	r3, [sp, #16]
 8006010:	4b5c      	ldr	r3, [pc, #368]	; (8006184 <__ieee754_pow+0x25c>)
 8006012:	4598      	cmp	r8, r3
 8006014:	d132      	bne.n	800607c <__ieee754_pow+0x154>
 8006016:	f1b9 0f00 	cmp.w	r9, #0
 800601a:	f280 8477 	bge.w	800690c <__ieee754_pow+0x9e4>
 800601e:	4959      	ldr	r1, [pc, #356]	; (8006184 <__ieee754_pow+0x25c>)
 8006020:	4632      	mov	r2, r6
 8006022:	463b      	mov	r3, r7
 8006024:	2000      	movs	r0, #0
 8006026:	f7fa fbb9 	bl	800079c <__aeabi_ddiv>
 800602a:	e79c      	b.n	8005f66 <__ieee754_pow+0x3e>
 800602c:	2300      	movs	r3, #0
 800602e:	9304      	str	r3, [sp, #16]
 8006030:	2a00      	cmp	r2, #0
 8006032:	d13d      	bne.n	80060b0 <__ieee754_pow+0x188>
 8006034:	4b51      	ldr	r3, [pc, #324]	; (800617c <__ieee754_pow+0x254>)
 8006036:	4598      	cmp	r8, r3
 8006038:	d1ea      	bne.n	8006010 <__ieee754_pow+0xe8>
 800603a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800603e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006042:	ea53 030a 	orrs.w	r3, r3, sl
 8006046:	f000 8459 	beq.w	80068fc <__ieee754_pow+0x9d4>
 800604a:	4b4f      	ldr	r3, [pc, #316]	; (8006188 <__ieee754_pow+0x260>)
 800604c:	429c      	cmp	r4, r3
 800604e:	dd08      	ble.n	8006062 <__ieee754_pow+0x13a>
 8006050:	f1b9 0f00 	cmp.w	r9, #0
 8006054:	f2c0 8456 	blt.w	8006904 <__ieee754_pow+0x9dc>
 8006058:	e9dd 0100 	ldrd	r0, r1, [sp]
 800605c:	e783      	b.n	8005f66 <__ieee754_pow+0x3e>
 800605e:	2302      	movs	r3, #2
 8006060:	e7e5      	b.n	800602e <__ieee754_pow+0x106>
 8006062:	f1b9 0f00 	cmp.w	r9, #0
 8006066:	f04f 0000 	mov.w	r0, #0
 800606a:	f04f 0100 	mov.w	r1, #0
 800606e:	f6bf af7a 	bge.w	8005f66 <__ieee754_pow+0x3e>
 8006072:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006076:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800607a:	e774      	b.n	8005f66 <__ieee754_pow+0x3e>
 800607c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006080:	d106      	bne.n	8006090 <__ieee754_pow+0x168>
 8006082:	4632      	mov	r2, r6
 8006084:	463b      	mov	r3, r7
 8006086:	4630      	mov	r0, r6
 8006088:	4639      	mov	r1, r7
 800608a:	f7fa fa5d 	bl	8000548 <__aeabi_dmul>
 800608e:	e76a      	b.n	8005f66 <__ieee754_pow+0x3e>
 8006090:	4b3e      	ldr	r3, [pc, #248]	; (800618c <__ieee754_pow+0x264>)
 8006092:	4599      	cmp	r9, r3
 8006094:	d10c      	bne.n	80060b0 <__ieee754_pow+0x188>
 8006096:	2d00      	cmp	r5, #0
 8006098:	db0a      	blt.n	80060b0 <__ieee754_pow+0x188>
 800609a:	ec47 6b10 	vmov	d0, r6, r7
 800609e:	b009      	add	sp, #36	; 0x24
 80060a0:	ecbd 8b06 	vpop	{d8-d10}
 80060a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a8:	f000 bd20 	b.w	8006aec <__ieee754_sqrt>
 80060ac:	2300      	movs	r3, #0
 80060ae:	9304      	str	r3, [sp, #16]
 80060b0:	ec47 6b10 	vmov	d0, r6, r7
 80060b4:	f000 fc62 	bl	800697c <fabs>
 80060b8:	ec51 0b10 	vmov	r0, r1, d0
 80060bc:	f1ba 0f00 	cmp.w	sl, #0
 80060c0:	d129      	bne.n	8006116 <__ieee754_pow+0x1ee>
 80060c2:	b124      	cbz	r4, 80060ce <__ieee754_pow+0x1a6>
 80060c4:	4b2f      	ldr	r3, [pc, #188]	; (8006184 <__ieee754_pow+0x25c>)
 80060c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d123      	bne.n	8006116 <__ieee754_pow+0x1ee>
 80060ce:	f1b9 0f00 	cmp.w	r9, #0
 80060d2:	da05      	bge.n	80060e0 <__ieee754_pow+0x1b8>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	2000      	movs	r0, #0
 80060da:	492a      	ldr	r1, [pc, #168]	; (8006184 <__ieee754_pow+0x25c>)
 80060dc:	f7fa fb5e 	bl	800079c <__aeabi_ddiv>
 80060e0:	2d00      	cmp	r5, #0
 80060e2:	f6bf af40 	bge.w	8005f66 <__ieee754_pow+0x3e>
 80060e6:	9b04      	ldr	r3, [sp, #16]
 80060e8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80060ec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80060f0:	431c      	orrs	r4, r3
 80060f2:	d108      	bne.n	8006106 <__ieee754_pow+0x1de>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	4610      	mov	r0, r2
 80060fa:	4619      	mov	r1, r3
 80060fc:	f7fa f86c 	bl	80001d8 <__aeabi_dsub>
 8006100:	4602      	mov	r2, r0
 8006102:	460b      	mov	r3, r1
 8006104:	e78f      	b.n	8006026 <__ieee754_pow+0xfe>
 8006106:	9b04      	ldr	r3, [sp, #16]
 8006108:	2b01      	cmp	r3, #1
 800610a:	f47f af2c 	bne.w	8005f66 <__ieee754_pow+0x3e>
 800610e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006112:	4619      	mov	r1, r3
 8006114:	e727      	b.n	8005f66 <__ieee754_pow+0x3e>
 8006116:	0feb      	lsrs	r3, r5, #31
 8006118:	3b01      	subs	r3, #1
 800611a:	9306      	str	r3, [sp, #24]
 800611c:	9a06      	ldr	r2, [sp, #24]
 800611e:	9b04      	ldr	r3, [sp, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	d102      	bne.n	800612a <__ieee754_pow+0x202>
 8006124:	4632      	mov	r2, r6
 8006126:	463b      	mov	r3, r7
 8006128:	e7e6      	b.n	80060f8 <__ieee754_pow+0x1d0>
 800612a:	4b19      	ldr	r3, [pc, #100]	; (8006190 <__ieee754_pow+0x268>)
 800612c:	4598      	cmp	r8, r3
 800612e:	f340 80fb 	ble.w	8006328 <__ieee754_pow+0x400>
 8006132:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006136:	4598      	cmp	r8, r3
 8006138:	4b13      	ldr	r3, [pc, #76]	; (8006188 <__ieee754_pow+0x260>)
 800613a:	dd0c      	ble.n	8006156 <__ieee754_pow+0x22e>
 800613c:	429c      	cmp	r4, r3
 800613e:	dc0f      	bgt.n	8006160 <__ieee754_pow+0x238>
 8006140:	f1b9 0f00 	cmp.w	r9, #0
 8006144:	da0f      	bge.n	8006166 <__ieee754_pow+0x23e>
 8006146:	2000      	movs	r0, #0
 8006148:	b009      	add	sp, #36	; 0x24
 800614a:	ecbd 8b06 	vpop	{d8-d10}
 800614e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006152:	f000 bcc2 	b.w	8006ada <__math_oflow>
 8006156:	429c      	cmp	r4, r3
 8006158:	dbf2      	blt.n	8006140 <__ieee754_pow+0x218>
 800615a:	4b0a      	ldr	r3, [pc, #40]	; (8006184 <__ieee754_pow+0x25c>)
 800615c:	429c      	cmp	r4, r3
 800615e:	dd19      	ble.n	8006194 <__ieee754_pow+0x26c>
 8006160:	f1b9 0f00 	cmp.w	r9, #0
 8006164:	dcef      	bgt.n	8006146 <__ieee754_pow+0x21e>
 8006166:	2000      	movs	r0, #0
 8006168:	b009      	add	sp, #36	; 0x24
 800616a:	ecbd 8b06 	vpop	{d8-d10}
 800616e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006172:	f000 bca9 	b.w	8006ac8 <__math_uflow>
 8006176:	bf00      	nop
 8006178:	fff00000 	.word	0xfff00000
 800617c:	7ff00000 	.word	0x7ff00000
 8006180:	433fffff 	.word	0x433fffff
 8006184:	3ff00000 	.word	0x3ff00000
 8006188:	3fefffff 	.word	0x3fefffff
 800618c:	3fe00000 	.word	0x3fe00000
 8006190:	41e00000 	.word	0x41e00000
 8006194:	4b60      	ldr	r3, [pc, #384]	; (8006318 <__ieee754_pow+0x3f0>)
 8006196:	2200      	movs	r2, #0
 8006198:	f7fa f81e 	bl	80001d8 <__aeabi_dsub>
 800619c:	a354      	add	r3, pc, #336	; (adr r3, 80062f0 <__ieee754_pow+0x3c8>)
 800619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a2:	4604      	mov	r4, r0
 80061a4:	460d      	mov	r5, r1
 80061a6:	f7fa f9cf 	bl	8000548 <__aeabi_dmul>
 80061aa:	a353      	add	r3, pc, #332	; (adr r3, 80062f8 <__ieee754_pow+0x3d0>)
 80061ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b0:	4606      	mov	r6, r0
 80061b2:	460f      	mov	r7, r1
 80061b4:	4620      	mov	r0, r4
 80061b6:	4629      	mov	r1, r5
 80061b8:	f7fa f9c6 	bl	8000548 <__aeabi_dmul>
 80061bc:	4b57      	ldr	r3, [pc, #348]	; (800631c <__ieee754_pow+0x3f4>)
 80061be:	4682      	mov	sl, r0
 80061c0:	468b      	mov	fp, r1
 80061c2:	2200      	movs	r2, #0
 80061c4:	4620      	mov	r0, r4
 80061c6:	4629      	mov	r1, r5
 80061c8:	f7fa f9be 	bl	8000548 <__aeabi_dmul>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	a14b      	add	r1, pc, #300	; (adr r1, 8006300 <__ieee754_pow+0x3d8>)
 80061d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061d6:	f7f9 ffff 	bl	80001d8 <__aeabi_dsub>
 80061da:	4622      	mov	r2, r4
 80061dc:	462b      	mov	r3, r5
 80061de:	f7fa f9b3 	bl	8000548 <__aeabi_dmul>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	2000      	movs	r0, #0
 80061e8:	494d      	ldr	r1, [pc, #308]	; (8006320 <__ieee754_pow+0x3f8>)
 80061ea:	f7f9 fff5 	bl	80001d8 <__aeabi_dsub>
 80061ee:	4622      	mov	r2, r4
 80061f0:	4680      	mov	r8, r0
 80061f2:	4689      	mov	r9, r1
 80061f4:	462b      	mov	r3, r5
 80061f6:	4620      	mov	r0, r4
 80061f8:	4629      	mov	r1, r5
 80061fa:	f7fa f9a5 	bl	8000548 <__aeabi_dmul>
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	4640      	mov	r0, r8
 8006204:	4649      	mov	r1, r9
 8006206:	f7fa f99f 	bl	8000548 <__aeabi_dmul>
 800620a:	a33f      	add	r3, pc, #252	; (adr r3, 8006308 <__ieee754_pow+0x3e0>)
 800620c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006210:	f7fa f99a 	bl	8000548 <__aeabi_dmul>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4650      	mov	r0, sl
 800621a:	4659      	mov	r1, fp
 800621c:	f7f9 ffdc 	bl	80001d8 <__aeabi_dsub>
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	4680      	mov	r8, r0
 8006226:	4689      	mov	r9, r1
 8006228:	4630      	mov	r0, r6
 800622a:	4639      	mov	r1, r7
 800622c:	f7f9 ffd6 	bl	80001dc <__adddf3>
 8006230:	2000      	movs	r0, #0
 8006232:	4632      	mov	r2, r6
 8006234:	463b      	mov	r3, r7
 8006236:	4604      	mov	r4, r0
 8006238:	460d      	mov	r5, r1
 800623a:	f7f9 ffcd 	bl	80001d8 <__aeabi_dsub>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	4640      	mov	r0, r8
 8006244:	4649      	mov	r1, r9
 8006246:	f7f9 ffc7 	bl	80001d8 <__aeabi_dsub>
 800624a:	9b04      	ldr	r3, [sp, #16]
 800624c:	9a06      	ldr	r2, [sp, #24]
 800624e:	3b01      	subs	r3, #1
 8006250:	4313      	orrs	r3, r2
 8006252:	4682      	mov	sl, r0
 8006254:	468b      	mov	fp, r1
 8006256:	f040 81e7 	bne.w	8006628 <__ieee754_pow+0x700>
 800625a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006310 <__ieee754_pow+0x3e8>
 800625e:	eeb0 8a47 	vmov.f32	s16, s14
 8006262:	eef0 8a67 	vmov.f32	s17, s15
 8006266:	e9dd 6700 	ldrd	r6, r7, [sp]
 800626a:	2600      	movs	r6, #0
 800626c:	4632      	mov	r2, r6
 800626e:	463b      	mov	r3, r7
 8006270:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006274:	f7f9 ffb0 	bl	80001d8 <__aeabi_dsub>
 8006278:	4622      	mov	r2, r4
 800627a:	462b      	mov	r3, r5
 800627c:	f7fa f964 	bl	8000548 <__aeabi_dmul>
 8006280:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006284:	4680      	mov	r8, r0
 8006286:	4689      	mov	r9, r1
 8006288:	4650      	mov	r0, sl
 800628a:	4659      	mov	r1, fp
 800628c:	f7fa f95c 	bl	8000548 <__aeabi_dmul>
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	4640      	mov	r0, r8
 8006296:	4649      	mov	r1, r9
 8006298:	f7f9 ffa0 	bl	80001dc <__adddf3>
 800629c:	4632      	mov	r2, r6
 800629e:	463b      	mov	r3, r7
 80062a0:	4680      	mov	r8, r0
 80062a2:	4689      	mov	r9, r1
 80062a4:	4620      	mov	r0, r4
 80062a6:	4629      	mov	r1, r5
 80062a8:	f7fa f94e 	bl	8000548 <__aeabi_dmul>
 80062ac:	460b      	mov	r3, r1
 80062ae:	4604      	mov	r4, r0
 80062b0:	460d      	mov	r5, r1
 80062b2:	4602      	mov	r2, r0
 80062b4:	4649      	mov	r1, r9
 80062b6:	4640      	mov	r0, r8
 80062b8:	f7f9 ff90 	bl	80001dc <__adddf3>
 80062bc:	4b19      	ldr	r3, [pc, #100]	; (8006324 <__ieee754_pow+0x3fc>)
 80062be:	4299      	cmp	r1, r3
 80062c0:	ec45 4b19 	vmov	d9, r4, r5
 80062c4:	4606      	mov	r6, r0
 80062c6:	460f      	mov	r7, r1
 80062c8:	468b      	mov	fp, r1
 80062ca:	f340 82f0 	ble.w	80068ae <__ieee754_pow+0x986>
 80062ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80062d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80062d6:	4303      	orrs	r3, r0
 80062d8:	f000 81e4 	beq.w	80066a4 <__ieee754_pow+0x77c>
 80062dc:	ec51 0b18 	vmov	r0, r1, d8
 80062e0:	2200      	movs	r2, #0
 80062e2:	2300      	movs	r3, #0
 80062e4:	f7fa fba2 	bl	8000a2c <__aeabi_dcmplt>
 80062e8:	3800      	subs	r0, #0
 80062ea:	bf18      	it	ne
 80062ec:	2001      	movne	r0, #1
 80062ee:	e72b      	b.n	8006148 <__ieee754_pow+0x220>
 80062f0:	60000000 	.word	0x60000000
 80062f4:	3ff71547 	.word	0x3ff71547
 80062f8:	f85ddf44 	.word	0xf85ddf44
 80062fc:	3e54ae0b 	.word	0x3e54ae0b
 8006300:	55555555 	.word	0x55555555
 8006304:	3fd55555 	.word	0x3fd55555
 8006308:	652b82fe 	.word	0x652b82fe
 800630c:	3ff71547 	.word	0x3ff71547
 8006310:	00000000 	.word	0x00000000
 8006314:	bff00000 	.word	0xbff00000
 8006318:	3ff00000 	.word	0x3ff00000
 800631c:	3fd00000 	.word	0x3fd00000
 8006320:	3fe00000 	.word	0x3fe00000
 8006324:	408fffff 	.word	0x408fffff
 8006328:	4bd5      	ldr	r3, [pc, #852]	; (8006680 <__ieee754_pow+0x758>)
 800632a:	402b      	ands	r3, r5
 800632c:	2200      	movs	r2, #0
 800632e:	b92b      	cbnz	r3, 800633c <__ieee754_pow+0x414>
 8006330:	4bd4      	ldr	r3, [pc, #848]	; (8006684 <__ieee754_pow+0x75c>)
 8006332:	f7fa f909 	bl	8000548 <__aeabi_dmul>
 8006336:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800633a:	460c      	mov	r4, r1
 800633c:	1523      	asrs	r3, r4, #20
 800633e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006342:	4413      	add	r3, r2
 8006344:	9305      	str	r3, [sp, #20]
 8006346:	4bd0      	ldr	r3, [pc, #832]	; (8006688 <__ieee754_pow+0x760>)
 8006348:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800634c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006350:	429c      	cmp	r4, r3
 8006352:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006356:	dd08      	ble.n	800636a <__ieee754_pow+0x442>
 8006358:	4bcc      	ldr	r3, [pc, #816]	; (800668c <__ieee754_pow+0x764>)
 800635a:	429c      	cmp	r4, r3
 800635c:	f340 8162 	ble.w	8006624 <__ieee754_pow+0x6fc>
 8006360:	9b05      	ldr	r3, [sp, #20]
 8006362:	3301      	adds	r3, #1
 8006364:	9305      	str	r3, [sp, #20]
 8006366:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800636a:	2400      	movs	r4, #0
 800636c:	00e3      	lsls	r3, r4, #3
 800636e:	9307      	str	r3, [sp, #28]
 8006370:	4bc7      	ldr	r3, [pc, #796]	; (8006690 <__ieee754_pow+0x768>)
 8006372:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006376:	ed93 7b00 	vldr	d7, [r3]
 800637a:	4629      	mov	r1, r5
 800637c:	ec53 2b17 	vmov	r2, r3, d7
 8006380:	eeb0 9a47 	vmov.f32	s18, s14
 8006384:	eef0 9a67 	vmov.f32	s19, s15
 8006388:	4682      	mov	sl, r0
 800638a:	f7f9 ff25 	bl	80001d8 <__aeabi_dsub>
 800638e:	4652      	mov	r2, sl
 8006390:	4606      	mov	r6, r0
 8006392:	460f      	mov	r7, r1
 8006394:	462b      	mov	r3, r5
 8006396:	ec51 0b19 	vmov	r0, r1, d9
 800639a:	f7f9 ff1f 	bl	80001dc <__adddf3>
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	2000      	movs	r0, #0
 80063a4:	49bb      	ldr	r1, [pc, #748]	; (8006694 <__ieee754_pow+0x76c>)
 80063a6:	f7fa f9f9 	bl	800079c <__aeabi_ddiv>
 80063aa:	ec41 0b1a 	vmov	d10, r0, r1
 80063ae:	4602      	mov	r2, r0
 80063b0:	460b      	mov	r3, r1
 80063b2:	4630      	mov	r0, r6
 80063b4:	4639      	mov	r1, r7
 80063b6:	f7fa f8c7 	bl	8000548 <__aeabi_dmul>
 80063ba:	2300      	movs	r3, #0
 80063bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063c0:	9302      	str	r3, [sp, #8]
 80063c2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80063c6:	46ab      	mov	fp, r5
 80063c8:	106d      	asrs	r5, r5, #1
 80063ca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80063ce:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80063d2:	ec41 0b18 	vmov	d8, r0, r1
 80063d6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80063da:	2200      	movs	r2, #0
 80063dc:	4640      	mov	r0, r8
 80063de:	4649      	mov	r1, r9
 80063e0:	4614      	mov	r4, r2
 80063e2:	461d      	mov	r5, r3
 80063e4:	f7fa f8b0 	bl	8000548 <__aeabi_dmul>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	4630      	mov	r0, r6
 80063ee:	4639      	mov	r1, r7
 80063f0:	f7f9 fef2 	bl	80001d8 <__aeabi_dsub>
 80063f4:	ec53 2b19 	vmov	r2, r3, d9
 80063f8:	4606      	mov	r6, r0
 80063fa:	460f      	mov	r7, r1
 80063fc:	4620      	mov	r0, r4
 80063fe:	4629      	mov	r1, r5
 8006400:	f7f9 feea 	bl	80001d8 <__aeabi_dsub>
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	4650      	mov	r0, sl
 800640a:	4659      	mov	r1, fp
 800640c:	f7f9 fee4 	bl	80001d8 <__aeabi_dsub>
 8006410:	4642      	mov	r2, r8
 8006412:	464b      	mov	r3, r9
 8006414:	f7fa f898 	bl	8000548 <__aeabi_dmul>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	4630      	mov	r0, r6
 800641e:	4639      	mov	r1, r7
 8006420:	f7f9 feda 	bl	80001d8 <__aeabi_dsub>
 8006424:	ec53 2b1a 	vmov	r2, r3, d10
 8006428:	f7fa f88e 	bl	8000548 <__aeabi_dmul>
 800642c:	ec53 2b18 	vmov	r2, r3, d8
 8006430:	ec41 0b19 	vmov	d9, r0, r1
 8006434:	ec51 0b18 	vmov	r0, r1, d8
 8006438:	f7fa f886 	bl	8000548 <__aeabi_dmul>
 800643c:	a37c      	add	r3, pc, #496	; (adr r3, 8006630 <__ieee754_pow+0x708>)
 800643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006442:	4604      	mov	r4, r0
 8006444:	460d      	mov	r5, r1
 8006446:	f7fa f87f 	bl	8000548 <__aeabi_dmul>
 800644a:	a37b      	add	r3, pc, #492	; (adr r3, 8006638 <__ieee754_pow+0x710>)
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	f7f9 fec4 	bl	80001dc <__adddf3>
 8006454:	4622      	mov	r2, r4
 8006456:	462b      	mov	r3, r5
 8006458:	f7fa f876 	bl	8000548 <__aeabi_dmul>
 800645c:	a378      	add	r3, pc, #480	; (adr r3, 8006640 <__ieee754_pow+0x718>)
 800645e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006462:	f7f9 febb 	bl	80001dc <__adddf3>
 8006466:	4622      	mov	r2, r4
 8006468:	462b      	mov	r3, r5
 800646a:	f7fa f86d 	bl	8000548 <__aeabi_dmul>
 800646e:	a376      	add	r3, pc, #472	; (adr r3, 8006648 <__ieee754_pow+0x720>)
 8006470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006474:	f7f9 feb2 	bl	80001dc <__adddf3>
 8006478:	4622      	mov	r2, r4
 800647a:	462b      	mov	r3, r5
 800647c:	f7fa f864 	bl	8000548 <__aeabi_dmul>
 8006480:	a373      	add	r3, pc, #460	; (adr r3, 8006650 <__ieee754_pow+0x728>)
 8006482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006486:	f7f9 fea9 	bl	80001dc <__adddf3>
 800648a:	4622      	mov	r2, r4
 800648c:	462b      	mov	r3, r5
 800648e:	f7fa f85b 	bl	8000548 <__aeabi_dmul>
 8006492:	a371      	add	r3, pc, #452	; (adr r3, 8006658 <__ieee754_pow+0x730>)
 8006494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006498:	f7f9 fea0 	bl	80001dc <__adddf3>
 800649c:	4622      	mov	r2, r4
 800649e:	4606      	mov	r6, r0
 80064a0:	460f      	mov	r7, r1
 80064a2:	462b      	mov	r3, r5
 80064a4:	4620      	mov	r0, r4
 80064a6:	4629      	mov	r1, r5
 80064a8:	f7fa f84e 	bl	8000548 <__aeabi_dmul>
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	4630      	mov	r0, r6
 80064b2:	4639      	mov	r1, r7
 80064b4:	f7fa f848 	bl	8000548 <__aeabi_dmul>
 80064b8:	4642      	mov	r2, r8
 80064ba:	4604      	mov	r4, r0
 80064bc:	460d      	mov	r5, r1
 80064be:	464b      	mov	r3, r9
 80064c0:	ec51 0b18 	vmov	r0, r1, d8
 80064c4:	f7f9 fe8a 	bl	80001dc <__adddf3>
 80064c8:	ec53 2b19 	vmov	r2, r3, d9
 80064cc:	f7fa f83c 	bl	8000548 <__aeabi_dmul>
 80064d0:	4622      	mov	r2, r4
 80064d2:	462b      	mov	r3, r5
 80064d4:	f7f9 fe82 	bl	80001dc <__adddf3>
 80064d8:	4642      	mov	r2, r8
 80064da:	4682      	mov	sl, r0
 80064dc:	468b      	mov	fp, r1
 80064de:	464b      	mov	r3, r9
 80064e0:	4640      	mov	r0, r8
 80064e2:	4649      	mov	r1, r9
 80064e4:	f7fa f830 	bl	8000548 <__aeabi_dmul>
 80064e8:	4b6b      	ldr	r3, [pc, #428]	; (8006698 <__ieee754_pow+0x770>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	4606      	mov	r6, r0
 80064ee:	460f      	mov	r7, r1
 80064f0:	f7f9 fe74 	bl	80001dc <__adddf3>
 80064f4:	4652      	mov	r2, sl
 80064f6:	465b      	mov	r3, fp
 80064f8:	f7f9 fe70 	bl	80001dc <__adddf3>
 80064fc:	2000      	movs	r0, #0
 80064fe:	4604      	mov	r4, r0
 8006500:	460d      	mov	r5, r1
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	4640      	mov	r0, r8
 8006508:	4649      	mov	r1, r9
 800650a:	f7fa f81d 	bl	8000548 <__aeabi_dmul>
 800650e:	4b62      	ldr	r3, [pc, #392]	; (8006698 <__ieee754_pow+0x770>)
 8006510:	4680      	mov	r8, r0
 8006512:	4689      	mov	r9, r1
 8006514:	2200      	movs	r2, #0
 8006516:	4620      	mov	r0, r4
 8006518:	4629      	mov	r1, r5
 800651a:	f7f9 fe5d 	bl	80001d8 <__aeabi_dsub>
 800651e:	4632      	mov	r2, r6
 8006520:	463b      	mov	r3, r7
 8006522:	f7f9 fe59 	bl	80001d8 <__aeabi_dsub>
 8006526:	4602      	mov	r2, r0
 8006528:	460b      	mov	r3, r1
 800652a:	4650      	mov	r0, sl
 800652c:	4659      	mov	r1, fp
 800652e:	f7f9 fe53 	bl	80001d8 <__aeabi_dsub>
 8006532:	ec53 2b18 	vmov	r2, r3, d8
 8006536:	f7fa f807 	bl	8000548 <__aeabi_dmul>
 800653a:	4622      	mov	r2, r4
 800653c:	4606      	mov	r6, r0
 800653e:	460f      	mov	r7, r1
 8006540:	462b      	mov	r3, r5
 8006542:	ec51 0b19 	vmov	r0, r1, d9
 8006546:	f7f9 ffff 	bl	8000548 <__aeabi_dmul>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	4630      	mov	r0, r6
 8006550:	4639      	mov	r1, r7
 8006552:	f7f9 fe43 	bl	80001dc <__adddf3>
 8006556:	4606      	mov	r6, r0
 8006558:	460f      	mov	r7, r1
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	4640      	mov	r0, r8
 8006560:	4649      	mov	r1, r9
 8006562:	f7f9 fe3b 	bl	80001dc <__adddf3>
 8006566:	a33e      	add	r3, pc, #248	; (adr r3, 8006660 <__ieee754_pow+0x738>)
 8006568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656c:	2000      	movs	r0, #0
 800656e:	4604      	mov	r4, r0
 8006570:	460d      	mov	r5, r1
 8006572:	f7f9 ffe9 	bl	8000548 <__aeabi_dmul>
 8006576:	4642      	mov	r2, r8
 8006578:	ec41 0b18 	vmov	d8, r0, r1
 800657c:	464b      	mov	r3, r9
 800657e:	4620      	mov	r0, r4
 8006580:	4629      	mov	r1, r5
 8006582:	f7f9 fe29 	bl	80001d8 <__aeabi_dsub>
 8006586:	4602      	mov	r2, r0
 8006588:	460b      	mov	r3, r1
 800658a:	4630      	mov	r0, r6
 800658c:	4639      	mov	r1, r7
 800658e:	f7f9 fe23 	bl	80001d8 <__aeabi_dsub>
 8006592:	a335      	add	r3, pc, #212	; (adr r3, 8006668 <__ieee754_pow+0x740>)
 8006594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006598:	f7f9 ffd6 	bl	8000548 <__aeabi_dmul>
 800659c:	a334      	add	r3, pc, #208	; (adr r3, 8006670 <__ieee754_pow+0x748>)
 800659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a2:	4606      	mov	r6, r0
 80065a4:	460f      	mov	r7, r1
 80065a6:	4620      	mov	r0, r4
 80065a8:	4629      	mov	r1, r5
 80065aa:	f7f9 ffcd 	bl	8000548 <__aeabi_dmul>
 80065ae:	4602      	mov	r2, r0
 80065b0:	460b      	mov	r3, r1
 80065b2:	4630      	mov	r0, r6
 80065b4:	4639      	mov	r1, r7
 80065b6:	f7f9 fe11 	bl	80001dc <__adddf3>
 80065ba:	9a07      	ldr	r2, [sp, #28]
 80065bc:	4b37      	ldr	r3, [pc, #220]	; (800669c <__ieee754_pow+0x774>)
 80065be:	4413      	add	r3, r2
 80065c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c4:	f7f9 fe0a 	bl	80001dc <__adddf3>
 80065c8:	4682      	mov	sl, r0
 80065ca:	9805      	ldr	r0, [sp, #20]
 80065cc:	468b      	mov	fp, r1
 80065ce:	f7f9 ff51 	bl	8000474 <__aeabi_i2d>
 80065d2:	9a07      	ldr	r2, [sp, #28]
 80065d4:	4b32      	ldr	r3, [pc, #200]	; (80066a0 <__ieee754_pow+0x778>)
 80065d6:	4413      	add	r3, r2
 80065d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065dc:	4606      	mov	r6, r0
 80065de:	460f      	mov	r7, r1
 80065e0:	4652      	mov	r2, sl
 80065e2:	465b      	mov	r3, fp
 80065e4:	ec51 0b18 	vmov	r0, r1, d8
 80065e8:	f7f9 fdf8 	bl	80001dc <__adddf3>
 80065ec:	4642      	mov	r2, r8
 80065ee:	464b      	mov	r3, r9
 80065f0:	f7f9 fdf4 	bl	80001dc <__adddf3>
 80065f4:	4632      	mov	r2, r6
 80065f6:	463b      	mov	r3, r7
 80065f8:	f7f9 fdf0 	bl	80001dc <__adddf3>
 80065fc:	2000      	movs	r0, #0
 80065fe:	4632      	mov	r2, r6
 8006600:	463b      	mov	r3, r7
 8006602:	4604      	mov	r4, r0
 8006604:	460d      	mov	r5, r1
 8006606:	f7f9 fde7 	bl	80001d8 <__aeabi_dsub>
 800660a:	4642      	mov	r2, r8
 800660c:	464b      	mov	r3, r9
 800660e:	f7f9 fde3 	bl	80001d8 <__aeabi_dsub>
 8006612:	ec53 2b18 	vmov	r2, r3, d8
 8006616:	f7f9 fddf 	bl	80001d8 <__aeabi_dsub>
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	4650      	mov	r0, sl
 8006620:	4659      	mov	r1, fp
 8006622:	e610      	b.n	8006246 <__ieee754_pow+0x31e>
 8006624:	2401      	movs	r4, #1
 8006626:	e6a1      	b.n	800636c <__ieee754_pow+0x444>
 8006628:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006678 <__ieee754_pow+0x750>
 800662c:	e617      	b.n	800625e <__ieee754_pow+0x336>
 800662e:	bf00      	nop
 8006630:	4a454eef 	.word	0x4a454eef
 8006634:	3fca7e28 	.word	0x3fca7e28
 8006638:	93c9db65 	.word	0x93c9db65
 800663c:	3fcd864a 	.word	0x3fcd864a
 8006640:	a91d4101 	.word	0xa91d4101
 8006644:	3fd17460 	.word	0x3fd17460
 8006648:	518f264d 	.word	0x518f264d
 800664c:	3fd55555 	.word	0x3fd55555
 8006650:	db6fabff 	.word	0xdb6fabff
 8006654:	3fdb6db6 	.word	0x3fdb6db6
 8006658:	33333303 	.word	0x33333303
 800665c:	3fe33333 	.word	0x3fe33333
 8006660:	e0000000 	.word	0xe0000000
 8006664:	3feec709 	.word	0x3feec709
 8006668:	dc3a03fd 	.word	0xdc3a03fd
 800666c:	3feec709 	.word	0x3feec709
 8006670:	145b01f5 	.word	0x145b01f5
 8006674:	be3e2fe0 	.word	0xbe3e2fe0
 8006678:	00000000 	.word	0x00000000
 800667c:	3ff00000 	.word	0x3ff00000
 8006680:	7ff00000 	.word	0x7ff00000
 8006684:	43400000 	.word	0x43400000
 8006688:	0003988e 	.word	0x0003988e
 800668c:	000bb679 	.word	0x000bb679
 8006690:	08006d80 	.word	0x08006d80
 8006694:	3ff00000 	.word	0x3ff00000
 8006698:	40080000 	.word	0x40080000
 800669c:	08006da0 	.word	0x08006da0
 80066a0:	08006d90 	.word	0x08006d90
 80066a4:	a3b3      	add	r3, pc, #716	; (adr r3, 8006974 <__ieee754_pow+0xa4c>)
 80066a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066aa:	4640      	mov	r0, r8
 80066ac:	4649      	mov	r1, r9
 80066ae:	f7f9 fd95 	bl	80001dc <__adddf3>
 80066b2:	4622      	mov	r2, r4
 80066b4:	ec41 0b1a 	vmov	d10, r0, r1
 80066b8:	462b      	mov	r3, r5
 80066ba:	4630      	mov	r0, r6
 80066bc:	4639      	mov	r1, r7
 80066be:	f7f9 fd8b 	bl	80001d8 <__aeabi_dsub>
 80066c2:	4602      	mov	r2, r0
 80066c4:	460b      	mov	r3, r1
 80066c6:	ec51 0b1a 	vmov	r0, r1, d10
 80066ca:	f7fa f9cd 	bl	8000a68 <__aeabi_dcmpgt>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	f47f ae04 	bne.w	80062dc <__ieee754_pow+0x3b4>
 80066d4:	4aa2      	ldr	r2, [pc, #648]	; (8006960 <__ieee754_pow+0xa38>)
 80066d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80066da:	4293      	cmp	r3, r2
 80066dc:	f340 8107 	ble.w	80068ee <__ieee754_pow+0x9c6>
 80066e0:	151b      	asrs	r3, r3, #20
 80066e2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80066e6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80066ea:	fa4a fa03 	asr.w	sl, sl, r3
 80066ee:	44da      	add	sl, fp
 80066f0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80066f4:	489b      	ldr	r0, [pc, #620]	; (8006964 <__ieee754_pow+0xa3c>)
 80066f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80066fa:	4108      	asrs	r0, r1
 80066fc:	ea00 030a 	and.w	r3, r0, sl
 8006700:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006704:	f1c1 0114 	rsb	r1, r1, #20
 8006708:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800670c:	fa4a fa01 	asr.w	sl, sl, r1
 8006710:	f1bb 0f00 	cmp.w	fp, #0
 8006714:	f04f 0200 	mov.w	r2, #0
 8006718:	4620      	mov	r0, r4
 800671a:	4629      	mov	r1, r5
 800671c:	bfb8      	it	lt
 800671e:	f1ca 0a00 	rsblt	sl, sl, #0
 8006722:	f7f9 fd59 	bl	80001d8 <__aeabi_dsub>
 8006726:	ec41 0b19 	vmov	d9, r0, r1
 800672a:	4642      	mov	r2, r8
 800672c:	464b      	mov	r3, r9
 800672e:	ec51 0b19 	vmov	r0, r1, d9
 8006732:	f7f9 fd53 	bl	80001dc <__adddf3>
 8006736:	a37a      	add	r3, pc, #488	; (adr r3, 8006920 <__ieee754_pow+0x9f8>)
 8006738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673c:	2000      	movs	r0, #0
 800673e:	4604      	mov	r4, r0
 8006740:	460d      	mov	r5, r1
 8006742:	f7f9 ff01 	bl	8000548 <__aeabi_dmul>
 8006746:	ec53 2b19 	vmov	r2, r3, d9
 800674a:	4606      	mov	r6, r0
 800674c:	460f      	mov	r7, r1
 800674e:	4620      	mov	r0, r4
 8006750:	4629      	mov	r1, r5
 8006752:	f7f9 fd41 	bl	80001d8 <__aeabi_dsub>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	4640      	mov	r0, r8
 800675c:	4649      	mov	r1, r9
 800675e:	f7f9 fd3b 	bl	80001d8 <__aeabi_dsub>
 8006762:	a371      	add	r3, pc, #452	; (adr r3, 8006928 <__ieee754_pow+0xa00>)
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	f7f9 feee 	bl	8000548 <__aeabi_dmul>
 800676c:	a370      	add	r3, pc, #448	; (adr r3, 8006930 <__ieee754_pow+0xa08>)
 800676e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006772:	4680      	mov	r8, r0
 8006774:	4689      	mov	r9, r1
 8006776:	4620      	mov	r0, r4
 8006778:	4629      	mov	r1, r5
 800677a:	f7f9 fee5 	bl	8000548 <__aeabi_dmul>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	4640      	mov	r0, r8
 8006784:	4649      	mov	r1, r9
 8006786:	f7f9 fd29 	bl	80001dc <__adddf3>
 800678a:	4604      	mov	r4, r0
 800678c:	460d      	mov	r5, r1
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	4630      	mov	r0, r6
 8006794:	4639      	mov	r1, r7
 8006796:	f7f9 fd21 	bl	80001dc <__adddf3>
 800679a:	4632      	mov	r2, r6
 800679c:	463b      	mov	r3, r7
 800679e:	4680      	mov	r8, r0
 80067a0:	4689      	mov	r9, r1
 80067a2:	f7f9 fd19 	bl	80001d8 <__aeabi_dsub>
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	4620      	mov	r0, r4
 80067ac:	4629      	mov	r1, r5
 80067ae:	f7f9 fd13 	bl	80001d8 <__aeabi_dsub>
 80067b2:	4642      	mov	r2, r8
 80067b4:	4606      	mov	r6, r0
 80067b6:	460f      	mov	r7, r1
 80067b8:	464b      	mov	r3, r9
 80067ba:	4640      	mov	r0, r8
 80067bc:	4649      	mov	r1, r9
 80067be:	f7f9 fec3 	bl	8000548 <__aeabi_dmul>
 80067c2:	a35d      	add	r3, pc, #372	; (adr r3, 8006938 <__ieee754_pow+0xa10>)
 80067c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c8:	4604      	mov	r4, r0
 80067ca:	460d      	mov	r5, r1
 80067cc:	f7f9 febc 	bl	8000548 <__aeabi_dmul>
 80067d0:	a35b      	add	r3, pc, #364	; (adr r3, 8006940 <__ieee754_pow+0xa18>)
 80067d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d6:	f7f9 fcff 	bl	80001d8 <__aeabi_dsub>
 80067da:	4622      	mov	r2, r4
 80067dc:	462b      	mov	r3, r5
 80067de:	f7f9 feb3 	bl	8000548 <__aeabi_dmul>
 80067e2:	a359      	add	r3, pc, #356	; (adr r3, 8006948 <__ieee754_pow+0xa20>)
 80067e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e8:	f7f9 fcf8 	bl	80001dc <__adddf3>
 80067ec:	4622      	mov	r2, r4
 80067ee:	462b      	mov	r3, r5
 80067f0:	f7f9 feaa 	bl	8000548 <__aeabi_dmul>
 80067f4:	a356      	add	r3, pc, #344	; (adr r3, 8006950 <__ieee754_pow+0xa28>)
 80067f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fa:	f7f9 fced 	bl	80001d8 <__aeabi_dsub>
 80067fe:	4622      	mov	r2, r4
 8006800:	462b      	mov	r3, r5
 8006802:	f7f9 fea1 	bl	8000548 <__aeabi_dmul>
 8006806:	a354      	add	r3, pc, #336	; (adr r3, 8006958 <__ieee754_pow+0xa30>)
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	f7f9 fce6 	bl	80001dc <__adddf3>
 8006810:	4622      	mov	r2, r4
 8006812:	462b      	mov	r3, r5
 8006814:	f7f9 fe98 	bl	8000548 <__aeabi_dmul>
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	4640      	mov	r0, r8
 800681e:	4649      	mov	r1, r9
 8006820:	f7f9 fcda 	bl	80001d8 <__aeabi_dsub>
 8006824:	4604      	mov	r4, r0
 8006826:	460d      	mov	r5, r1
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	4640      	mov	r0, r8
 800682e:	4649      	mov	r1, r9
 8006830:	f7f9 fe8a 	bl	8000548 <__aeabi_dmul>
 8006834:	2200      	movs	r2, #0
 8006836:	ec41 0b19 	vmov	d9, r0, r1
 800683a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800683e:	4620      	mov	r0, r4
 8006840:	4629      	mov	r1, r5
 8006842:	f7f9 fcc9 	bl	80001d8 <__aeabi_dsub>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	ec51 0b19 	vmov	r0, r1, d9
 800684e:	f7f9 ffa5 	bl	800079c <__aeabi_ddiv>
 8006852:	4632      	mov	r2, r6
 8006854:	4604      	mov	r4, r0
 8006856:	460d      	mov	r5, r1
 8006858:	463b      	mov	r3, r7
 800685a:	4640      	mov	r0, r8
 800685c:	4649      	mov	r1, r9
 800685e:	f7f9 fe73 	bl	8000548 <__aeabi_dmul>
 8006862:	4632      	mov	r2, r6
 8006864:	463b      	mov	r3, r7
 8006866:	f7f9 fcb9 	bl	80001dc <__adddf3>
 800686a:	4602      	mov	r2, r0
 800686c:	460b      	mov	r3, r1
 800686e:	4620      	mov	r0, r4
 8006870:	4629      	mov	r1, r5
 8006872:	f7f9 fcb1 	bl	80001d8 <__aeabi_dsub>
 8006876:	4642      	mov	r2, r8
 8006878:	464b      	mov	r3, r9
 800687a:	f7f9 fcad 	bl	80001d8 <__aeabi_dsub>
 800687e:	460b      	mov	r3, r1
 8006880:	4602      	mov	r2, r0
 8006882:	4939      	ldr	r1, [pc, #228]	; (8006968 <__ieee754_pow+0xa40>)
 8006884:	2000      	movs	r0, #0
 8006886:	f7f9 fca7 	bl	80001d8 <__aeabi_dsub>
 800688a:	ec41 0b10 	vmov	d0, r0, r1
 800688e:	ee10 3a90 	vmov	r3, s1
 8006892:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800689a:	da2b      	bge.n	80068f4 <__ieee754_pow+0x9cc>
 800689c:	4650      	mov	r0, sl
 800689e:	f000 f877 	bl	8006990 <scalbn>
 80068a2:	ec51 0b10 	vmov	r0, r1, d0
 80068a6:	ec53 2b18 	vmov	r2, r3, d8
 80068aa:	f7ff bbee 	b.w	800608a <__ieee754_pow+0x162>
 80068ae:	4b2f      	ldr	r3, [pc, #188]	; (800696c <__ieee754_pow+0xa44>)
 80068b0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80068b4:	429e      	cmp	r6, r3
 80068b6:	f77f af0d 	ble.w	80066d4 <__ieee754_pow+0x7ac>
 80068ba:	4b2d      	ldr	r3, [pc, #180]	; (8006970 <__ieee754_pow+0xa48>)
 80068bc:	440b      	add	r3, r1
 80068be:	4303      	orrs	r3, r0
 80068c0:	d009      	beq.n	80068d6 <__ieee754_pow+0x9ae>
 80068c2:	ec51 0b18 	vmov	r0, r1, d8
 80068c6:	2200      	movs	r2, #0
 80068c8:	2300      	movs	r3, #0
 80068ca:	f7fa f8af 	bl	8000a2c <__aeabi_dcmplt>
 80068ce:	3800      	subs	r0, #0
 80068d0:	bf18      	it	ne
 80068d2:	2001      	movne	r0, #1
 80068d4:	e448      	b.n	8006168 <__ieee754_pow+0x240>
 80068d6:	4622      	mov	r2, r4
 80068d8:	462b      	mov	r3, r5
 80068da:	f7f9 fc7d 	bl	80001d8 <__aeabi_dsub>
 80068de:	4642      	mov	r2, r8
 80068e0:	464b      	mov	r3, r9
 80068e2:	f7fa f8b7 	bl	8000a54 <__aeabi_dcmpge>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	f43f aef4 	beq.w	80066d4 <__ieee754_pow+0x7ac>
 80068ec:	e7e9      	b.n	80068c2 <__ieee754_pow+0x99a>
 80068ee:	f04f 0a00 	mov.w	sl, #0
 80068f2:	e71a      	b.n	800672a <__ieee754_pow+0x802>
 80068f4:	ec51 0b10 	vmov	r0, r1, d0
 80068f8:	4619      	mov	r1, r3
 80068fa:	e7d4      	b.n	80068a6 <__ieee754_pow+0x97e>
 80068fc:	491a      	ldr	r1, [pc, #104]	; (8006968 <__ieee754_pow+0xa40>)
 80068fe:	2000      	movs	r0, #0
 8006900:	f7ff bb31 	b.w	8005f66 <__ieee754_pow+0x3e>
 8006904:	2000      	movs	r0, #0
 8006906:	2100      	movs	r1, #0
 8006908:	f7ff bb2d 	b.w	8005f66 <__ieee754_pow+0x3e>
 800690c:	4630      	mov	r0, r6
 800690e:	4639      	mov	r1, r7
 8006910:	f7ff bb29 	b.w	8005f66 <__ieee754_pow+0x3e>
 8006914:	9204      	str	r2, [sp, #16]
 8006916:	f7ff bb7b 	b.w	8006010 <__ieee754_pow+0xe8>
 800691a:	2300      	movs	r3, #0
 800691c:	f7ff bb65 	b.w	8005fea <__ieee754_pow+0xc2>
 8006920:	00000000 	.word	0x00000000
 8006924:	3fe62e43 	.word	0x3fe62e43
 8006928:	fefa39ef 	.word	0xfefa39ef
 800692c:	3fe62e42 	.word	0x3fe62e42
 8006930:	0ca86c39 	.word	0x0ca86c39
 8006934:	be205c61 	.word	0xbe205c61
 8006938:	72bea4d0 	.word	0x72bea4d0
 800693c:	3e663769 	.word	0x3e663769
 8006940:	c5d26bf1 	.word	0xc5d26bf1
 8006944:	3ebbbd41 	.word	0x3ebbbd41
 8006948:	af25de2c 	.word	0xaf25de2c
 800694c:	3f11566a 	.word	0x3f11566a
 8006950:	16bebd93 	.word	0x16bebd93
 8006954:	3f66c16c 	.word	0x3f66c16c
 8006958:	5555553e 	.word	0x5555553e
 800695c:	3fc55555 	.word	0x3fc55555
 8006960:	3fe00000 	.word	0x3fe00000
 8006964:	fff00000 	.word	0xfff00000
 8006968:	3ff00000 	.word	0x3ff00000
 800696c:	4090cbff 	.word	0x4090cbff
 8006970:	3f6f3400 	.word	0x3f6f3400
 8006974:	652b82fe 	.word	0x652b82fe
 8006978:	3c971547 	.word	0x3c971547

0800697c <fabs>:
 800697c:	ec51 0b10 	vmov	r0, r1, d0
 8006980:	ee10 2a10 	vmov	r2, s0
 8006984:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006988:	ec43 2b10 	vmov	d0, r2, r3
 800698c:	4770      	bx	lr
	...

08006990 <scalbn>:
 8006990:	b570      	push	{r4, r5, r6, lr}
 8006992:	ec55 4b10 	vmov	r4, r5, d0
 8006996:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800699a:	4606      	mov	r6, r0
 800699c:	462b      	mov	r3, r5
 800699e:	b999      	cbnz	r1, 80069c8 <scalbn+0x38>
 80069a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80069a4:	4323      	orrs	r3, r4
 80069a6:	d03f      	beq.n	8006a28 <scalbn+0x98>
 80069a8:	4b35      	ldr	r3, [pc, #212]	; (8006a80 <scalbn+0xf0>)
 80069aa:	4629      	mov	r1, r5
 80069ac:	ee10 0a10 	vmov	r0, s0
 80069b0:	2200      	movs	r2, #0
 80069b2:	f7f9 fdc9 	bl	8000548 <__aeabi_dmul>
 80069b6:	4b33      	ldr	r3, [pc, #204]	; (8006a84 <scalbn+0xf4>)
 80069b8:	429e      	cmp	r6, r3
 80069ba:	4604      	mov	r4, r0
 80069bc:	460d      	mov	r5, r1
 80069be:	da10      	bge.n	80069e2 <scalbn+0x52>
 80069c0:	a327      	add	r3, pc, #156	; (adr r3, 8006a60 <scalbn+0xd0>)
 80069c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c6:	e01f      	b.n	8006a08 <scalbn+0x78>
 80069c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80069cc:	4291      	cmp	r1, r2
 80069ce:	d10c      	bne.n	80069ea <scalbn+0x5a>
 80069d0:	ee10 2a10 	vmov	r2, s0
 80069d4:	4620      	mov	r0, r4
 80069d6:	4629      	mov	r1, r5
 80069d8:	f7f9 fc00 	bl	80001dc <__adddf3>
 80069dc:	4604      	mov	r4, r0
 80069de:	460d      	mov	r5, r1
 80069e0:	e022      	b.n	8006a28 <scalbn+0x98>
 80069e2:	460b      	mov	r3, r1
 80069e4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80069e8:	3936      	subs	r1, #54	; 0x36
 80069ea:	f24c 3250 	movw	r2, #50000	; 0xc350
 80069ee:	4296      	cmp	r6, r2
 80069f0:	dd0d      	ble.n	8006a0e <scalbn+0x7e>
 80069f2:	2d00      	cmp	r5, #0
 80069f4:	a11c      	add	r1, pc, #112	; (adr r1, 8006a68 <scalbn+0xd8>)
 80069f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069fa:	da02      	bge.n	8006a02 <scalbn+0x72>
 80069fc:	a11c      	add	r1, pc, #112	; (adr r1, 8006a70 <scalbn+0xe0>)
 80069fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a02:	a319      	add	r3, pc, #100	; (adr r3, 8006a68 <scalbn+0xd8>)
 8006a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a08:	f7f9 fd9e 	bl	8000548 <__aeabi_dmul>
 8006a0c:	e7e6      	b.n	80069dc <scalbn+0x4c>
 8006a0e:	1872      	adds	r2, r6, r1
 8006a10:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006a14:	428a      	cmp	r2, r1
 8006a16:	dcec      	bgt.n	80069f2 <scalbn+0x62>
 8006a18:	2a00      	cmp	r2, #0
 8006a1a:	dd08      	ble.n	8006a2e <scalbn+0x9e>
 8006a1c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a20:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006a28:	ec45 4b10 	vmov	d0, r4, r5
 8006a2c:	bd70      	pop	{r4, r5, r6, pc}
 8006a2e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006a32:	da08      	bge.n	8006a46 <scalbn+0xb6>
 8006a34:	2d00      	cmp	r5, #0
 8006a36:	a10a      	add	r1, pc, #40	; (adr r1, 8006a60 <scalbn+0xd0>)
 8006a38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a3c:	dac0      	bge.n	80069c0 <scalbn+0x30>
 8006a3e:	a10e      	add	r1, pc, #56	; (adr r1, 8006a78 <scalbn+0xe8>)
 8006a40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a44:	e7bc      	b.n	80069c0 <scalbn+0x30>
 8006a46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a4a:	3236      	adds	r2, #54	; 0x36
 8006a4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a50:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006a54:	4620      	mov	r0, r4
 8006a56:	4b0c      	ldr	r3, [pc, #48]	; (8006a88 <scalbn+0xf8>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	e7d5      	b.n	8006a08 <scalbn+0x78>
 8006a5c:	f3af 8000 	nop.w
 8006a60:	c2f8f359 	.word	0xc2f8f359
 8006a64:	01a56e1f 	.word	0x01a56e1f
 8006a68:	8800759c 	.word	0x8800759c
 8006a6c:	7e37e43c 	.word	0x7e37e43c
 8006a70:	8800759c 	.word	0x8800759c
 8006a74:	fe37e43c 	.word	0xfe37e43c
 8006a78:	c2f8f359 	.word	0xc2f8f359
 8006a7c:	81a56e1f 	.word	0x81a56e1f
 8006a80:	43500000 	.word	0x43500000
 8006a84:	ffff3cb0 	.word	0xffff3cb0
 8006a88:	3c900000 	.word	0x3c900000

08006a8c <with_errno>:
 8006a8c:	b570      	push	{r4, r5, r6, lr}
 8006a8e:	4604      	mov	r4, r0
 8006a90:	460d      	mov	r5, r1
 8006a92:	4616      	mov	r6, r2
 8006a94:	f000 f90c 	bl	8006cb0 <__errno>
 8006a98:	4629      	mov	r1, r5
 8006a9a:	6006      	str	r6, [r0, #0]
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}

08006aa0 <xflow>:
 8006aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006aa2:	4614      	mov	r4, r2
 8006aa4:	461d      	mov	r5, r3
 8006aa6:	b108      	cbz	r0, 8006aac <xflow+0xc>
 8006aa8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006aac:	e9cd 2300 	strd	r2, r3, [sp]
 8006ab0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	4629      	mov	r1, r5
 8006ab8:	f7f9 fd46 	bl	8000548 <__aeabi_dmul>
 8006abc:	2222      	movs	r2, #34	; 0x22
 8006abe:	b003      	add	sp, #12
 8006ac0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ac4:	f7ff bfe2 	b.w	8006a8c <with_errno>

08006ac8 <__math_uflow>:
 8006ac8:	b508      	push	{r3, lr}
 8006aca:	2200      	movs	r2, #0
 8006acc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ad0:	f7ff ffe6 	bl	8006aa0 <xflow>
 8006ad4:	ec41 0b10 	vmov	d0, r0, r1
 8006ad8:	bd08      	pop	{r3, pc}

08006ada <__math_oflow>:
 8006ada:	b508      	push	{r3, lr}
 8006adc:	2200      	movs	r2, #0
 8006ade:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006ae2:	f7ff ffdd 	bl	8006aa0 <xflow>
 8006ae6:	ec41 0b10 	vmov	d0, r0, r1
 8006aea:	bd08      	pop	{r3, pc}

08006aec <__ieee754_sqrt>:
 8006aec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af0:	ec55 4b10 	vmov	r4, r5, d0
 8006af4:	4e67      	ldr	r6, [pc, #412]	; (8006c94 <__ieee754_sqrt+0x1a8>)
 8006af6:	43ae      	bics	r6, r5
 8006af8:	ee10 0a10 	vmov	r0, s0
 8006afc:	ee10 2a10 	vmov	r2, s0
 8006b00:	4629      	mov	r1, r5
 8006b02:	462b      	mov	r3, r5
 8006b04:	d10d      	bne.n	8006b22 <__ieee754_sqrt+0x36>
 8006b06:	f7f9 fd1f 	bl	8000548 <__aeabi_dmul>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	4620      	mov	r0, r4
 8006b10:	4629      	mov	r1, r5
 8006b12:	f7f9 fb63 	bl	80001dc <__adddf3>
 8006b16:	4604      	mov	r4, r0
 8006b18:	460d      	mov	r5, r1
 8006b1a:	ec45 4b10 	vmov	d0, r4, r5
 8006b1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b22:	2d00      	cmp	r5, #0
 8006b24:	dc0b      	bgt.n	8006b3e <__ieee754_sqrt+0x52>
 8006b26:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006b2a:	4326      	orrs	r6, r4
 8006b2c:	d0f5      	beq.n	8006b1a <__ieee754_sqrt+0x2e>
 8006b2e:	b135      	cbz	r5, 8006b3e <__ieee754_sqrt+0x52>
 8006b30:	f7f9 fb52 	bl	80001d8 <__aeabi_dsub>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	f7f9 fe30 	bl	800079c <__aeabi_ddiv>
 8006b3c:	e7eb      	b.n	8006b16 <__ieee754_sqrt+0x2a>
 8006b3e:	1509      	asrs	r1, r1, #20
 8006b40:	f000 808d 	beq.w	8006c5e <__ieee754_sqrt+0x172>
 8006b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b48:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8006b4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b50:	07c9      	lsls	r1, r1, #31
 8006b52:	bf5c      	itt	pl
 8006b54:	005b      	lslpl	r3, r3, #1
 8006b56:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8006b5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006b5e:	bf58      	it	pl
 8006b60:	0052      	lslpl	r2, r2, #1
 8006b62:	2500      	movs	r5, #0
 8006b64:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006b68:	1076      	asrs	r6, r6, #1
 8006b6a:	0052      	lsls	r2, r2, #1
 8006b6c:	f04f 0e16 	mov.w	lr, #22
 8006b70:	46ac      	mov	ip, r5
 8006b72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b76:	eb0c 0001 	add.w	r0, ip, r1
 8006b7a:	4298      	cmp	r0, r3
 8006b7c:	bfde      	ittt	le
 8006b7e:	1a1b      	suble	r3, r3, r0
 8006b80:	eb00 0c01 	addle.w	ip, r0, r1
 8006b84:	186d      	addle	r5, r5, r1
 8006b86:	005b      	lsls	r3, r3, #1
 8006b88:	f1be 0e01 	subs.w	lr, lr, #1
 8006b8c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006b90:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006b94:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006b98:	d1ed      	bne.n	8006b76 <__ieee754_sqrt+0x8a>
 8006b9a:	4674      	mov	r4, lr
 8006b9c:	2720      	movs	r7, #32
 8006b9e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006ba2:	4563      	cmp	r3, ip
 8006ba4:	eb01 000e 	add.w	r0, r1, lr
 8006ba8:	dc02      	bgt.n	8006bb0 <__ieee754_sqrt+0xc4>
 8006baa:	d113      	bne.n	8006bd4 <__ieee754_sqrt+0xe8>
 8006bac:	4290      	cmp	r0, r2
 8006bae:	d811      	bhi.n	8006bd4 <__ieee754_sqrt+0xe8>
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	eb00 0e01 	add.w	lr, r0, r1
 8006bb6:	da57      	bge.n	8006c68 <__ieee754_sqrt+0x17c>
 8006bb8:	f1be 0f00 	cmp.w	lr, #0
 8006bbc:	db54      	blt.n	8006c68 <__ieee754_sqrt+0x17c>
 8006bbe:	f10c 0801 	add.w	r8, ip, #1
 8006bc2:	eba3 030c 	sub.w	r3, r3, ip
 8006bc6:	4290      	cmp	r0, r2
 8006bc8:	bf88      	it	hi
 8006bca:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006bce:	1a12      	subs	r2, r2, r0
 8006bd0:	440c      	add	r4, r1
 8006bd2:	46c4      	mov	ip, r8
 8006bd4:	005b      	lsls	r3, r3, #1
 8006bd6:	3f01      	subs	r7, #1
 8006bd8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006bdc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006be0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006be4:	d1dd      	bne.n	8006ba2 <__ieee754_sqrt+0xb6>
 8006be6:	4313      	orrs	r3, r2
 8006be8:	d01b      	beq.n	8006c22 <__ieee754_sqrt+0x136>
 8006bea:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8006c98 <__ieee754_sqrt+0x1ac>
 8006bee:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8006c9c <__ieee754_sqrt+0x1b0>
 8006bf2:	e9da 0100 	ldrd	r0, r1, [sl]
 8006bf6:	e9db 2300 	ldrd	r2, r3, [fp]
 8006bfa:	f7f9 faed 	bl	80001d8 <__aeabi_dsub>
 8006bfe:	e9da 8900 	ldrd	r8, r9, [sl]
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	4640      	mov	r0, r8
 8006c08:	4649      	mov	r1, r9
 8006c0a:	f7f9 ff19 	bl	8000a40 <__aeabi_dcmple>
 8006c0e:	b140      	cbz	r0, 8006c22 <__ieee754_sqrt+0x136>
 8006c10:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006c14:	e9da 0100 	ldrd	r0, r1, [sl]
 8006c18:	e9db 2300 	ldrd	r2, r3, [fp]
 8006c1c:	d126      	bne.n	8006c6c <__ieee754_sqrt+0x180>
 8006c1e:	3501      	adds	r5, #1
 8006c20:	463c      	mov	r4, r7
 8006c22:	106a      	asrs	r2, r5, #1
 8006c24:	0863      	lsrs	r3, r4, #1
 8006c26:	07e9      	lsls	r1, r5, #31
 8006c28:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006c2c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006c30:	bf48      	it	mi
 8006c32:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006c36:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8006c3a:	461c      	mov	r4, r3
 8006c3c:	e76d      	b.n	8006b1a <__ieee754_sqrt+0x2e>
 8006c3e:	0ad3      	lsrs	r3, r2, #11
 8006c40:	3815      	subs	r0, #21
 8006c42:	0552      	lsls	r2, r2, #21
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0fa      	beq.n	8006c3e <__ieee754_sqrt+0x152>
 8006c48:	02dc      	lsls	r4, r3, #11
 8006c4a:	d50a      	bpl.n	8006c62 <__ieee754_sqrt+0x176>
 8006c4c:	f1c1 0420 	rsb	r4, r1, #32
 8006c50:	fa22 f404 	lsr.w	r4, r2, r4
 8006c54:	1e4d      	subs	r5, r1, #1
 8006c56:	408a      	lsls	r2, r1
 8006c58:	4323      	orrs	r3, r4
 8006c5a:	1b41      	subs	r1, r0, r5
 8006c5c:	e772      	b.n	8006b44 <__ieee754_sqrt+0x58>
 8006c5e:	4608      	mov	r0, r1
 8006c60:	e7f0      	b.n	8006c44 <__ieee754_sqrt+0x158>
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	3101      	adds	r1, #1
 8006c66:	e7ef      	b.n	8006c48 <__ieee754_sqrt+0x15c>
 8006c68:	46e0      	mov	r8, ip
 8006c6a:	e7aa      	b.n	8006bc2 <__ieee754_sqrt+0xd6>
 8006c6c:	f7f9 fab6 	bl	80001dc <__adddf3>
 8006c70:	e9da 8900 	ldrd	r8, r9, [sl]
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	4640      	mov	r0, r8
 8006c7a:	4649      	mov	r1, r9
 8006c7c:	f7f9 fed6 	bl	8000a2c <__aeabi_dcmplt>
 8006c80:	b120      	cbz	r0, 8006c8c <__ieee754_sqrt+0x1a0>
 8006c82:	1ca0      	adds	r0, r4, #2
 8006c84:	bf08      	it	eq
 8006c86:	3501      	addeq	r5, #1
 8006c88:	3402      	adds	r4, #2
 8006c8a:	e7ca      	b.n	8006c22 <__ieee754_sqrt+0x136>
 8006c8c:	3401      	adds	r4, #1
 8006c8e:	f024 0401 	bic.w	r4, r4, #1
 8006c92:	e7c6      	b.n	8006c22 <__ieee754_sqrt+0x136>
 8006c94:	7ff00000 	.word	0x7ff00000
 8006c98:	20000010 	.word	0x20000010
 8006c9c:	20000018 	.word	0x20000018

08006ca0 <memset>:
 8006ca0:	4402      	add	r2, r0
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d100      	bne.n	8006caa <memset+0xa>
 8006ca8:	4770      	bx	lr
 8006caa:	f803 1b01 	strb.w	r1, [r3], #1
 8006cae:	e7f9      	b.n	8006ca4 <memset+0x4>

08006cb0 <__errno>:
 8006cb0:	4b01      	ldr	r3, [pc, #4]	; (8006cb8 <__errno+0x8>)
 8006cb2:	6818      	ldr	r0, [r3, #0]
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	2000006c 	.word	0x2000006c

08006cbc <__libc_init_array>:
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	4d0d      	ldr	r5, [pc, #52]	; (8006cf4 <__libc_init_array+0x38>)
 8006cc0:	4c0d      	ldr	r4, [pc, #52]	; (8006cf8 <__libc_init_array+0x3c>)
 8006cc2:	1b64      	subs	r4, r4, r5
 8006cc4:	10a4      	asrs	r4, r4, #2
 8006cc6:	2600      	movs	r6, #0
 8006cc8:	42a6      	cmp	r6, r4
 8006cca:	d109      	bne.n	8006ce0 <__libc_init_array+0x24>
 8006ccc:	4d0b      	ldr	r5, [pc, #44]	; (8006cfc <__libc_init_array+0x40>)
 8006cce:	4c0c      	ldr	r4, [pc, #48]	; (8006d00 <__libc_init_array+0x44>)
 8006cd0:	f000 f818 	bl	8006d04 <_init>
 8006cd4:	1b64      	subs	r4, r4, r5
 8006cd6:	10a4      	asrs	r4, r4, #2
 8006cd8:	2600      	movs	r6, #0
 8006cda:	42a6      	cmp	r6, r4
 8006cdc:	d105      	bne.n	8006cea <__libc_init_array+0x2e>
 8006cde:	bd70      	pop	{r4, r5, r6, pc}
 8006ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce4:	4798      	blx	r3
 8006ce6:	3601      	adds	r6, #1
 8006ce8:	e7ee      	b.n	8006cc8 <__libc_init_array+0xc>
 8006cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cee:	4798      	blx	r3
 8006cf0:	3601      	adds	r6, #1
 8006cf2:	e7f2      	b.n	8006cda <__libc_init_array+0x1e>
 8006cf4:	08006db0 	.word	0x08006db0
 8006cf8:	08006db0 	.word	0x08006db0
 8006cfc:	08006db0 	.word	0x08006db0
 8006d00:	08006db4 	.word	0x08006db4

08006d04 <_init>:
 8006d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d06:	bf00      	nop
 8006d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d0a:	bc08      	pop	{r3}
 8006d0c:	469e      	mov	lr, r3
 8006d0e:	4770      	bx	lr

08006d10 <_fini>:
 8006d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d12:	bf00      	nop
 8006d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d16:	bc08      	pop	{r3}
 8006d18:	469e      	mov	lr, r3
 8006d1a:	4770      	bx	lr
