
MatiInzynierkaCpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800b240  0800b240  0001b240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6a4  0800b6a4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6a4  0800b6a4  0001b6a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6ac  0800b6ac  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6ac  0800b6ac  0001b6ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6b0  0800b6b0  0001b6b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b6b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  200001e4  0800b898  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  0800b898  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016034  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000333b  00000000  00000000  0003628b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  000395c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ec3  00000000  00000000  0003a900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025030  00000000  00000000  0003b7c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019e97  00000000  00000000  000607f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d128d  00000000  00000000  0007a68a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006230  00000000  00000000  0014b918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00151b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b228 	.word	0x0800b228

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800b228 	.word	0x0800b228

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <IncInit>:
			return 0;

	return 1;
}

void IncInit(void){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
	transfer In,Out;
	Out.buf[0] = 0x10 | (0x00);
 8000f4a:	2310      	movs	r3, #16
 8000f4c:	703b      	strb	r3, [r7, #0]
	Out.buf[1] = 0x10;
 8000f4e:	2310      	movs	r3, #16
 8000f50:	707b      	strb	r3, [r7, #1]
	//6Bh - who I am
	SPIIncSend(Out.buf, In.buf, 2);
 8000f52:	1d39      	adds	r1, r7, #4
 8000f54:	463b      	mov	r3, r7
 8000f56:	2202      	movs	r2, #2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 fa21 	bl	80013a0 <SPIIncSend>

	return;
 8000f5e:	bf00      	nop
}
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <IncGetAngle>:

float IncGetAngle(void){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
	float result;
	char address = 0x28 | (0x80);
 8000f6e:	23a8      	movs	r3, #168	; 0xa8
 8000f70:	72fb      	strb	r3, [r7, #11]
			char a;
			int16_t values[2];
		};
	}receive;

	SPIIncSend(&address, receive.data, 5);
 8000f72:	1d39      	adds	r1, r7, #4
 8000f74:	f107 030b 	add.w	r3, r7, #11
 8000f78:	2205      	movs	r2, #5
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 fa10 	bl	80013a0 <SPIIncSend>

	result = atan2f ((float)receive.values[1],(float)receive.values[0]) * 180 / 3.141592653f;
 8000f80:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f90:	ee07 3a10 	vmov	s14, r3
 8000f94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f98:	eef0 0a47 	vmov.f32	s1, s14
 8000f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa0:	f006 fef3 	bl	8007d8a <atan2f>
 8000fa4:	eef0 7a40 	vmov.f32	s15, s0
 8000fa8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000fcc <IncGetAngle+0x64>
 8000fac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fb0:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000fd0 <IncGetAngle+0x68>
 8000fb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb8:	edc7 7a03 	vstr	s15, [r7, #12]

	return result;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	ee07 3a90 	vmov	s15, r3
}
 8000fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	43340000 	.word	0x43340000
 8000fd0:	40490fdb 	.word	0x40490fdb

08000fd4 <PSSetSeaLevelPressure>:
#define CTRL_REG_DEF_OSM	(CTRL_REG_DEF | 1)
#define SA_READ				(0x80)

static float referencePressure = 101325.0f;

void PSSetSeaLevelPressure(float pressure){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	ed87 0a01 	vstr	s0, [r7, #4]
	referencePressure = pressure;
 8000fde:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <PSSetSeaLevelPressure+0x1c>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6013      	str	r3, [r2, #0]
	return;
 8000fe4:	bf00      	nop
}
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000000 	.word	0x20000000

08000ff4 <PSGetSeaLevelPressure>:

__attribute__((weak)) float PSGetSeaLevelPressure(void){
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

	return referencePressure;
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <PSGetSeaLevelPressure+0x18>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	ee07 3a90 	vmov	s15, r3
}
 8001000:	eeb0 0a67 	vmov.f32	s0, s15
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	20000000 	.word	0x20000000

08001010 <PSCalculateAlt>:

__attribute__((weak)) float PSCalculateAlt(float pressure, float temp){
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	ed87 0a01 	vstr	s0, [r7, #4]
 800101a:	edc7 0a00 	vstr	s1, [r7]


	return ((powf((PSGetSeaLevelPressure() / pressure), 1.0f/5.257f) - 1.0f) * (temp + 273.15f)) / 0.0065f;
 800101e:	f7ff ffe9 	bl	8000ff4 <PSGetSeaLevelPressure>
 8001022:	eef0 6a40 	vmov.f32	s13, s0
 8001026:	edd7 7a01 	vldr	s15, [r7, #4]
 800102a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800102e:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800106c <PSCalculateAlt+0x5c>
 8001032:	eeb0 0a47 	vmov.f32	s0, s14
 8001036:	f006 feaa 	bl	8007d8e <powf>
 800103a:	eef0 7a40 	vmov.f32	s15, s0
 800103e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001042:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001046:	edd7 7a00 	vldr	s15, [r7]
 800104a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001070 <PSCalculateAlt+0x60>
 800104e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001056:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001074 <PSCalculateAlt+0x64>
 800105a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800105e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001062:	eeb0 0a67 	vmov.f32	s0, s15
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	3e42c9b4 	.word	0x3e42c9b4
 8001070:	43889333 	.word	0x43889333
 8001074:	3bd4fdf4 	.word	0x3bd4fdf4

08001078 <PsPing>:

int32_t PsPing(void){
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
	transfer In,Out;
	Out.buf[0] = 0x0F | SA_READ;
 800107e:	238f      	movs	r3, #143	; 0x8f
 8001080:	703b      	strb	r3, [r7, #0]
	Out.buf[1] = 0x00;
 8001082:	2300      	movs	r3, #0
 8001084:	707b      	strb	r3, [r7, #1]
	In.dane = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
	//6Bh - who I am
	SPIPsSend(Out.buf, In.buf, 2);
 800108a:	1d39      	adds	r1, r7, #4
 800108c:	463b      	mov	r3, r7
 800108e:	2202      	movs	r2, #2
 8001090:	4618      	mov	r0, r3
 8001092:	f000 f9af 	bl	80013f4 <SPIPsSend>

	if(In.buf[1] == 0xB1)
 8001096:	797b      	ldrb	r3, [r7, #5]
 8001098:	2bb1      	cmp	r3, #177	; 0xb1
 800109a:	d101      	bne.n	80010a0 <PsPing+0x28>
			return 0;
 800109c:	2300      	movs	r3, #0
 800109e:	e000      	b.n	80010a2 <PsPing+0x2a>

	return 1;
 80010a0:	2301      	movs	r3, #1
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <PSRead>:


//No error checking!
int32_t PSRead(PSReading * data){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retVal;
	transfer In,Out;
	//Force one shoot:
	Out.buf[0] = 0x11;
 80010b4:	2311      	movs	r3, #17
 80010b6:	733b      	strb	r3, [r7, #12]
	Out.buf[1] = CTRL_REG_DEF_OSM;
 80010b8:	2311      	movs	r3, #17
 80010ba:	737b      	strb	r3, [r7, #13]
	retVal = SPIPsSend(Out.buf, In.buf, 2);
 80010bc:	f107 0110 	add.w	r1, r7, #16
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2202      	movs	r2, #2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f994 	bl	80013f4 <SPIPsSend>
 80010cc:	4603      	mov	r3, r0
 80010ce:	75fb      	strb	r3, [r7, #23]
	//Wait for one shoot done:
	Out.buf[0] = 0x11 | SA_READ;
 80010d0:	2391      	movs	r3, #145	; 0x91
 80010d2:	733b      	strb	r3, [r7, #12]
	Out.buf[1] = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	737b      	strb	r3, [r7, #13]
	while(In.buf[1] != CTRL_REG_DEF){
 80010d8:	e009      	b.n	80010ee <PSRead+0x42>
		retVal = SPIPsSend(Out.buf, In.buf, 2);
 80010da:	f107 0110 	add.w	r1, r7, #16
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	2202      	movs	r2, #2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 f985 	bl	80013f4 <SPIPsSend>
 80010ea:	4603      	mov	r3, r0
 80010ec:	75fb      	strb	r3, [r7, #23]
	while(In.buf[1] != CTRL_REG_DEF){
 80010ee:	7c7b      	ldrb	r3, [r7, #17]
 80010f0:	2b10      	cmp	r3, #16
 80010f2:	d1f2      	bne.n	80010da <PSRead+0x2e>
		//todo: add timeout!
	}
	//Read values:
	//Pressure:
	Out.dane = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
	In.dane = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
	Out.buf[0] = 0x28 | SA_READ;
 80010fc:	23a8      	movs	r3, #168	; 0xa8
 80010fe:	733b      	strb	r3, [r7, #12]
	retVal = SPIPsSend(Out.buf, In.buf, 4);
 8001100:	f107 0110 	add.w	r1, r7, #16
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2204      	movs	r2, #4
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f972 	bl	80013f4 <SPIPsSend>
 8001110:	4603      	mov	r3, r0
 8001112:	75fb      	strb	r3, [r7, #23]

	//24 bit 2's complement
	In.dane >>=8; //skip nulls
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	0a1b      	lsrs	r3, r3, #8
 8001118:	613b      	str	r3, [r7, #16]
	if(In.buf[3] & 0x80){
 800111a:	7cfb      	ldrb	r3, [r7, #19]
 800111c:	b25b      	sxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	da01      	bge.n	8001126 <PSRead+0x7a>
		//negative
		In.buf[4]=0xff;
 8001122:	23ff      	movs	r3, #255	; 0xff
 8001124:	753b      	strb	r3, [r7, #20]
	}

	data->pres = (float)*(int32_t *)(In.buf)/40.96f;
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	ee07 3a90 	vmov	s15, r3
 8001130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001134:	eddf 6a21 	vldr	s13, [pc, #132]	; 80011bc <PSRead+0x110>
 8001138:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	edc3 7a01 	vstr	s15, [r3, #4]


	//Temperature:
	Out.dane = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
	In.dane = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
	Out.buf[0] = 0x2B | SA_READ;
 800114a:	23ab      	movs	r3, #171	; 0xab
 800114c:	733b      	strb	r3, [r7, #12]
	retVal = SPIPsSend(Out.buf, In.buf, 3);
 800114e:	f107 0110 	add.w	r1, r7, #16
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	2203      	movs	r2, #3
 8001158:	4618      	mov	r0, r3
 800115a:	f000 f94b 	bl	80013f4 <SPIPsSend>
 800115e:	4603      	mov	r3, r0
 8001160:	75fb      	strb	r3, [r7, #23]

	data->temp = (float)*((int16_t *)(In.buf+1));
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	3301      	adds	r3, #1
 8001168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	edc3 7a00 	vstr	s15, [r3]
	data->temp /= 100;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	ed93 7a00 	vldr	s14, [r3]
 8001180:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80011c0 <PSRead+0x114>
 8001184:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	edc3 7a00 	vstr	s15, [r3]

	//calculate Altitude:

	data->alt = PSCalculateAlt(data->pres,data->temp);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	edd3 7a01 	vldr	s15, [r3, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	ed93 7a00 	vldr	s14, [r3]
 800119a:	eef0 0a47 	vmov.f32	s1, s14
 800119e:	eeb0 0a67 	vmov.f32	s0, s15
 80011a2:	f7ff ff35 	bl	8001010 <PSCalculateAlt>
 80011a6:	eef0 7a40 	vmov.f32	s15, s0
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	edc3 7a02 	vstr	s15, [r3, #8]

	return retVal;
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	4223d70a 	.word	0x4223d70a
 80011c0:	42c80000 	.word	0x42c80000

080011c4 <LED_ENABLE>:

LEDS_REG rejestryLedow[4] = {{0x55,0x55},{0x55,0x55},{0x55,0x55},{0x55,0x55}}; //default values
uint8_t LEDS_ADDRESSES[4] = {0x60,0x61,0x62,0x64};


static void LED_ENABLE(uint8_t device_no, uint8_t led_no){
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	460a      	mov	r2, r1
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	4613      	mov	r3, r2
 80011d2:	71bb      	strb	r3, [r7, #6]
	if(device_no > 3)
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d832      	bhi.n	8001240 <LED_ENABLE+0x7c>
		return;
	if(led_no > 6) //7 th is disabled by common reset
 80011da:	79bb      	ldrb	r3, [r7, #6]
 80011dc:	2b06      	cmp	r3, #6
 80011de:	d831      	bhi.n	8001244 <LED_ENABLE+0x80>
			return;

	if(led_no > 3)
 80011e0:	79bb      	ldrb	r3, [r7, #6]
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	d917      	bls.n	8001216 <LED_ENABLE+0x52>
		rejestryLedow[device_no].higher |= (1<<((led_no & 0x3)*2));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	4a19      	ldr	r2, [pc, #100]	; (8001250 <LED_ENABLE+0x8c>)
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	785b      	ldrb	r3, [r3, #1]
 80011f0:	b25a      	sxtb	r2, r3
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2101      	movs	r1, #1
 80011fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001200:	b25b      	sxtb	r3, r3
 8001202:	4313      	orrs	r3, r2
 8001204:	b25a      	sxtb	r2, r3
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	b2d1      	uxtb	r1, r2
 800120a:	4a11      	ldr	r2, [pc, #68]	; (8001250 <LED_ENABLE+0x8c>)
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4413      	add	r3, r2
 8001210:	460a      	mov	r2, r1
 8001212:	705a      	strb	r2, [r3, #1]
	else
		rejestryLedow[device_no].lower |= (1<<((led_no & 0x3)*2));

	return;
 8001214:	e017      	b.n	8001246 <LED_ENABLE+0x82>
		rejestryLedow[device_no].lower |= (1<<((led_no & 0x3)*2));
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <LED_ENABLE+0x8c>)
 800121a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800121e:	b25a      	sxtb	r2, r3
 8001220:	79bb      	ldrb	r3, [r7, #6]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	2101      	movs	r1, #1
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	b25b      	sxtb	r3, r3
 8001230:	4313      	orrs	r3, r2
 8001232:	b25a      	sxtb	r2, r3
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	b2d1      	uxtb	r1, r2
 8001238:	4a05      	ldr	r2, [pc, #20]	; (8001250 <LED_ENABLE+0x8c>)
 800123a:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
	return;
 800123e:	e002      	b.n	8001246 <LED_ENABLE+0x82>
		return;
 8001240:	bf00      	nop
 8001242:	e000      	b.n	8001246 <LED_ENABLE+0x82>
			return;
 8001244:	bf00      	nop
}
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	20000004 	.word	0x20000004

08001254 <LED_DISABLE>:

static void LED_DISABLE(uint8_t device_no, uint8_t led_no){
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	460a      	mov	r2, r1
 800125e:	71fb      	strb	r3, [r7, #7]
 8001260:	4613      	mov	r3, r2
 8001262:	71bb      	strb	r3, [r7, #6]
	if(device_no > 3)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	2b03      	cmp	r3, #3
 8001268:	d836      	bhi.n	80012d8 <LED_DISABLE+0x84>
		return;
	if(led_no > 6) //7 th is disabled by common reset
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	2b06      	cmp	r3, #6
 800126e:	d835      	bhi.n	80012dc <LED_DISABLE+0x88>
			return;

	if(led_no > 3)
 8001270:	79bb      	ldrb	r3, [r7, #6]
 8001272:	2b03      	cmp	r3, #3
 8001274:	d919      	bls.n	80012aa <LED_DISABLE+0x56>
		rejestryLedow[device_no].higher &= ~(1<<((led_no & 0x3)*2));
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <LED_DISABLE+0x94>)
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	785b      	ldrb	r3, [r3, #1]
 8001280:	b25a      	sxtb	r2, r3
 8001282:	79bb      	ldrb	r3, [r7, #6]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2101      	movs	r1, #1
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	b25b      	sxtb	r3, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	b25b      	sxtb	r3, r3
 8001296:	4013      	ands	r3, r2
 8001298:	b25a      	sxtb	r2, r3
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	b2d1      	uxtb	r1, r2
 800129e:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <LED_DISABLE+0x94>)
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	460a      	mov	r2, r1
 80012a6:	705a      	strb	r2, [r3, #1]
	else
		rejestryLedow[device_no].lower &= ~(1<<((led_no & 0x3)*2));

	return;
 80012a8:	e019      	b.n	80012de <LED_DISABLE+0x8a>
		rejestryLedow[device_no].lower &= ~(1<<((led_no & 0x3)*2));
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <LED_DISABLE+0x94>)
 80012ae:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80012b2:	b25a      	sxtb	r2, r3
 80012b4:	79bb      	ldrb	r3, [r7, #6]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	2101      	movs	r1, #1
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	b25b      	sxtb	r3, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	b25b      	sxtb	r3, r3
 80012c8:	4013      	ands	r3, r2
 80012ca:	b25a      	sxtb	r2, r3
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	b2d1      	uxtb	r1, r2
 80012d0:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <LED_DISABLE+0x94>)
 80012d2:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
	return;
 80012d6:	e002      	b.n	80012de <LED_DISABLE+0x8a>
		return;
 80012d8:	bf00      	nop
 80012da:	e000      	b.n	80012de <LED_DISABLE+0x8a>
			return;
 80012dc:	bf00      	nop
}
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	20000004 	.word	0x20000004

080012ec <LEDChangeState>:

void LEDChangeState(uint8_t device_no, uint8_t led_no, uint8_t state){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af04      	add	r7, sp, #16
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
 80012f6:	460b      	mov	r3, r1
 80012f8:	71bb      	strb	r3, [r7, #6]
 80012fa:	4613      	mov	r3, r2
 80012fc:	717b      	strb	r3, [r7, #5]
	if(device_no > 3)
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	2b03      	cmp	r3, #3
 8001302:	d840      	bhi.n	8001386 <LEDChangeState+0x9a>
			return;
	if(led_no > 6) //7 th is disabled by common reset
 8001304:	79bb      	ldrb	r3, [r7, #6]
 8001306:	2b06      	cmp	r3, #6
 8001308:	d83f      	bhi.n	800138a <LEDChangeState+0x9e>
			return;

	if(state)
 800130a:	797b      	ldrb	r3, [r7, #5]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d006      	beq.n	800131e <LEDChangeState+0x32>
		LED_ENABLE(device_no, led_no);
 8001310:	79ba      	ldrb	r2, [r7, #6]
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	4611      	mov	r1, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ff54 	bl	80011c4 <LED_ENABLE>
 800131c:	e005      	b.n	800132a <LEDChangeState+0x3e>
	else
		LED_DISABLE(device_no, led_no);
 800131e:	79ba      	ldrb	r2, [r7, #6]
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff95 	bl	8001254 <LED_DISABLE>

	//send new config:

	if(led_no > 3){
 800132a:	79bb      	ldrb	r3, [r7, #6]
 800132c:	2b03      	cmp	r3, #3
 800132e:	d915      	bls.n	800135c <LEDChangeState+0x70>
		//address 6
		HAL_I2C_Mem_Write(&hi2c3,
							(LEDS_ADDRESSES[device_no]<<1),
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	4a18      	ldr	r2, [pc, #96]	; (8001394 <LEDChangeState+0xa8>)
 8001334:	5cd3      	ldrb	r3, [r2, r3]
 8001336:	b29b      	uxth	r3, r3
		HAL_I2C_Mem_Write(&hi2c3,
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	b299      	uxth	r1, r3
							6,
							1,
							&(rejestryLedow[device_no].higher),
 800133c:	79fb      	ldrb	r3, [r7, #7]
		HAL_I2C_Mem_Write(&hi2c3,
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4a15      	ldr	r2, [pc, #84]	; (8001398 <LEDChangeState+0xac>)
 8001342:	4413      	add	r3, r2
 8001344:	3301      	adds	r3, #1
 8001346:	2264      	movs	r2, #100	; 0x64
 8001348:	9202      	str	r2, [sp, #8]
 800134a:	2201      	movs	r2, #1
 800134c:	9201      	str	r2, [sp, #4]
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2301      	movs	r3, #1
 8001352:	2206      	movs	r2, #6
 8001354:	4811      	ldr	r0, [pc, #68]	; (800139c <LEDChangeState+0xb0>)
 8001356:	f001 f9ef 	bl	8002738 <HAL_I2C_Mem_Write>
					1,
					100);
	}


	return;
 800135a:	e017      	b.n	800138c <LEDChangeState+0xa0>
					(LEDS_ADDRESSES[device_no]<<1),
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <LEDChangeState+0xa8>)
 8001360:	5cd3      	ldrb	r3, [r2, r3]
 8001362:	b29b      	uxth	r3, r3
		HAL_I2C_Mem_Write(&hi2c3,
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	b299      	uxth	r1, r3
					&(rejestryLedow[device_no].lower),
 8001368:	79fb      	ldrb	r3, [r7, #7]
		HAL_I2C_Mem_Write(&hi2c3,
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <LEDChangeState+0xac>)
 800136e:	4413      	add	r3, r2
 8001370:	2264      	movs	r2, #100	; 0x64
 8001372:	9202      	str	r2, [sp, #8]
 8001374:	2201      	movs	r2, #1
 8001376:	9201      	str	r2, [sp, #4]
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	2205      	movs	r2, #5
 800137e:	4807      	ldr	r0, [pc, #28]	; (800139c <LEDChangeState+0xb0>)
 8001380:	f001 f9da 	bl	8002738 <HAL_I2C_Mem_Write>
	return;
 8001384:	e002      	b.n	800138c <LEDChangeState+0xa0>
			return;
 8001386:	bf00      	nop
 8001388:	e000      	b.n	800138c <LEDChangeState+0xa0>
			return;
 800138a:	bf00      	nop
}
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2000000c 	.word	0x2000000c
 8001398:	20000004 	.word	0x20000004
 800139c:	20000200 	.word	0x20000200

080013a0 <SPIIncSend>:


extern SPI_HandleTypeDef hspi2;


HAL_StatusTypeDef SPIIncSend(char* dataOut,char * dataIn, uint16_t len){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	4613      	mov	r3, r2
 80013ac:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef retVal;

	HAL_GPIO_WritePin(CS_INC_GPIO_Port, CS_INC_Pin, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <SPIIncSend+0x4c>)
 80013b6:	f001 f90b 	bl	80025d0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f000 fe84 	bl	80020c8 <HAL_Delay>

	retVal = HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)dataOut, (uint8_t*)dataIn, len, 100);
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	2264      	movs	r2, #100	; 0x64
 80013c4:	9200      	str	r2, [sp, #0]
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	68f9      	ldr	r1, [r7, #12]
 80013ca:	4809      	ldr	r0, [pc, #36]	; (80013f0 <SPIIncSend+0x50>)
 80013cc:	f004 fd09 	bl	8005de2 <HAL_SPI_TransmitReceive>
 80013d0:	4603      	mov	r3, r0
 80013d2:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(CS_INC_GPIO_Port, CS_INC_Pin, 1);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013da:	4804      	ldr	r0, [pc, #16]	; (80013ec <SPIIncSend+0x4c>)
 80013dc:	f001 f8f8 	bl	80025d0 <HAL_GPIO_WritePin>

	return retVal;
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	48000400 	.word	0x48000400
 80013f0:	20000360 	.word	0x20000360

080013f4 <SPIPsSend>:
	HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, 1);

	return retVal;
}

HAL_StatusTypeDef SPIPsSend(char* dataOut,char * dataIn, uint16_t len){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	4613      	mov	r3, r2
 8001400:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef retVal;

	HAL_GPIO_WritePin(CS_PS_GPIO_Port, CS_PS_Pin, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2140      	movs	r1, #64	; 0x40
 8001406:	480d      	ldr	r0, [pc, #52]	; (800143c <SPIPsSend+0x48>)
 8001408:	f001 f8e2 	bl	80025d0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800140c:	2001      	movs	r0, #1
 800140e:	f000 fe5b 	bl	80020c8 <HAL_Delay>

	retVal = HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)dataOut, (uint8_t*)dataIn, len, 100);
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	2264      	movs	r2, #100	; 0x64
 8001416:	9200      	str	r2, [sp, #0]
 8001418:	68ba      	ldr	r2, [r7, #8]
 800141a:	68f9      	ldr	r1, [r7, #12]
 800141c:	4808      	ldr	r0, [pc, #32]	; (8001440 <SPIPsSend+0x4c>)
 800141e:	f004 fce0 	bl	8005de2 <HAL_SPI_TransmitReceive>
 8001422:	4603      	mov	r3, r0
 8001424:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(CS_PS_GPIO_Port, CS_PS_Pin, 1);
 8001426:	2201      	movs	r2, #1
 8001428:	2140      	movs	r1, #64	; 0x40
 800142a:	4804      	ldr	r0, [pc, #16]	; (800143c <SPIPsSend+0x48>)
 800142c:	f001 f8d0 	bl	80025d0 <HAL_GPIO_WritePin>

	return retVal;
 8001430:	7dfb      	ldrb	r3, [r7, #23]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	48000400 	.word	0x48000400
 8001440:	20000360 	.word	0x20000360
 8001444:	00000000 	.word	0x00000000

08001448 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001448:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800144c:	b092      	sub	sp, #72	; 0x48
 800144e:	af04      	add	r7, sp, #16
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001450:	f000 fdc5 	bl	8001fde <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001454:	f000 f932 	bl	80016bc <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001458:	f000 fa4e 	bl	80018f8 <MX_GPIO_Init>
    MX_SDMMC1_SD_Init();
 800145c:	f000 f9ec 	bl	8001838 <MX_SDMMC1_SD_Init>
    MX_FATFS_Init();
 8001460:	f006 fac2 	bl	80079e8 <MX_FATFS_Init>
    MX_SPI2_Init();
 8001464:	f000 fa0a 	bl	800187c <MX_SPI2_Init>
    MX_I2C3_Init();
 8001468:	f000 f97a 	bl	8001760 <MX_I2C3_Init>
    MX_LPUART1_UART_Init();
 800146c:	f000 f9b8 	bl	80017e0 <MX_LPUART1_UART_Init>
    /* USER CODE BEGIN 2 */

    HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, 1);
 8001470:	2201      	movs	r2, #1
 8001472:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001476:	488c      	ldr	r0, [pc, #560]	; (80016a8 <main+0x260>)
 8001478:	f001 f8aa 	bl	80025d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PS_GPIO_Port, CS_PS_Pin, 1);
 800147c:	2201      	movs	r2, #1
 800147e:	2140      	movs	r1, #64	; 0x40
 8001480:	4889      	ldr	r0, [pc, #548]	; (80016a8 <main+0x260>)
 8001482:	f001 f8a5 	bl	80025d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_INC_GPIO_Port, CS_INC_Pin, 1);
 8001486:	2201      	movs	r2, #1
 8001488:	f44f 7100 	mov.w	r1, #512	; 0x200
 800148c:	4886      	ldr	r0, [pc, #536]	; (80016a8 <main+0x260>)
 800148e:	f001 f89f 	bl	80025d0 <HAL_GPIO_WritePin>

    // Check I2C:
    // Set beginning altitude:

    LEDChangeState(0, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff ff28 	bl	80012ec <LEDChangeState>

    // get beginning data:

    PSReading PSData;
    if (!PsPing())
 800149c:	f7ff fdec 	bl	8001078 <PsPing>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d109      	bne.n	80014ba <main+0x72>
    {
        PSRead(&PSData);
 80014a6:	463b      	mov	r3, r7
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fdff 	bl	80010ac <PSRead>
        PSSetSeaLevelPressure(PSData.pres);
 80014ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b2:	eeb0 0a67 	vmov.f32	s0, s15
 80014b6:	f7ff fd8d 	bl	8000fd4 <PSSetSeaLevelPressure>
    }
    IncInit();
 80014ba:	f7ff fd43 	bl	8000f44 <IncInit>
    float referenceAngle = IncGetAngle();
 80014be:	f7ff fd53 	bl	8000f68 <IncGetAngle>
 80014c2:	ed87 0a05 	vstr	s0, [r7, #20]

    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    float filteredAlt = 0, filteredAng = 0, filteredAltOld;
 80014c6:	f04f 0300 	mov.w	r3, #0
 80014ca:	637b      	str	r3, [r7, #52]	; 0x34
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	633b      	str	r3, [r7, #48]	; 0x30
    int x = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
    float angle;

    int criticalCounter = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28

    while (1)
    {

        PSRead(&PSData);
 80014da:	463b      	mov	r3, r7
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fde5 	bl	80010ac <PSRead>
        angle = IncGetAngle();
 80014e2:	f7ff fd41 	bl	8000f68 <IncGetAngle>
 80014e6:	ed87 0a03 	vstr	s0, [r7, #12]

        // Filter:
        filteredAlt = filteredAlt * (1 - FILTER_A) + FILTER_A * PSData.alt;
 80014ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80014ec:	f7ff f82c 	bl	8000548 <__aeabi_f2d>
 80014f0:	a367      	add	r3, pc, #412	; (adr r3, 8001690 <main+0x248>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7ff f87f 	bl	80005f8 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4614      	mov	r4, r2
 8001500:	461d      	mov	r5, r3
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f81f 	bl	8000548 <__aeabi_f2d>
 800150a:	a363      	add	r3, pc, #396	; (adr r3, 8001698 <main+0x250>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f872 	bl	80005f8 <__aeabi_dmul>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4620      	mov	r0, r4
 800151a:	4629      	mov	r1, r5
 800151c:	f7fe feb6 	bl	800028c <__adddf3>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	f7ff fb3e 	bl	8000ba8 <__aeabi_d2f>
 800152c:	4603      	mov	r3, r0
 800152e:	637b      	str	r3, [r7, #52]	; 0x34
        filteredAng = filteredAng * (1 - FILTER_A) + FILTER_A * angle;
 8001530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001532:	f7ff f809 	bl	8000548 <__aeabi_f2d>
 8001536:	a356      	add	r3, pc, #344	; (adr r3, 8001690 <main+0x248>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	f7ff f85c 	bl	80005f8 <__aeabi_dmul>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4614      	mov	r4, r2
 8001546:	461d      	mov	r5, r3
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f7fe fffd 	bl	8000548 <__aeabi_f2d>
 800154e:	a352      	add	r3, pc, #328	; (adr r3, 8001698 <main+0x250>)
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	f7ff f850 	bl	80005f8 <__aeabi_dmul>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4620      	mov	r0, r4
 800155e:	4629      	mov	r1, r5
 8001560:	f7fe fe94 	bl	800028c <__adddf3>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	f7ff fb1c 	bl	8000ba8 <__aeabi_d2f>
 8001570:	4603      	mov	r3, r0
 8001572:	633b      	str	r3, [r7, #48]	; 0x30

        (void)angle;
        if (( fabs(angle-referenceAngle) > CRIT_ANGLE) || ((fabs(filteredAlt - filteredAltOld) * 10) > CRIT_ACC))
 8001574:	ed97 7a03 	vldr	s14, [r7, #12]
 8001578:	edd7 7a05 	vldr	s15, [r7, #20]
 800157c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001580:	eef0 7ae7 	vabs.f32	s15, s15
 8001584:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800158c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001590:	dc1c      	bgt.n	80015cc <main+0x184>
 8001592:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001596:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800159a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159e:	eef0 7ae7 	vabs.f32	s15, s15
 80015a2:	ee17 0a90 	vmov	r0, s15
 80015a6:	f7fe ffcf 	bl	8000548 <__aeabi_f2d>
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	4b3f      	ldr	r3, [pc, #252]	; (80016ac <main+0x264>)
 80015b0:	f7ff f822 	bl	80005f8 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	a338      	add	r3, pc, #224	; (adr r3, 80016a0 <main+0x258>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7ff faa9 	bl	8000b18 <__aeabi_dcmpgt>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d040      	beq.n	800164e <main+0x206>
        {
            printf("STAN KRYTYCZNY!\n");
 80015cc:	4838      	ldr	r0, [pc, #224]	; (80016b0 <main+0x268>)
 80015ce:	f007 fe91 	bl	80092f4 <puts>
            criticalCounter++;
 80015d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d4:	3301      	adds	r3, #1
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
            if (criticalCounter > 10)
 80015d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015da:	2b0a      	cmp	r3, #10
 80015dc:	dd39      	ble.n	8001652 <main+0x20a>
            {
                // SMT went wrong
            	printf("STAN BARDZO KRYTYCZNY!\n");
 80015de:	4835      	ldr	r0, [pc, #212]	; (80016b4 <main+0x26c>)
 80015e0:	f007 fe88 	bl	80092f4 <puts>
                while (1)
                {
                    for (int x = 0; x < 4; ++x)
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
 80015e8:	e013      	b.n	8001612 <main+0x1ca>
                    {
                        for (int y = 0; y < 7; ++y)
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
 80015ee:	e00a      	b.n	8001606 <main+0x1be>
                        {
                            LEDChangeState(x, y, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	6a39      	ldr	r1, [r7, #32]
 80015f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015f6:	f7ff fe79 	bl	80012ec <LEDChangeState>
                            HAL_Delay(10);
 80015fa:	200a      	movs	r0, #10
 80015fc:	f000 fd64 	bl	80020c8 <HAL_Delay>
                        for (int y = 0; y < 7; ++y)
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	3301      	adds	r3, #1
 8001604:	623b      	str	r3, [r7, #32]
 8001606:	6a3b      	ldr	r3, [r7, #32]
 8001608:	2b06      	cmp	r3, #6
 800160a:	ddf1      	ble.n	80015f0 <main+0x1a8>
                    for (int x = 0; x < 4; ++x)
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	3301      	adds	r3, #1
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	2b03      	cmp	r3, #3
 8001616:	dde8      	ble.n	80015ea <main+0x1a2>
                        }
                    }
                    for (int x = 0; x < 4; ++x)
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
 800161c:	e013      	b.n	8001646 <main+0x1fe>
                    {
                        for (int y = 0; y < 7; ++y)
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
 8001622:	e00a      	b.n	800163a <main+0x1f2>
                        {
                            LEDChangeState(x, y, 1);
 8001624:	2201      	movs	r2, #1
 8001626:	69b9      	ldr	r1, [r7, #24]
 8001628:	69f8      	ldr	r0, [r7, #28]
 800162a:	f7ff fe5f 	bl	80012ec <LEDChangeState>
                            HAL_Delay(10);
 800162e:	200a      	movs	r0, #10
 8001630:	f000 fd4a 	bl	80020c8 <HAL_Delay>
                        for (int y = 0; y < 7; ++y)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	3301      	adds	r3, #1
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	2b06      	cmp	r3, #6
 800163e:	ddf1      	ble.n	8001624 <main+0x1dc>
                    for (int x = 0; x < 4; ++x)
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	3301      	adds	r3, #1
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	2b03      	cmp	r3, #3
 800164a:	dde8      	ble.n	800161e <main+0x1d6>
                    for (int x = 0; x < 4; ++x)
 800164c:	e7ca      	b.n	80015e4 <main+0x19c>
                }
            }
        }
        else
        {
            criticalCounter = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        printf("KAT,%3.1f,WYS,%1.1f,T,%3.1f\n", filteredAng, filteredAlt, PSData.temp);
 8001652:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001654:	f7fe ff78 	bl	8000548 <__aeabi_f2d>
 8001658:	4680      	mov	r8, r0
 800165a:	4689      	mov	r9, r1
 800165c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800165e:	f7fe ff73 	bl	8000548 <__aeabi_f2d>
 8001662:	4604      	mov	r4, r0
 8001664:	460d      	mov	r5, r1
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe ff6d 	bl	8000548 <__aeabi_f2d>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001676:	e9cd 4500 	strd	r4, r5, [sp]
 800167a:	4642      	mov	r2, r8
 800167c:	464b      	mov	r3, r9
 800167e:	480e      	ldr	r0, [pc, #56]	; (80016b8 <main+0x270>)
 8001680:	f007 fdd2 	bl	8009228 <iprintf>

        HAL_Delay(100);
 8001684:	2064      	movs	r0, #100	; 0x64
 8001686:	f000 fd1f 	bl	80020c8 <HAL_Delay>
        filteredAltOld = filteredAlt;
 800168a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
        PSRead(&PSData);
 800168e:	e724      	b.n	80014da <main+0x92>
 8001690:	eb851eb8 	.word	0xeb851eb8
 8001694:	3feeb851 	.word	0x3feeb851
 8001698:	47ae147b 	.word	0x47ae147b
 800169c:	3fa47ae1 	.word	0x3fa47ae1
 80016a0:	9999999a 	.word	0x9999999a
 80016a4:	3fe99999 	.word	0x3fe99999
 80016a8:	48000400 	.word	0x48000400
 80016ac:	40240000 	.word	0x40240000
 80016b0:	0800b240 	.word	0x0800b240
 80016b4:	0800b250 	.word	0x0800b250
 80016b8:	0800b268 	.word	0x0800b268

080016bc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b096      	sub	sp, #88	; 0x58
 80016c0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	2244      	movs	r2, #68	; 0x44
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f007 fef2 	bl	80094b4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d0:	463b      	mov	r3, r7
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016e2:	f001 fc47 	bl	8002f74 <HAL_PWREx_ControlVoltageScaling>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <SystemClock_Config+0x34>
    {
        Error_Handler();
 80016ec:	f000 f968 	bl	80019c0 <Error_Handler>
    }

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016f0:	2302      	movs	r3, #2
 80016f2:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016f8:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016fa:	2310      	movs	r3, #16
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fe:	2302      	movs	r3, #2
 8001700:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001702:	2302      	movs	r3, #2
 8001704:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLM = 1;
 8001706:	2301      	movs	r3, #1
 8001708:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLN = 10;
 800170a:	230a      	movs	r3, #10
 800170c:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800170e:	2307      	movs	r3, #7
 8001710:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001712:	2302      	movs	r3, #2
 8001714:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001716:	2302      	movs	r3, #2
 8001718:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4618      	mov	r0, r3
 8001720:	f001 fc7e 	bl	8003020 <HAL_RCC_OscConfig>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <SystemClock_Config+0x72>
    {
        Error_Handler();
 800172a:	f000 f949 	bl	80019c0 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800172e:	230f      	movs	r3, #15
 8001730:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001732:	2303      	movs	r3, #3
 8001734:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001742:	463b      	mov	r3, r7
 8001744:	2104      	movs	r1, #4
 8001746:	4618      	mov	r0, r3
 8001748:	f002 f87e 	bl	8003848 <HAL_RCC_ClockConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SystemClock_Config+0x9a>
    {
        Error_Handler();
 8001752:	f000 f935 	bl	80019c0 <Error_Handler>
    }
}
 8001756:	bf00      	nop
 8001758:	3758      	adds	r7, #88	; 0x58
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
    /* USER CODE END I2C3_Init 0 */

    /* USER CODE BEGIN I2C3_Init 1 */

    /* USER CODE END I2C3_Init 1 */
    hi2c3.Instance = I2C3;
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <MX_I2C3_Init+0x74>)
 8001766:	4a1c      	ldr	r2, [pc, #112]	; (80017d8 <MX_I2C3_Init+0x78>)
 8001768:	601a      	str	r2, [r3, #0]
    hi2c3.Init.Timing = 0x10909CEC;
 800176a:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <MX_I2C3_Init+0x74>)
 800176c:	4a1b      	ldr	r2, [pc, #108]	; (80017dc <MX_I2C3_Init+0x7c>)
 800176e:	605a      	str	r2, [r3, #4]
    hi2c3.Init.OwnAddress1 = 0;
 8001770:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <MX_I2C3_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
    hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <MX_I2C3_Init+0x74>)
 8001778:	2201      	movs	r2, #1
 800177a:	60da      	str	r2, [r3, #12]
    hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <MX_I2C3_Init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
    hi2c3.Init.OwnAddress2 = 0;
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <MX_I2C3_Init+0x74>)
 8001784:	2200      	movs	r2, #0
 8001786:	615a      	str	r2, [r3, #20]
    hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <MX_I2C3_Init+0x74>)
 800178a:	2200      	movs	r2, #0
 800178c:	619a      	str	r2, [r3, #24]
    hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <MX_I2C3_Init+0x74>)
 8001790:	2200      	movs	r2, #0
 8001792:	61da      	str	r2, [r3, #28]
    hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <MX_I2C3_Init+0x74>)
 8001796:	2200      	movs	r2, #0
 8001798:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800179a:	480e      	ldr	r0, [pc, #56]	; (80017d4 <MX_I2C3_Init+0x74>)
 800179c:	f000 ff30 	bl	8002600 <HAL_I2C_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_I2C3_Init+0x4a>
    {
        Error_Handler();
 80017a6:	f000 f90b 	bl	80019c0 <Error_Handler>
    }

    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017aa:	2100      	movs	r1, #0
 80017ac:	4809      	ldr	r0, [pc, #36]	; (80017d4 <MX_I2C3_Init+0x74>)
 80017ae:	f001 fb3b 	bl	8002e28 <HAL_I2CEx_ConfigAnalogFilter>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_I2C3_Init+0x5c>
    {
        Error_Handler();
 80017b8:	f000 f902 	bl	80019c0 <Error_Handler>
    }

    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80017bc:	2100      	movs	r1, #0
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_I2C3_Init+0x74>)
 80017c0:	f001 fb7d 	bl	8002ebe <HAL_I2CEx_ConfigDigitalFilter>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_I2C3_Init+0x6e>
    {
        Error_Handler();
 80017ca:	f000 f8f9 	bl	80019c0 <Error_Handler>
    }
    /* USER CODE BEGIN I2C3_Init 2 */

    /* USER CODE END I2C3_Init 2 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000200 	.word	0x20000200
 80017d8:	40005c00 	.word	0x40005c00
 80017dc:	10909cec 	.word	0x10909cec

080017e0 <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
    /* USER CODE END LPUART1_Init 0 */

    /* USER CODE BEGIN LPUART1_Init 1 */

    /* USER CODE END LPUART1_Init 1 */
    hlpuart1.Instance = LPUART1;
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <MX_LPUART1_UART_Init+0x50>)
 80017e6:	4a13      	ldr	r2, [pc, #76]	; (8001834 <MX_LPUART1_UART_Init+0x54>)
 80017e8:	601a      	str	r2, [r3, #0]
    hlpuart1.Init.BaudRate = 115200;
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_LPUART1_UART_Init+0x50>)
 80017ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017f0:	605a      	str	r2, [r3, #4]
    hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <MX_LPUART1_UART_Init+0x50>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
    hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <MX_LPUART1_UART_Init+0x50>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
    hlpuart1.Init.Parity = UART_PARITY_NONE;
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_LPUART1_UART_Init+0x50>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
    hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001804:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <MX_LPUART1_UART_Init+0x50>)
 8001806:	220c      	movs	r2, #12
 8001808:	615a      	str	r2, [r3, #20]
    hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_LPUART1_UART_Init+0x50>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
    hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <MX_LPUART1_UART_Init+0x50>)
 8001812:	2200      	movs	r2, #0
 8001814:	621a      	str	r2, [r3, #32]
    hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_LPUART1_UART_Init+0x50>)
 8001818:	2200      	movs	r2, #0
 800181a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800181c:	4804      	ldr	r0, [pc, #16]	; (8001830 <MX_LPUART1_UART_Init+0x50>)
 800181e:	f004 fe67 	bl	80064f0 <HAL_UART_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_LPUART1_UART_Init+0x4c>
    {
        Error_Handler();
 8001828:	f000 f8ca 	bl	80019c0 <Error_Handler>
    }
    /* USER CODE BEGIN LPUART1_Init 2 */

    /* USER CODE END LPUART1_Init 2 */
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000254 	.word	0x20000254
 8001834:	40008000 	.word	0x40008000

08001838 <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
    /* USER CODE END SDMMC1_Init 0 */

    /* USER CODE BEGIN SDMMC1_Init 1 */

    /* USER CODE END SDMMC1_Init 1 */
    hsd1.Instance = SDMMC1;
 800183c:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <MX_SDMMC1_SD_Init+0x3c>)
 800183e:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <MX_SDMMC1_SD_Init+0x40>)
 8001840:	601a      	str	r2, [r3, #0]
    hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001842:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <MX_SDMMC1_SD_Init+0x3c>)
 8001844:	2200      	movs	r2, #0
 8001846:	605a      	str	r2, [r3, #4]
    hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_ENABLE;
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <MX_SDMMC1_SD_Init+0x3c>)
 800184a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800184e:	609a      	str	r2, [r3, #8]
    hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <MX_SDMMC1_SD_Init+0x3c>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
    hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <MX_SDMMC1_SD_Init+0x3c>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
    hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <MX_SDMMC1_SD_Init+0x3c>)
 800185e:	2200      	movs	r2, #0
 8001860:	615a      	str	r2, [r3, #20]
    hsd1.Init.ClockDiv = 4;
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <MX_SDMMC1_SD_Init+0x3c>)
 8001864:	2204      	movs	r2, #4
 8001866:	619a      	str	r2, [r3, #24]
    /* USER CODE BEGIN SDMMC1_Init 2 */

    /* USER CODE END SDMMC1_Init 2 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	200002dc 	.word	0x200002dc
 8001878:	40012800 	.word	0x40012800

0800187c <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI2_Init 1 */

    /* USER CODE END SPI2_Init 1 */
    /* SPI2 parameter configuration*/
    hspi2.Instance = SPI2;
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <MX_SPI2_Init+0x74>)
 8001882:	4a1c      	ldr	r2, [pc, #112]	; (80018f4 <MX_SPI2_Init+0x78>)
 8001884:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 8001886:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <MX_SPI2_Init+0x74>)
 8001888:	f44f 7282 	mov.w	r2, #260	; 0x104
 800188c:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800188e:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <MX_SPI2_Init+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001894:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <MX_SPI2_Init+0x74>)
 8001896:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800189a:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <MX_SPI2_Init+0x74>)
 800189e:	2202      	movs	r2, #2
 80018a0:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <MX_SPI2_Init+0x74>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <MX_SPI2_Init+0x74>)
 80018aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ae:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <MX_SPI2_Init+0x74>)
 80018b2:	2238      	movs	r2, #56	; 0x38
 80018b4:	61da      	str	r2, [r3, #28]
    hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <MX_SPI2_Init+0x74>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <MX_SPI2_Init+0x74>)
 80018be:	2200      	movs	r2, #0
 80018c0:	625a      	str	r2, [r3, #36]	; 0x24
    hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <MX_SPI2_Init+0x74>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	629a      	str	r2, [r3, #40]	; 0x28
    hspi2.Init.CRCPolynomial = 7;
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <MX_SPI2_Init+0x74>)
 80018ca:	2207      	movs	r2, #7
 80018cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <MX_SPI2_Init+0x74>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	631a      	str	r2, [r3, #48]	; 0x30
    hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <MX_SPI2_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MX_SPI2_Init+0x74>)
 80018dc:	f004 f9de 	bl	8005c9c <HAL_SPI_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_SPI2_Init+0x6e>
    {
        Error_Handler();
 80018e6:	f000 f86b 	bl	80019c0 <Error_Handler>
    }
    /* USER CODE BEGIN SPI2_Init 2 */

    /* USER CODE END SPI2_Init 2 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000360 	.word	0x20000360
 80018f4:	40003800 	.word	0x40003800

080018f8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800190e:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <MX_GPIO_Init+0xc0>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	4a29      	ldr	r2, [pc, #164]	; (80019b8 <MX_GPIO_Init+0xc0>)
 8001914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191a:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <MX_GPIO_Init+0xc0>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001926:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <MX_GPIO_Init+0xc0>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	4a23      	ldr	r2, [pc, #140]	; (80019b8 <MX_GPIO_Init+0xc0>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001932:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <MX_GPIO_Init+0xc0>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <MX_GPIO_Init+0xc0>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	4a1d      	ldr	r2, [pc, #116]	; (80019b8 <MX_GPIO_Init+0xc0>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194a:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <MX_GPIO_Init+0xc0>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <MX_GPIO_Init+0xc0>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	4a17      	ldr	r2, [pc, #92]	; (80019b8 <MX_GPIO_Init+0xc0>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <MX_GPIO_Init+0xc0>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <MX_GPIO_Init+0xc0>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <MX_GPIO_Init+0xc0>)
 8001974:	f043 0308 	orr.w	r3, r3, #8
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_GPIO_Init+0xc0>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, CS_PS_Pin | CS_IMU_Pin | CS_INC_Pin, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	f44f 7150 	mov.w	r1, #832	; 0x340
 800198c:	480b      	ldr	r0, [pc, #44]	; (80019bc <MX_GPIO_Init+0xc4>)
 800198e:	f000 fe1f 	bl	80025d0 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : CS_PS_Pin CS_IMU_Pin CS_INC_Pin */
    GPIO_InitStruct.Pin = CS_PS_Pin | CS_IMU_Pin | CS_INC_Pin;
 8001992:	f44f 7350 	mov.w	r3, #832	; 0x340
 8001996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001998:	2301      	movs	r3, #1
 800199a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4619      	mov	r1, r3
 80019aa:	4804      	ldr	r0, [pc, #16]	; (80019bc <MX_GPIO_Init+0xc4>)
 80019ac:	f000 fc96 	bl	80022dc <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80019b0:	bf00      	nop
 80019b2:	3728      	adds	r7, #40	; 0x28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40021000 	.word	0x40021000
 80019bc:	48000400 	.word	0x48000400

080019c0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c4:	b672      	cpsid	i
}
 80019c6:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80019c8:	e7fe      	b.n	80019c8 <Error_Handler+0x8>
	...

080019cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <HAL_MspInit+0x44>)
 80019d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d6:	4a0e      	ldr	r2, [pc, #56]	; (8001a10 <HAL_MspInit+0x44>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6613      	str	r3, [r2, #96]	; 0x60
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <HAL_MspInit+0x44>)
 80019e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_MspInit+0x44>)
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	4a08      	ldr	r2, [pc, #32]	; (8001a10 <HAL_MspInit+0x44>)
 80019f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f4:	6593      	str	r3, [r2, #88]	; 0x58
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_MspInit+0x44>)
 80019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000

08001a14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b0a0      	sub	sp, #128	; 0x80
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	225c      	movs	r2, #92	; 0x5c
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f007 fd3d 	bl	80094b4 <memset>
  if(hi2c->Instance==I2C3)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1f      	ldr	r2, [pc, #124]	; (8001abc <HAL_I2C_MspInit+0xa8>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d136      	bne.n	8001ab2 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001a44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a48:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a4e:	f107 0310 	add.w	r3, r7, #16
 8001a52:	4618      	mov	r0, r3
 8001a54:	f002 f91a 	bl	8003c8c <HAL_RCCEx_PeriphCLKConfig>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001a5e:	f7ff ffaf 	bl	80019c0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a62:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <HAL_I2C_MspInit+0xac>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	4a16      	ldr	r2, [pc, #88]	; (8001ac0 <HAL_I2C_MspInit+0xac>)
 8001a68:	f043 0304 	orr.w	r3, r3, #4
 8001a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <HAL_I2C_MspInit+0xac>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a7e:	2312      	movs	r3, #18
 8001a80:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a82:	2301      	movs	r3, #1
 8001a84:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a86:	2303      	movs	r3, #3
 8001a88:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a92:	4619      	mov	r1, r3
 8001a94:	480b      	ldr	r0, [pc, #44]	; (8001ac4 <HAL_I2C_MspInit+0xb0>)
 8001a96:	f000 fc21 	bl	80022dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <HAL_I2C_MspInit+0xac>)
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9e:	4a08      	ldr	r2, [pc, #32]	; (8001ac0 <HAL_I2C_MspInit+0xac>)
 8001aa0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_I2C_MspInit+0xac>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ab2:	bf00      	nop
 8001ab4:	3780      	adds	r7, #128	; 0x80
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40005c00 	.word	0x40005c00
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	48000800 	.word	0x48000800

08001ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b0a2      	sub	sp, #136	; 0x88
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae0:	f107 0318 	add.w	r3, r7, #24
 8001ae4:	225c      	movs	r2, #92	; 0x5c
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f007 fce3 	bl	80094b4 <memset>
  if(huart->Instance==LPUART1)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a2f      	ldr	r2, [pc, #188]	; (8001bb0 <HAL_UART_MspInit+0xe8>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d157      	bne.n	8001ba8 <HAL_UART_MspInit+0xe0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001af8:	2320      	movs	r3, #32
 8001afa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001afc:	2300      	movs	r3, #0
 8001afe:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b00:	f107 0318 	add.w	r3, r7, #24
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 f8c1 	bl	8003c8c <HAL_RCCEx_PeriphCLKConfig>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b10:	f7ff ff56 	bl	80019c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_UART_MspInit+0xec>)
 8001b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b18:	4a26      	ldr	r2, [pc, #152]	; (8001bb4 <HAL_UART_MspInit+0xec>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001b20:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <HAL_UART_MspInit+0xec>)
 8001b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2c:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <HAL_UART_MspInit+0xec>)
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b30:	4a20      	ldr	r2, [pc, #128]	; (8001bb4 <HAL_UART_MspInit+0xec>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b38:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <HAL_UART_MspInit+0xec>)
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <HAL_UART_MspInit+0xec>)
 8001b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b48:	4a1a      	ldr	r2, [pc, #104]	; (8001bb4 <HAL_UART_MspInit+0xec>)
 8001b4a:	f043 0302 	orr.w	r3, r3, #2
 8001b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_UART_MspInit+0xec>)
 8001b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b5c:	2308      	movs	r3, #8
 8001b5e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001b6e:	2308      	movs	r3, #8
 8001b70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b74:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b7e:	f000 fbad 	bl	80022dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b86:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b90:	2303      	movs	r3, #3
 8001b92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001b96:	2308      	movs	r3, #8
 8001b98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <HAL_UART_MspInit+0xf0>)
 8001ba4:	f000 fb9a 	bl	80022dc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001ba8:	bf00      	nop
 8001baa:	3788      	adds	r7, #136	; 0x88
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40008000 	.word	0x40008000
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	48000400 	.word	0x48000400

08001bbc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b0a2      	sub	sp, #136	; 0x88
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bd4:	f107 0318 	add.w	r3, r7, #24
 8001bd8:	225c      	movs	r2, #92	; 0x5c
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f007 fc69 	bl	80094b4 <memset>
  if(hsd->Instance==SDMMC1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a37      	ldr	r2, [pc, #220]	; (8001cc4 <HAL_SD_MspInit+0x108>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d167      	bne.n	8001cbc <HAL_SD_MspInit+0x100>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001bec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001bf0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8001bf2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001bf6:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 8001c00:	230a      	movs	r3, #10
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001c04:	2307      	movs	r3, #7
 8001c06:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8001c08:	2304      	movs	r3, #4
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001c10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c14:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c16:	f107 0318 	add.w	r3, r7, #24
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f002 f836 	bl	8003c8c <HAL_RCCEx_PeriphCLKConfig>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_SD_MspInit+0x6e>
    {
      Error_Handler();
 8001c26:	f7ff fecb 	bl	80019c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001c2a:	4b27      	ldr	r3, [pc, #156]	; (8001cc8 <HAL_SD_MspInit+0x10c>)
 8001c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2e:	4a26      	ldr	r2, [pc, #152]	; (8001cc8 <HAL_SD_MspInit+0x10c>)
 8001c30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c34:	6613      	str	r3, [r2, #96]	; 0x60
 8001c36:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <HAL_SD_MspInit+0x10c>)
 8001c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c42:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <HAL_SD_MspInit+0x10c>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	4a20      	ldr	r2, [pc, #128]	; (8001cc8 <HAL_SD_MspInit+0x10c>)
 8001c48:	f043 0304 	orr.w	r3, r3, #4
 8001c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <HAL_SD_MspInit+0x10c>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5a:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_SD_MspInit+0x10c>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	4a1a      	ldr	r2, [pc, #104]	; (8001cc8 <HAL_SD_MspInit+0x10c>)
 8001c60:	f043 0308 	orr.w	r3, r3, #8
 8001c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c66:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <HAL_SD_MspInit+0x10c>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001c72:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001c76:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c80:	2303      	movs	r3, #3
 8001c82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c86:	230c      	movs	r3, #12
 8001c88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c90:	4619      	mov	r1, r3
 8001c92:	480e      	ldr	r0, [pc, #56]	; (8001ccc <HAL_SD_MspInit+0x110>)
 8001c94:	f000 fb22 	bl	80022dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001caa:	230c      	movs	r3, #12
 8001cac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cb0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4806      	ldr	r0, [pc, #24]	; (8001cd0 <HAL_SD_MspInit+0x114>)
 8001cb8:	f000 fb10 	bl	80022dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001cbc:	bf00      	nop
 8001cbe:	3788      	adds	r7, #136	; 0x88
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40012800 	.word	0x40012800
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	48000800 	.word	0x48000800
 8001cd0:	48000c00 	.word	0x48000c00

08001cd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	; 0x28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a25      	ldr	r2, [pc, #148]	; (8001d88 <HAL_SPI_MspInit+0xb4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d144      	bne.n	8001d80 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cf6:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <HAL_SPI_MspInit+0xb8>)
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfa:	4a24      	ldr	r2, [pc, #144]	; (8001d8c <HAL_SPI_MspInit+0xb8>)
 8001cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d00:	6593      	str	r3, [r2, #88]	; 0x58
 8001d02:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <HAL_SPI_MspInit+0xb8>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0e:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <HAL_SPI_MspInit+0xb8>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <HAL_SPI_MspInit+0xb8>)
 8001d14:	f043 0304 	orr.w	r3, r3, #4
 8001d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1a:	4b1c      	ldr	r3, [pc, #112]	; (8001d8c <HAL_SPI_MspInit+0xb8>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_SPI_MspInit+0xb8>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	4a18      	ldr	r2, [pc, #96]	; (8001d8c <HAL_SPI_MspInit+0xb8>)
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d32:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <HAL_SPI_MspInit+0xb8>)
 8001d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d3e:	230c      	movs	r3, #12
 8001d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d4e:	2305      	movs	r3, #5
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4619      	mov	r1, r3
 8001d58:	480d      	ldr	r0, [pc, #52]	; (8001d90 <HAL_SPI_MspInit+0xbc>)
 8001d5a:	f000 fabf 	bl	80022dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d70:	2305      	movs	r3, #5
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4806      	ldr	r0, [pc, #24]	; (8001d94 <HAL_SPI_MspInit+0xc0>)
 8001d7c:	f000 faae 	bl	80022dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d80:	bf00      	nop
 8001d82:	3728      	adds	r7, #40	; 0x28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40003800 	.word	0x40003800
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	48000800 	.word	0x48000800
 8001d94:	48000400 	.word	0x48000400

08001d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <NMI_Handler+0x4>

08001d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da2:	e7fe      	b.n	8001da2 <HardFault_Handler+0x4>

08001da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <MemManage_Handler+0x4>

08001daa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dae:	e7fe      	b.n	8001dae <BusFault_Handler+0x4>

08001db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <UsageFault_Handler+0x4>

08001db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001de4:	f000 f950 	bl	8002088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}

08001dec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return 1;
 8001df0:	2301      	movs	r3, #1
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <_kill>:

int _kill(int pid, int sig)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e06:	f007 fba7 	bl	8009558 <__errno>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2216      	movs	r2, #22
 8001e0e:	601a      	str	r2, [r3, #0]
  return -1;
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_exit>:

void _exit (int status)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ffe7 	bl	8001dfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e2e:	e7fe      	b.n	8001e2e <_exit+0x12>

08001e30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	e00a      	b.n	8001e58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e42:	f3af 8000 	nop.w
 8001e46:	4601      	mov	r1, r0
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	60ba      	str	r2, [r7, #8]
 8001e4e:	b2ca      	uxtb	r2, r1
 8001e50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3301      	adds	r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	dbf0      	blt.n	8001e42 <_read+0x12>
  }

  return len;
 8001e60:	687b      	ldr	r3, [r7, #4]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  HAL_UART_Transmit(&hlpuart1, ptr, len, 100);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	2364      	movs	r3, #100	; 0x64
 8001e7e:	68b9      	ldr	r1, [r7, #8]
 8001e80:	4803      	ldr	r0, [pc, #12]	; (8001e90 <_write+0x24>)
 8001e82:	f004 fb83 	bl	800658c <HAL_UART_Transmit>

  return len;
 8001e86:	687b      	ldr	r3, [r7, #4]

}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000254 	.word	0x20000254

08001e94 <_close>:

int _close(int file)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ebc:	605a      	str	r2, [r3, #4]
  return 0;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <_isatty>:

int _isatty(int file)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ed4:	2301      	movs	r3, #1
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f04:	4a14      	ldr	r2, [pc, #80]	; (8001f58 <_sbrk+0x5c>)
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <_sbrk+0x60>)
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <_sbrk+0x64>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d102      	bne.n	8001f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <_sbrk+0x64>)
 8001f1a:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <_sbrk+0x68>)
 8001f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <_sbrk+0x64>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d207      	bcs.n	8001f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f2c:	f007 fb14 	bl	8009558 <__errno>
 8001f30:	4603      	mov	r3, r0
 8001f32:	220c      	movs	r2, #12
 8001f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3a:	e009      	b.n	8001f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <_sbrk+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f42:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <_sbrk+0x64>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <_sbrk+0x64>)
 8001f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20010000 	.word	0x20010000
 8001f5c:	00000400 	.word	0x00000400
 8001f60:	200003c4 	.word	0x200003c4
 8001f64:	20000530 	.word	0x20000530

08001f68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <SystemInit+0x20>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f72:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <SystemInit+0x20>)
 8001f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f90:	f7ff ffea 	bl	8001f68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f94:	480c      	ldr	r0, [pc, #48]	; (8001fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f96:	490d      	ldr	r1, [pc, #52]	; (8001fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f98:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <LoopForever+0xe>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f9c:	e002      	b.n	8001fa4 <LoopCopyDataInit>

08001f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa2:	3304      	adds	r3, #4

08001fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa8:	d3f9      	bcc.n	8001f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fac:	4c0a      	ldr	r4, [pc, #40]	; (8001fd8 <LoopForever+0x16>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb0:	e001      	b.n	8001fb6 <LoopFillZerobss>

08001fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb4:	3204      	adds	r2, #4

08001fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb8:	d3fb      	bcc.n	8001fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fba:	f007 fad3 	bl	8009564 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fbe:	f7ff fa43 	bl	8001448 <main>

08001fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fc2:	e7fe      	b.n	8001fc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fc4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fcc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001fd0:	0800b6b4 	.word	0x0800b6b4
  ldr r2, =_sbss
 8001fd4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001fd8:	2000052c 	.word	0x2000052c

08001fdc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fdc:	e7fe      	b.n	8001fdc <ADC1_IRQHandler>

08001fde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe8:	2003      	movs	r0, #3
 8001fea:	f000 f943 	bl	8002274 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fee:	200f      	movs	r0, #15
 8001ff0:	f000 f80e 	bl	8002010 <HAL_InitTick>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	71fb      	strb	r3, [r7, #7]
 8001ffe:	e001      	b.n	8002004 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002000:	f7ff fce4 	bl	80019cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002004:	79fb      	ldrb	r3, [r7, #7]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800201c:	4b17      	ldr	r3, [pc, #92]	; (800207c <HAL_InitTick+0x6c>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d023      	beq.n	800206c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002024:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_InitTick+0x70>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4b14      	ldr	r3, [pc, #80]	; (800207c <HAL_InitTick+0x6c>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	4619      	mov	r1, r3
 800202e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002032:	fbb3 f3f1 	udiv	r3, r3, r1
 8002036:	fbb2 f3f3 	udiv	r3, r2, r3
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f941 	bl	80022c2 <HAL_SYSTICK_Config>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10f      	bne.n	8002066 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b0f      	cmp	r3, #15
 800204a:	d809      	bhi.n	8002060 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800204c:	2200      	movs	r2, #0
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	f04f 30ff 	mov.w	r0, #4294967295
 8002054:	f000 f919 	bl	800228a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002058:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <HAL_InitTick+0x74>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	e007      	b.n	8002070 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	73fb      	strb	r3, [r7, #15]
 8002064:	e004      	b.n	8002070 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	73fb      	strb	r3, [r7, #15]
 800206a:	e001      	b.n	8002070 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002070:	7bfb      	ldrb	r3, [r7, #15]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000018 	.word	0x20000018
 8002080:	20000010 	.word	0x20000010
 8002084:	20000014 	.word	0x20000014

08002088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_IncTick+0x20>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_IncTick+0x24>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4413      	add	r3, r2
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <HAL_IncTick+0x24>)
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000018 	.word	0x20000018
 80020ac:	200003c8 	.word	0x200003c8

080020b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return uwTick;
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <HAL_GetTick+0x14>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	200003c8 	.word	0x200003c8

080020c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d0:	f7ff ffee 	bl	80020b0 <HAL_GetTick>
 80020d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e0:	d005      	beq.n	80020ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <HAL_Delay+0x44>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4413      	add	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020ee:	bf00      	nop
 80020f0:	f7ff ffde 	bl	80020b0 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d8f7      	bhi.n	80020f0 <HAL_Delay+0x28>
  {
  }
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000018 	.word	0x20000018

08002110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800212c:	4013      	ands	r3, r2
 800212e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800213c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002142:	4a04      	ldr	r2, [pc, #16]	; (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	60d3      	str	r3, [r2, #12]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <__NVIC_GetPriorityGrouping+0x18>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	f003 0307 	and.w	r3, r3, #7
}
 8002166:	4618      	mov	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	6039      	str	r1, [r7, #0]
 800217e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	2b00      	cmp	r3, #0
 8002186:	db0a      	blt.n	800219e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	490c      	ldr	r1, [pc, #48]	; (80021c0 <__NVIC_SetPriority+0x4c>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	0112      	lsls	r2, r2, #4
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	440b      	add	r3, r1
 8002198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800219c:	e00a      	b.n	80021b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4908      	ldr	r1, [pc, #32]	; (80021c4 <__NVIC_SetPriority+0x50>)
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	3b04      	subs	r3, #4
 80021ac:	0112      	lsls	r2, r2, #4
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	440b      	add	r3, r1
 80021b2:	761a      	strb	r2, [r3, #24]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000e100 	.word	0xe000e100
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	; 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f1c3 0307 	rsb	r3, r3, #7
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	bf28      	it	cs
 80021e6:	2304      	movcs	r3, #4
 80021e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3304      	adds	r3, #4
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d902      	bls.n	80021f8 <NVIC_EncodePriority+0x30>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3b03      	subs	r3, #3
 80021f6:	e000      	b.n	80021fa <NVIC_EncodePriority+0x32>
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	401a      	ands	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002210:	f04f 31ff 	mov.w	r1, #4294967295
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	43d9      	mvns	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	4313      	orrs	r3, r2
         );
}
 8002222:	4618      	mov	r0, r3
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002240:	d301      	bcc.n	8002246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002242:	2301      	movs	r3, #1
 8002244:	e00f      	b.n	8002266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <SysTick_Config+0x40>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224e:	210f      	movs	r1, #15
 8002250:	f04f 30ff 	mov.w	r0, #4294967295
 8002254:	f7ff ff8e 	bl	8002174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <SysTick_Config+0x40>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225e:	4b04      	ldr	r3, [pc, #16]	; (8002270 <SysTick_Config+0x40>)
 8002260:	2207      	movs	r2, #7
 8002262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	e000e010 	.word	0xe000e010

08002274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff ff47 	bl	8002110 <__NVIC_SetPriorityGrouping>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800229c:	f7ff ff5c 	bl	8002158 <__NVIC_GetPriorityGrouping>
 80022a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	6978      	ldr	r0, [r7, #20]
 80022a8:	f7ff ff8e 	bl	80021c8 <NVIC_EncodePriority>
 80022ac:	4602      	mov	r2, r0
 80022ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff5d 	bl	8002174 <__NVIC_SetPriority>
}
 80022ba:	bf00      	nop
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff ffb0 	bl	8002230 <SysTick_Config>
 80022d0:	4603      	mov	r3, r0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ea:	e154      	b.n	8002596 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	2101      	movs	r1, #1
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	4013      	ands	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 8146 	beq.w	8002590 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b01      	cmp	r3, #1
 800230e:	d005      	beq.n	800231c <HAL_GPIO_Init+0x40>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d130      	bne.n	800237e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002352:	2201      	movs	r2, #1
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	091b      	lsrs	r3, r3, #4
 8002368:	f003 0201 	and.w	r2, r3, #1
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b03      	cmp	r3, #3
 8002388:	d017      	beq.n	80023ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	2203      	movs	r2, #3
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4013      	ands	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d123      	bne.n	800240e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	08da      	lsrs	r2, r3, #3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3208      	adds	r2, #8
 80023ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	220f      	movs	r2, #15
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	08da      	lsrs	r2, r3, #3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3208      	adds	r2, #8
 8002408:	6939      	ldr	r1, [r7, #16]
 800240a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	2203      	movs	r2, #3
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 0203 	and.w	r2, r3, #3
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 80a0 	beq.w	8002590 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002450:	4b58      	ldr	r3, [pc, #352]	; (80025b4 <HAL_GPIO_Init+0x2d8>)
 8002452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002454:	4a57      	ldr	r2, [pc, #348]	; (80025b4 <HAL_GPIO_Init+0x2d8>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	6613      	str	r3, [r2, #96]	; 0x60
 800245c:	4b55      	ldr	r3, [pc, #340]	; (80025b4 <HAL_GPIO_Init+0x2d8>)
 800245e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002468:	4a53      	ldr	r2, [pc, #332]	; (80025b8 <HAL_GPIO_Init+0x2dc>)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	3302      	adds	r3, #2
 8002470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002474:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	220f      	movs	r2, #15
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002492:	d019      	beq.n	80024c8 <HAL_GPIO_Init+0x1ec>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a49      	ldr	r2, [pc, #292]	; (80025bc <HAL_GPIO_Init+0x2e0>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d013      	beq.n	80024c4 <HAL_GPIO_Init+0x1e8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a48      	ldr	r2, [pc, #288]	; (80025c0 <HAL_GPIO_Init+0x2e4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d00d      	beq.n	80024c0 <HAL_GPIO_Init+0x1e4>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a47      	ldr	r2, [pc, #284]	; (80025c4 <HAL_GPIO_Init+0x2e8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d007      	beq.n	80024bc <HAL_GPIO_Init+0x1e0>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a46      	ldr	r2, [pc, #280]	; (80025c8 <HAL_GPIO_Init+0x2ec>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d101      	bne.n	80024b8 <HAL_GPIO_Init+0x1dc>
 80024b4:	2304      	movs	r3, #4
 80024b6:	e008      	b.n	80024ca <HAL_GPIO_Init+0x1ee>
 80024b8:	2307      	movs	r3, #7
 80024ba:	e006      	b.n	80024ca <HAL_GPIO_Init+0x1ee>
 80024bc:	2303      	movs	r3, #3
 80024be:	e004      	b.n	80024ca <HAL_GPIO_Init+0x1ee>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e002      	b.n	80024ca <HAL_GPIO_Init+0x1ee>
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <HAL_GPIO_Init+0x1ee>
 80024c8:	2300      	movs	r3, #0
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	f002 0203 	and.w	r2, r2, #3
 80024d0:	0092      	lsls	r2, r2, #2
 80024d2:	4093      	lsls	r3, r2
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024da:	4937      	ldr	r1, [pc, #220]	; (80025b8 <HAL_GPIO_Init+0x2dc>)
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	089b      	lsrs	r3, r3, #2
 80024e0:	3302      	adds	r3, #2
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024e8:	4b38      	ldr	r3, [pc, #224]	; (80025cc <HAL_GPIO_Init+0x2f0>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800250c:	4a2f      	ldr	r2, [pc, #188]	; (80025cc <HAL_GPIO_Init+0x2f0>)
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002512:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <HAL_GPIO_Init+0x2f0>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	43db      	mvns	r3, r3
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4013      	ands	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002536:	4a25      	ldr	r2, [pc, #148]	; (80025cc <HAL_GPIO_Init+0x2f0>)
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800253c:	4b23      	ldr	r3, [pc, #140]	; (80025cc <HAL_GPIO_Init+0x2f0>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	43db      	mvns	r3, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002560:	4a1a      	ldr	r2, [pc, #104]	; (80025cc <HAL_GPIO_Init+0x2f0>)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002566:	4b19      	ldr	r3, [pc, #100]	; (80025cc <HAL_GPIO_Init+0x2f0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	43db      	mvns	r3, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800258a:	4a10      	ldr	r2, [pc, #64]	; (80025cc <HAL_GPIO_Init+0x2f0>)
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	3301      	adds	r3, #1
 8002594:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f47f aea3 	bne.w	80022ec <HAL_GPIO_Init+0x10>
  }
}
 80025a6:	bf00      	nop
 80025a8:	bf00      	nop
 80025aa:	371c      	adds	r7, #28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40010000 	.word	0x40010000
 80025bc:	48000400 	.word	0x48000400
 80025c0:	48000800 	.word	0x48000800
 80025c4:	48000c00 	.word	0x48000c00
 80025c8:	48001000 	.word	0x48001000
 80025cc:	40010400 	.word	0x40010400

080025d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	807b      	strh	r3, [r7, #2]
 80025dc:	4613      	mov	r3, r2
 80025de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025e0:	787b      	ldrb	r3, [r7, #1]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025e6:	887a      	ldrh	r2, [r7, #2]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025ec:	e002      	b.n	80025f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025ee:	887a      	ldrh	r2, [r7, #2]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e08d      	b.n	800272e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d106      	bne.n	800262c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff f9f4 	bl	8001a14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2224      	movs	r2, #36	; 0x24
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0201 	bic.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002650:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002660:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d107      	bne.n	800267a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	e006      	b.n	8002688 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002686:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b02      	cmp	r3, #2
 800268e:	d108      	bne.n	80026a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	e007      	b.n	80026b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691a      	ldr	r2, [r3, #16]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69d9      	ldr	r1, [r3, #28]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1a      	ldr	r2, [r3, #32]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0201 	orr.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2220      	movs	r2, #32
 800271a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af02      	add	r7, sp, #8
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	4608      	mov	r0, r1
 8002742:	4611      	mov	r1, r2
 8002744:	461a      	mov	r2, r3
 8002746:	4603      	mov	r3, r0
 8002748:	817b      	strh	r3, [r7, #10]
 800274a:	460b      	mov	r3, r1
 800274c:	813b      	strh	r3, [r7, #8]
 800274e:	4613      	mov	r3, r2
 8002750:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b20      	cmp	r3, #32
 800275c:	f040 80f9 	bne.w	8002952 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <HAL_I2C_Mem_Write+0x34>
 8002766:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002768:	2b00      	cmp	r3, #0
 800276a:	d105      	bne.n	8002778 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002772:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0ed      	b.n	8002954 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_I2C_Mem_Write+0x4e>
 8002782:	2302      	movs	r3, #2
 8002784:	e0e6      	b.n	8002954 <HAL_I2C_Mem_Write+0x21c>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800278e:	f7ff fc8f 	bl	80020b0 <HAL_GetTick>
 8002792:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	2319      	movs	r3, #25
 800279a:	2201      	movs	r2, #1
 800279c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 f955 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0d1      	b.n	8002954 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2221      	movs	r2, #33	; 0x21
 80027b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2240      	movs	r2, #64	; 0x40
 80027bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a3a      	ldr	r2, [r7, #32]
 80027ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027d8:	88f8      	ldrh	r0, [r7, #6]
 80027da:	893a      	ldrh	r2, [r7, #8]
 80027dc:	8979      	ldrh	r1, [r7, #10]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	9301      	str	r3, [sp, #4]
 80027e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	4603      	mov	r3, r0
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 f8b9 	bl	8002960 <I2C_RequestMemoryWrite>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0a9      	b.n	8002954 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002804:	b29b      	uxth	r3, r3
 8002806:	2bff      	cmp	r3, #255	; 0xff
 8002808:	d90e      	bls.n	8002828 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	22ff      	movs	r2, #255	; 0xff
 800280e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002814:	b2da      	uxtb	r2, r3
 8002816:	8979      	ldrh	r1, [r7, #10]
 8002818:	2300      	movs	r3, #0
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 facf 	bl	8002dc4 <I2C_TransferConfig>
 8002826:	e00f      	b.n	8002848 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002836:	b2da      	uxtb	r2, r3
 8002838:	8979      	ldrh	r1, [r7, #10]
 800283a:	2300      	movs	r3, #0
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fabe 	bl	8002dc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f94e 	bl	8002aee <I2C_WaitOnTXISFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e07b      	b.n	8002954 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	781a      	ldrb	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d034      	beq.n	8002900 <HAL_I2C_Mem_Write+0x1c8>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289a:	2b00      	cmp	r3, #0
 800289c:	d130      	bne.n	8002900 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	2200      	movs	r2, #0
 80028a6:	2180      	movs	r1, #128	; 0x80
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 f8d1 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e04d      	b.n	8002954 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2bff      	cmp	r3, #255	; 0xff
 80028c0:	d90e      	bls.n	80028e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	22ff      	movs	r2, #255	; 0xff
 80028c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	8979      	ldrh	r1, [r7, #10]
 80028d0:	2300      	movs	r3, #0
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 fa73 	bl	8002dc4 <I2C_TransferConfig>
 80028de:	e00f      	b.n	8002900 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	8979      	ldrh	r1, [r7, #10]
 80028f2:	2300      	movs	r3, #0
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 fa62 	bl	8002dc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d19e      	bne.n	8002848 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f934 	bl	8002b7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e01a      	b.n	8002954 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2220      	movs	r2, #32
 8002924:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4b0a      	ldr	r3, [pc, #40]	; (800295c <HAL_I2C_Mem_Write+0x224>)
 8002932:	400b      	ands	r3, r1
 8002934:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	e000      	b.n	8002954 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002952:	2302      	movs	r3, #2
  }
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	fe00e800 	.word	0xfe00e800

08002960 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	4608      	mov	r0, r1
 800296a:	4611      	mov	r1, r2
 800296c:	461a      	mov	r2, r3
 800296e:	4603      	mov	r3, r0
 8002970:	817b      	strh	r3, [r7, #10]
 8002972:	460b      	mov	r3, r1
 8002974:	813b      	strh	r3, [r7, #8]
 8002976:	4613      	mov	r3, r2
 8002978:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	8979      	ldrh	r1, [r7, #10]
 8002980:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <I2C_RequestMemoryWrite+0xa4>)
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 fa1b 	bl	8002dc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	69b9      	ldr	r1, [r7, #24]
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f8ab 	bl	8002aee <I2C_WaitOnTXISFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e02c      	b.n	80029fc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d105      	bne.n	80029b4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029a8:	893b      	ldrh	r3, [r7, #8]
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	629a      	str	r2, [r3, #40]	; 0x28
 80029b2:	e015      	b.n	80029e0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029b4:	893b      	ldrh	r3, [r7, #8]
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	69b9      	ldr	r1, [r7, #24]
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 f891 	bl	8002aee <I2C_WaitOnTXISFlagUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e012      	b.n	80029fc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029d6:	893b      	ldrh	r3, [r7, #8]
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	2200      	movs	r2, #0
 80029e8:	2180      	movs	r1, #128	; 0x80
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f830 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	80002000 	.word	0x80002000

08002a08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d103      	bne.n	8002a26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2200      	movs	r2, #0
 8002a24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d007      	beq.n	8002a44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699a      	ldr	r2, [r3, #24]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	619a      	str	r2, [r3, #24]
  }
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a60:	e031      	b.n	8002ac6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d02d      	beq.n	8002ac6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6a:	f7ff fb21 	bl	80020b0 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d302      	bcc.n	8002a80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d122      	bne.n	8002ac6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	bf0c      	ite	eq
 8002a90:	2301      	moveq	r3, #1
 8002a92:	2300      	movne	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	461a      	mov	r2, r3
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d113      	bne.n	8002ac6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	f043 0220 	orr.w	r2, r3, #32
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00f      	b.n	8002ae6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699a      	ldr	r2, [r3, #24]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	bf0c      	ite	eq
 8002ad6:	2301      	moveq	r3, #1
 8002ad8:	2300      	movne	r3, #0
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	461a      	mov	r2, r3
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d0be      	beq.n	8002a62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002afa:	e033      	b.n	8002b64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	68b9      	ldr	r1, [r7, #8]
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f87f 	bl	8002c04 <I2C_IsErrorOccurred>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e031      	b.n	8002b74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b16:	d025      	beq.n	8002b64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b18:	f7ff faca 	bl	80020b0 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d302      	bcc.n	8002b2e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d11a      	bne.n	8002b64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d013      	beq.n	8002b64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b40:	f043 0220 	orr.w	r2, r3, #32
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e007      	b.n	8002b74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d1c4      	bne.n	8002afc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b88:	e02f      	b.n	8002bea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 f838 	bl	8002c04 <I2C_IsErrorOccurred>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e02d      	b.n	8002bfa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9e:	f7ff fa87 	bl	80020b0 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d302      	bcc.n	8002bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d11a      	bne.n	8002bea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	d013      	beq.n	8002bea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	f043 0220 	orr.w	r2, r3, #32
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e007      	b.n	8002bfa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f003 0320 	and.w	r3, r3, #32
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d1c8      	bne.n	8002b8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	; 0x28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d068      	beq.n	8002d02 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2210      	movs	r2, #16
 8002c36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c38:	e049      	b.n	8002cce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c40:	d045      	beq.n	8002cce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c42:	f7ff fa35 	bl	80020b0 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d302      	bcc.n	8002c58 <I2C_IsErrorOccurred+0x54>
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d13a      	bne.n	8002cce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c7a:	d121      	bne.n	8002cc0 <I2C_IsErrorOccurred+0xbc>
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c82:	d01d      	beq.n	8002cc0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c84:	7cfb      	ldrb	r3, [r7, #19]
 8002c86:	2b20      	cmp	r3, #32
 8002c88:	d01a      	beq.n	8002cc0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c9a:	f7ff fa09 	bl	80020b0 <HAL_GetTick>
 8002c9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ca0:	e00e      	b.n	8002cc0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ca2:	f7ff fa05 	bl	80020b0 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b19      	cmp	r3, #25
 8002cae:	d907      	bls.n	8002cc0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	f043 0320 	orr.w	r3, r3, #32
 8002cb6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002cbe:	e006      	b.n	8002cce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	f003 0320 	and.w	r3, r3, #32
 8002cca:	2b20      	cmp	r3, #32
 8002ccc:	d1e9      	bne.n	8002ca2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d003      	beq.n	8002ce4 <I2C_IsErrorOccurred+0xe0>
 8002cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0aa      	beq.n	8002c3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d103      	bne.n	8002cf4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	f043 0304 	orr.w	r3, r3, #4
 8002cfa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00b      	beq.n	8002d2c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00b      	beq.n	8002d4e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	f043 0308 	orr.w	r3, r3, #8
 8002d3c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00b      	beq.n	8002d70 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	f043 0302 	orr.w	r3, r3, #2
 8002d5e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01c      	beq.n	8002db2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f7ff fe45 	bl	8002a08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <I2C_IsErrorOccurred+0x1bc>)
 8002d8a:	400b      	ands	r3, r1
 8002d8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	431a      	orrs	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002db2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3728      	adds	r7, #40	; 0x28
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	fe00e800 	.word	0xfe00e800

08002dc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	607b      	str	r3, [r7, #4]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	817b      	strh	r3, [r7, #10]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dd6:	897b      	ldrh	r3, [r7, #10]
 8002dd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ddc:	7a7b      	ldrb	r3, [r7, #9]
 8002dde:	041b      	lsls	r3, r3, #16
 8002de0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002de4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002df2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	0d5b      	lsrs	r3, r3, #21
 8002dfe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e02:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <I2C_TransferConfig+0x60>)
 8002e04:	430b      	orrs	r3, r1
 8002e06:	43db      	mvns	r3, r3
 8002e08:	ea02 0103 	and.w	r1, r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e16:	bf00      	nop
 8002e18:	371c      	adds	r7, #28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	03ff63ff 	.word	0x03ff63ff

08002e28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	d138      	bne.n	8002eb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e032      	b.n	8002eb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2224      	movs	r2, #36	; 0x24
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6819      	ldr	r1, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e000      	b.n	8002eb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002eb0:	2302      	movs	r3, #2
  }
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b085      	sub	sp, #20
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b20      	cmp	r3, #32
 8002ed2:	d139      	bne.n	8002f48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e033      	b.n	8002f4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2224      	movs	r2, #36	; 0x24
 8002eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0201 	bic.w	r2, r2, #1
 8002f00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	021b      	lsls	r3, r3, #8
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	e000      	b.n	8002f4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f48:	2302      	movs	r3, #2
  }
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
	...

08002f58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f5c:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40007000 	.word	0x40007000

08002f74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f82:	d130      	bne.n	8002fe6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f84:	4b23      	ldr	r3, [pc, #140]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f90:	d038      	beq.n	8003004 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f92:	4b20      	ldr	r3, [pc, #128]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f9a:	4a1e      	ldr	r2, [pc, #120]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fa0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fa2:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2232      	movs	r2, #50	; 0x32
 8002fa8:	fb02 f303 	mul.w	r3, r2, r3
 8002fac:	4a1b      	ldr	r2, [pc, #108]	; (800301c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	0c9b      	lsrs	r3, r3, #18
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fb8:	e002      	b.n	8002fc0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fc0:	4b14      	ldr	r3, [pc, #80]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fcc:	d102      	bne.n	8002fd4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f2      	bne.n	8002fba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fd4:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe0:	d110      	bne.n	8003004 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e00f      	b.n	8003006 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff2:	d007      	beq.n	8003004 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ff4:	4b07      	ldr	r3, [pc, #28]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ffc:	4a05      	ldr	r2, [pc, #20]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003002:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40007000 	.word	0x40007000
 8003018:	20000010 	.word	0x20000010
 800301c:	431bde83 	.word	0x431bde83

08003020 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d102      	bne.n	8003034 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	f000 bc02 	b.w	8003838 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003034:	4b96      	ldr	r3, [pc, #600]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800303e:	4b94      	ldr	r3, [pc, #592]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80e4 	beq.w	800321e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d007      	beq.n	800306c <HAL_RCC_OscConfig+0x4c>
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	2b0c      	cmp	r3, #12
 8003060:	f040 808b 	bne.w	800317a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2b01      	cmp	r3, #1
 8003068:	f040 8087 	bne.w	800317a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800306c:	4b88      	ldr	r3, [pc, #544]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_RCC_OscConfig+0x64>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e3d9      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1a      	ldr	r2, [r3, #32]
 8003088:	4b81      	ldr	r3, [pc, #516]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d004      	beq.n	800309e <HAL_RCC_OscConfig+0x7e>
 8003094:	4b7e      	ldr	r3, [pc, #504]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800309c:	e005      	b.n	80030aa <HAL_RCC_OscConfig+0x8a>
 800309e:	4b7c      	ldr	r3, [pc, #496]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 80030a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d223      	bcs.n	80030f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fd8a 	bl	8003bcc <RCC_SetFlashLatencyFromMSIRange>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e3ba      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030c2:	4b73      	ldr	r3, [pc, #460]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a72      	ldr	r2, [pc, #456]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 80030c8:	f043 0308 	orr.w	r3, r3, #8
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	4b70      	ldr	r3, [pc, #448]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	496d      	ldr	r1, [pc, #436]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030e0:	4b6b      	ldr	r3, [pc, #428]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	4968      	ldr	r1, [pc, #416]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	604b      	str	r3, [r1, #4]
 80030f4:	e025      	b.n	8003142 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030f6:	4b66      	ldr	r3, [pc, #408]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a65      	ldr	r2, [pc, #404]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 80030fc:	f043 0308 	orr.w	r3, r3, #8
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	4b63      	ldr	r3, [pc, #396]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	4960      	ldr	r1, [pc, #384]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 8003110:	4313      	orrs	r3, r2
 8003112:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003114:	4b5e      	ldr	r3, [pc, #376]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	021b      	lsls	r3, r3, #8
 8003122:	495b      	ldr	r1, [pc, #364]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 8003124:	4313      	orrs	r3, r2
 8003126:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fd4a 	bl	8003bcc <RCC_SetFlashLatencyFromMSIRange>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e37a      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003142:	f000 fc81 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8003146:	4602      	mov	r2, r0
 8003148:	4b51      	ldr	r3, [pc, #324]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	4950      	ldr	r1, [pc, #320]	; (8003294 <HAL_RCC_OscConfig+0x274>)
 8003154:	5ccb      	ldrb	r3, [r1, r3]
 8003156:	f003 031f 	and.w	r3, r3, #31
 800315a:	fa22 f303 	lsr.w	r3, r2, r3
 800315e:	4a4e      	ldr	r2, [pc, #312]	; (8003298 <HAL_RCC_OscConfig+0x278>)
 8003160:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003162:	4b4e      	ldr	r3, [pc, #312]	; (800329c <HAL_RCC_OscConfig+0x27c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe ff52 	bl	8002010 <HAL_InitTick>
 800316c:	4603      	mov	r3, r0
 800316e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003170:	7bfb      	ldrb	r3, [r7, #15]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d052      	beq.n	800321c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	e35e      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d032      	beq.n	80031e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003182:	4b43      	ldr	r3, [pc, #268]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a42      	ldr	r2, [pc, #264]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800318e:	f7fe ff8f 	bl	80020b0 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003196:	f7fe ff8b 	bl	80020b0 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e347      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031a8:	4b39      	ldr	r3, [pc, #228]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031b4:	4b36      	ldr	r3, [pc, #216]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a35      	ldr	r2, [pc, #212]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 80031ba:	f043 0308 	orr.w	r3, r3, #8
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	4b33      	ldr	r3, [pc, #204]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	4930      	ldr	r1, [pc, #192]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031d2:	4b2f      	ldr	r3, [pc, #188]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	492b      	ldr	r1, [pc, #172]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	604b      	str	r3, [r1, #4]
 80031e6:	e01a      	b.n	800321e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031e8:	4b29      	ldr	r3, [pc, #164]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a28      	ldr	r2, [pc, #160]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031f4:	f7fe ff5c 	bl	80020b0 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031fc:	f7fe ff58 	bl	80020b0 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e314      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800320e:	4b20      	ldr	r3, [pc, #128]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0x1dc>
 800321a:	e000      	b.n	800321e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800321c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d073      	beq.n	8003312 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	2b08      	cmp	r3, #8
 800322e:	d005      	beq.n	800323c <HAL_RCC_OscConfig+0x21c>
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	2b0c      	cmp	r3, #12
 8003234:	d10e      	bne.n	8003254 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b03      	cmp	r3, #3
 800323a:	d10b      	bne.n	8003254 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323c:	4b14      	ldr	r3, [pc, #80]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d063      	beq.n	8003310 <HAL_RCC_OscConfig+0x2f0>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d15f      	bne.n	8003310 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e2f1      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800325c:	d106      	bne.n	800326c <HAL_RCC_OscConfig+0x24c>
 800325e:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a0b      	ldr	r2, [pc, #44]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 8003264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	e025      	b.n	80032b8 <HAL_RCC_OscConfig+0x298>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003274:	d114      	bne.n	80032a0 <HAL_RCC_OscConfig+0x280>
 8003276:	4b06      	ldr	r3, [pc, #24]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a05      	ldr	r2, [pc, #20]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 800327c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	4b03      	ldr	r3, [pc, #12]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a02      	ldr	r2, [pc, #8]	; (8003290 <HAL_RCC_OscConfig+0x270>)
 8003288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	e013      	b.n	80032b8 <HAL_RCC_OscConfig+0x298>
 8003290:	40021000 	.word	0x40021000
 8003294:	0800b288 	.word	0x0800b288
 8003298:	20000010 	.word	0x20000010
 800329c:	20000014 	.word	0x20000014
 80032a0:	4ba0      	ldr	r3, [pc, #640]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a9f      	ldr	r2, [pc, #636]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 80032a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	4b9d      	ldr	r3, [pc, #628]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a9c      	ldr	r2, [pc, #624]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 80032b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d013      	beq.n	80032e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fe fef6 	bl	80020b0 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c8:	f7fe fef2 	bl	80020b0 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	; 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e2ae      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032da:	4b92      	ldr	r3, [pc, #584]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0x2a8>
 80032e6:	e014      	b.n	8003312 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7fe fee2 	bl	80020b0 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f0:	f7fe fede 	bl	80020b0 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b64      	cmp	r3, #100	; 0x64
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e29a      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003302:	4b88      	ldr	r3, [pc, #544]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x2d0>
 800330e:	e000      	b.n	8003312 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d060      	beq.n	80033e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	2b04      	cmp	r3, #4
 8003322:	d005      	beq.n	8003330 <HAL_RCC_OscConfig+0x310>
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	2b0c      	cmp	r3, #12
 8003328:	d119      	bne.n	800335e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b02      	cmp	r3, #2
 800332e:	d116      	bne.n	800335e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003330:	4b7c      	ldr	r3, [pc, #496]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_RCC_OscConfig+0x328>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e277      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003348:	4b76      	ldr	r3, [pc, #472]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	061b      	lsls	r3, r3, #24
 8003356:	4973      	ldr	r1, [pc, #460]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 8003358:	4313      	orrs	r3, r2
 800335a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800335c:	e040      	b.n	80033e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d023      	beq.n	80033ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003366:	4b6f      	ldr	r3, [pc, #444]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a6e      	ldr	r2, [pc, #440]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 800336c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003372:	f7fe fe9d 	bl	80020b0 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800337a:	f7fe fe99 	bl	80020b0 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e255      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800338c:	4b65      	ldr	r3, [pc, #404]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003398:	4b62      	ldr	r3, [pc, #392]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	061b      	lsls	r3, r3, #24
 80033a6:	495f      	ldr	r1, [pc, #380]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	604b      	str	r3, [r1, #4]
 80033ac:	e018      	b.n	80033e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ae:	4b5d      	ldr	r3, [pc, #372]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a5c      	ldr	r2, [pc, #368]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 80033b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ba:	f7fe fe79 	bl	80020b0 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c2:	f7fe fe75 	bl	80020b0 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e231      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033d4:	4b53      	ldr	r3, [pc, #332]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1f0      	bne.n	80033c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d03c      	beq.n	8003466 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d01c      	beq.n	800342e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f4:	4b4b      	ldr	r3, [pc, #300]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 80033f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033fa:	4a4a      	ldr	r2, [pc, #296]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 80033fc:	f043 0301 	orr.w	r3, r3, #1
 8003400:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003404:	f7fe fe54 	bl	80020b0 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800340c:	f7fe fe50 	bl	80020b0 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e20c      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800341e:	4b41      	ldr	r3, [pc, #260]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 8003420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0ef      	beq.n	800340c <HAL_RCC_OscConfig+0x3ec>
 800342c:	e01b      	b.n	8003466 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800342e:	4b3d      	ldr	r3, [pc, #244]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 8003430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003434:	4a3b      	ldr	r2, [pc, #236]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 8003436:	f023 0301 	bic.w	r3, r3, #1
 800343a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343e:	f7fe fe37 	bl	80020b0 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003446:	f7fe fe33 	bl	80020b0 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e1ef      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003458:	4b32      	ldr	r3, [pc, #200]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 800345a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1ef      	bne.n	8003446 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 80a6 	beq.w	80035c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003474:	2300      	movs	r3, #0
 8003476:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003478:	4b2a      	ldr	r3, [pc, #168]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10d      	bne.n	80034a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003484:	4b27      	ldr	r3, [pc, #156]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 8003486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003488:	4a26      	ldr	r2, [pc, #152]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 800348a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348e:	6593      	str	r3, [r2, #88]	; 0x58
 8003490:	4b24      	ldr	r3, [pc, #144]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 8003492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003498:	60bb      	str	r3, [r7, #8]
 800349a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800349c:	2301      	movs	r3, #1
 800349e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034a0:	4b21      	ldr	r3, [pc, #132]	; (8003528 <HAL_RCC_OscConfig+0x508>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d118      	bne.n	80034de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034ac:	4b1e      	ldr	r3, [pc, #120]	; (8003528 <HAL_RCC_OscConfig+0x508>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1d      	ldr	r2, [pc, #116]	; (8003528 <HAL_RCC_OscConfig+0x508>)
 80034b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b8:	f7fe fdfa 	bl	80020b0 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c0:	f7fe fdf6 	bl	80020b0 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e1b2      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d2:	4b15      	ldr	r3, [pc, #84]	; (8003528 <HAL_RCC_OscConfig+0x508>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d108      	bne.n	80034f8 <HAL_RCC_OscConfig+0x4d8>
 80034e6:	4b0f      	ldr	r3, [pc, #60]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 80034e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ec:	4a0d      	ldr	r2, [pc, #52]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034f6:	e029      	b.n	800354c <HAL_RCC_OscConfig+0x52c>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b05      	cmp	r3, #5
 80034fe:	d115      	bne.n	800352c <HAL_RCC_OscConfig+0x50c>
 8003500:	4b08      	ldr	r3, [pc, #32]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003506:	4a07      	ldr	r2, [pc, #28]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 8003508:	f043 0304 	orr.w	r3, r3, #4
 800350c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003510:	4b04      	ldr	r3, [pc, #16]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003516:	4a03      	ldr	r2, [pc, #12]	; (8003524 <HAL_RCC_OscConfig+0x504>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003520:	e014      	b.n	800354c <HAL_RCC_OscConfig+0x52c>
 8003522:	bf00      	nop
 8003524:	40021000 	.word	0x40021000
 8003528:	40007000 	.word	0x40007000
 800352c:	4b9a      	ldr	r3, [pc, #616]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 800352e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003532:	4a99      	ldr	r2, [pc, #612]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 8003534:	f023 0301 	bic.w	r3, r3, #1
 8003538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800353c:	4b96      	ldr	r3, [pc, #600]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003542:	4a95      	ldr	r2, [pc, #596]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 8003544:	f023 0304 	bic.w	r3, r3, #4
 8003548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d016      	beq.n	8003582 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003554:	f7fe fdac 	bl	80020b0 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800355a:	e00a      	b.n	8003572 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355c:	f7fe fda8 	bl	80020b0 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f241 3288 	movw	r2, #5000	; 0x1388
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e162      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003572:	4b89      	ldr	r3, [pc, #548]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 8003574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0ed      	beq.n	800355c <HAL_RCC_OscConfig+0x53c>
 8003580:	e015      	b.n	80035ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003582:	f7fe fd95 	bl	80020b0 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003588:	e00a      	b.n	80035a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358a:	f7fe fd91 	bl	80020b0 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f241 3288 	movw	r2, #5000	; 0x1388
 8003598:	4293      	cmp	r3, r2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e14b      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035a0:	4b7d      	ldr	r3, [pc, #500]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 80035a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1ed      	bne.n	800358a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ae:	7ffb      	ldrb	r3, [r7, #31]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d105      	bne.n	80035c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b4:	4b78      	ldr	r3, [pc, #480]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 80035b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b8:	4a77      	ldr	r2, [pc, #476]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 80035ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0320 	and.w	r3, r3, #32
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d03c      	beq.n	8003646 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d01c      	beq.n	800360e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035d4:	4b70      	ldr	r3, [pc, #448]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 80035d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035da:	4a6f      	ldr	r2, [pc, #444]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e4:	f7fe fd64 	bl	80020b0 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035ec:	f7fe fd60 	bl	80020b0 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e11c      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035fe:	4b66      	ldr	r3, [pc, #408]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 8003600:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0ef      	beq.n	80035ec <HAL_RCC_OscConfig+0x5cc>
 800360c:	e01b      	b.n	8003646 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800360e:	4b62      	ldr	r3, [pc, #392]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 8003610:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003614:	4a60      	ldr	r2, [pc, #384]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 8003616:	f023 0301 	bic.w	r3, r3, #1
 800361a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361e:	f7fe fd47 	bl	80020b0 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003626:	f7fe fd43 	bl	80020b0 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e0ff      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003638:	4b57      	ldr	r3, [pc, #348]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 800363a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1ef      	bne.n	8003626 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 80f3 	beq.w	8003836 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003654:	2b02      	cmp	r3, #2
 8003656:	f040 80c9 	bne.w	80037ec <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800365a:	4b4f      	ldr	r3, [pc, #316]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f003 0203 	and.w	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	429a      	cmp	r2, r3
 800366c:	d12c      	bne.n	80036c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	3b01      	subs	r3, #1
 800367a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800367c:	429a      	cmp	r2, r3
 800367e:	d123      	bne.n	80036c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800368c:	429a      	cmp	r2, r3
 800368e:	d11b      	bne.n	80036c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800369c:	429a      	cmp	r2, r3
 800369e:	d113      	bne.n	80036c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036aa:	085b      	lsrs	r3, r3, #1
 80036ac:	3b01      	subs	r3, #1
 80036ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d109      	bne.n	80036c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	085b      	lsrs	r3, r3, #1
 80036c0:	3b01      	subs	r3, #1
 80036c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d06b      	beq.n	80037a0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2b0c      	cmp	r3, #12
 80036cc:	d062      	beq.n	8003794 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036ce:	4b32      	ldr	r3, [pc, #200]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e0ac      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036de:	4b2e      	ldr	r3, [pc, #184]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a2d      	ldr	r2, [pc, #180]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 80036e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036ea:	f7fe fce1 	bl	80020b0 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f2:	f7fe fcdd 	bl	80020b0 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e099      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003704:	4b24      	ldr	r3, [pc, #144]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f0      	bne.n	80036f2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003710:	4b21      	ldr	r3, [pc, #132]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	4b21      	ldr	r3, [pc, #132]	; (800379c <HAL_RCC_OscConfig+0x77c>)
 8003716:	4013      	ands	r3, r2
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003720:	3a01      	subs	r2, #1
 8003722:	0112      	lsls	r2, r2, #4
 8003724:	4311      	orrs	r1, r2
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800372a:	0212      	lsls	r2, r2, #8
 800372c:	4311      	orrs	r1, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003732:	0852      	lsrs	r2, r2, #1
 8003734:	3a01      	subs	r2, #1
 8003736:	0552      	lsls	r2, r2, #21
 8003738:	4311      	orrs	r1, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800373e:	0852      	lsrs	r2, r2, #1
 8003740:	3a01      	subs	r2, #1
 8003742:	0652      	lsls	r2, r2, #25
 8003744:	4311      	orrs	r1, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800374a:	06d2      	lsls	r2, r2, #27
 800374c:	430a      	orrs	r2, r1
 800374e:	4912      	ldr	r1, [pc, #72]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 8003750:	4313      	orrs	r3, r2
 8003752:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003754:	4b10      	ldr	r3, [pc, #64]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a0f      	ldr	r2, [pc, #60]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 800375a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800375e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003760:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4a0c      	ldr	r2, [pc, #48]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 8003766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800376a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800376c:	f7fe fca0 	bl	80020b0 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003774:	f7fe fc9c 	bl	80020b0 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e058      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003786:	4b04      	ldr	r3, [pc, #16]	; (8003798 <HAL_RCC_OscConfig+0x778>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003792:	e050      	b.n	8003836 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e04f      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
 8003798:	40021000 	.word	0x40021000
 800379c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a0:	4b27      	ldr	r3, [pc, #156]	; (8003840 <HAL_RCC_OscConfig+0x820>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d144      	bne.n	8003836 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037ac:	4b24      	ldr	r3, [pc, #144]	; (8003840 <HAL_RCC_OscConfig+0x820>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a23      	ldr	r2, [pc, #140]	; (8003840 <HAL_RCC_OscConfig+0x820>)
 80037b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037b8:	4b21      	ldr	r3, [pc, #132]	; (8003840 <HAL_RCC_OscConfig+0x820>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	4a20      	ldr	r2, [pc, #128]	; (8003840 <HAL_RCC_OscConfig+0x820>)
 80037be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037c4:	f7fe fc74 	bl	80020b0 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037cc:	f7fe fc70 	bl	80020b0 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e02c      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037de:	4b18      	ldr	r3, [pc, #96]	; (8003840 <HAL_RCC_OscConfig+0x820>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x7ac>
 80037ea:	e024      	b.n	8003836 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	2b0c      	cmp	r3, #12
 80037f0:	d01f      	beq.n	8003832 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f2:	4b13      	ldr	r3, [pc, #76]	; (8003840 <HAL_RCC_OscConfig+0x820>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a12      	ldr	r2, [pc, #72]	; (8003840 <HAL_RCC_OscConfig+0x820>)
 80037f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fe:	f7fe fc57 	bl	80020b0 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003806:	f7fe fc53 	bl	80020b0 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e00f      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003818:	4b09      	ldr	r3, [pc, #36]	; (8003840 <HAL_RCC_OscConfig+0x820>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1f0      	bne.n	8003806 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003824:	4b06      	ldr	r3, [pc, #24]	; (8003840 <HAL_RCC_OscConfig+0x820>)
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	4905      	ldr	r1, [pc, #20]	; (8003840 <HAL_RCC_OscConfig+0x820>)
 800382a:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_RCC_OscConfig+0x824>)
 800382c:	4013      	ands	r3, r2
 800382e:	60cb      	str	r3, [r1, #12]
 8003830:	e001      	b.n	8003836 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40021000 	.word	0x40021000
 8003844:	feeefffc 	.word	0xfeeefffc

08003848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0e7      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800385c:	4b75      	ldr	r3, [pc, #468]	; (8003a34 <HAL_RCC_ClockConfig+0x1ec>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d910      	bls.n	800388c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386a:	4b72      	ldr	r3, [pc, #456]	; (8003a34 <HAL_RCC_ClockConfig+0x1ec>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 0207 	bic.w	r2, r3, #7
 8003872:	4970      	ldr	r1, [pc, #448]	; (8003a34 <HAL_RCC_ClockConfig+0x1ec>)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	4313      	orrs	r3, r2
 8003878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387a:	4b6e      	ldr	r3, [pc, #440]	; (8003a34 <HAL_RCC_ClockConfig+0x1ec>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0cf      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d010      	beq.n	80038ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	4b66      	ldr	r3, [pc, #408]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d908      	bls.n	80038ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a8:	4b63      	ldr	r3, [pc, #396]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	4960      	ldr	r1, [pc, #384]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d04c      	beq.n	8003960 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	d107      	bne.n	80038de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ce:	4b5a      	ldr	r3, [pc, #360]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d121      	bne.n	800391e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e0a6      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d107      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038e6:	4b54      	ldr	r3, [pc, #336]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d115      	bne.n	800391e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e09a      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d107      	bne.n	800390e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038fe:	4b4e      	ldr	r3, [pc, #312]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d109      	bne.n	800391e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e08e      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800390e:	4b4a      	ldr	r3, [pc, #296]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e086      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800391e:	4b46      	ldr	r3, [pc, #280]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f023 0203 	bic.w	r2, r3, #3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4943      	ldr	r1, [pc, #268]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 800392c:	4313      	orrs	r3, r2
 800392e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003930:	f7fe fbbe 	bl	80020b0 <HAL_GetTick>
 8003934:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003936:	e00a      	b.n	800394e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003938:	f7fe fbba 	bl	80020b0 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	; 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e06e      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394e:	4b3a      	ldr	r3, [pc, #232]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 020c 	and.w	r2, r3, #12
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	429a      	cmp	r2, r3
 800395e:	d1eb      	bne.n	8003938 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d010      	beq.n	800398e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	4b31      	ldr	r3, [pc, #196]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003978:	429a      	cmp	r2, r3
 800397a:	d208      	bcs.n	800398e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800397c:	4b2e      	ldr	r3, [pc, #184]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	492b      	ldr	r1, [pc, #172]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 800398a:	4313      	orrs	r3, r2
 800398c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800398e:	4b29      	ldr	r3, [pc, #164]	; (8003a34 <HAL_RCC_ClockConfig+0x1ec>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d210      	bcs.n	80039be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399c:	4b25      	ldr	r3, [pc, #148]	; (8003a34 <HAL_RCC_ClockConfig+0x1ec>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f023 0207 	bic.w	r2, r3, #7
 80039a4:	4923      	ldr	r1, [pc, #140]	; (8003a34 <HAL_RCC_ClockConfig+0x1ec>)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ac:	4b21      	ldr	r3, [pc, #132]	; (8003a34 <HAL_RCC_ClockConfig+0x1ec>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d001      	beq.n	80039be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e036      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d008      	beq.n	80039dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ca:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	4918      	ldr	r1, [pc, #96]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d009      	beq.n	80039fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039e8:	4b13      	ldr	r3, [pc, #76]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	4910      	ldr	r1, [pc, #64]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039fc:	f000 f824 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8003a00:	4602      	mov	r2, r0
 8003a02:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <HAL_RCC_ClockConfig+0x1f0>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	091b      	lsrs	r3, r3, #4
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	490b      	ldr	r1, [pc, #44]	; (8003a3c <HAL_RCC_ClockConfig+0x1f4>)
 8003a0e:	5ccb      	ldrb	r3, [r1, r3]
 8003a10:	f003 031f 	and.w	r3, r3, #31
 8003a14:	fa22 f303 	lsr.w	r3, r2, r3
 8003a18:	4a09      	ldr	r2, [pc, #36]	; (8003a40 <HAL_RCC_ClockConfig+0x1f8>)
 8003a1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a1c:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_RCC_ClockConfig+0x1fc>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fe faf5 	bl	8002010 <HAL_InitTick>
 8003a26:	4603      	mov	r3, r0
 8003a28:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a2a:	7afb      	ldrb	r3, [r7, #11]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40022000 	.word	0x40022000
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	0800b288 	.word	0x0800b288
 8003a40:	20000010 	.word	0x20000010
 8003a44:	20000014 	.word	0x20000014

08003a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b089      	sub	sp, #36	; 0x24
 8003a4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
 8003a52:	2300      	movs	r3, #0
 8003a54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a56:	4b3e      	ldr	r3, [pc, #248]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
 8003a5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a60:	4b3b      	ldr	r3, [pc, #236]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x34>
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	2b0c      	cmp	r3, #12
 8003a74:	d121      	bne.n	8003aba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d11e      	bne.n	8003aba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a7c:	4b34      	ldr	r3, [pc, #208]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d107      	bne.n	8003a98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a88:	4b31      	ldr	r3, [pc, #196]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a8e:	0a1b      	lsrs	r3, r3, #8
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	61fb      	str	r3, [r7, #28]
 8003a96:	e005      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a98:	4b2d      	ldr	r3, [pc, #180]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	091b      	lsrs	r3, r3, #4
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003aa4:	4a2b      	ldr	r2, [pc, #172]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10d      	bne.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ab8:	e00a      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d102      	bne.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ac0:	4b25      	ldr	r3, [pc, #148]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ac2:	61bb      	str	r3, [r7, #24]
 8003ac4:	e004      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d101      	bne.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003acc:	4b22      	ldr	r3, [pc, #136]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ace:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	2b0c      	cmp	r3, #12
 8003ad4:	d134      	bne.n	8003b40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ad6:	4b1e      	ldr	r3, [pc, #120]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d003      	beq.n	8003aee <HAL_RCC_GetSysClockFreq+0xa6>
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d003      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0xac>
 8003aec:	e005      	b.n	8003afa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003aee:	4b1a      	ldr	r3, [pc, #104]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x110>)
 8003af0:	617b      	str	r3, [r7, #20]
      break;
 8003af2:	e005      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003af4:	4b18      	ldr	r3, [pc, #96]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x110>)
 8003af6:	617b      	str	r3, [r7, #20]
      break;
 8003af8:	e002      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	617b      	str	r3, [r7, #20]
      break;
 8003afe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b00:	4b13      	ldr	r3, [pc, #76]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b0e:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	0a1b      	lsrs	r3, r3, #8
 8003b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	fb03 f202 	mul.w	r2, r3, r2
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b26:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	0e5b      	lsrs	r3, r3, #25
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	3301      	adds	r3, #1
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b40:	69bb      	ldr	r3, [r7, #24]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3724      	adds	r7, #36	; 0x24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40021000 	.word	0x40021000
 8003b54:	0800b2a0 	.word	0x0800b2a0
 8003b58:	00f42400 	.word	0x00f42400

08003b5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b60:	4b03      	ldr	r3, [pc, #12]	; (8003b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b62:	681b      	ldr	r3, [r3, #0]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	20000010 	.word	0x20000010

08003b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b78:	f7ff fff0 	bl	8003b5c <HAL_RCC_GetHCLKFreq>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	0a1b      	lsrs	r3, r3, #8
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	4904      	ldr	r1, [pc, #16]	; (8003b9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b8a:	5ccb      	ldrb	r3, [r1, r3]
 8003b8c:	f003 031f 	and.w	r3, r3, #31
 8003b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	0800b298 	.word	0x0800b298

08003ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ba4:	f7ff ffda 	bl	8003b5c <HAL_RCC_GetHCLKFreq>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	0adb      	lsrs	r3, r3, #11
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	4904      	ldr	r1, [pc, #16]	; (8003bc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bb6:	5ccb      	ldrb	r3, [r1, r3]
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	0800b298 	.word	0x0800b298

08003bcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bd8:	4b2a      	ldr	r3, [pc, #168]	; (8003c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003be4:	f7ff f9b8 	bl	8002f58 <HAL_PWREx_GetVoltageRange>
 8003be8:	6178      	str	r0, [r7, #20]
 8003bea:	e014      	b.n	8003c16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bec:	4b25      	ldr	r3, [pc, #148]	; (8003c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf0:	4a24      	ldr	r2, [pc, #144]	; (8003c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf6:	6593      	str	r3, [r2, #88]	; 0x58
 8003bf8:	4b22      	ldr	r3, [pc, #136]	; (8003c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c04:	f7ff f9a8 	bl	8002f58 <HAL_PWREx_GetVoltageRange>
 8003c08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c0a:	4b1e      	ldr	r3, [pc, #120]	; (8003c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0e:	4a1d      	ldr	r2, [pc, #116]	; (8003c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c1c:	d10b      	bne.n	8003c36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b80      	cmp	r3, #128	; 0x80
 8003c22:	d919      	bls.n	8003c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2ba0      	cmp	r3, #160	; 0xa0
 8003c28:	d902      	bls.n	8003c30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	e013      	b.n	8003c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c30:	2301      	movs	r3, #1
 8003c32:	613b      	str	r3, [r7, #16]
 8003c34:	e010      	b.n	8003c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b80      	cmp	r3, #128	; 0x80
 8003c3a:	d902      	bls.n	8003c42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	e00a      	b.n	8003c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b80      	cmp	r3, #128	; 0x80
 8003c46:	d102      	bne.n	8003c4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c48:	2302      	movs	r3, #2
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	e004      	b.n	8003c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b70      	cmp	r3, #112	; 0x70
 8003c52:	d101      	bne.n	8003c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c54:	2301      	movs	r3, #1
 8003c56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c58:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f023 0207 	bic.w	r2, r3, #7
 8003c60:	4909      	ldr	r1, [pc, #36]	; (8003c88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c68:	4b07      	ldr	r3, [pc, #28]	; (8003c88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d001      	beq.n	8003c7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40021000 	.word	0x40021000
 8003c88:	40022000 	.word	0x40022000

08003c8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c94:	2300      	movs	r3, #0
 8003c96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c98:	2300      	movs	r3, #0
 8003c9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d031      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cb0:	d01a      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003cb2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cb6:	d814      	bhi.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d009      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003cbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cc0:	d10f      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003cc2:	4b5d      	ldr	r3, [pc, #372]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	4a5c      	ldr	r2, [pc, #368]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ccc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cce:	e00c      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fe84 	bl	80049e4 <RCCEx_PLLSAI1_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ce0:	e003      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	74fb      	strb	r3, [r7, #19]
      break;
 8003ce6:	e000      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cea:	7cfb      	ldrb	r3, [r7, #19]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10b      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cf0:	4b51      	ldr	r3, [pc, #324]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	494e      	ldr	r1, [pc, #312]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d06:	e001      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d08:	7cfb      	ldrb	r3, [r7, #19]
 8003d0a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 809e 	beq.w	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d1e:	4b46      	ldr	r3, [pc, #280]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00d      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d34:	4b40      	ldr	r3, [pc, #256]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d38:	4a3f      	ldr	r2, [pc, #252]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d3e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d40:	4b3d      	ldr	r3, [pc, #244]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d50:	4b3a      	ldr	r3, [pc, #232]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a39      	ldr	r2, [pc, #228]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d5c:	f7fe f9a8 	bl	80020b0 <HAL_GetTick>
 8003d60:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d62:	e009      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d64:	f7fe f9a4 	bl	80020b0 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d902      	bls.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	74fb      	strb	r3, [r7, #19]
        break;
 8003d76:	e005      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d78:	4b30      	ldr	r3, [pc, #192]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0ef      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003d84:	7cfb      	ldrb	r3, [r7, #19]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d15a      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d8a:	4b2b      	ldr	r3, [pc, #172]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d94:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d01e      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d019      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003da6:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003db2:	4b21      	ldr	r3, [pc, #132]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db8:	4a1f      	ldr	r2, [pc, #124]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dc2:	4b1d      	ldr	r3, [pc, #116]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc8:	4a1b      	ldr	r2, [pc, #108]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dd2:	4a19      	ldr	r2, [pc, #100]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d016      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fe f964 	bl	80020b0 <HAL_GetTick>
 8003de8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dea:	e00b      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dec:	f7fe f960 	bl	80020b0 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d902      	bls.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	74fb      	strb	r3, [r7, #19]
            break;
 8003e02:	e006      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e04:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0ec      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003e12:	7cfb      	ldrb	r3, [r7, #19]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10b      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e18:	4b07      	ldr	r3, [pc, #28]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e26:	4904      	ldr	r1, [pc, #16]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e2e:	e009      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e30:	7cfb      	ldrb	r3, [r7, #19]
 8003e32:	74bb      	strb	r3, [r7, #18]
 8003e34:	e006      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003e36:	bf00      	nop
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e40:	7cfb      	ldrb	r3, [r7, #19]
 8003e42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e44:	7c7b      	ldrb	r3, [r7, #17]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d105      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e4a:	4b9b      	ldr	r3, [pc, #620]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4e:	4a9a      	ldr	r2, [pc, #616]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e62:	4b95      	ldr	r3, [pc, #596]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e68:	f023 0203 	bic.w	r2, r3, #3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	4991      	ldr	r1, [pc, #580]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e84:	4b8c      	ldr	r3, [pc, #560]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8a:	f023 020c 	bic.w	r2, r3, #12
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	4989      	ldr	r1, [pc, #548]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0304 	and.w	r3, r3, #4
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ea6:	4b84      	ldr	r3, [pc, #528]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	4980      	ldr	r1, [pc, #512]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ec8:	4b7b      	ldr	r3, [pc, #492]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed6:	4978      	ldr	r1, [pc, #480]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eea:	4b73      	ldr	r3, [pc, #460]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef8:	496f      	ldr	r1, [pc, #444]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f0c:	4b6a      	ldr	r3, [pc, #424]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	4967      	ldr	r1, [pc, #412]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f2e:	4b62      	ldr	r3, [pc, #392]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	495e      	ldr	r1, [pc, #376]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f50:	4b59      	ldr	r3, [pc, #356]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5e:	4956      	ldr	r1, [pc, #344]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f72:	4b51      	ldr	r3, [pc, #324]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	494d      	ldr	r1, [pc, #308]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d028      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f94:	4b48      	ldr	r3, [pc, #288]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa2:	4945      	ldr	r1, [pc, #276]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fb2:	d106      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fb4:	4b40      	ldr	r3, [pc, #256]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4a3f      	ldr	r2, [pc, #252]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003fba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fbe:	60d3      	str	r3, [r2, #12]
 8003fc0:	e011      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fca:	d10c      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fd06 	bl	80049e4 <RCCEx_PLLSAI1_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fdc:	7cfb      	ldrb	r3, [r7, #19]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8003fe2:	7cfb      	ldrb	r3, [r7, #19]
 8003fe4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d028      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ff2:	4b31      	ldr	r3, [pc, #196]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004000:	492d      	ldr	r1, [pc, #180]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004010:	d106      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004012:	4b29      	ldr	r3, [pc, #164]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	4a28      	ldr	r2, [pc, #160]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004018:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800401c:	60d3      	str	r3, [r2, #12]
 800401e:	e011      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004024:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004028:	d10c      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3304      	adds	r3, #4
 800402e:	2101      	movs	r1, #1
 8004030:	4618      	mov	r0, r3
 8004032:	f000 fcd7 	bl	80049e4 <RCCEx_PLLSAI1_Config>
 8004036:	4603      	mov	r3, r0
 8004038:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800403a:	7cfb      	ldrb	r3, [r7, #19]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d01c      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004050:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004056:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405e:	4916      	ldr	r1, [pc, #88]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800406e:	d10c      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	2102      	movs	r1, #2
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fcb4 	bl	80049e4 <RCCEx_PLLSAI1_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004080:	7cfb      	ldrb	r3, [r7, #19]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8004086:	7cfb      	ldrb	r3, [r7, #19]
 8004088:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004096:	4b08      	ldr	r3, [pc, #32]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a4:	4904      	ldr	r1, [pc, #16]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40021000 	.word	0x40021000

080040bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040ce:	d13e      	bne.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80040d0:	4bb0      	ldr	r3, [pc, #704]	; (8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040da:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040e2:	d028      	beq.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ea:	f200 8469 	bhi.w	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f4:	d005      	beq.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040fc:	d00e      	beq.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80040fe:	f000 bc5f 	b.w	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004102:	4ba4      	ldr	r3, [pc, #656]	; (8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b02      	cmp	r3, #2
 800410e:	f040 8459 	bne.w	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>
        frequency = LSE_VALUE;
 8004112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004116:	61fb      	str	r3, [r7, #28]
      break;
 8004118:	f000 bc54 	b.w	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800411c:	4b9d      	ldr	r3, [pc, #628]	; (8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800411e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b02      	cmp	r3, #2
 8004128:	f040 844e 	bne.w	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
          frequency = LSI_VALUE;
 800412c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004130:	61fb      	str	r3, [r7, #28]
      break;
 8004132:	f000 bc49 	b.w	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004136:	4b97      	ldr	r3, [pc, #604]	; (8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004142:	f040 8443 	bne.w	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x910>
        frequency = HSE_VALUE / 32U;
 8004146:	4b94      	ldr	r3, [pc, #592]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004148:	61fb      	str	r3, [r7, #28]
      break;
 800414a:	f000 bc3f 	b.w	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x910>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800414e:	4b91      	ldr	r3, [pc, #580]	; (8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2b03      	cmp	r3, #3
 800415c:	d036      	beq.n	80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2b03      	cmp	r3, #3
 8004162:	d840      	bhi.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d003      	beq.n	8004172 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d020      	beq.n	80041b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004170:	e039      	b.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004172:	4b88      	ldr	r3, [pc, #544]	; (8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b02      	cmp	r3, #2
 800417c:	d116      	bne.n	80041ac <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800417e:	4b85      	ldr	r3, [pc, #532]	; (8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b00      	cmp	r3, #0
 8004188:	d005      	beq.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800418a:	4b82      	ldr	r3, [pc, #520]	; (8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	091b      	lsrs	r3, r3, #4
 8004190:	f003 030f 	and.w	r3, r3, #15
 8004194:	e005      	b.n	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004196:	4b7f      	ldr	r3, [pc, #508]	; (8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800419c:	0a1b      	lsrs	r3, r3, #8
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	4a7e      	ldr	r2, [pc, #504]	; (800439c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80041a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80041aa:	e01f      	b.n	80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61bb      	str	r3, [r7, #24]
      break;
 80041b0:	e01c      	b.n	80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041b2:	4b78      	ldr	r3, [pc, #480]	; (8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041be:	d102      	bne.n	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80041c0:	4b77      	ldr	r3, [pc, #476]	; (80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80041c2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80041c4:	e012      	b.n	80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61bb      	str	r3, [r7, #24]
      break;
 80041ca:	e00f      	b.n	80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80041cc:	4b71      	ldr	r3, [pc, #452]	; (8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041d8:	d102      	bne.n	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80041da:	4b71      	ldr	r3, [pc, #452]	; (80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80041dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80041de:	e005      	b.n	80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61bb      	str	r3, [r7, #24]
      break;
 80041e4:	e002      	b.n	80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61bb      	str	r3, [r7, #24]
      break;
 80041ea:	bf00      	nop
    }

    switch(PeriphClk)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041f2:	f000 80ad 	beq.w	8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041fc:	f200 83e8 	bhi.w	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004206:	f000 80a3 	beq.w	8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004210:	f200 83de 	bhi.w	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800421a:	f000 83b4 	beq.w	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004224:	f200 83d4 	bhi.w	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800422e:	f000 824c 	beq.w	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004238:	f200 83ca 	bhi.w	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004242:	d07e      	beq.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800424a:	f200 83c1 	bhi.w	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004254:	f000 834d 	beq.w	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800425e:	f200 83b7 	bhi.w	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004268:	f000 82f5 	beq.w	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004272:	f200 83ad 	bhi.w	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800427c:	f000 82bf 	beq.w	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004286:	f200 83a3 	bhi.w	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b80      	cmp	r3, #128	; 0x80
 800428e:	f000 828a 	beq.w	80047a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b80      	cmp	r3, #128	; 0x80
 8004296:	f200 839b 	bhi.w	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b20      	cmp	r3, #32
 800429e:	d84b      	bhi.n	8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 8394 	beq.w	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	2b1f      	cmp	r3, #31
 80042ae:	f200 838f 	bhi.w	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80042b2:	a201      	add	r2, pc, #4	; (adr r2, 80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80042b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b8:	080044bb 	.word	0x080044bb
 80042bc:	0800452b 	.word	0x0800452b
 80042c0:	080049d1 	.word	0x080049d1
 80042c4:	080045bf 	.word	0x080045bf
 80042c8:	080049d1 	.word	0x080049d1
 80042cc:	080049d1 	.word	0x080049d1
 80042d0:	080049d1 	.word	0x080049d1
 80042d4:	080049d1 	.word	0x080049d1
 80042d8:	080049d1 	.word	0x080049d1
 80042dc:	080049d1 	.word	0x080049d1
 80042e0:	080049d1 	.word	0x080049d1
 80042e4:	080049d1 	.word	0x080049d1
 80042e8:	080049d1 	.word	0x080049d1
 80042ec:	080049d1 	.word	0x080049d1
 80042f0:	080049d1 	.word	0x080049d1
 80042f4:	080049d1 	.word	0x080049d1
 80042f8:	080049d1 	.word	0x080049d1
 80042fc:	080049d1 	.word	0x080049d1
 8004300:	080049d1 	.word	0x080049d1
 8004304:	080049d1 	.word	0x080049d1
 8004308:	080049d1 	.word	0x080049d1
 800430c:	080049d1 	.word	0x080049d1
 8004310:	080049d1 	.word	0x080049d1
 8004314:	080049d1 	.word	0x080049d1
 8004318:	080049d1 	.word	0x080049d1
 800431c:	080049d1 	.word	0x080049d1
 8004320:	080049d1 	.word	0x080049d1
 8004324:	080049d1 	.word	0x080049d1
 8004328:	080049d1 	.word	0x080049d1
 800432c:	080049d1 	.word	0x080049d1
 8004330:	080049d1 	.word	0x080049d1
 8004334:	08004649 	.word	0x08004649
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b40      	cmp	r3, #64	; 0x40
 800433c:	f000 8207 	beq.w	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004340:	e346      	b.n	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004342:	69b9      	ldr	r1, [r7, #24]
 8004344:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004348:	f000 fc3e 	bl	8004bc8 <RCCEx_GetSAIxPeriphCLKFreq>
 800434c:	61f8      	str	r0, [r7, #28]
      break;
 800434e:	e340      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004350:	4b10      	ldr	r3, [pc, #64]	; (8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004356:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004362:	d01f      	beq.n	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800436a:	f200 809c 	bhi.w	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004374:	d033      	beq.n	80043de <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800437c:	f200 8093 	bhi.w	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 8085 	beq.w	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800438e:	d053      	beq.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          break;
 8004390:	e089      	b.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8004392:	bf00      	nop
 8004394:	40021000 	.word	0x40021000
 8004398:	0007a120 	.word	0x0007a120
 800439c:	0800b2a0 	.word	0x0800b2a0
 80043a0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80043a4:	4ba4      	ldr	r3, [pc, #656]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d17c      	bne.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80043b0:	4ba1      	ldr	r3, [pc, #644]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0308 	and.w	r3, r3, #8
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d005      	beq.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80043bc:	4b9e      	ldr	r3, [pc, #632]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	091b      	lsrs	r3, r3, #4
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	e005      	b.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80043c8:	4b9b      	ldr	r3, [pc, #620]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80043ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ce:	0a1b      	lsrs	r3, r3, #8
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	4a99      	ldr	r2, [pc, #612]	; (800463c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80043d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043da:	61fb      	str	r3, [r7, #28]
          break;
 80043dc:	e065      	b.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80043de:	4b96      	ldr	r3, [pc, #600]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043ea:	d160      	bne.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80043ec:	4b92      	ldr	r3, [pc, #584]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043f8:	d159      	bne.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80043fa:	4b8f      	ldr	r3, [pc, #572]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	0a1b      	lsrs	r3, r3, #8
 8004400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004404:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	fb03 f202 	mul.w	r2, r3, r2
 800440e:	4b8a      	ldr	r3, [pc, #552]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	091b      	lsrs	r3, r3, #4
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	3301      	adds	r3, #1
 800441a:	fbb2 f3f3 	udiv	r3, r2, r3
 800441e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004420:	4b85      	ldr	r3, [pc, #532]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	0d5b      	lsrs	r3, r3, #21
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	3301      	adds	r3, #1
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	fbb2 f3f3 	udiv	r3, r2, r3
 8004434:	61fb      	str	r3, [r7, #28]
          break;
 8004436:	e03a      	b.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004438:	4b7f      	ldr	r3, [pc, #508]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004440:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004444:	d135      	bne.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004446:	4b7c      	ldr	r3, [pc, #496]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800444e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004452:	d12e      	bne.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004454:	4b78      	ldr	r3, [pc, #480]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	0a1b      	lsrs	r3, r3, #8
 800445a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800445e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	fb03 f202 	mul.w	r2, r3, r2
 8004468:	4b73      	ldr	r3, [pc, #460]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	091b      	lsrs	r3, r3, #4
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	3301      	adds	r3, #1
 8004474:	fbb2 f3f3 	udiv	r3, r2, r3
 8004478:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800447a:	4b6f      	ldr	r3, [pc, #444]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	0d5b      	lsrs	r3, r3, #21
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	3301      	adds	r3, #1
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	fbb2 f3f3 	udiv	r3, r2, r3
 800448e:	61fb      	str	r3, [r7, #28]
          break;
 8004490:	e00f      	b.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004492:	4b69      	ldr	r3, [pc, #420]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004494:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b02      	cmp	r3, #2
 800449e:	d10a      	bne.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
            frequency = HSI48_VALUE;
 80044a0:	4b67      	ldr	r3, [pc, #412]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80044a2:	61fb      	str	r3, [r7, #28]
          break;
 80044a4:	e007      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          break;
 80044a6:	bf00      	nop
 80044a8:	e293      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 80044aa:	bf00      	nop
 80044ac:	e291      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 80044ae:	bf00      	nop
 80044b0:	e28f      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 80044b2:	bf00      	nop
 80044b4:	e28d      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 80044b6:	bf00      	nop
        break;
 80044b8:	e28b      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80044ba:	4b5f      	ldr	r3, [pc, #380]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80044bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	2b03      	cmp	r3, #3
 80044ca:	d828      	bhi.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80044cc:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 80044ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d2:	bf00      	nop
 80044d4:	080044e5 	.word	0x080044e5
 80044d8:	080044ed 	.word	0x080044ed
 80044dc:	080044f5 	.word	0x080044f5
 80044e0:	08004509 	.word	0x08004509
          frequency = HAL_RCC_GetPCLK2Freq();
 80044e4:	f7ff fb5c 	bl	8003ba0 <HAL_RCC_GetPCLK2Freq>
 80044e8:	61f8      	str	r0, [r7, #28]
          break;
 80044ea:	e01d      	b.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          frequency = HAL_RCC_GetSysClockFreq();
 80044ec:	f7ff faac 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 80044f0:	61f8      	str	r0, [r7, #28]
          break;
 80044f2:	e019      	b.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044f4:	4b50      	ldr	r3, [pc, #320]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004500:	d10f      	bne.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
            frequency = HSI_VALUE;
 8004502:	4b50      	ldr	r3, [pc, #320]	; (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004504:	61fb      	str	r3, [r7, #28]
          break;
 8004506:	e00c      	b.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004508:	4b4b      	ldr	r3, [pc, #300]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800450a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b02      	cmp	r3, #2
 8004514:	d107      	bne.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
            frequency = LSE_VALUE;
 8004516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800451a:	61fb      	str	r3, [r7, #28]
          break;
 800451c:	e003      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
          break;
 800451e:	bf00      	nop
 8004520:	e257      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8004522:	bf00      	nop
 8004524:	e255      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8004526:	bf00      	nop
        break;
 8004528:	e253      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800452a:	4b43      	ldr	r3, [pc, #268]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004530:	f003 030c 	and.w	r3, r3, #12
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b0c      	cmp	r3, #12
 800453a:	d83a      	bhi.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800453c:	a201      	add	r2, pc, #4	; (adr r2, 8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800453e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004542:	bf00      	nop
 8004544:	08004579 	.word	0x08004579
 8004548:	080045b3 	.word	0x080045b3
 800454c:	080045b3 	.word	0x080045b3
 8004550:	080045b3 	.word	0x080045b3
 8004554:	08004581 	.word	0x08004581
 8004558:	080045b3 	.word	0x080045b3
 800455c:	080045b3 	.word	0x080045b3
 8004560:	080045b3 	.word	0x080045b3
 8004564:	08004589 	.word	0x08004589
 8004568:	080045b3 	.word	0x080045b3
 800456c:	080045b3 	.word	0x080045b3
 8004570:	080045b3 	.word	0x080045b3
 8004574:	0800459d 	.word	0x0800459d
          frequency = HAL_RCC_GetPCLK1Freq();
 8004578:	f7ff fafc 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 800457c:	61f8      	str	r0, [r7, #28]
          break;
 800457e:	e01d      	b.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
          frequency = HAL_RCC_GetSysClockFreq();
 8004580:	f7ff fa62 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8004584:	61f8      	str	r0, [r7, #28]
          break;
 8004586:	e019      	b.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004588:	4b2b      	ldr	r3, [pc, #172]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004594:	d10f      	bne.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
            frequency = HSI_VALUE;
 8004596:	4b2b      	ldr	r3, [pc, #172]	; (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004598:	61fb      	str	r3, [r7, #28]
          break;
 800459a:	e00c      	b.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800459c:	4b26      	ldr	r3, [pc, #152]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d107      	bne.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
            frequency = LSE_VALUE;
 80045aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ae:	61fb      	str	r3, [r7, #28]
          break;
 80045b0:	e003      	b.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          break;
 80045b2:	bf00      	nop
 80045b4:	e20d      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 80045b6:	bf00      	nop
 80045b8:	e20b      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 80045ba:	bf00      	nop
        break;
 80045bc:	e209      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80045be:	4b1e      	ldr	r3, [pc, #120]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80045c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045c8:	613b      	str	r3, [r7, #16]
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	2b30      	cmp	r3, #48	; 0x30
 80045ce:	d021      	beq.n	8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	2b30      	cmp	r3, #48	; 0x30
 80045d4:	d829      	bhi.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	2b20      	cmp	r3, #32
 80045da:	d011      	beq.n	8004600 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	2b20      	cmp	r3, #32
 80045e0:	d823      	bhi.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	2b10      	cmp	r3, #16
 80045ec:	d004      	beq.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 80045ee:	e01c      	b.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80045f0:	f7ff fac0 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 80045f4:	61f8      	str	r0, [r7, #28]
          break;
 80045f6:	e01d      	b.n	8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
          frequency = HAL_RCC_GetSysClockFreq();
 80045f8:	f7ff fa26 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 80045fc:	61f8      	str	r0, [r7, #28]
          break;
 80045fe:	e019      	b.n	8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004600:	4b0d      	ldr	r3, [pc, #52]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800460c:	d10f      	bne.n	800462e <HAL_RCCEx_GetPeriphCLKFreq+0x572>
            frequency = HSI_VALUE;
 800460e:	4b0d      	ldr	r3, [pc, #52]	; (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004610:	61fb      	str	r3, [r7, #28]
          break;
 8004612:	e00c      	b.n	800462e <HAL_RCCEx_GetPeriphCLKFreq+0x572>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004614:	4b08      	ldr	r3, [pc, #32]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b02      	cmp	r3, #2
 8004620:	d107      	bne.n	8004632 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
            frequency = LSE_VALUE;
 8004622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004626:	61fb      	str	r3, [r7, #28]
          break;
 8004628:	e003      	b.n	8004632 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
          break;
 800462a:	bf00      	nop
 800462c:	e1d1      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 800462e:	bf00      	nop
 8004630:	e1cf      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8004632:	bf00      	nop
        break;
 8004634:	e1cd      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
 8004636:	bf00      	nop
 8004638:	40021000 	.word	0x40021000
 800463c:	0800b2a0 	.word	0x0800b2a0
 8004640:	02dc6c00 	.word	0x02dc6c00
 8004644:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004648:	4b99      	ldr	r3, [pc, #612]	; (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004652:	613b      	str	r3, [r7, #16]
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800465a:	d025      	beq.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004662:	d82c      	bhi.n	80046be <HAL_RCCEx_GetPeriphCLKFreq+0x602>
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800466a:	d013      	beq.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004672:	d824      	bhi.n	80046be <HAL_RCCEx_GetPeriphCLKFreq+0x602>
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d004      	beq.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004680:	d004      	beq.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
          break;
 8004682:	e01c      	b.n	80046be <HAL_RCCEx_GetPeriphCLKFreq+0x602>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004684:	f7ff fa76 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 8004688:	61f8      	str	r0, [r7, #28]
          break;
 800468a:	e01d      	b.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
          frequency = HAL_RCC_GetSysClockFreq();
 800468c:	f7ff f9dc 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8004690:	61f8      	str	r0, [r7, #28]
          break;
 8004692:	e019      	b.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004694:	4b86      	ldr	r3, [pc, #536]	; (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800469c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a0:	d10f      	bne.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
            frequency = HSI_VALUE;
 80046a2:	4b84      	ldr	r3, [pc, #528]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80046a4:	61fb      	str	r3, [r7, #28]
          break;
 80046a6:	e00c      	b.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80046a8:	4b81      	ldr	r3, [pc, #516]	; (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d107      	bne.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
            frequency = LSE_VALUE;
 80046b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ba:	61fb      	str	r3, [r7, #28]
          break;
 80046bc:	e003      	b.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          break;
 80046be:	bf00      	nop
 80046c0:	e187      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 80046c2:	bf00      	nop
 80046c4:	e185      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 80046c6:	bf00      	nop
        break;
 80046c8:	e183      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80046ca:	4b79      	ldr	r3, [pc, #484]	; (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80046cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046dc:	d007      	beq.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x632>
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046e4:	d12f      	bne.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
          frequency = HAL_RCC_GetSysClockFreq();
 80046e6:	f7ff f9af 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 80046ea:	61f8      	str	r0, [r7, #28]
          break;
 80046ec:	e02e      	b.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80046ee:	4b70      	ldr	r3, [pc, #448]	; (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046fa:	d126      	bne.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
 80046fc:	4b6c      	ldr	r3, [pc, #432]	; (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d020      	beq.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004708:	4b69      	ldr	r3, [pc, #420]	; (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	0a1b      	lsrs	r3, r3, #8
 800470e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004712:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	fb03 f202 	mul.w	r2, r3, r2
 800471c:	4b64      	ldr	r3, [pc, #400]	; (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	091b      	lsrs	r3, r3, #4
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	3301      	adds	r3, #1
 8004728:	fbb2 f3f3 	udiv	r3, r2, r3
 800472c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800472e:	4b60      	ldr	r3, [pc, #384]	; (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	0e5b      	lsrs	r3, r3, #25
 8004734:	f003 0303 	and.w	r3, r3, #3
 8004738:	3301      	adds	r3, #1
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004742:	61fb      	str	r3, [r7, #28]
          break;
 8004744:	e001      	b.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
          break;
 8004746:	bf00      	nop
 8004748:	e143      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 800474a:	bf00      	nop
        break;
 800474c:	e141      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800474e:	4b58      	ldr	r3, [pc, #352]	; (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8004750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004754:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004758:	613b      	str	r3, [r7, #16]
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004760:	d013      	beq.n	800478a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004768:	d819      	bhi.n	800479e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d004      	beq.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004776:	d004      	beq.n	8004782 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
          break;
 8004778:	e011      	b.n	800479e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800477a:	f7ff f9fb 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 800477e:	61f8      	str	r0, [r7, #28]
          break;
 8004780:	e010      	b.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          frequency = HAL_RCC_GetSysClockFreq();
 8004782:	f7ff f961 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8004786:	61f8      	str	r0, [r7, #28]
          break;
 8004788:	e00c      	b.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800478a:	4b49      	ldr	r3, [pc, #292]	; (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004796:	d104      	bne.n	80047a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
            frequency = HSI_VALUE;
 8004798:	4b46      	ldr	r3, [pc, #280]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800479a:	61fb      	str	r3, [r7, #28]
          break;
 800479c:	e001      	b.n	80047a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 800479e:	bf00      	nop
 80047a0:	e117      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 80047a2:	bf00      	nop
        break;
 80047a4:	e115      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80047a6:	4b42      	ldr	r3, [pc, #264]	; (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80047a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b8:	d013      	beq.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c0:	d819      	bhi.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d004      	beq.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047ce:	d004      	beq.n	80047da <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
          break;
 80047d0:	e011      	b.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80047d2:	f7ff f9cf 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 80047d6:	61f8      	str	r0, [r7, #28]
          break;
 80047d8:	e010      	b.n	80047fc <HAL_RCCEx_GetPeriphCLKFreq+0x740>
          frequency = HAL_RCC_GetSysClockFreq();
 80047da:	f7ff f935 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 80047de:	61f8      	str	r0, [r7, #28]
          break;
 80047e0:	e00c      	b.n	80047fc <HAL_RCCEx_GetPeriphCLKFreq+0x740>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80047e2:	4b33      	ldr	r3, [pc, #204]	; (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ee:	d104      	bne.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
            frequency = HSI_VALUE;
 80047f0:	4b30      	ldr	r3, [pc, #192]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80047f2:	61fb      	str	r3, [r7, #28]
          break;
 80047f4:	e001      	b.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
          break;
 80047f6:	bf00      	nop
 80047f8:	e0eb      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 80047fa:	bf00      	nop
        break;
 80047fc:	e0e9      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80047fe:	4b2c      	ldr	r3, [pc, #176]	; (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8004800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004804:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004808:	613b      	str	r3, [r7, #16]
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004810:	d013      	beq.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004818:	d819      	bhi.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d004      	beq.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004826:	d004      	beq.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8004828:	e011      	b.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
          frequency = HAL_RCC_GetPCLK1Freq();
 800482a:	f7ff f9a3 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 800482e:	61f8      	str	r0, [r7, #28]
          break;
 8004830:	e010      	b.n	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
          frequency = HAL_RCC_GetSysClockFreq();
 8004832:	f7ff f909 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8004836:	61f8      	str	r0, [r7, #28]
          break;
 8004838:	e00c      	b.n	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800483a:	4b1d      	ldr	r3, [pc, #116]	; (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004846:	d104      	bne.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
            frequency = HSI_VALUE;
 8004848:	4b1a      	ldr	r3, [pc, #104]	; (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800484a:	61fb      	str	r3, [r7, #28]
          break;
 800484c:	e001      	b.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
          break;
 800484e:	bf00      	nop
 8004850:	e0bf      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8004852:	bf00      	nop
        break;
 8004854:	e0bd      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004856:	4b16      	ldr	r3, [pc, #88]	; (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8004858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004868:	d030      	beq.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004870:	d837      	bhi.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004878:	d01e      	beq.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004880:	d82f      	bhi.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d004      	beq.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800488e:	d004      	beq.n	800489a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
          break;
 8004890:	e027      	b.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004892:	f7ff f96f 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 8004896:	61f8      	str	r0, [r7, #28]
          break;
 8004898:	e02a      	b.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800489a:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 800489c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d11e      	bne.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
              frequency = LSI_VALUE;
 80048a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80048ac:	61fb      	str	r3, [r7, #28]
          break;
 80048ae:	e01a      	b.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 80048b0:	40021000 	.word	0x40021000
 80048b4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048b8:	4b48      	ldr	r3, [pc, #288]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c4:	d111      	bne.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
            frequency = HSI_VALUE;
 80048c6:	4b46      	ldr	r3, [pc, #280]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 80048c8:	61fb      	str	r3, [r7, #28]
          break;
 80048ca:	e00e      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80048cc:	4b43      	ldr	r3, [pc, #268]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d109      	bne.n	80048ee <HAL_RCCEx_GetPeriphCLKFreq+0x832>
            frequency = LSE_VALUE;
 80048da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048de:	61fb      	str	r3, [r7, #28]
          break;
 80048e0:	e005      	b.n	80048ee <HAL_RCCEx_GetPeriphCLKFreq+0x832>
          break;
 80048e2:	bf00      	nop
 80048e4:	e075      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 80048e6:	bf00      	nop
 80048e8:	e073      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 80048ea:	bf00      	nop
 80048ec:	e071      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 80048ee:	bf00      	nop
        break;
 80048f0:	e06f      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80048f2:	4b3a      	ldr	r3, [pc, #232]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004904:	d02c      	beq.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800490c:	d833      	bhi.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004914:	d01a      	beq.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x890>
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800491c:	d82b      	bhi.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d004      	beq.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800492a:	d004      	beq.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
          break;
 800492c:	e023      	b.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          frequency = HAL_RCC_GetPCLK1Freq();
 800492e:	f7ff f921 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 8004932:	61f8      	str	r0, [r7, #28]
          break;
 8004934:	e026      	b.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004936:	4b29      	ldr	r3, [pc, #164]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 8004938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b02      	cmp	r3, #2
 8004942:	d11a      	bne.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
              frequency = LSI_VALUE;
 8004944:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004948:	61fb      	str	r3, [r7, #28]
          break;
 800494a:	e016      	b.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800494c:	4b23      	ldr	r3, [pc, #140]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004958:	d111      	bne.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            frequency = HSI_VALUE;
 800495a:	4b21      	ldr	r3, [pc, #132]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 800495c:	61fb      	str	r3, [r7, #28]
          break;
 800495e:	e00e      	b.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004960:	4b1e      	ldr	r3, [pc, #120]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 8004962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b02      	cmp	r3, #2
 800496c:	d109      	bne.n	8004982 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
            frequency = LSE_VALUE;
 800496e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004972:	61fb      	str	r3, [r7, #28]
          break;
 8004974:	e005      	b.n	8004982 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
          break;
 8004976:	bf00      	nop
 8004978:	e02b      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 800497a:	bf00      	nop
 800497c:	e029      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 800497e:	bf00      	nop
 8004980:	e027      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8004982:	bf00      	nop
        break;
 8004984:	e025      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004986:	4b15      	ldr	r3, [pc, #84]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 8004988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d004      	beq.n	80049a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800499e:	d004      	beq.n	80049aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80049a0:	e00d      	b.n	80049be <HAL_RCCEx_GetPeriphCLKFreq+0x902>
          frequency = HAL_RCC_GetPCLK1Freq();
 80049a2:	f7ff f8e7 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 80049a6:	61f8      	str	r0, [r7, #28]
          break;
 80049a8:	e009      	b.n	80049be <HAL_RCCEx_GetPeriphCLKFreq+0x902>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80049aa:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b6:	d101      	bne.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x900>
            frequency = HSI_VALUE;
 80049b8:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 80049ba:	61fb      	str	r3, [r7, #28]
          break;
 80049bc:	bf00      	nop
        break;
 80049be:	e008      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
      break;
 80049c0:	bf00      	nop
 80049c2:	e006      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
      break;
 80049c4:	bf00      	nop
 80049c6:	e004      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
      break;
 80049c8:	bf00      	nop
 80049ca:	e002      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
      break;
 80049cc:	bf00      	nop
 80049ce:	e000      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
      break;
 80049d0:	bf00      	nop
    }
  }

  return(frequency);
 80049d2:	69fb      	ldr	r3, [r7, #28]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3720      	adds	r7, #32
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40021000 	.word	0x40021000
 80049e0:	00f42400 	.word	0x00f42400

080049e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049f2:	4b74      	ldr	r3, [pc, #464]	; (8004bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d018      	beq.n	8004a30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049fe:	4b71      	ldr	r3, [pc, #452]	; (8004bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f003 0203 	and.w	r2, r3, #3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d10d      	bne.n	8004a2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
       ||
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d009      	beq.n	8004a2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a16:	4b6b      	ldr	r3, [pc, #428]	; (8004bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	091b      	lsrs	r3, r3, #4
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
       ||
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d047      	beq.n	8004aba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	73fb      	strb	r3, [r7, #15]
 8004a2e:	e044      	b.n	8004aba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d018      	beq.n	8004a6a <RCCEx_PLLSAI1_Config+0x86>
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d825      	bhi.n	8004a88 <RCCEx_PLLSAI1_Config+0xa4>
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d002      	beq.n	8004a46 <RCCEx_PLLSAI1_Config+0x62>
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d009      	beq.n	8004a58 <RCCEx_PLLSAI1_Config+0x74>
 8004a44:	e020      	b.n	8004a88 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a46:	4b5f      	ldr	r3, [pc, #380]	; (8004bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d11d      	bne.n	8004a8e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a56:	e01a      	b.n	8004a8e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a58:	4b5a      	ldr	r3, [pc, #360]	; (8004bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d116      	bne.n	8004a92 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a68:	e013      	b.n	8004a92 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a6a:	4b56      	ldr	r3, [pc, #344]	; (8004bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10f      	bne.n	8004a96 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a76:	4b53      	ldr	r3, [pc, #332]	; (8004bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d109      	bne.n	8004a96 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a86:	e006      	b.n	8004a96 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a8c:	e004      	b.n	8004a98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a8e:	bf00      	nop
 8004a90:	e002      	b.n	8004a98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a92:	bf00      	nop
 8004a94:	e000      	b.n	8004a98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a96:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10d      	bne.n	8004aba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a9e:	4b49      	ldr	r3, [pc, #292]	; (8004bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6819      	ldr	r1, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	430b      	orrs	r3, r1
 8004ab4:	4943      	ldr	r1, [pc, #268]	; (8004bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d17c      	bne.n	8004bba <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ac0:	4b40      	ldr	r3, [pc, #256]	; (8004bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a3f      	ldr	r2, [pc, #252]	; (8004bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004aca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004acc:	f7fd faf0 	bl	80020b0 <HAL_GetTick>
 8004ad0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ad2:	e009      	b.n	8004ae8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ad4:	f7fd faec 	bl	80020b0 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d902      	bls.n	8004ae8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ae6:	e005      	b.n	8004af4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ae8:	4b36      	ldr	r3, [pc, #216]	; (8004bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1ef      	bne.n	8004ad4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d15f      	bne.n	8004bba <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d110      	bne.n	8004b22 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b00:	4b30      	ldr	r3, [pc, #192]	; (8004bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004b08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6892      	ldr	r2, [r2, #8]
 8004b10:	0211      	lsls	r1, r2, #8
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	68d2      	ldr	r2, [r2, #12]
 8004b16:	06d2      	lsls	r2, r2, #27
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	492a      	ldr	r1, [pc, #168]	; (8004bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	610b      	str	r3, [r1, #16]
 8004b20:	e027      	b.n	8004b72 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d112      	bne.n	8004b4e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b28:	4b26      	ldr	r3, [pc, #152]	; (8004bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004b30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6892      	ldr	r2, [r2, #8]
 8004b38:	0211      	lsls	r1, r2, #8
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6912      	ldr	r2, [r2, #16]
 8004b3e:	0852      	lsrs	r2, r2, #1
 8004b40:	3a01      	subs	r2, #1
 8004b42:	0552      	lsls	r2, r2, #21
 8004b44:	430a      	orrs	r2, r1
 8004b46:	491f      	ldr	r1, [pc, #124]	; (8004bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	610b      	str	r3, [r1, #16]
 8004b4c:	e011      	b.n	8004b72 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b4e:	4b1d      	ldr	r3, [pc, #116]	; (8004bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6892      	ldr	r2, [r2, #8]
 8004b5e:	0211      	lsls	r1, r2, #8
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6952      	ldr	r2, [r2, #20]
 8004b64:	0852      	lsrs	r2, r2, #1
 8004b66:	3a01      	subs	r2, #1
 8004b68:	0652      	lsls	r2, r2, #25
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	4915      	ldr	r1, [pc, #84]	; (8004bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b72:	4b14      	ldr	r3, [pc, #80]	; (8004bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a13      	ldr	r2, [pc, #76]	; (8004bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b7c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b7e:	f7fd fa97 	bl	80020b0 <HAL_GetTick>
 8004b82:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b84:	e009      	b.n	8004b9a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b86:	f7fd fa93 	bl	80020b0 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d902      	bls.n	8004b9a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	73fb      	strb	r3, [r7, #15]
          break;
 8004b98:	e005      	b.n	8004ba6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b9a:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0ef      	beq.n	8004b86 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d106      	bne.n	8004bba <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004bac:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	4903      	ldr	r1, [pc, #12]	; (8004bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40021000 	.word	0x40021000

08004bc8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b089      	sub	sp, #36	; 0x24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be4:	d10b      	bne.n	8004bfe <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004be6:	4b53      	ldr	r3, [pc, #332]	; (8004d34 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004bf0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bf8:	d101      	bne.n	8004bfe <RCCEx_GetSAIxPeriphCLKFreq+0x36>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004bfa:	4b4f      	ldr	r3, [pc, #316]	; (8004d38 <RCCEx_GetSAIxPeriphCLKFreq+0x170>)
 8004bfc:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f040 8090 	bne.w	8004d26 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
  {
    pllvco = InputFrequency;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	613b      	str	r3, [r7, #16]
      }
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

#else
    if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c10:	d143      	bne.n	8004c9a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI2CLK) != 0U))
 8004c12:	4b48      	ldr	r3, [pc, #288]	; (8004d34 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c1e:	d132      	bne.n	8004c86 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
 8004c20:	4b44      	ldr	r3, [pc, #272]	; (8004d34 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d02c      	beq.n	8004c86 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004c2c:	4b41      	ldr	r3, [pc, #260]	; (8004d34 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	091b      	lsrs	r3, r3, #4
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	3301      	adds	r3, #1
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3e:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004c40:	4b3c      	ldr	r3, [pc, #240]	; (8004d34 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	0a1b      	lsrs	r3, r3, #8
 8004c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c4a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004c4c:	4b39      	ldr	r3, [pc, #228]	; (8004d34 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	0edb      	lsrs	r3, r3, #27
 8004c52:	f003 031f 	and.w	r3, r3, #31
 8004c56:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10a      	bne.n	8004c74 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004c5e:	4b35      	ldr	r3, [pc, #212]	; (8004d34 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <RCCEx_GetSAIxPeriphCLKFreq+0xa8>
          {
            pllp = 17U;
 8004c6a:	2311      	movs	r3, #17
 8004c6c:	617b      	str	r3, [r7, #20]
 8004c6e:	e001      	b.n	8004c74 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
          }
          else
          {
            pllp = 7U;
 8004c70:	2307      	movs	r3, #7
 8004c72:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	fb03 f202 	mul.w	r2, r3, r2
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c82:	61fb      	str	r3, [r7, #28]
 8004c84:	e04f      	b.n	8004d26 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c86:	4b2b      	ldr	r3, [pc, #172]	; (8004d34 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c92:	d148      	bne.n	8004d26 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      {
        /* HSI automatically selected as clock source if PLLs not enabled */
        frequency = HSI_VALUE;
 8004c94:	4b29      	ldr	r3, [pc, #164]	; (8004d3c <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 8004c96:	61fb      	str	r3, [r7, #28]
 8004c98:	e045      	b.n	8004d26 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      else
      {
        /* No clock source, frequency default init at 0 */
      }
    }
    else if(srcclk == RCC_SAI1CLKSOURCE_PLLSAI1)
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d142      	bne.n	8004d26 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004ca0:	4b24      	ldr	r3, [pc, #144]	; (8004d34 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ca8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cac:	d132      	bne.n	8004d14 <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
 8004cae:	4b21      	ldr	r3, [pc, #132]	; (8004d34 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d02c      	beq.n	8004d14 <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004cba:	4b1e      	ldr	r3, [pc, #120]	; (8004d34 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	091b      	lsrs	r3, r3, #4
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ccc:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004cce:	4b19      	ldr	r3, [pc, #100]	; (8004d34 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	0a1b      	lsrs	r3, r3, #8
 8004cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cd8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8004cda:	4b16      	ldr	r3, [pc, #88]	; (8004d34 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	0edb      	lsrs	r3, r3, #27
 8004ce0:	f003 031f 	and.w	r3, r3, #31
 8004ce4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10a      	bne.n	8004d02 <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004cec:	4b11      	ldr	r3, [pc, #68]	; (8004d34 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <RCCEx_GetSAIxPeriphCLKFreq+0x136>
          {
            pllp = 17U;
 8004cf8:	2311      	movs	r3, #17
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	e001      	b.n	8004d02 <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
          }
          else
          {
            pllp = 7U;
 8004cfe:	2307      	movs	r3, #7
 8004d00:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	fb03 f202 	mul.w	r2, r3, r2
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d10:	61fb      	str	r3, [r7, #28]
 8004d12:	e008      	b.n	8004d26 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d14:	4b07      	ldr	r3, [pc, #28]	; (8004d34 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d20:	d101      	bne.n	8004d26 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      {
        /* HSI automatically selected as clock source if PLLs not enabled */
        frequency = HSI_VALUE;
 8004d22:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 8004d24:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004d26:	69fb      	ldr	r3, [r7, #28]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3724      	adds	r7, #36	; 0x24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	40021000 	.word	0x40021000
 8004d38:	001fff68 	.word	0x001fff68
 8004d3c:	00f42400 	.word	0x00f42400

08004d40 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e022      	b.n	8004d98 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d105      	bne.n	8004d6a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f7fc ff29 	bl	8001bbc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2203      	movs	r2, #3
 8004d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f814 	bl	8004da0 <HAL_SD_InitCard>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e00a      	b.n	8004d98 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004da0:	b5b0      	push	{r4, r5, r7, lr}
 8004da2:	b08e      	sub	sp, #56	; 0x38
 8004da4:	af04      	add	r7, sp, #16
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004dac:	2300      	movs	r3, #0
 8004dae:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004db0:	2300      	movs	r3, #0
 8004db2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004db8:	2300      	movs	r3, #0
 8004dba:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8004dbc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004dc0:	f7ff f97c 	bl	80040bc <HAL_RCCEx_GetPeriphCLKFreq>
 8004dc4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d109      	bne.n	8004de0 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004dda:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e07b      	b.n	8004ed8 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	09db      	lsrs	r3, r3, #7
 8004de4:	4a3e      	ldr	r2, [pc, #248]	; (8004ee0 <HAL_SD_InitCard+0x140>)
 8004de6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dea:	091b      	lsrs	r3, r3, #4
 8004dec:	3b02      	subs	r3, #2
 8004dee:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681d      	ldr	r5, [r3, #0]
 8004df4:	466c      	mov	r4, sp
 8004df6:	f107 0314 	add.w	r3, r7, #20
 8004dfa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004dfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004e02:	f107 0308 	add.w	r3, r7, #8
 8004e06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f002 f8b8 	bl	8006f7e <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e1c:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f002 f8f6 	bl	8007014 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e36:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	3302      	adds	r3, #2
 8004e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e42:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8004e44:	4a27      	ldr	r2, [pc, #156]	; (8004ee4 <HAL_SD_InitCard+0x144>)
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fd f93a 	bl	80020c8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fe6b 	bl	8005b30 <SD_PowerON>
 8004e5a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00b      	beq.n	8004e7a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	431a      	orrs	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e02e      	b.n	8004ed8 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fd8a 	bl	8005994 <SD_InitCard>
 8004e80:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00b      	beq.n	8004ea0 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e01b      	b.n	8004ed8 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f002 f946 	bl	800713a <SDMMC_CmdBlockLength>
 8004eae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00f      	beq.n	8004ed6 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a0b      	ldr	r2, [pc, #44]	; (8004ee8 <HAL_SD_InitCard+0x148>)
 8004ebc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3728      	adds	r7, #40	; 0x28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bdb0      	pop	{r4, r5, r7, pc}
 8004ee0:	014f8b59 	.word	0x014f8b59
 8004ee4:	00012110 	.word	0x00012110
 8004ee8:	004005ff 	.word	0x004005ff

08004eec <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b092      	sub	sp, #72	; 0x48
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004efa:	f7fd f8d9 	bl	80020b0 <HAL_GetTick>
 8004efe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d107      	bne.n	8004f1e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e1bd      	b.n	800529a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	f040 81b0 	bne.w	800528c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004f32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	441a      	add	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d907      	bls.n	8004f50 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e1a4      	b.n	800529a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2203      	movs	r2, #3
 8004f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d002      	beq.n	8004f6e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6a:	025b      	lsls	r3, r3, #9
 8004f6c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f72:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	025b      	lsls	r3, r3, #9
 8004f78:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004f7a:	2390      	movs	r3, #144	; 0x90
 8004f7c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004f7e:	2302      	movs	r3, #2
 8004f80:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8004f86:	2301      	movs	r3, #1
 8004f88:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f107 0214 	add.w	r2, r7, #20
 8004f92:	4611      	mov	r1, r2
 8004f94:	4618      	mov	r0, r3
 8004f96:	f002 f8a4 	bl	80070e2 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d90a      	bls.n	8004fb6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fac:	4618      	mov	r0, r3
 8004fae:	f002 f908 	bl	80071c2 <SDMMC_CmdReadMultiBlock>
 8004fb2:	6478      	str	r0, [r7, #68]	; 0x44
 8004fb4:	e009      	b.n	8004fca <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f002 f8db 	bl	800717e <SDMMC_CmdReadSingleBlock>
 8004fc8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d012      	beq.n	8004ff6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a7a      	ldr	r2, [pc, #488]	; (80051c0 <HAL_SD_ReadBlocks+0x2d4>)
 8004fd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e151      	b.n	800529a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004ffa:	e061      	b.n	80050c0 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d03c      	beq.n	8005084 <HAL_SD_ReadBlocks+0x198>
 800500a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800500c:	2b00      	cmp	r3, #0
 800500e:	d039      	beq.n	8005084 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005010:	2300      	movs	r3, #0
 8005012:	643b      	str	r3, [r7, #64]	; 0x40
 8005014:	e033      	b.n	800507e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f001 ffdc 	bl	8006fd8 <SDMMC_ReadFIFO>
 8005020:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005024:	b2da      	uxtb	r2, r3
 8005026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005028:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800502a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800502c:	3301      	adds	r3, #1
 800502e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005032:	3b01      	subs	r3, #1
 8005034:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005038:	0a1b      	lsrs	r3, r3, #8
 800503a:	b2da      	uxtb	r2, r3
 800503c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005042:	3301      	adds	r3, #1
 8005044:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005048:	3b01      	subs	r3, #1
 800504a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800504c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504e:	0c1b      	lsrs	r3, r3, #16
 8005050:	b2da      	uxtb	r2, r3
 8005052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005054:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005058:	3301      	adds	r3, #1
 800505a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800505c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800505e:	3b01      	subs	r3, #1
 8005060:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005064:	0e1b      	lsrs	r3, r3, #24
 8005066:	b2da      	uxtb	r2, r3
 8005068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800506a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800506c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800506e:	3301      	adds	r3, #1
 8005070:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005074:	3b01      	subs	r3, #1
 8005076:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8005078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800507a:	3301      	adds	r3, #1
 800507c:	643b      	str	r3, [r7, #64]	; 0x40
 800507e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005080:	2b07      	cmp	r3, #7
 8005082:	d9c8      	bls.n	8005016 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005084:	f7fd f814 	bl	80020b0 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005090:	429a      	cmp	r2, r3
 8005092:	d902      	bls.n	800509a <HAL_SD_ReadBlocks+0x1ae>
 8005094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005096:	2b00      	cmp	r3, #0
 8005098:	d112      	bne.n	80050c0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a48      	ldr	r2, [pc, #288]	; (80051c0 <HAL_SD_ReadBlocks+0x2d4>)
 80050a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e0ec      	b.n	800529a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d096      	beq.n	8004ffc <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d022      	beq.n	8005122 <HAL_SD_ReadBlocks+0x236>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d91f      	bls.n	8005122 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	d01b      	beq.n	8005122 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f002 f8ce 	bl	8007290 <SDMMC_CmdStopTransfer>
 80050f4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80050f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d012      	beq.n	8005122 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a2f      	ldr	r2, [pc, #188]	; (80051c0 <HAL_SD_ReadBlocks+0x2d4>)
 8005102:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800510a:	431a      	orrs	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e0bb      	b.n	800529a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b00      	cmp	r3, #0
 800512e:	d012      	beq.n	8005156 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a22      	ldr	r2, [pc, #136]	; (80051c0 <HAL_SD_ReadBlocks+0x2d4>)
 8005136:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	f043 0208 	orr.w	r2, r3, #8
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e0a1      	b.n	800529a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d012      	beq.n	800518a <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a15      	ldr	r2, [pc, #84]	; (80051c0 <HAL_SD_ReadBlocks+0x2d4>)
 800516a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005170:	f043 0202 	orr.w	r2, r3, #2
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e087      	b.n	800529a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005190:	f003 0320 	and.w	r3, r3, #32
 8005194:	2b00      	cmp	r3, #0
 8005196:	d064      	beq.n	8005262 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a08      	ldr	r2, [pc, #32]	; (80051c0 <HAL_SD_ReadBlocks+0x2d4>)
 800519e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a4:	f043 0220 	orr.w	r2, r3, #32
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e06d      	b.n	800529a <HAL_SD_ReadBlocks+0x3ae>
 80051be:	bf00      	nop
 80051c0:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f001 ff05 	bl	8006fd8 <SDMMC_ReadFIFO>
 80051ce:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80051d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80051d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051da:	3301      	adds	r3, #1
 80051dc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80051de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e0:	3b01      	subs	r3, #1
 80051e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80051e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e6:	0a1b      	lsrs	r3, r3, #8
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ec:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80051ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f0:	3301      	adds	r3, #1
 80051f2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80051f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f6:	3b01      	subs	r3, #1
 80051f8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80051fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fc:	0c1b      	lsrs	r3, r3, #16
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005202:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005206:	3301      	adds	r3, #1
 8005208:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800520a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800520c:	3b01      	subs	r3, #1
 800520e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005212:	0e1b      	lsrs	r3, r3, #24
 8005214:	b2da      	uxtb	r2, r3
 8005216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005218:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800521a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800521c:	3301      	adds	r3, #1
 800521e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005222:	3b01      	subs	r3, #1
 8005224:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005226:	f7fc ff43 	bl	80020b0 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005232:	429a      	cmp	r2, r3
 8005234:	d902      	bls.n	800523c <HAL_SD_ReadBlocks+0x350>
 8005236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005238:	2b00      	cmp	r3, #0
 800523a:	d112      	bne.n	8005262 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a18      	ldr	r2, [pc, #96]	; (80052a4 <HAL_SD_ReadBlocks+0x3b8>)
 8005242:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005248:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e01b      	b.n	800529a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <HAL_SD_ReadBlocks+0x38a>
 8005270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1a6      	bne.n	80051c4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f240 523a 	movw	r2, #1338	; 0x53a
 800527e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005288:	2300      	movs	r3, #0
 800528a:	e006      	b.n	800529a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005290:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
  }
}
 800529a:	4618      	mov	r0, r3
 800529c:	3748      	adds	r7, #72	; 0x48
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	004005ff 	.word	0x004005ff

080052a8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b092      	sub	sp, #72	; 0x48
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80052b6:	f7fc fefb 	bl	80020b0 <HAL_GetTick>
 80052ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d107      	bne.n	80052da <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e165      	b.n	80055a6 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	f040 8158 	bne.w	8005598 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80052ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	441a      	add	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d907      	bls.n	800530c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005300:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e14c      	b.n	80055a6 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2203      	movs	r2, #3
 8005310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2200      	movs	r2, #0
 800531a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005320:	2b01      	cmp	r3, #1
 8005322:	d002      	beq.n	800532a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005326:	025b      	lsls	r3, r3, #9
 8005328:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800532a:	f04f 33ff 	mov.w	r3, #4294967295
 800532e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	025b      	lsls	r3, r3, #9
 8005334:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005336:	2390      	movs	r3, #144	; 0x90
 8005338:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800533a:	2300      	movs	r3, #0
 800533c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800533e:	2300      	movs	r3, #0
 8005340:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8005342:	2301      	movs	r3, #1
 8005344:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f107 0218 	add.w	r2, r7, #24
 800534e:	4611      	mov	r1, r2
 8005350:	4618      	mov	r0, r3
 8005352:	f001 fec6 	bl	80070e2 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d90a      	bls.n	8005372 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2220      	movs	r2, #32
 8005360:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005368:	4618      	mov	r0, r3
 800536a:	f001 ff6e 	bl	800724a <SDMMC_CmdWriteMultiBlock>
 800536e:	6478      	str	r0, [r7, #68]	; 0x44
 8005370:	e009      	b.n	8005386 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2210      	movs	r2, #16
 8005376:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800537e:	4618      	mov	r0, r3
 8005380:	f001 ff41 	bl	8007206 <SDMMC_CmdWriteSingleBlock>
 8005384:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005388:	2b00      	cmp	r3, #0
 800538a:	d012      	beq.n	80053b2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a87      	ldr	r2, [pc, #540]	; (80055b0 <HAL_SD_WriteBlocks+0x308>)
 8005392:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800539a:	431a      	orrs	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e0f9      	b.n	80055a6 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80053b6:	e065      	b.n	8005484 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d040      	beq.n	8005448 <HAL_SD_WriteBlocks+0x1a0>
 80053c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d03d      	beq.n	8005448 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80053cc:	2300      	movs	r3, #0
 80053ce:	643b      	str	r3, [r7, #64]	; 0x40
 80053d0:	e037      	b.n	8005442 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80053d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80053d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053da:	3301      	adds	r3, #1
 80053dc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80053de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e0:	3b01      	subs	r3, #1
 80053e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80053e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	021a      	lsls	r2, r3, #8
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80053f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f2:	3301      	adds	r3, #1
 80053f4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80053f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053f8:	3b01      	subs	r3, #1
 80053fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80053fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	041a      	lsls	r2, r3, #16
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540a:	3301      	adds	r3, #1
 800540c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800540e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005410:	3b01      	subs	r3, #1
 8005412:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	061a      	lsls	r2, r3, #24
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005422:	3301      	adds	r3, #1
 8005424:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005428:	3b01      	subs	r3, #1
 800542a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f107 0214 	add.w	r2, r7, #20
 8005434:	4611      	mov	r1, r2
 8005436:	4618      	mov	r0, r3
 8005438:	f001 fddb 	bl	8006ff2 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800543c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800543e:	3301      	adds	r3, #1
 8005440:	643b      	str	r3, [r7, #64]	; 0x40
 8005442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005444:	2b07      	cmp	r3, #7
 8005446:	d9c4      	bls.n	80053d2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005448:	f7fc fe32 	bl	80020b0 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005454:	429a      	cmp	r2, r3
 8005456:	d902      	bls.n	800545e <HAL_SD_WriteBlocks+0x1b6>
 8005458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800545a:	2b00      	cmp	r3, #0
 800545c:	d112      	bne.n	8005484 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a53      	ldr	r2, [pc, #332]	; (80055b0 <HAL_SD_WriteBlocks+0x308>)
 8005464:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800546a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800546c:	431a      	orrs	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e090      	b.n	80055a6 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548a:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800548e:	2b00      	cmp	r3, #0
 8005490:	d092      	beq.n	80053b8 <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549c:	2b00      	cmp	r3, #0
 800549e:	d022      	beq.n	80054e6 <HAL_SD_WriteBlocks+0x23e>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d91f      	bls.n	80054e6 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d01b      	beq.n	80054e6 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f001 feec 	bl	8007290 <SDMMC_CmdStopTransfer>
 80054b8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80054ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d012      	beq.n	80054e6 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a3a      	ldr	r2, [pc, #232]	; (80055b0 <HAL_SD_WriteBlocks+0x308>)
 80054c6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ce:	431a      	orrs	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e05f      	b.n	80055a6 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ec:	f003 0308 	and.w	r3, r3, #8
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d012      	beq.n	800551a <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a2d      	ldr	r2, [pc, #180]	; (80055b0 <HAL_SD_WriteBlocks+0x308>)
 80054fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005500:	f043 0208 	orr.w	r2, r3, #8
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e045      	b.n	80055a6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d012      	beq.n	800554e <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a20      	ldr	r2, [pc, #128]	; (80055b0 <HAL_SD_WriteBlocks+0x308>)
 800552e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005534:	f043 0202 	orr.w	r2, r3, #2
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e02b      	b.n	80055a6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005554:	f003 0310 	and.w	r3, r3, #16
 8005558:	2b00      	cmp	r3, #0
 800555a:	d012      	beq.n	8005582 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a13      	ldr	r2, [pc, #76]	; (80055b0 <HAL_SD_WriteBlocks+0x308>)
 8005562:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005568:	f043 0210 	orr.w	r2, r3, #16
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e011      	b.n	80055a6 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f240 523a 	movw	r2, #1338	; 0x53a
 800558a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005594:	2300      	movs	r3, #0
 8005596:	e006      	b.n	80055a6 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
  }
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3748      	adds	r7, #72	; 0x48
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	004005ff 	.word	0x004005ff

080055b4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055c2:	0f9b      	lsrs	r3, r3, #30
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055ce:	0e9b      	lsrs	r3, r3, #26
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	f003 030f 	and.w	r3, r3, #15
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055e0:	0e1b      	lsrs	r3, r3, #24
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	f003 0303 	and.w	r3, r3, #3
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055f2:	0c1b      	lsrs	r3, r3, #16
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055fe:	0a1b      	lsrs	r3, r3, #8
 8005600:	b2da      	uxtb	r2, r3
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800560a:	b2da      	uxtb	r2, r3
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005614:	0d1b      	lsrs	r3, r3, #20
 8005616:	b29a      	uxth	r2, r3
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005620:	0c1b      	lsrs	r3, r3, #16
 8005622:	b2db      	uxtb	r3, r3
 8005624:	f003 030f 	and.w	r3, r3, #15
 8005628:	b2da      	uxtb	r2, r3
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005632:	0bdb      	lsrs	r3, r3, #15
 8005634:	b2db      	uxtb	r3, r3
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	b2da      	uxtb	r2, r3
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005644:	0b9b      	lsrs	r3, r3, #14
 8005646:	b2db      	uxtb	r3, r3
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	b2da      	uxtb	r2, r3
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005656:	0b5b      	lsrs	r3, r3, #13
 8005658:	b2db      	uxtb	r3, r3
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	b2da      	uxtb	r2, r3
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005668:	0b1b      	lsrs	r3, r3, #12
 800566a:	b2db      	uxtb	r3, r3
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	b2da      	uxtb	r2, r3
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2200      	movs	r2, #0
 800567a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005680:	2b00      	cmp	r3, #0
 8005682:	d163      	bne.n	800574c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005688:	009a      	lsls	r2, r3, #2
 800568a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800568e:	4013      	ands	r3, r2
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005694:	0f92      	lsrs	r2, r2, #30
 8005696:	431a      	orrs	r2, r3
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056a0:	0edb      	lsrs	r3, r3, #27
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056b2:	0e1b      	lsrs	r3, r3, #24
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056c4:	0d5b      	lsrs	r3, r3, #21
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056d6:	0c9b      	lsrs	r3, r3, #18
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056e8:	0bdb      	lsrs	r3, r3, #15
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	1c5a      	adds	r2, r3, #1
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	7e1b      	ldrb	r3, [r3, #24]
 8005704:	b2db      	uxtb	r3, r3
 8005706:	f003 0307 	and.w	r3, r3, #7
 800570a:	3302      	adds	r3, #2
 800570c:	2201      	movs	r2, #1
 800570e:	fa02 f303 	lsl.w	r3, r2, r3
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005716:	fb03 f202 	mul.w	r2, r3, r2
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	7a1b      	ldrb	r3, [r3, #8]
 8005722:	b2db      	uxtb	r3, r3
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	2201      	movs	r2, #1
 800572a:	409a      	lsls	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005738:	0a52      	lsrs	r2, r2, #9
 800573a:	fb03 f202 	mul.w	r2, r3, r2
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005748:	661a      	str	r2, [r3, #96]	; 0x60
 800574a:	e031      	b.n	80057b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005750:	2b01      	cmp	r3, #1
 8005752:	d11d      	bne.n	8005790 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005758:	041b      	lsls	r3, r3, #16
 800575a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005762:	0c1b      	lsrs	r3, r3, #16
 8005764:	431a      	orrs	r2, r3
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	3301      	adds	r3, #1
 8005770:	029a      	lsls	r2, r3, #10
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005784:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	661a      	str	r2, [r3, #96]	; 0x60
 800578e:	e00f      	b.n	80057b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a58      	ldr	r2, [pc, #352]	; (80058f8 <HAL_SD_GetCardCSD+0x344>)
 8005796:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e09d      	b.n	80058ec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057b4:	0b9b      	lsrs	r3, r3, #14
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c6:	09db      	lsrs	r3, r3, #7
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e8:	0fdb      	lsrs	r3, r3, #31
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f4:	0f5b      	lsrs	r3, r3, #29
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	f003 0303 	and.w	r3, r3, #3
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	0e9b      	lsrs	r3, r3, #26
 8005808:	b2db      	uxtb	r3, r3
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	b2da      	uxtb	r2, r3
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005818:	0d9b      	lsrs	r3, r3, #22
 800581a:	b2db      	uxtb	r3, r3
 800581c:	f003 030f 	and.w	r3, r3, #15
 8005820:	b2da      	uxtb	r2, r3
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582a:	0d5b      	lsrs	r3, r3, #21
 800582c:	b2db      	uxtb	r3, r3
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	b2da      	uxtb	r2, r3
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005846:	0c1b      	lsrs	r3, r3, #16
 8005848:	b2db      	uxtb	r3, r3
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	b2da      	uxtb	r2, r3
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585a:	0bdb      	lsrs	r3, r3, #15
 800585c:	b2db      	uxtb	r3, r3
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	b2da      	uxtb	r2, r3
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586e:	0b9b      	lsrs	r3, r3, #14
 8005870:	b2db      	uxtb	r3, r3
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	b2da      	uxtb	r2, r3
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005882:	0b5b      	lsrs	r3, r3, #13
 8005884:	b2db      	uxtb	r3, r3
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	b2da      	uxtb	r2, r3
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005896:	0b1b      	lsrs	r3, r3, #12
 8005898:	b2db      	uxtb	r3, r3
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058aa:	0a9b      	lsrs	r3, r3, #10
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058be:	0a1b      	lsrs	r3, r3, #8
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	f003 0303 	and.w	r3, r3, #3
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d2:	085b      	lsrs	r3, r3, #1
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	004005ff 	.word	0x004005ff

080058fc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800595c:	2300      	movs	r3, #0
 800595e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005960:	f107 030c 	add.w	r3, r7, #12
 8005964:	4619      	mov	r1, r3
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f970 	bl	8005c4c <SD_SendStatus>
 800596c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d005      	beq.n	8005980 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	0a5b      	lsrs	r3, r3, #9
 8005984:	f003 030f 	and.w	r3, r3, #15
 8005988:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800598a:	693b      	ldr	r3, [r7, #16]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005994:	b5b0      	push	{r4, r5, r7, lr}
 8005996:	b094      	sub	sp, #80	; 0x50
 8005998:	af04      	add	r7, sp, #16
 800599a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800599c:	2301      	movs	r3, #1
 800599e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f001 fb44 	bl	8007032 <SDMMC_GetPowerState>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d102      	bne.n	80059b6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80059b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80059b4:	e0b8      	b.n	8005b28 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d02f      	beq.n	8005a1e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f001 fd2b 	bl	800741e <SDMMC_CmdSendCID>
 80059c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80059ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d001      	beq.n	80059d4 <SD_InitCard+0x40>
    {
      return errorstate;
 80059d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d2:	e0a9      	b.n	8005b28 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2100      	movs	r1, #0
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 fb6e 	bl	80070bc <SDMMC_GetResponse>
 80059e0:	4602      	mov	r2, r0
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2104      	movs	r1, #4
 80059ec:	4618      	mov	r0, r3
 80059ee:	f001 fb65 	bl	80070bc <SDMMC_GetResponse>
 80059f2:	4602      	mov	r2, r0
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2108      	movs	r1, #8
 80059fe:	4618      	mov	r0, r3
 8005a00:	f001 fb5c 	bl	80070bc <SDMMC_GetResponse>
 8005a04:	4602      	mov	r2, r0
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	210c      	movs	r1, #12
 8005a10:	4618      	mov	r0, r3
 8005a12:	f001 fb53 	bl	80070bc <SDMMC_GetResponse>
 8005a16:	4602      	mov	r2, r0
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d00d      	beq.n	8005a42 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f107 020e 	add.w	r2, r7, #14
 8005a2e:	4611      	mov	r1, r2
 8005a30:	4618      	mov	r0, r3
 8005a32:	f001 fd31 	bl	8007498 <SDMMC_CmdSetRelAdd>
 8005a36:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <SD_InitCard+0xae>
    {
      return errorstate;
 8005a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a40:	e072      	b.n	8005b28 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d036      	beq.n	8005ab8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005a4a:	89fb      	ldrh	r3, [r7, #14]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a5a:	041b      	lsls	r3, r3, #16
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	4610      	mov	r0, r2
 8005a60:	f001 fcfb 	bl	800745a <SDMMC_CmdSendCSD>
 8005a64:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a6e:	e05b      	b.n	8005b28 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2100      	movs	r1, #0
 8005a76:	4618      	mov	r0, r3
 8005a78:	f001 fb20 	bl	80070bc <SDMMC_GetResponse>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2104      	movs	r1, #4
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f001 fb17 	bl	80070bc <SDMMC_GetResponse>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2108      	movs	r1, #8
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f001 fb0e 	bl	80070bc <SDMMC_GetResponse>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	210c      	movs	r1, #12
 8005aac:	4618      	mov	r0, r3
 8005aae:	f001 fb05 	bl	80070bc <SDMMC_GetResponse>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2104      	movs	r1, #4
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f001 fafc 	bl	80070bc <SDMMC_GetResponse>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	0d1a      	lsrs	r2, r3, #20
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005acc:	f107 0310 	add.w	r3, r7, #16
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7ff fd6e 	bl	80055b4 <HAL_SD_GetCardCSD>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ade:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ae2:	e021      	b.n	8005b28 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6819      	ldr	r1, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aec:	041b      	lsls	r3, r3, #16
 8005aee:	2200      	movs	r2, #0
 8005af0:	461c      	mov	r4, r3
 8005af2:	4615      	mov	r5, r2
 8005af4:	4622      	mov	r2, r4
 8005af6:	462b      	mov	r3, r5
 8005af8:	4608      	mov	r0, r1
 8005afa:	f001 fbeb 	bl	80072d4 <SDMMC_CmdSelDesel>
 8005afe:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <SD_InitCard+0x176>
  {
    return errorstate;
 8005b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b08:	e00e      	b.n	8005b28 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681d      	ldr	r5, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	466c      	mov	r4, sp
 8005b12:	f103 0210 	add.w	r2, r3, #16
 8005b16:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b20:	4628      	mov	r0, r5
 8005b22:	f001 fa2c 	bl	8006f7e <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3740      	adds	r7, #64	; 0x40
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bdb0      	pop	{r4, r5, r7, pc}

08005b30 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	2300      	movs	r3, #0
 8005b42:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f001 fbe6 	bl	800731a <SDMMC_CmdGoIdleState>
 8005b4e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <SD_PowerON+0x2a>
  {
    return errorstate;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	e072      	b.n	8005c40 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f001 fbf9 	bl	8007356 <SDMMC_CmdOperCond>
 8005b64:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00d      	beq.n	8005b88 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f001 fbcf 	bl	800731a <SDMMC_CmdGoIdleState>
 8005b7c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d004      	beq.n	8005b8e <SD_PowerON+0x5e>
    {
      return errorstate;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	e05b      	b.n	8005c40 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d137      	bne.n	8005c06 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f001 fbf9 	bl	8007394 <SDMMC_CmdAppCommand>
 8005ba2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d02d      	beq.n	8005c06 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005baa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005bae:	e047      	b.n	8005c40 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f001 fbec 	bl	8007394 <SDMMC_CmdAppCommand>
 8005bbc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <SD_PowerON+0x98>
    {
      return errorstate;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	e03b      	b.n	8005c40 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	491e      	ldr	r1, [pc, #120]	; (8005c48 <SD_PowerON+0x118>)
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f001 fc02 	bl	80073d8 <SDMMC_CmdAppOperCommand>
 8005bd4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005bdc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005be0:	e02e      	b.n	8005c40 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2100      	movs	r1, #0
 8005be8:	4618      	mov	r0, r3
 8005bea:	f001 fa67 	bl	80070bc <SDMMC_GetResponse>
 8005bee:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	0fdb      	lsrs	r3, r3, #31
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <SD_PowerON+0xcc>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e000      	b.n	8005bfe <SD_PowerON+0xce>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	613b      	str	r3, [r7, #16]

    count++;
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	3301      	adds	r3, #1
 8005c04:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d802      	bhi.n	8005c16 <SD_PowerON+0xe6>
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0cc      	beq.n	8005bb0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d902      	bls.n	8005c26 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005c20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c24:	e00c      	b.n	8005c40 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d003      	beq.n	8005c38 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	645a      	str	r2, [r3, #68]	; 0x44
 8005c36:	e002      	b.n	8005c3e <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	c1100000 	.word	0xc1100000

08005c4c <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d102      	bne.n	8005c62 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005c5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c60:	e018      	b.n	8005c94 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c6a:	041b      	lsls	r3, r3, #16
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4610      	mov	r0, r2
 8005c70:	f001 fc33 	bl	80074da <SDMMC_CmdSendStatus>
 8005c74:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	e009      	b.n	8005c94 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2100      	movs	r1, #0
 8005c86:	4618      	mov	r0, r3
 8005c88:	f001 fa18 	bl	80070bc <SDMMC_GetResponse>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e095      	b.n	8005dda <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d108      	bne.n	8005cc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cbe:	d009      	beq.n	8005cd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	61da      	str	r2, [r3, #28]
 8005cc6:	e005      	b.n	8005cd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d106      	bne.n	8005cf4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7fb fff0 	bl	8001cd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d14:	d902      	bls.n	8005d1c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	e002      	b.n	8005d22 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005d2a:	d007      	beq.n	8005d3c <HAL_SPI_Init+0xa0>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d34:	d002      	beq.n	8005d3c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	431a      	orrs	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d74:	431a      	orrs	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7e:	ea42 0103 	orr.w	r1, r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d86:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	0c1b      	lsrs	r3, r3, #16
 8005d98:	f003 0204 	and.w	r2, r3, #4
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	f003 0310 	and.w	r3, r3, #16
 8005da4:	431a      	orrs	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005daa:	f003 0308 	and.w	r3, r3, #8
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005db8:	ea42 0103 	orr.w	r1, r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b08a      	sub	sp, #40	; 0x28
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	607a      	str	r2, [r7, #4]
 8005dee:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005df0:	2301      	movs	r3, #1
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_SPI_TransmitReceive+0x26>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e20a      	b.n	800621e <HAL_SPI_TransmitReceive+0x43c>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e10:	f7fc f94e 	bl	80020b0 <HAL_GetTick>
 8005e14:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e1c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005e24:	887b      	ldrh	r3, [r7, #2]
 8005e26:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005e28:	887b      	ldrh	r3, [r7, #2]
 8005e2a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e2c:	7efb      	ldrb	r3, [r7, #27]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d00e      	beq.n	8005e50 <HAL_SPI_TransmitReceive+0x6e>
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e38:	d106      	bne.n	8005e48 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d102      	bne.n	8005e48 <HAL_SPI_TransmitReceive+0x66>
 8005e42:	7efb      	ldrb	r3, [r7, #27]
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d003      	beq.n	8005e50 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005e48:	2302      	movs	r3, #2
 8005e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005e4e:	e1e0      	b.n	8006212 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d005      	beq.n	8005e62 <HAL_SPI_TransmitReceive+0x80>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <HAL_SPI_TransmitReceive+0x80>
 8005e5c:	887b      	ldrh	r3, [r7, #2]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d103      	bne.n	8005e6a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005e68:	e1d3      	b.n	8006212 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d003      	beq.n	8005e7e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2205      	movs	r2, #5
 8005e7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	887a      	ldrh	r2, [r7, #2]
 8005e8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	887a      	ldrh	r2, [r7, #2]
 8005e96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	887a      	ldrh	r2, [r7, #2]
 8005ea4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	887a      	ldrh	r2, [r7, #2]
 8005eaa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ec0:	d802      	bhi.n	8005ec8 <HAL_SPI_TransmitReceive+0xe6>
 8005ec2:	8a3b      	ldrh	r3, [r7, #16]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d908      	bls.n	8005eda <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ed6:	605a      	str	r2, [r3, #4]
 8005ed8:	e007      	b.n	8005eea <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ee8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef4:	2b40      	cmp	r3, #64	; 0x40
 8005ef6:	d007      	beq.n	8005f08 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f10:	f240 8081 	bls.w	8006016 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d002      	beq.n	8005f22 <HAL_SPI_TransmitReceive+0x140>
 8005f1c:	8a7b      	ldrh	r3, [r7, #18]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d16d      	bne.n	8005ffe <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f26:	881a      	ldrh	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	1c9a      	adds	r2, r3, #2
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f46:	e05a      	b.n	8005ffe <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d11b      	bne.n	8005f8e <HAL_SPI_TransmitReceive+0x1ac>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d016      	beq.n	8005f8e <HAL_SPI_TransmitReceive+0x1ac>
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d113      	bne.n	8005f8e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6a:	881a      	ldrh	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f76:	1c9a      	adds	r2, r3, #2
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d11c      	bne.n	8005fd6 <HAL_SPI_TransmitReceive+0x1f4>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d016      	beq.n	8005fd6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	b292      	uxth	r2, r2
 8005fb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	1c9a      	adds	r2, r3, #2
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005fd6:	f7fc f86b 	bl	80020b0 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d80b      	bhi.n	8005ffe <HAL_SPI_TransmitReceive+0x21c>
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fec:	d007      	beq.n	8005ffe <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005ffc:	e109      	b.n	8006212 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006002:	b29b      	uxth	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	d19f      	bne.n	8005f48 <HAL_SPI_TransmitReceive+0x166>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d199      	bne.n	8005f48 <HAL_SPI_TransmitReceive+0x166>
 8006014:	e0e3      	b.n	80061de <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_SPI_TransmitReceive+0x244>
 800601e:	8a7b      	ldrh	r3, [r7, #18]
 8006020:	2b01      	cmp	r3, #1
 8006022:	f040 80cf 	bne.w	80061c4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800602a:	b29b      	uxth	r3, r3
 800602c:	2b01      	cmp	r3, #1
 800602e:	d912      	bls.n	8006056 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006034:	881a      	ldrh	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	1c9a      	adds	r2, r3, #2
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800604a:	b29b      	uxth	r3, r3
 800604c:	3b02      	subs	r3, #2
 800604e:	b29a      	uxth	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006054:	e0b6      	b.n	80061c4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	330c      	adds	r3, #12
 8006060:	7812      	ldrb	r2, [r2, #0]
 8006062:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006072:	b29b      	uxth	r3, r3
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800607c:	e0a2      	b.n	80061c4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b02      	cmp	r3, #2
 800608a:	d134      	bne.n	80060f6 <HAL_SPI_TransmitReceive+0x314>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d02f      	beq.n	80060f6 <HAL_SPI_TransmitReceive+0x314>
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	2b01      	cmp	r3, #1
 800609a:	d12c      	bne.n	80060f6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d912      	bls.n	80060cc <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060aa:	881a      	ldrh	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b6:	1c9a      	adds	r2, r3, #2
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	3b02      	subs	r3, #2
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060ca:	e012      	b.n	80060f2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	330c      	adds	r3, #12
 80060d6:	7812      	ldrb	r2, [r2, #0]
 80060d8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	3b01      	subs	r3, #1
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	2b01      	cmp	r3, #1
 8006102:	d148      	bne.n	8006196 <HAL_SPI_TransmitReceive+0x3b4>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800610a:	b29b      	uxth	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	d042      	beq.n	8006196 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006116:	b29b      	uxth	r3, r3
 8006118:	2b01      	cmp	r3, #1
 800611a:	d923      	bls.n	8006164 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006126:	b292      	uxth	r2, r2
 8006128:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	1c9a      	adds	r2, r3, #2
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800613a:	b29b      	uxth	r3, r3
 800613c:	3b02      	subs	r3, #2
 800613e:	b29a      	uxth	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800614c:	b29b      	uxth	r3, r3
 800614e:	2b01      	cmp	r3, #1
 8006150:	d81f      	bhi.n	8006192 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006160:	605a      	str	r2, [r3, #4]
 8006162:	e016      	b.n	8006192 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f103 020c 	add.w	r2, r3, #12
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006170:	7812      	ldrb	r2, [r2, #0]
 8006172:	b2d2      	uxtb	r2, r2
 8006174:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006186:	b29b      	uxth	r3, r3
 8006188:	3b01      	subs	r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006192:	2301      	movs	r3, #1
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006196:	f7fb ff8b 	bl	80020b0 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d803      	bhi.n	80061ae <HAL_SPI_TransmitReceive+0x3cc>
 80061a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ac:	d102      	bne.n	80061b4 <HAL_SPI_TransmitReceive+0x3d2>
 80061ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d107      	bne.n	80061c4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80061c2:	e026      	b.n	8006212 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f47f af57 	bne.w	800607e <HAL_SPI_TransmitReceive+0x29c>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f47f af50 	bne.w	800607e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 f93e 	bl	8006464 <SPI_EndRxTxTransaction>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d005      	beq.n	80061fa <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2220      	movs	r2, #32
 80061f8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d003      	beq.n	800620a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006208:	e003      	b.n	8006212 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800621a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800621e:	4618      	mov	r0, r3
 8006220:	3728      	adds	r7, #40	; 0x28
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
	...

08006228 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b088      	sub	sp, #32
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	603b      	str	r3, [r7, #0]
 8006234:	4613      	mov	r3, r2
 8006236:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006238:	f7fb ff3a 	bl	80020b0 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006240:	1a9b      	subs	r3, r3, r2
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	4413      	add	r3, r2
 8006246:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006248:	f7fb ff32 	bl	80020b0 <HAL_GetTick>
 800624c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800624e:	4b39      	ldr	r3, [pc, #228]	; (8006334 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	015b      	lsls	r3, r3, #5
 8006254:	0d1b      	lsrs	r3, r3, #20
 8006256:	69fa      	ldr	r2, [r7, #28]
 8006258:	fb02 f303 	mul.w	r3, r2, r3
 800625c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800625e:	e054      	b.n	800630a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006266:	d050      	beq.n	800630a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006268:	f7fb ff22 	bl	80020b0 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	69fa      	ldr	r2, [r7, #28]
 8006274:	429a      	cmp	r2, r3
 8006276:	d902      	bls.n	800627e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d13d      	bne.n	80062fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800628c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006296:	d111      	bne.n	80062bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062a0:	d004      	beq.n	80062ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062aa:	d107      	bne.n	80062bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062c4:	d10f      	bne.n	80062e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e017      	b.n	800632a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	3b01      	subs	r3, #1
 8006308:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4013      	ands	r3, r2
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	429a      	cmp	r2, r3
 8006318:	bf0c      	ite	eq
 800631a:	2301      	moveq	r3, #1
 800631c:	2300      	movne	r3, #0
 800631e:	b2db      	uxtb	r3, r3
 8006320:	461a      	mov	r2, r3
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	429a      	cmp	r2, r3
 8006326:	d19b      	bne.n	8006260 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3720      	adds	r7, #32
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	20000010 	.word	0x20000010

08006338 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08a      	sub	sp, #40	; 0x28
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
 8006344:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006346:	2300      	movs	r3, #0
 8006348:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800634a:	f7fb feb1 	bl	80020b0 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	1a9b      	subs	r3, r3, r2
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	4413      	add	r3, r2
 8006358:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800635a:	f7fb fea9 	bl	80020b0 <HAL_GetTick>
 800635e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	330c      	adds	r3, #12
 8006366:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006368:	4b3d      	ldr	r3, [pc, #244]	; (8006460 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	4613      	mov	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	00da      	lsls	r2, r3, #3
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	0d1b      	lsrs	r3, r3, #20
 8006378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800637a:	fb02 f303 	mul.w	r3, r2, r3
 800637e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006380:	e060      	b.n	8006444 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006388:	d107      	bne.n	800639a <SPI_WaitFifoStateUntilTimeout+0x62>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d104      	bne.n	800639a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	b2db      	uxtb	r3, r3
 8006396:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006398:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a0:	d050      	beq.n	8006444 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063a2:	f7fb fe85 	bl	80020b0 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d902      	bls.n	80063b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d13d      	bne.n	8006434 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063d0:	d111      	bne.n	80063f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063da:	d004      	beq.n	80063e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063e4:	d107      	bne.n	80063f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063fe:	d10f      	bne.n	8006420 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800641e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e010      	b.n	8006456 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	3b01      	subs	r3, #1
 8006442:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689a      	ldr	r2, [r3, #8]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	4013      	ands	r3, r2
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	429a      	cmp	r2, r3
 8006452:	d196      	bne.n	8006382 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3728      	adds	r7, #40	; 0x28
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20000010 	.word	0x20000010

08006464 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af02      	add	r7, sp, #8
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2200      	movs	r2, #0
 8006478:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f7ff ff5b 	bl	8006338 <SPI_WaitFifoStateUntilTimeout>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d007      	beq.n	8006498 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800648c:	f043 0220 	orr.w	r2, r3, #32
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e027      	b.n	80064e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2200      	movs	r2, #0
 80064a0:	2180      	movs	r1, #128	; 0x80
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f7ff fec0 	bl	8006228 <SPI_WaitFlagStateUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d007      	beq.n	80064be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b2:	f043 0220 	orr.w	r2, r3, #32
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e014      	b.n	80064e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f7ff ff34 	bl	8006338 <SPI_WaitFifoStateUntilTimeout>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d007      	beq.n	80064e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064da:	f043 0220 	orr.w	r2, r3, #32
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e000      	b.n	80064e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e040      	b.n	8006584 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006506:	2b00      	cmp	r3, #0
 8006508:	d106      	bne.n	8006518 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7fb fad8 	bl	8001ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2224      	movs	r2, #36	; 0x24
 800651c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 0201 	bic.w	r2, r2, #1
 800652c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fb0c 	bl	8006b54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 f8af 	bl	80066a0 <UART_SetConfig>
 8006542:	4603      	mov	r3, r0
 8006544:	2b01      	cmp	r3, #1
 8006546:	d101      	bne.n	800654c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e01b      	b.n	8006584 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800655a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689a      	ldr	r2, [r3, #8]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800656a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0201 	orr.w	r2, r2, #1
 800657a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fb8b 	bl	8006c98 <UART_CheckIdleState>
 8006582:	4603      	mov	r3, r0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b08a      	sub	sp, #40	; 0x28
 8006590:	af02      	add	r7, sp, #8
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	603b      	str	r3, [r7, #0]
 8006598:	4613      	mov	r3, r2
 800659a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065a0:	2b20      	cmp	r3, #32
 80065a2:	d178      	bne.n	8006696 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d002      	beq.n	80065b0 <HAL_UART_Transmit+0x24>
 80065aa:	88fb      	ldrh	r3, [r7, #6]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e071      	b.n	8006698 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2221      	movs	r2, #33	; 0x21
 80065c0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065c2:	f7fb fd75 	bl	80020b0 <HAL_GetTick>
 80065c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	88fa      	ldrh	r2, [r7, #6]
 80065cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	88fa      	ldrh	r2, [r7, #6]
 80065d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e0:	d108      	bne.n	80065f4 <HAL_UART_Transmit+0x68>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d104      	bne.n	80065f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	61bb      	str	r3, [r7, #24]
 80065f2:	e003      	b.n	80065fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065f8:	2300      	movs	r3, #0
 80065fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065fc:	e030      	b.n	8006660 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2200      	movs	r2, #0
 8006606:	2180      	movs	r1, #128	; 0x80
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 fbed 	bl	8006de8 <UART_WaitOnFlagUntilTimeout>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d004      	beq.n	800661e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2220      	movs	r2, #32
 8006618:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e03c      	b.n	8006698 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10b      	bne.n	800663c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	881a      	ldrh	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006630:	b292      	uxth	r2, r2
 8006632:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	3302      	adds	r3, #2
 8006638:	61bb      	str	r3, [r7, #24]
 800663a:	e008      	b.n	800664e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	781a      	ldrb	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	b292      	uxth	r2, r2
 8006646:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	3301      	adds	r3, #1
 800664c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006654:	b29b      	uxth	r3, r3
 8006656:	3b01      	subs	r3, #1
 8006658:	b29a      	uxth	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006666:	b29b      	uxth	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1c8      	bne.n	80065fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2200      	movs	r2, #0
 8006674:	2140      	movs	r1, #64	; 0x40
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 fbb6 	bl	8006de8 <UART_WaitOnFlagUntilTimeout>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d004      	beq.n	800668c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2220      	movs	r2, #32
 8006686:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e005      	b.n	8006698 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2220      	movs	r2, #32
 8006690:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	e000      	b.n	8006698 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006696:	2302      	movs	r3, #2
  }
}
 8006698:	4618      	mov	r0, r3
 800669a:	3720      	adds	r7, #32
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066a4:	b08a      	sub	sp, #40	; 0x28
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	431a      	orrs	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	431a      	orrs	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	4b9e      	ldr	r3, [pc, #632]	; (8006948 <UART_SetConfig+0x2a8>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	6812      	ldr	r2, [r2, #0]
 80066d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066d8:	430b      	orrs	r3, r1
 80066da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a93      	ldr	r2, [pc, #588]	; (800694c <UART_SetConfig+0x2ac>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d004      	beq.n	800670c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006708:	4313      	orrs	r3, r2
 800670a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800671c:	430a      	orrs	r2, r1
 800671e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a8a      	ldr	r2, [pc, #552]	; (8006950 <UART_SetConfig+0x2b0>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d126      	bne.n	8006778 <UART_SetConfig+0xd8>
 800672a:	4b8a      	ldr	r3, [pc, #552]	; (8006954 <UART_SetConfig+0x2b4>)
 800672c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006730:	f003 0303 	and.w	r3, r3, #3
 8006734:	2b03      	cmp	r3, #3
 8006736:	d81b      	bhi.n	8006770 <UART_SetConfig+0xd0>
 8006738:	a201      	add	r2, pc, #4	; (adr r2, 8006740 <UART_SetConfig+0xa0>)
 800673a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673e:	bf00      	nop
 8006740:	08006751 	.word	0x08006751
 8006744:	08006761 	.word	0x08006761
 8006748:	08006759 	.word	0x08006759
 800674c:	08006769 	.word	0x08006769
 8006750:	2301      	movs	r3, #1
 8006752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006756:	e0ab      	b.n	80068b0 <UART_SetConfig+0x210>
 8006758:	2302      	movs	r3, #2
 800675a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800675e:	e0a7      	b.n	80068b0 <UART_SetConfig+0x210>
 8006760:	2304      	movs	r3, #4
 8006762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006766:	e0a3      	b.n	80068b0 <UART_SetConfig+0x210>
 8006768:	2308      	movs	r3, #8
 800676a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800676e:	e09f      	b.n	80068b0 <UART_SetConfig+0x210>
 8006770:	2310      	movs	r3, #16
 8006772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006776:	e09b      	b.n	80068b0 <UART_SetConfig+0x210>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a76      	ldr	r2, [pc, #472]	; (8006958 <UART_SetConfig+0x2b8>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d138      	bne.n	80067f4 <UART_SetConfig+0x154>
 8006782:	4b74      	ldr	r3, [pc, #464]	; (8006954 <UART_SetConfig+0x2b4>)
 8006784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006788:	f003 030c 	and.w	r3, r3, #12
 800678c:	2b0c      	cmp	r3, #12
 800678e:	d82d      	bhi.n	80067ec <UART_SetConfig+0x14c>
 8006790:	a201      	add	r2, pc, #4	; (adr r2, 8006798 <UART_SetConfig+0xf8>)
 8006792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006796:	bf00      	nop
 8006798:	080067cd 	.word	0x080067cd
 800679c:	080067ed 	.word	0x080067ed
 80067a0:	080067ed 	.word	0x080067ed
 80067a4:	080067ed 	.word	0x080067ed
 80067a8:	080067dd 	.word	0x080067dd
 80067ac:	080067ed 	.word	0x080067ed
 80067b0:	080067ed 	.word	0x080067ed
 80067b4:	080067ed 	.word	0x080067ed
 80067b8:	080067d5 	.word	0x080067d5
 80067bc:	080067ed 	.word	0x080067ed
 80067c0:	080067ed 	.word	0x080067ed
 80067c4:	080067ed 	.word	0x080067ed
 80067c8:	080067e5 	.word	0x080067e5
 80067cc:	2300      	movs	r3, #0
 80067ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067d2:	e06d      	b.n	80068b0 <UART_SetConfig+0x210>
 80067d4:	2302      	movs	r3, #2
 80067d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067da:	e069      	b.n	80068b0 <UART_SetConfig+0x210>
 80067dc:	2304      	movs	r3, #4
 80067de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067e2:	e065      	b.n	80068b0 <UART_SetConfig+0x210>
 80067e4:	2308      	movs	r3, #8
 80067e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ea:	e061      	b.n	80068b0 <UART_SetConfig+0x210>
 80067ec:	2310      	movs	r3, #16
 80067ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f2:	e05d      	b.n	80068b0 <UART_SetConfig+0x210>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a58      	ldr	r2, [pc, #352]	; (800695c <UART_SetConfig+0x2bc>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d125      	bne.n	800684a <UART_SetConfig+0x1aa>
 80067fe:	4b55      	ldr	r3, [pc, #340]	; (8006954 <UART_SetConfig+0x2b4>)
 8006800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006804:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006808:	2b30      	cmp	r3, #48	; 0x30
 800680a:	d016      	beq.n	800683a <UART_SetConfig+0x19a>
 800680c:	2b30      	cmp	r3, #48	; 0x30
 800680e:	d818      	bhi.n	8006842 <UART_SetConfig+0x1a2>
 8006810:	2b20      	cmp	r3, #32
 8006812:	d00a      	beq.n	800682a <UART_SetConfig+0x18a>
 8006814:	2b20      	cmp	r3, #32
 8006816:	d814      	bhi.n	8006842 <UART_SetConfig+0x1a2>
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <UART_SetConfig+0x182>
 800681c:	2b10      	cmp	r3, #16
 800681e:	d008      	beq.n	8006832 <UART_SetConfig+0x192>
 8006820:	e00f      	b.n	8006842 <UART_SetConfig+0x1a2>
 8006822:	2300      	movs	r3, #0
 8006824:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006828:	e042      	b.n	80068b0 <UART_SetConfig+0x210>
 800682a:	2302      	movs	r3, #2
 800682c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006830:	e03e      	b.n	80068b0 <UART_SetConfig+0x210>
 8006832:	2304      	movs	r3, #4
 8006834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006838:	e03a      	b.n	80068b0 <UART_SetConfig+0x210>
 800683a:	2308      	movs	r3, #8
 800683c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006840:	e036      	b.n	80068b0 <UART_SetConfig+0x210>
 8006842:	2310      	movs	r3, #16
 8006844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006848:	e032      	b.n	80068b0 <UART_SetConfig+0x210>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a3f      	ldr	r2, [pc, #252]	; (800694c <UART_SetConfig+0x2ac>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d12a      	bne.n	80068aa <UART_SetConfig+0x20a>
 8006854:	4b3f      	ldr	r3, [pc, #252]	; (8006954 <UART_SetConfig+0x2b4>)
 8006856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800685a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800685e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006862:	d01a      	beq.n	800689a <UART_SetConfig+0x1fa>
 8006864:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006868:	d81b      	bhi.n	80068a2 <UART_SetConfig+0x202>
 800686a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800686e:	d00c      	beq.n	800688a <UART_SetConfig+0x1ea>
 8006870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006874:	d815      	bhi.n	80068a2 <UART_SetConfig+0x202>
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <UART_SetConfig+0x1e2>
 800687a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800687e:	d008      	beq.n	8006892 <UART_SetConfig+0x1f2>
 8006880:	e00f      	b.n	80068a2 <UART_SetConfig+0x202>
 8006882:	2300      	movs	r3, #0
 8006884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006888:	e012      	b.n	80068b0 <UART_SetConfig+0x210>
 800688a:	2302      	movs	r3, #2
 800688c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006890:	e00e      	b.n	80068b0 <UART_SetConfig+0x210>
 8006892:	2304      	movs	r3, #4
 8006894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006898:	e00a      	b.n	80068b0 <UART_SetConfig+0x210>
 800689a:	2308      	movs	r3, #8
 800689c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068a0:	e006      	b.n	80068b0 <UART_SetConfig+0x210>
 80068a2:	2310      	movs	r3, #16
 80068a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068a8:	e002      	b.n	80068b0 <UART_SetConfig+0x210>
 80068aa:	2310      	movs	r3, #16
 80068ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a25      	ldr	r2, [pc, #148]	; (800694c <UART_SetConfig+0x2ac>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	f040 808a 	bne.w	80069d0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d824      	bhi.n	800690e <UART_SetConfig+0x26e>
 80068c4:	a201      	add	r2, pc, #4	; (adr r2, 80068cc <UART_SetConfig+0x22c>)
 80068c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ca:	bf00      	nop
 80068cc:	080068f1 	.word	0x080068f1
 80068d0:	0800690f 	.word	0x0800690f
 80068d4:	080068f9 	.word	0x080068f9
 80068d8:	0800690f 	.word	0x0800690f
 80068dc:	080068ff 	.word	0x080068ff
 80068e0:	0800690f 	.word	0x0800690f
 80068e4:	0800690f 	.word	0x0800690f
 80068e8:	0800690f 	.word	0x0800690f
 80068ec:	08006907 	.word	0x08006907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068f0:	f7fd f940 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 80068f4:	61f8      	str	r0, [r7, #28]
        break;
 80068f6:	e010      	b.n	800691a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068f8:	4b19      	ldr	r3, [pc, #100]	; (8006960 <UART_SetConfig+0x2c0>)
 80068fa:	61fb      	str	r3, [r7, #28]
        break;
 80068fc:	e00d      	b.n	800691a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068fe:	f7fd f8a3 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8006902:	61f8      	str	r0, [r7, #28]
        break;
 8006904:	e009      	b.n	800691a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800690a:	61fb      	str	r3, [r7, #28]
        break;
 800690c:	e005      	b.n	800691a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006918:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 8109 	beq.w	8006b34 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	4613      	mov	r3, r2
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	4413      	add	r3, r2
 800692c:	69fa      	ldr	r2, [r7, #28]
 800692e:	429a      	cmp	r2, r3
 8006930:	d305      	bcc.n	800693e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006938:	69fa      	ldr	r2, [r7, #28]
 800693a:	429a      	cmp	r2, r3
 800693c:	d912      	bls.n	8006964 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006944:	e0f6      	b.n	8006b34 <UART_SetConfig+0x494>
 8006946:	bf00      	nop
 8006948:	efff69f3 	.word	0xefff69f3
 800694c:	40008000 	.word	0x40008000
 8006950:	40013800 	.word	0x40013800
 8006954:	40021000 	.word	0x40021000
 8006958:	40004400 	.word	0x40004400
 800695c:	40004800 	.word	0x40004800
 8006960:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	2200      	movs	r2, #0
 8006968:	461c      	mov	r4, r3
 800696a:	4615      	mov	r5, r2
 800696c:	f04f 0200 	mov.w	r2, #0
 8006970:	f04f 0300 	mov.w	r3, #0
 8006974:	022b      	lsls	r3, r5, #8
 8006976:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800697a:	0222      	lsls	r2, r4, #8
 800697c:	68f9      	ldr	r1, [r7, #12]
 800697e:	6849      	ldr	r1, [r1, #4]
 8006980:	0849      	lsrs	r1, r1, #1
 8006982:	2000      	movs	r0, #0
 8006984:	4688      	mov	r8, r1
 8006986:	4681      	mov	r9, r0
 8006988:	eb12 0a08 	adds.w	sl, r2, r8
 800698c:	eb43 0b09 	adc.w	fp, r3, r9
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	603b      	str	r3, [r7, #0]
 8006998:	607a      	str	r2, [r7, #4]
 800699a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800699e:	4650      	mov	r0, sl
 80069a0:	4659      	mov	r1, fp
 80069a2:	f7fa f951 	bl	8000c48 <__aeabi_uldivmod>
 80069a6:	4602      	mov	r2, r0
 80069a8:	460b      	mov	r3, r1
 80069aa:	4613      	mov	r3, r2
 80069ac:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069b4:	d308      	bcc.n	80069c8 <UART_SetConfig+0x328>
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069bc:	d204      	bcs.n	80069c8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	60da      	str	r2, [r3, #12]
 80069c6:	e0b5      	b.n	8006b34 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80069ce:	e0b1      	b.n	8006b34 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069d8:	d15d      	bne.n	8006a96 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80069da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069de:	2b08      	cmp	r3, #8
 80069e0:	d827      	bhi.n	8006a32 <UART_SetConfig+0x392>
 80069e2:	a201      	add	r2, pc, #4	; (adr r2, 80069e8 <UART_SetConfig+0x348>)
 80069e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e8:	08006a0d 	.word	0x08006a0d
 80069ec:	08006a15 	.word	0x08006a15
 80069f0:	08006a1d 	.word	0x08006a1d
 80069f4:	08006a33 	.word	0x08006a33
 80069f8:	08006a23 	.word	0x08006a23
 80069fc:	08006a33 	.word	0x08006a33
 8006a00:	08006a33 	.word	0x08006a33
 8006a04:	08006a33 	.word	0x08006a33
 8006a08:	08006a2b 	.word	0x08006a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a0c:	f7fd f8b2 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 8006a10:	61f8      	str	r0, [r7, #28]
        break;
 8006a12:	e014      	b.n	8006a3e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a14:	f7fd f8c4 	bl	8003ba0 <HAL_RCC_GetPCLK2Freq>
 8006a18:	61f8      	str	r0, [r7, #28]
        break;
 8006a1a:	e010      	b.n	8006a3e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a1c:	4b4c      	ldr	r3, [pc, #304]	; (8006b50 <UART_SetConfig+0x4b0>)
 8006a1e:	61fb      	str	r3, [r7, #28]
        break;
 8006a20:	e00d      	b.n	8006a3e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a22:	f7fd f811 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8006a26:	61f8      	str	r0, [r7, #28]
        break;
 8006a28:	e009      	b.n	8006a3e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a2e:	61fb      	str	r3, [r7, #28]
        break;
 8006a30:	e005      	b.n	8006a3e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d077      	beq.n	8006b34 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	005a      	lsls	r2, r3, #1
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	085b      	lsrs	r3, r3, #1
 8006a4e:	441a      	add	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	2b0f      	cmp	r3, #15
 8006a5e:	d916      	bls.n	8006a8e <UART_SetConfig+0x3ee>
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a66:	d212      	bcs.n	8006a8e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	f023 030f 	bic.w	r3, r3, #15
 8006a70:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	085b      	lsrs	r3, r3, #1
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	f003 0307 	and.w	r3, r3, #7
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	8afb      	ldrh	r3, [r7, #22]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	8afa      	ldrh	r2, [r7, #22]
 8006a8a:	60da      	str	r2, [r3, #12]
 8006a8c:	e052      	b.n	8006b34 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a94:	e04e      	b.n	8006b34 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a9a:	2b08      	cmp	r3, #8
 8006a9c:	d827      	bhi.n	8006aee <UART_SetConfig+0x44e>
 8006a9e:	a201      	add	r2, pc, #4	; (adr r2, 8006aa4 <UART_SetConfig+0x404>)
 8006aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa4:	08006ac9 	.word	0x08006ac9
 8006aa8:	08006ad1 	.word	0x08006ad1
 8006aac:	08006ad9 	.word	0x08006ad9
 8006ab0:	08006aef 	.word	0x08006aef
 8006ab4:	08006adf 	.word	0x08006adf
 8006ab8:	08006aef 	.word	0x08006aef
 8006abc:	08006aef 	.word	0x08006aef
 8006ac0:	08006aef 	.word	0x08006aef
 8006ac4:	08006ae7 	.word	0x08006ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ac8:	f7fd f854 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 8006acc:	61f8      	str	r0, [r7, #28]
        break;
 8006ace:	e014      	b.n	8006afa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ad0:	f7fd f866 	bl	8003ba0 <HAL_RCC_GetPCLK2Freq>
 8006ad4:	61f8      	str	r0, [r7, #28]
        break;
 8006ad6:	e010      	b.n	8006afa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ad8:	4b1d      	ldr	r3, [pc, #116]	; (8006b50 <UART_SetConfig+0x4b0>)
 8006ada:	61fb      	str	r3, [r7, #28]
        break;
 8006adc:	e00d      	b.n	8006afa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ade:	f7fc ffb3 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8006ae2:	61f8      	str	r0, [r7, #28]
        break;
 8006ae4:	e009      	b.n	8006afa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aea:	61fb      	str	r3, [r7, #28]
        break;
 8006aec:	e005      	b.n	8006afa <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006af8:	bf00      	nop
    }

    if (pclk != 0U)
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d019      	beq.n	8006b34 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	085a      	lsrs	r2, r3, #1
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	441a      	add	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b12:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	2b0f      	cmp	r3, #15
 8006b18:	d909      	bls.n	8006b2e <UART_SetConfig+0x48e>
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b20:	d205      	bcs.n	8006b2e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60da      	str	r2, [r3, #12]
 8006b2c:	e002      	b.n	8006b34 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006b40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3728      	adds	r7, #40	; 0x28
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b4e:	bf00      	nop
 8006b50:	00f42400 	.word	0x00f42400

08006b54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b60:	f003 0308 	and.w	r3, r3, #8
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00a      	beq.n	8006b7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00a      	beq.n	8006bc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	f003 0304 	and.w	r3, r3, #4
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00a      	beq.n	8006be4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	f003 0310 	and.w	r3, r3, #16
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00a      	beq.n	8006c06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	f003 0320 	and.w	r3, r3, #32
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00a      	beq.n	8006c28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d01a      	beq.n	8006c6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c52:	d10a      	bne.n	8006c6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00a      	beq.n	8006c8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	605a      	str	r2, [r3, #4]
  }
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b098      	sub	sp, #96	; 0x60
 8006c9c:	af02      	add	r7, sp, #8
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ca8:	f7fb fa02 	bl	80020b0 <HAL_GetTick>
 8006cac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0308 	and.w	r3, r3, #8
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d12e      	bne.n	8006d1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f88c 	bl	8006de8 <UART_WaitOnFlagUntilTimeout>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d021      	beq.n	8006d1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cde:	e853 3f00 	ldrex	r3, [r3]
 8006ce2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cea:	653b      	str	r3, [r7, #80]	; 0x50
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8006cf6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cfc:	e841 2300 	strex	r3, r2, [r1]
 8006d00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1e6      	bne.n	8006cd6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e062      	b.n	8006de0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0304 	and.w	r3, r3, #4
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	d149      	bne.n	8006dbc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d30:	2200      	movs	r2, #0
 8006d32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f856 	bl	8006de8 <UART_WaitOnFlagUntilTimeout>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d03c      	beq.n	8006dbc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	e853 3f00 	ldrex	r3, [r3]
 8006d4e:	623b      	str	r3, [r7, #32]
   return(result);
 8006d50:	6a3b      	ldr	r3, [r7, #32]
 8006d52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d60:	633b      	str	r3, [r7, #48]	; 0x30
 8006d62:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d68:	e841 2300 	strex	r3, r2, [r1]
 8006d6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e6      	bne.n	8006d42 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3308      	adds	r3, #8
 8006d7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	e853 3f00 	ldrex	r3, [r3]
 8006d82:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 0301 	bic.w	r3, r3, #1
 8006d8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3308      	adds	r3, #8
 8006d92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d94:	61fa      	str	r2, [r7, #28]
 8006d96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d98:	69b9      	ldr	r1, [r7, #24]
 8006d9a:	69fa      	ldr	r2, [r7, #28]
 8006d9c:	e841 2300 	strex	r3, r2, [r1]
 8006da0:	617b      	str	r3, [r7, #20]
   return(result);
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1e5      	bne.n	8006d74 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e011      	b.n	8006de0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3758      	adds	r7, #88	; 0x58
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	4613      	mov	r3, r2
 8006df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df8:	e049      	b.n	8006e8e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e00:	d045      	beq.n	8006e8e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e02:	f7fb f955 	bl	80020b0 <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d302      	bcc.n	8006e18 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e048      	b.n	8006eae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0304 	and.w	r3, r3, #4
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d031      	beq.n	8006e8e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	f003 0308 	and.w	r3, r3, #8
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d110      	bne.n	8006e5a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2208      	movs	r2, #8
 8006e3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 f838 	bl	8006eb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2208      	movs	r2, #8
 8006e4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e029      	b.n	8006eae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e68:	d111      	bne.n	8006e8e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f000 f81e 	bl	8006eb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e00f      	b.n	8006eae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	69da      	ldr	r2, [r3, #28]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	4013      	ands	r3, r2
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	bf0c      	ite	eq
 8006e9e:	2301      	moveq	r3, #1
 8006ea0:	2300      	movne	r3, #0
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	79fb      	ldrb	r3, [r7, #7]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d0a6      	beq.n	8006dfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b095      	sub	sp, #84	; 0x54
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ece:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006edc:	643b      	str	r3, [r7, #64]	; 0x40
 8006ede:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ee2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ee4:	e841 2300 	strex	r3, r2, [r1]
 8006ee8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e6      	bne.n	8006ebe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3308      	adds	r3, #8
 8006ef6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	e853 3f00 	ldrex	r3, [r3]
 8006efe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	f023 0301 	bic.w	r3, r3, #1
 8006f06:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3308      	adds	r3, #8
 8006f0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f18:	e841 2300 	strex	r3, r2, [r1]
 8006f1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1e5      	bne.n	8006ef0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d118      	bne.n	8006f5e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	e853 3f00 	ldrex	r3, [r3]
 8006f38:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	f023 0310 	bic.w	r3, r3, #16
 8006f40:	647b      	str	r3, [r7, #68]	; 0x44
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	461a      	mov	r2, r3
 8006f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f4a:	61bb      	str	r3, [r7, #24]
 8006f4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4e:	6979      	ldr	r1, [r7, #20]
 8006f50:	69ba      	ldr	r2, [r7, #24]
 8006f52:	e841 2300 	strex	r3, r2, [r1]
 8006f56:	613b      	str	r3, [r7, #16]
   return(result);
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1e6      	bne.n	8006f2c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2220      	movs	r2, #32
 8006f62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006f72:	bf00      	nop
 8006f74:	3754      	adds	r7, #84	; 0x54
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006f7e:	b084      	sub	sp, #16
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	f107 001c 	add.w	r0, r7, #28
 8006f8c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006f90:	2300      	movs	r3, #0
 8006f92:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8006f9c:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8006fa0:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006fa4:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006fa8:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006fac:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006fbc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	b004      	add	sp, #16
 8006fd6:	4770      	bx	lr

08006fd8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b083      	sub	sp, #12
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
 8006ffa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2203      	movs	r2, #3
 8007020:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007022:	2002      	movs	r0, #2
 8007024:	f7fb f850 	bl	80020c8 <HAL_Delay>

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0303 	and.w	r3, r3, #3
}
 8007042:	4618      	mov	r0, r3
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800704e:	b480      	push	{r7}
 8007050:	b085      	sub	sp, #20
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800706c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007072:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007078:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	4313      	orrs	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007088:	f023 030f 	bic.w	r3, r3, #15
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	431a      	orrs	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b083      	sub	sp, #12
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	b2db      	uxtb	r3, r3
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	3314      	adds	r3, #20
 80070ca:	461a      	mov	r2, r3
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	4413      	add	r3, r2
 80070d0:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b085      	sub	sp, #20
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
 80070ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007108:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800710e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007114:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	4313      	orrs	r3, r2
 800711a:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007120:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	431a      	orrs	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800712c:	2300      	movs	r3, #0

}
 800712e:	4618      	mov	r0, r3
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b088      	sub	sp, #32
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
 8007142:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007148:	2310      	movs	r3, #16
 800714a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800714c:	2340      	movs	r3, #64	; 0x40
 800714e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007150:	2300      	movs	r3, #0
 8007152:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007154:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007158:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800715a:	f107 0308 	add.w	r3, r7, #8
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7ff ff74 	bl	800704e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007166:	f241 3288 	movw	r2, #5000	; 0x1388
 800716a:	2110      	movs	r1, #16
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f9d7 	bl	8007520 <SDMMC_GetCmdResp1>
 8007172:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007174:	69fb      	ldr	r3, [r7, #28]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3720      	adds	r7, #32
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b088      	sub	sp, #32
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800718c:	2311      	movs	r3, #17
 800718e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007190:	2340      	movs	r3, #64	; 0x40
 8007192:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007194:	2300      	movs	r3, #0
 8007196:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800719c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800719e:	f107 0308 	add.w	r3, r7, #8
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7ff ff52 	bl	800704e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80071aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ae:	2111      	movs	r1, #17
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f9b5 	bl	8007520 <SDMMC_GetCmdResp1>
 80071b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071b8:	69fb      	ldr	r3, [r7, #28]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3720      	adds	r7, #32
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b088      	sub	sp, #32
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80071d0:	2312      	movs	r3, #18
 80071d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071d4:	2340      	movs	r3, #64	; 0x40
 80071d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071d8:	2300      	movs	r3, #0
 80071da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071e2:	f107 0308 	add.w	r3, r7, #8
 80071e6:	4619      	mov	r1, r3
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7ff ff30 	bl	800704e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80071ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80071f2:	2112      	movs	r1, #18
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f993 	bl	8007520 <SDMMC_GetCmdResp1>
 80071fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071fc:	69fb      	ldr	r3, [r7, #28]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3720      	adds	r7, #32
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b088      	sub	sp, #32
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007214:	2318      	movs	r3, #24
 8007216:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007218:	2340      	movs	r3, #64	; 0x40
 800721a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800721c:	2300      	movs	r3, #0
 800721e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007224:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007226:	f107 0308 	add.w	r3, r7, #8
 800722a:	4619      	mov	r1, r3
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f7ff ff0e 	bl	800704e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007232:	f241 3288 	movw	r2, #5000	; 0x1388
 8007236:	2118      	movs	r1, #24
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f971 	bl	8007520 <SDMMC_GetCmdResp1>
 800723e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007240:	69fb      	ldr	r3, [r7, #28]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3720      	adds	r7, #32
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b088      	sub	sp, #32
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007258:	2319      	movs	r3, #25
 800725a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800725c:	2340      	movs	r3, #64	; 0x40
 800725e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007260:	2300      	movs	r3, #0
 8007262:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007268:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800726a:	f107 0308 	add.w	r3, r7, #8
 800726e:	4619      	mov	r1, r3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7ff feec 	bl	800704e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007276:	f241 3288 	movw	r2, #5000	; 0x1388
 800727a:	2119      	movs	r1, #25
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f94f 	bl	8007520 <SDMMC_GetCmdResp1>
 8007282:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007284:	69fb      	ldr	r3, [r7, #28]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3720      	adds	r7, #32
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
	...

08007290 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b088      	sub	sp, #32
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800729c:	230c      	movs	r3, #12
 800729e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072a0:	2340      	movs	r3, #64	; 0x40
 80072a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072a4:	2300      	movs	r3, #0
 80072a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072ac:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072ae:	f107 0308 	add.w	r3, r7, #8
 80072b2:	4619      	mov	r1, r3
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7ff feca 	bl	800704e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80072ba:	4a05      	ldr	r2, [pc, #20]	; (80072d0 <SDMMC_CmdStopTransfer+0x40>)
 80072bc:	210c      	movs	r1, #12
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f92e 	bl	8007520 <SDMMC_GetCmdResp1>
 80072c4:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 80072c6:	69fb      	ldr	r3, [r7, #28]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3720      	adds	r7, #32
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	05f5e100 	.word	0x05f5e100

080072d4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b08a      	sub	sp, #40	; 0x28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80072e4:	2307      	movs	r3, #7
 80072e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072e8:	2340      	movs	r3, #64	; 0x40
 80072ea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072ec:	2300      	movs	r3, #0
 80072ee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072f4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072f6:	f107 0310 	add.w	r3, r7, #16
 80072fa:	4619      	mov	r1, r3
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f7ff fea6 	bl	800704e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007302:	f241 3288 	movw	r2, #5000	; 0x1388
 8007306:	2107      	movs	r1, #7
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 f909 	bl	8007520 <SDMMC_GetCmdResp1>
 800730e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007312:	4618      	mov	r0, r3
 8007314:	3728      	adds	r7, #40	; 0x28
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b088      	sub	sp, #32
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007322:	2300      	movs	r3, #0
 8007324:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007326:	2300      	movs	r3, #0
 8007328:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800732a:	2300      	movs	r3, #0
 800732c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800732e:	2300      	movs	r3, #0
 8007330:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007336:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007338:	f107 0308 	add.w	r3, r7, #8
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7ff fe85 	bl	800704e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fb23 	bl	8007990 <SDMMC_GetCmdError>
 800734a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800734c:	69fb      	ldr	r3, [r7, #28]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3720      	adds	r7, #32
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b088      	sub	sp, #32
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800735e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007362:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007364:	2308      	movs	r3, #8
 8007366:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007368:	2340      	movs	r3, #64	; 0x40
 800736a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800736c:	2300      	movs	r3, #0
 800736e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007374:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007376:	f107 0308 	add.w	r3, r7, #8
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7ff fe66 	bl	800704e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fab6 	bl	80078f4 <SDMMC_GetCmdResp7>
 8007388:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800738a:	69fb      	ldr	r3, [r7, #28]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3720      	adds	r7, #32
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80073a2:	2337      	movs	r3, #55	; 0x37
 80073a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073a6:	2340      	movs	r3, #64	; 0x40
 80073a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073aa:	2300      	movs	r3, #0
 80073ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073b4:	f107 0308 	add.w	r3, r7, #8
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7ff fe47 	bl	800704e <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80073c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80073c4:	2137      	movs	r1, #55	; 0x37
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f8aa 	bl	8007520 <SDMMC_GetCmdResp1>
 80073cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073ce:	69fb      	ldr	r3, [r7, #28]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3720      	adds	r7, #32
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b088      	sub	sp, #32
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073ec:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80073ee:	2329      	movs	r3, #41	; 0x29
 80073f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073f2:	2340      	movs	r3, #64	; 0x40
 80073f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073f6:	2300      	movs	r3, #0
 80073f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007400:	f107 0308 	add.w	r3, r7, #8
 8007404:	4619      	mov	r1, r3
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7ff fe21 	bl	800704e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f9bd 	bl	800778c <SDMMC_GetCmdResp3>
 8007412:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007414:	69fb      	ldr	r3, [r7, #28]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3720      	adds	r7, #32
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b088      	sub	sp, #32
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800742a:	2302      	movs	r3, #2
 800742c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800742e:	23c0      	movs	r3, #192	; 0xc0
 8007430:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007432:	2300      	movs	r3, #0
 8007434:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800743a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800743c:	f107 0308 	add.w	r3, r7, #8
 8007440:	4619      	mov	r1, r3
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7ff fe03 	bl	800704e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f957 	bl	80076fc <SDMMC_GetCmdResp2>
 800744e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007450:	69fb      	ldr	r3, [r7, #28]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3720      	adds	r7, #32
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b088      	sub	sp, #32
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007468:	2309      	movs	r3, #9
 800746a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800746c:	23c0      	movs	r3, #192	; 0xc0
 800746e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007470:	2300      	movs	r3, #0
 8007472:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007478:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800747a:	f107 0308 	add.w	r3, r7, #8
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7ff fde4 	bl	800704e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f938 	bl	80076fc <SDMMC_GetCmdResp2>
 800748c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800748e:	69fb      	ldr	r3, [r7, #28]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3720      	adds	r7, #32
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b088      	sub	sp, #32
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80074a6:	2303      	movs	r3, #3
 80074a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074aa:	2340      	movs	r3, #64	; 0x40
 80074ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074ae:	2300      	movs	r3, #0
 80074b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074b8:	f107 0308 	add.w	r3, r7, #8
 80074bc:	4619      	mov	r1, r3
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7ff fdc5 	bl	800704e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	2103      	movs	r1, #3
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f99d 	bl	8007808 <SDMMC_GetCmdResp6>
 80074ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074d0:	69fb      	ldr	r3, [r7, #28]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3720      	adds	r7, #32
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b088      	sub	sp, #32
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80074e8:	230d      	movs	r3, #13
 80074ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074ec:	2340      	movs	r3, #64	; 0x40
 80074ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074f0:	2300      	movs	r3, #0
 80074f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074fa:	f107 0308 	add.w	r3, r7, #8
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f7ff fda4 	bl	800704e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007506:	f241 3288 	movw	r2, #5000	; 0x1388
 800750a:	210d      	movs	r1, #13
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f807 	bl	8007520 <SDMMC_GetCmdResp1>
 8007512:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007514:	69fb      	ldr	r3, [r7, #28]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3720      	adds	r7, #32
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
	...

08007520 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	460b      	mov	r3, r1
 800752a:	607a      	str	r2, [r7, #4]
 800752c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800752e:	4b70      	ldr	r3, [pc, #448]	; (80076f0 <SDMMC_GetCmdResp1+0x1d0>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a70      	ldr	r2, [pc, #448]	; (80076f4 <SDMMC_GetCmdResp1+0x1d4>)
 8007534:	fba2 2303 	umull	r2, r3, r2, r3
 8007538:	0a5a      	lsrs	r2, r3, #9
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	fb02 f303 	mul.w	r3, r2, r3
 8007540:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	1e5a      	subs	r2, r3, #1
 8007546:	61fa      	str	r2, [r7, #28]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d102      	bne.n	8007552 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800754c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007550:	e0c9      	b.n	80076e6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007556:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800755e:	2b00      	cmp	r3, #0
 8007560:	d0ef      	beq.n	8007542 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1ea      	bne.n	8007542 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007570:	f003 0304 	and.w	r3, r3, #4
 8007574:	2b00      	cmp	r3, #0
 8007576:	d004      	beq.n	8007582 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2204      	movs	r2, #4
 800757c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800757e:	2304      	movs	r3, #4
 8007580:	e0b1      	b.n	80076e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007586:	f003 0301 	and.w	r3, r3, #1
 800758a:	2b00      	cmp	r3, #0
 800758c:	d004      	beq.n	8007598 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2201      	movs	r2, #1
 8007592:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007594:	2301      	movs	r3, #1
 8007596:	e0a6      	b.n	80076e6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	22c5      	movs	r2, #197	; 0xc5
 800759c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f7ff fd7f 	bl	80070a2 <SDMMC_GetCommandResponse>
 80075a4:	4603      	mov	r3, r0
 80075a6:	461a      	mov	r2, r3
 80075a8:	7afb      	ldrb	r3, [r7, #11]
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d001      	beq.n	80075b2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e099      	b.n	80076e6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80075b2:	2100      	movs	r1, #0
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f7ff fd81 	bl	80070bc <SDMMC_GetResponse>
 80075ba:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80075bc:	697a      	ldr	r2, [r7, #20]
 80075be:	4b4e      	ldr	r3, [pc, #312]	; (80076f8 <SDMMC_GetCmdResp1+0x1d8>)
 80075c0:	4013      	ands	r3, r2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80075c6:	2300      	movs	r3, #0
 80075c8:	e08d      	b.n	80076e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	da02      	bge.n	80075d6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80075d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075d4:	e087      	b.n	80076e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80075e0:	2340      	movs	r3, #64	; 0x40
 80075e2:	e080      	b.n	80076e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80075ee:	2380      	movs	r3, #128	; 0x80
 80075f0:	e079      	b.n	80076e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d002      	beq.n	8007602 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80075fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007600:	e071      	b.n	80076e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800760c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007610:	e069      	b.n	80076e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800761c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007620:	e061      	b.n	80076e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800762c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007630:	e059      	b.n	80076e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800763c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007640:	e051      	b.n	80076e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800764c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007650:	e049      	b.n	80076e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d002      	beq.n	8007662 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800765c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007660:	e041      	b.n	80076e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d002      	beq.n	8007672 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800766c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007670:	e039      	b.n	80076e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d002      	beq.n	8007682 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800767c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007680:	e031      	b.n	80076e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d002      	beq.n	8007692 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800768c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007690:	e029      	b.n	80076e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d002      	beq.n	80076a2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800769c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80076a0:	e021      	b.n	80076e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d002      	beq.n	80076b2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80076ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80076b0:	e019      	b.n	80076e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d002      	beq.n	80076c2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80076bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80076c0:	e011      	b.n	80076e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d002      	beq.n	80076d2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80076cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80076d0:	e009      	b.n	80076e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f003 0308 	and.w	r3, r3, #8
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d002      	beq.n	80076e2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80076dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80076e0:	e001      	b.n	80076e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80076e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3720      	adds	r7, #32
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	20000010 	.word	0x20000010
 80076f4:	10624dd3 	.word	0x10624dd3
 80076f8:	fdffe008 	.word	0xfdffe008

080076fc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007704:	4b1f      	ldr	r3, [pc, #124]	; (8007784 <SDMMC_GetCmdResp2+0x88>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a1f      	ldr	r2, [pc, #124]	; (8007788 <SDMMC_GetCmdResp2+0x8c>)
 800770a:	fba2 2303 	umull	r2, r3, r2, r3
 800770e:	0a5b      	lsrs	r3, r3, #9
 8007710:	f241 3288 	movw	r2, #5000	; 0x1388
 8007714:	fb02 f303 	mul.w	r3, r2, r3
 8007718:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	1e5a      	subs	r2, r3, #1
 800771e:	60fa      	str	r2, [r7, #12]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d102      	bne.n	800772a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007724:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007728:	e026      	b.n	8007778 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800772e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0ef      	beq.n	800771a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1ea      	bne.n	800771a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b00      	cmp	r3, #0
 800774e:	d004      	beq.n	800775a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2204      	movs	r2, #4
 8007754:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007756:	2304      	movs	r3, #4
 8007758:	e00e      	b.n	8007778 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b00      	cmp	r3, #0
 8007764:	d004      	beq.n	8007770 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800776c:	2301      	movs	r3, #1
 800776e:	e003      	b.n	8007778 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	22c5      	movs	r2, #197	; 0xc5
 8007774:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	20000010 	.word	0x20000010
 8007788:	10624dd3 	.word	0x10624dd3

0800778c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007794:	4b1a      	ldr	r3, [pc, #104]	; (8007800 <SDMMC_GetCmdResp3+0x74>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a1a      	ldr	r2, [pc, #104]	; (8007804 <SDMMC_GetCmdResp3+0x78>)
 800779a:	fba2 2303 	umull	r2, r3, r2, r3
 800779e:	0a5b      	lsrs	r3, r3, #9
 80077a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077a4:	fb02 f303 	mul.w	r3, r2, r3
 80077a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	1e5a      	subs	r2, r3, #1
 80077ae:	60fa      	str	r2, [r7, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d102      	bne.n	80077ba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80077b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80077b8:	e01b      	b.n	80077f2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0ef      	beq.n	80077aa <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1ea      	bne.n	80077aa <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d004      	beq.n	80077ea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2204      	movs	r2, #4
 80077e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80077e6:	2304      	movs	r3, #4
 80077e8:	e003      	b.n	80077f2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	22c5      	movs	r2, #197	; 0xc5
 80077ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3714      	adds	r7, #20
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	20000010 	.word	0x20000010
 8007804:	10624dd3 	.word	0x10624dd3

08007808 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b088      	sub	sp, #32
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	460b      	mov	r3, r1
 8007812:	607a      	str	r2, [r7, #4]
 8007814:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007816:	4b35      	ldr	r3, [pc, #212]	; (80078ec <SDMMC_GetCmdResp6+0xe4>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a35      	ldr	r2, [pc, #212]	; (80078f0 <SDMMC_GetCmdResp6+0xe8>)
 800781c:	fba2 2303 	umull	r2, r3, r2, r3
 8007820:	0a5b      	lsrs	r3, r3, #9
 8007822:	f241 3288 	movw	r2, #5000	; 0x1388
 8007826:	fb02 f303 	mul.w	r3, r2, r3
 800782a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	1e5a      	subs	r2, r3, #1
 8007830:	61fa      	str	r2, [r7, #28]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d102      	bne.n	800783c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007836:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800783a:	e052      	b.n	80078e2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007840:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007848:	2b00      	cmp	r3, #0
 800784a:	d0ef      	beq.n	800782c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1ea      	bne.n	800782c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800785a:	f003 0304 	and.w	r3, r3, #4
 800785e:	2b00      	cmp	r3, #0
 8007860:	d004      	beq.n	800786c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2204      	movs	r2, #4
 8007866:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007868:	2304      	movs	r3, #4
 800786a:	e03a      	b.n	80078e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	2b00      	cmp	r3, #0
 8007876:	d004      	beq.n	8007882 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2201      	movs	r2, #1
 800787c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800787e:	2301      	movs	r3, #1
 8007880:	e02f      	b.n	80078e2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f7ff fc0d 	bl	80070a2 <SDMMC_GetCommandResponse>
 8007888:	4603      	mov	r3, r0
 800788a:	461a      	mov	r2, r3
 800788c:	7afb      	ldrb	r3, [r7, #11]
 800788e:	4293      	cmp	r3, r2
 8007890:	d001      	beq.n	8007896 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007892:	2301      	movs	r3, #1
 8007894:	e025      	b.n	80078e2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	22c5      	movs	r2, #197	; 0xc5
 800789a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800789c:	2100      	movs	r1, #0
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f7ff fc0c 	bl	80070bc <SDMMC_GetResponse>
 80078a4:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d106      	bne.n	80078be <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	0c1b      	lsrs	r3, r3, #16
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80078ba:	2300      	movs	r3, #0
 80078bc:	e011      	b.n	80078e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80078c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80078cc:	e009      	b.n	80078e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80078d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078dc:	e001      	b.n	80078e2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80078de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3720      	adds	r7, #32
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20000010 	.word	0x20000010
 80078f0:	10624dd3 	.word	0x10624dd3

080078f4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078fc:	4b22      	ldr	r3, [pc, #136]	; (8007988 <SDMMC_GetCmdResp7+0x94>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a22      	ldr	r2, [pc, #136]	; (800798c <SDMMC_GetCmdResp7+0x98>)
 8007902:	fba2 2303 	umull	r2, r3, r2, r3
 8007906:	0a5b      	lsrs	r3, r3, #9
 8007908:	f241 3288 	movw	r2, #5000	; 0x1388
 800790c:	fb02 f303 	mul.w	r3, r2, r3
 8007910:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	1e5a      	subs	r2, r3, #1
 8007916:	60fa      	str	r2, [r7, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d102      	bne.n	8007922 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800791c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007920:	e02c      	b.n	800797c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007926:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800792e:	2b00      	cmp	r3, #0
 8007930:	d0ef      	beq.n	8007912 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1ea      	bne.n	8007912 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007940:	f003 0304 	and.w	r3, r3, #4
 8007944:	2b00      	cmp	r3, #0
 8007946:	d004      	beq.n	8007952 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2204      	movs	r2, #4
 800794c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800794e:	2304      	movs	r3, #4
 8007950:	e014      	b.n	800797c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	2b00      	cmp	r3, #0
 800795c:	d004      	beq.n	8007968 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007964:	2301      	movs	r3, #1
 8007966:	e009      	b.n	800797c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800796c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007970:	2b00      	cmp	r3, #0
 8007972:	d002      	beq.n	800797a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2240      	movs	r2, #64	; 0x40
 8007978:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800797a:	2300      	movs	r3, #0

}
 800797c:	4618      	mov	r0, r3
 800797e:	3714      	adds	r7, #20
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	20000010 	.word	0x20000010
 800798c:	10624dd3 	.word	0x10624dd3

08007990 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007998:	4b11      	ldr	r3, [pc, #68]	; (80079e0 <SDMMC_GetCmdError+0x50>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a11      	ldr	r2, [pc, #68]	; (80079e4 <SDMMC_GetCmdError+0x54>)
 800799e:	fba2 2303 	umull	r2, r3, r2, r3
 80079a2:	0a5b      	lsrs	r3, r3, #9
 80079a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80079a8:	fb02 f303 	mul.w	r3, r2, r3
 80079ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	1e5a      	subs	r2, r3, #1
 80079b2:	60fa      	str	r2, [r7, #12]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d102      	bne.n	80079be <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80079b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079bc:	e009      	b.n	80079d2 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d0f1      	beq.n	80079ae <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	22c5      	movs	r2, #197	; 0xc5
 80079ce:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	20000010 	.word	0x20000010
 80079e4:	10624dd3 	.word	0x10624dd3

080079e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80079ec:	4904      	ldr	r1, [pc, #16]	; (8007a00 <MX_FATFS_Init+0x18>)
 80079ee:	4805      	ldr	r0, [pc, #20]	; (8007a04 <MX_FATFS_Init+0x1c>)
 80079f0:	f000 f9bc 	bl	8007d6c <FATFS_LinkDriver>
 80079f4:	4603      	mov	r3, r0
 80079f6:	461a      	mov	r2, r3
 80079f8:	4b03      	ldr	r3, [pc, #12]	; (8007a08 <MX_FATFS_Init+0x20>)
 80079fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80079fc:	bf00      	nop
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	200003d0 	.word	0x200003d0
 8007a04:	0800b2d0 	.word	0x0800b2d0
 8007a08:	200003cc 	.word	0x200003cc

08007a0c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007a16:	f000 f86b 	bl	8007af0 <BSP_SD_IsDetected>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d001      	beq.n	8007a24 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007a20:	2302      	movs	r3, #2
 8007a22:	e005      	b.n	8007a30 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8007a24:	4804      	ldr	r0, [pc, #16]	; (8007a38 <BSP_SD_Init+0x2c>)
 8007a26:	f7fd f98b 	bl	8004d40 <HAL_SD_Init>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8007a2e:	79fb      	ldrb	r3, [r7, #7]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	200002dc 	.word	0x200002dc

08007a3c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b088      	sub	sp, #32
 8007a40:	af02      	add	r7, sp, #8
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
 8007a48:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	68f9      	ldr	r1, [r7, #12]
 8007a58:	4806      	ldr	r0, [pc, #24]	; (8007a74 <BSP_SD_ReadBlocks+0x38>)
 8007a5a:	f7fd fa47 	bl	8004eec <HAL_SD_ReadBlocks>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d001      	beq.n	8007a68 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3718      	adds	r7, #24
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	200002dc 	.word	0x200002dc

08007a78 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b088      	sub	sp, #32
 8007a7c:	af02      	add	r7, sp, #8
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
 8007a84:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	68f9      	ldr	r1, [r7, #12]
 8007a94:	4806      	ldr	r0, [pc, #24]	; (8007ab0 <BSP_SD_WriteBlocks+0x38>)
 8007a96:	f7fd fc07 	bl	80052a8 <HAL_SD_WriteBlocks>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d001      	beq.n	8007aa4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3718      	adds	r7, #24
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	200002dc 	.word	0x200002dc

08007ab4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007ab8:	4805      	ldr	r0, [pc, #20]	; (8007ad0 <BSP_SD_GetCardState+0x1c>)
 8007aba:	f7fd ff4b 	bl	8005954 <HAL_SD_GetCardState>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b04      	cmp	r3, #4
 8007ac2:	bf14      	ite	ne
 8007ac4:	2301      	movne	r3, #1
 8007ac6:	2300      	moveq	r3, #0
 8007ac8:	b2db      	uxtb	r3, r3
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	200002dc 	.word	0x200002dc

08007ad4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007adc:	6879      	ldr	r1, [r7, #4]
 8007ade:	4803      	ldr	r0, [pc, #12]	; (8007aec <BSP_SD_GetCardInfo+0x18>)
 8007ae0:	f7fd ff0c 	bl	80058fc <HAL_SD_GetCardInfo>
}
 8007ae4:	bf00      	nop
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	200002dc 	.word	0x200002dc

08007af0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007af6:	2301      	movs	r3, #1
 8007af8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8007afa:	79fb      	ldrb	r3, [r7, #7]
 8007afc:	b2db      	uxtb	r3, r3
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
	...

08007b0c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4603      	mov	r3, r0
 8007b14:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007b16:	4b0b      	ldr	r3, [pc, #44]	; (8007b44 <SD_CheckStatus+0x38>)
 8007b18:	2201      	movs	r2, #1
 8007b1a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007b1c:	f7ff ffca 	bl	8007ab4 <BSP_SD_GetCardState>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d107      	bne.n	8007b36 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007b26:	4b07      	ldr	r3, [pc, #28]	; (8007b44 <SD_CheckStatus+0x38>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	f023 0301 	bic.w	r3, r3, #1
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	4b04      	ldr	r3, [pc, #16]	; (8007b44 <SD_CheckStatus+0x38>)
 8007b34:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007b36:	4b03      	ldr	r3, [pc, #12]	; (8007b44 <SD_CheckStatus+0x38>)
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	b2db      	uxtb	r3, r3
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	20000019 	.word	0x20000019

08007b48 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	4603      	mov	r3, r0
 8007b50:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007b52:	4b0b      	ldr	r3, [pc, #44]	; (8007b80 <SD_initialize+0x38>)
 8007b54:	2201      	movs	r2, #1
 8007b56:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007b58:	f7ff ff58 	bl	8007a0c <BSP_SD_Init>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d107      	bne.n	8007b72 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8007b62:	79fb      	ldrb	r3, [r7, #7]
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7ff ffd1 	bl	8007b0c <SD_CheckStatus>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	4b04      	ldr	r3, [pc, #16]	; (8007b80 <SD_initialize+0x38>)
 8007b70:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007b72:	4b03      	ldr	r3, [pc, #12]	; (8007b80 <SD_initialize+0x38>)
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	b2db      	uxtb	r3, r3
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	20000019 	.word	0x20000019

08007b84 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007b8e:	79fb      	ldrb	r3, [r7, #7]
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7ff ffbb 	bl	8007b0c <SD_CheckStatus>
 8007b96:	4603      	mov	r3, r0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60b9      	str	r1, [r7, #8]
 8007ba8:	607a      	str	r2, [r7, #4]
 8007baa:	603b      	str	r3, [r7, #0]
 8007bac:	4603      	mov	r3, r0
 8007bae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8007bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb8:	683a      	ldr	r2, [r7, #0]
 8007bba:	6879      	ldr	r1, [r7, #4]
 8007bbc:	68b8      	ldr	r0, [r7, #8]
 8007bbe:	f7ff ff3d 	bl	8007a3c <BSP_SD_ReadBlocks>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d107      	bne.n	8007bd8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007bc8:	bf00      	nop
 8007bca:	f7ff ff73 	bl	8007ab4 <BSP_SD_GetCardState>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1fa      	bne.n	8007bca <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b086      	sub	sp, #24
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	603b      	str	r3, [r7, #0]
 8007bee:	4603      	mov	r3, r0
 8007bf0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8007bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	6879      	ldr	r1, [r7, #4]
 8007bfe:	68b8      	ldr	r0, [r7, #8]
 8007c00:	f7ff ff3a 	bl	8007a78 <BSP_SD_WriteBlocks>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d107      	bne.n	8007c1a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8007c0a:	bf00      	nop
 8007c0c:	f7ff ff52 	bl	8007ab4 <BSP_SD_GetCardState>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1fa      	bne.n	8007c0c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3718      	adds	r7, #24
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b08c      	sub	sp, #48	; 0x30
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	603a      	str	r2, [r7, #0]
 8007c2e:	71fb      	strb	r3, [r7, #7]
 8007c30:	460b      	mov	r3, r1
 8007c32:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007c3a:	4b25      	ldr	r3, [pc, #148]	; (8007cd0 <SD_ioctl+0xac>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	f003 0301 	and.w	r3, r3, #1
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d001      	beq.n	8007c4c <SD_ioctl+0x28>
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e03c      	b.n	8007cc6 <SD_ioctl+0xa2>

  switch (cmd)
 8007c4c:	79bb      	ldrb	r3, [r7, #6]
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	d834      	bhi.n	8007cbc <SD_ioctl+0x98>
 8007c52:	a201      	add	r2, pc, #4	; (adr r2, 8007c58 <SD_ioctl+0x34>)
 8007c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c58:	08007c69 	.word	0x08007c69
 8007c5c:	08007c71 	.word	0x08007c71
 8007c60:	08007c89 	.word	0x08007c89
 8007c64:	08007ca3 	.word	0x08007ca3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007c6e:	e028      	b.n	8007cc2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007c70:	f107 030c 	add.w	r3, r7, #12
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7ff ff2d 	bl	8007ad4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007c80:	2300      	movs	r3, #0
 8007c82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007c86:	e01c      	b.n	8007cc2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007c88:	f107 030c 	add.w	r3, r7, #12
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7ff ff21 	bl	8007ad4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007ca0:	e00f      	b.n	8007cc2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007ca2:	f107 030c 	add.w	r3, r7, #12
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7ff ff14 	bl	8007ad4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cae:	0a5a      	lsrs	r2, r3, #9
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007cba:	e002      	b.n	8007cc2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007cbc:	2304      	movs	r3, #4
 8007cbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007cc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3730      	adds	r7, #48	; 0x30
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	20000019 	.word	0x20000019

08007cd4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007cea:	4b1f      	ldr	r3, [pc, #124]	; (8007d68 <FATFS_LinkDriverEx+0x94>)
 8007cec:	7a5b      	ldrb	r3, [r3, #9]
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d131      	bne.n	8007d58 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007cf4:	4b1c      	ldr	r3, [pc, #112]	; (8007d68 <FATFS_LinkDriverEx+0x94>)
 8007cf6:	7a5b      	ldrb	r3, [r3, #9]
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	4b1a      	ldr	r3, [pc, #104]	; (8007d68 <FATFS_LinkDriverEx+0x94>)
 8007cfe:	2100      	movs	r1, #0
 8007d00:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007d02:	4b19      	ldr	r3, [pc, #100]	; (8007d68 <FATFS_LinkDriverEx+0x94>)
 8007d04:	7a5b      	ldrb	r3, [r3, #9]
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	4a17      	ldr	r2, [pc, #92]	; (8007d68 <FATFS_LinkDriverEx+0x94>)
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4413      	add	r3, r2
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007d12:	4b15      	ldr	r3, [pc, #84]	; (8007d68 <FATFS_LinkDriverEx+0x94>)
 8007d14:	7a5b      	ldrb	r3, [r3, #9]
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	461a      	mov	r2, r3
 8007d1a:	4b13      	ldr	r3, [pc, #76]	; (8007d68 <FATFS_LinkDriverEx+0x94>)
 8007d1c:	4413      	add	r3, r2
 8007d1e:	79fa      	ldrb	r2, [r7, #7]
 8007d20:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007d22:	4b11      	ldr	r3, [pc, #68]	; (8007d68 <FATFS_LinkDriverEx+0x94>)
 8007d24:	7a5b      	ldrb	r3, [r3, #9]
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	1c5a      	adds	r2, r3, #1
 8007d2a:	b2d1      	uxtb	r1, r2
 8007d2c:	4a0e      	ldr	r2, [pc, #56]	; (8007d68 <FATFS_LinkDriverEx+0x94>)
 8007d2e:	7251      	strb	r1, [r2, #9]
 8007d30:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007d32:	7dbb      	ldrb	r3, [r7, #22]
 8007d34:	3330      	adds	r3, #48	; 0x30
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	223a      	movs	r2, #58	; 0x3a
 8007d42:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	3302      	adds	r3, #2
 8007d48:	222f      	movs	r2, #47	; 0x2f
 8007d4a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	3303      	adds	r3, #3
 8007d50:	2200      	movs	r2, #0
 8007d52:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007d54:	2300      	movs	r3, #0
 8007d56:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	371c      	adds	r7, #28
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	200003d4 	.word	0x200003d4

08007d6c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007d76:	2200      	movs	r2, #0
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7ff ffaa 	bl	8007cd4 <FATFS_LinkDriverEx>
 8007d80:	4603      	mov	r3, r0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <atan2f>:
 8007d8a:	f000 b865 	b.w	8007e58 <__ieee754_atan2f>

08007d8e <powf>:
 8007d8e:	b508      	push	{r3, lr}
 8007d90:	ed2d 8b04 	vpush	{d8-d9}
 8007d94:	eeb0 8a60 	vmov.f32	s16, s1
 8007d98:	eeb0 9a40 	vmov.f32	s18, s0
 8007d9c:	f000 f8fc 	bl	8007f98 <__ieee754_powf>
 8007da0:	eeb4 8a48 	vcmp.f32	s16, s16
 8007da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007da8:	eef0 8a40 	vmov.f32	s17, s0
 8007dac:	d63e      	bvs.n	8007e2c <powf+0x9e>
 8007dae:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8007db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007db6:	d112      	bne.n	8007dde <powf+0x50>
 8007db8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dc0:	d039      	beq.n	8007e36 <powf+0xa8>
 8007dc2:	eeb0 0a48 	vmov.f32	s0, s16
 8007dc6:	f000 f839 	bl	8007e3c <finitef>
 8007dca:	b378      	cbz	r0, 8007e2c <powf+0x9e>
 8007dcc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dd4:	d52a      	bpl.n	8007e2c <powf+0x9e>
 8007dd6:	f001 fbbf 	bl	8009558 <__errno>
 8007dda:	2322      	movs	r3, #34	; 0x22
 8007ddc:	e014      	b.n	8007e08 <powf+0x7a>
 8007dde:	f000 f82d 	bl	8007e3c <finitef>
 8007de2:	b998      	cbnz	r0, 8007e0c <powf+0x7e>
 8007de4:	eeb0 0a49 	vmov.f32	s0, s18
 8007de8:	f000 f828 	bl	8007e3c <finitef>
 8007dec:	b170      	cbz	r0, 8007e0c <powf+0x7e>
 8007dee:	eeb0 0a48 	vmov.f32	s0, s16
 8007df2:	f000 f823 	bl	8007e3c <finitef>
 8007df6:	b148      	cbz	r0, 8007e0c <powf+0x7e>
 8007df8:	eef4 8a68 	vcmp.f32	s17, s17
 8007dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e00:	d7e9      	bvc.n	8007dd6 <powf+0x48>
 8007e02:	f001 fba9 	bl	8009558 <__errno>
 8007e06:	2321      	movs	r3, #33	; 0x21
 8007e08:	6003      	str	r3, [r0, #0]
 8007e0a:	e00f      	b.n	8007e2c <powf+0x9e>
 8007e0c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e14:	d10a      	bne.n	8007e2c <powf+0x9e>
 8007e16:	eeb0 0a49 	vmov.f32	s0, s18
 8007e1a:	f000 f80f 	bl	8007e3c <finitef>
 8007e1e:	b128      	cbz	r0, 8007e2c <powf+0x9e>
 8007e20:	eeb0 0a48 	vmov.f32	s0, s16
 8007e24:	f000 f80a 	bl	8007e3c <finitef>
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	d1d4      	bne.n	8007dd6 <powf+0x48>
 8007e2c:	eeb0 0a68 	vmov.f32	s0, s17
 8007e30:	ecbd 8b04 	vpop	{d8-d9}
 8007e34:	bd08      	pop	{r3, pc}
 8007e36:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8007e3a:	e7f7      	b.n	8007e2c <powf+0x9e>

08007e3c <finitef>:
 8007e3c:	b082      	sub	sp, #8
 8007e3e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007e42:	9801      	ldr	r0, [sp, #4]
 8007e44:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007e48:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007e4c:	bfac      	ite	ge
 8007e4e:	2000      	movge	r0, #0
 8007e50:	2001      	movlt	r0, #1
 8007e52:	b002      	add	sp, #8
 8007e54:	4770      	bx	lr
	...

08007e58 <__ieee754_atan2f>:
 8007e58:	ee10 2a90 	vmov	r2, s1
 8007e5c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007e60:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007e64:	b510      	push	{r4, lr}
 8007e66:	eef0 7a40 	vmov.f32	s15, s0
 8007e6a:	dc06      	bgt.n	8007e7a <__ieee754_atan2f+0x22>
 8007e6c:	ee10 0a10 	vmov	r0, s0
 8007e70:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8007e74:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007e78:	dd04      	ble.n	8007e84 <__ieee754_atan2f+0x2c>
 8007e7a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8007e82:	bd10      	pop	{r4, pc}
 8007e84:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8007e88:	d103      	bne.n	8007e92 <__ieee754_atan2f+0x3a>
 8007e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e8e:	f000 bb4d 	b.w	800852c <atanf>
 8007e92:	1794      	asrs	r4, r2, #30
 8007e94:	f004 0402 	and.w	r4, r4, #2
 8007e98:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007e9c:	b943      	cbnz	r3, 8007eb0 <__ieee754_atan2f+0x58>
 8007e9e:	2c02      	cmp	r4, #2
 8007ea0:	d05e      	beq.n	8007f60 <__ieee754_atan2f+0x108>
 8007ea2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007f74 <__ieee754_atan2f+0x11c>
 8007ea6:	2c03      	cmp	r4, #3
 8007ea8:	bf08      	it	eq
 8007eaa:	eef0 7a47 	vmoveq.f32	s15, s14
 8007eae:	e7e6      	b.n	8007e7e <__ieee754_atan2f+0x26>
 8007eb0:	b941      	cbnz	r1, 8007ec4 <__ieee754_atan2f+0x6c>
 8007eb2:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007f78 <__ieee754_atan2f+0x120>
 8007eb6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007f7c <__ieee754_atan2f+0x124>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	bfb8      	it	lt
 8007ebe:	eef0 7a47 	vmovlt.f32	s15, s14
 8007ec2:	e7dc      	b.n	8007e7e <__ieee754_atan2f+0x26>
 8007ec4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007ec8:	d110      	bne.n	8007eec <__ieee754_atan2f+0x94>
 8007eca:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007ece:	f104 34ff 	add.w	r4, r4, #4294967295
 8007ed2:	d107      	bne.n	8007ee4 <__ieee754_atan2f+0x8c>
 8007ed4:	2c02      	cmp	r4, #2
 8007ed6:	d846      	bhi.n	8007f66 <__ieee754_atan2f+0x10e>
 8007ed8:	4b29      	ldr	r3, [pc, #164]	; (8007f80 <__ieee754_atan2f+0x128>)
 8007eda:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007ede:	edd3 7a00 	vldr	s15, [r3]
 8007ee2:	e7cc      	b.n	8007e7e <__ieee754_atan2f+0x26>
 8007ee4:	2c02      	cmp	r4, #2
 8007ee6:	d841      	bhi.n	8007f6c <__ieee754_atan2f+0x114>
 8007ee8:	4b26      	ldr	r3, [pc, #152]	; (8007f84 <__ieee754_atan2f+0x12c>)
 8007eea:	e7f6      	b.n	8007eda <__ieee754_atan2f+0x82>
 8007eec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007ef0:	d0df      	beq.n	8007eb2 <__ieee754_atan2f+0x5a>
 8007ef2:	1a5b      	subs	r3, r3, r1
 8007ef4:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8007ef8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8007efc:	da1a      	bge.n	8007f34 <__ieee754_atan2f+0xdc>
 8007efe:	2a00      	cmp	r2, #0
 8007f00:	da01      	bge.n	8007f06 <__ieee754_atan2f+0xae>
 8007f02:	313c      	adds	r1, #60	; 0x3c
 8007f04:	db19      	blt.n	8007f3a <__ieee754_atan2f+0xe2>
 8007f06:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8007f0a:	f000 fbe3 	bl	80086d4 <fabsf>
 8007f0e:	f000 fb0d 	bl	800852c <atanf>
 8007f12:	eef0 7a40 	vmov.f32	s15, s0
 8007f16:	2c01      	cmp	r4, #1
 8007f18:	d012      	beq.n	8007f40 <__ieee754_atan2f+0xe8>
 8007f1a:	2c02      	cmp	r4, #2
 8007f1c:	d017      	beq.n	8007f4e <__ieee754_atan2f+0xf6>
 8007f1e:	2c00      	cmp	r4, #0
 8007f20:	d0ad      	beq.n	8007e7e <__ieee754_atan2f+0x26>
 8007f22:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007f88 <__ieee754_atan2f+0x130>
 8007f26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f2a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007f8c <__ieee754_atan2f+0x134>
 8007f2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f32:	e7a4      	b.n	8007e7e <__ieee754_atan2f+0x26>
 8007f34:	eddf 7a10 	vldr	s15, [pc, #64]	; 8007f78 <__ieee754_atan2f+0x120>
 8007f38:	e7ed      	b.n	8007f16 <__ieee754_atan2f+0xbe>
 8007f3a:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007f90 <__ieee754_atan2f+0x138>
 8007f3e:	e7ea      	b.n	8007f16 <__ieee754_atan2f+0xbe>
 8007f40:	ee17 3a90 	vmov	r3, s15
 8007f44:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007f48:	ee07 3a90 	vmov	s15, r3
 8007f4c:	e797      	b.n	8007e7e <__ieee754_atan2f+0x26>
 8007f4e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8007f88 <__ieee754_atan2f+0x130>
 8007f52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f56:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007f8c <__ieee754_atan2f+0x134>
 8007f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f5e:	e78e      	b.n	8007e7e <__ieee754_atan2f+0x26>
 8007f60:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8007f8c <__ieee754_atan2f+0x134>
 8007f64:	e78b      	b.n	8007e7e <__ieee754_atan2f+0x26>
 8007f66:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8007f94 <__ieee754_atan2f+0x13c>
 8007f6a:	e788      	b.n	8007e7e <__ieee754_atan2f+0x26>
 8007f6c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007f90 <__ieee754_atan2f+0x138>
 8007f70:	e785      	b.n	8007e7e <__ieee754_atan2f+0x26>
 8007f72:	bf00      	nop
 8007f74:	c0490fdb 	.word	0xc0490fdb
 8007f78:	3fc90fdb 	.word	0x3fc90fdb
 8007f7c:	bfc90fdb 	.word	0xbfc90fdb
 8007f80:	0800b2e4 	.word	0x0800b2e4
 8007f84:	0800b2f0 	.word	0x0800b2f0
 8007f88:	33bbbd2e 	.word	0x33bbbd2e
 8007f8c:	40490fdb 	.word	0x40490fdb
 8007f90:	00000000 	.word	0x00000000
 8007f94:	3f490fdb 	.word	0x3f490fdb

08007f98 <__ieee754_powf>:
 8007f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f9c:	ee10 4a90 	vmov	r4, s1
 8007fa0:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8007fa4:	ed2d 8b02 	vpush	{d8}
 8007fa8:	ee10 7a10 	vmov	r7, s0
 8007fac:	eeb0 8a40 	vmov.f32	s16, s0
 8007fb0:	eef0 8a60 	vmov.f32	s17, s1
 8007fb4:	d10c      	bne.n	8007fd0 <__ieee754_powf+0x38>
 8007fb6:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 8007fba:	007f      	lsls	r7, r7, #1
 8007fbc:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 8007fc0:	f240 8292 	bls.w	80084e8 <__ieee754_powf+0x550>
 8007fc4:	ee38 0a28 	vadd.f32	s0, s16, s17
 8007fc8:	ecbd 8b02 	vpop	{d8}
 8007fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fd0:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8007fd4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007fd8:	dcf4      	bgt.n	8007fc4 <__ieee754_powf+0x2c>
 8007fda:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8007fde:	dd08      	ble.n	8007ff2 <__ieee754_powf+0x5a>
 8007fe0:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007fe4:	d1ee      	bne.n	8007fc4 <__ieee754_powf+0x2c>
 8007fe6:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8007fea:	0064      	lsls	r4, r4, #1
 8007fec:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8007ff0:	e7e6      	b.n	8007fc0 <__ieee754_powf+0x28>
 8007ff2:	2f00      	cmp	r7, #0
 8007ff4:	da20      	bge.n	8008038 <__ieee754_powf+0xa0>
 8007ff6:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8007ffa:	da2d      	bge.n	8008058 <__ieee754_powf+0xc0>
 8007ffc:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8008000:	f2c0 827b 	blt.w	80084fa <__ieee754_powf+0x562>
 8008004:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8008008:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800800c:	fa48 f603 	asr.w	r6, r8, r3
 8008010:	fa06 f303 	lsl.w	r3, r6, r3
 8008014:	4543      	cmp	r3, r8
 8008016:	f040 8270 	bne.w	80084fa <__ieee754_powf+0x562>
 800801a:	f006 0601 	and.w	r6, r6, #1
 800801e:	f1c6 0602 	rsb	r6, r6, #2
 8008022:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8008026:	d11f      	bne.n	8008068 <__ieee754_powf+0xd0>
 8008028:	2c00      	cmp	r4, #0
 800802a:	f280 8263 	bge.w	80084f4 <__ieee754_powf+0x55c>
 800802e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008032:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8008036:	e7c7      	b.n	8007fc8 <__ieee754_powf+0x30>
 8008038:	2600      	movs	r6, #0
 800803a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800803e:	d1f0      	bne.n	8008022 <__ieee754_powf+0x8a>
 8008040:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8008044:	f000 8250 	beq.w	80084e8 <__ieee754_powf+0x550>
 8008048:	dd08      	ble.n	800805c <__ieee754_powf+0xc4>
 800804a:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8008350 <__ieee754_powf+0x3b8>
 800804e:	2c00      	cmp	r4, #0
 8008050:	bfa8      	it	ge
 8008052:	eeb0 0a68 	vmovge.f32	s0, s17
 8008056:	e7b7      	b.n	8007fc8 <__ieee754_powf+0x30>
 8008058:	2602      	movs	r6, #2
 800805a:	e7ee      	b.n	800803a <__ieee754_powf+0xa2>
 800805c:	2c00      	cmp	r4, #0
 800805e:	f280 8246 	bge.w	80084ee <__ieee754_powf+0x556>
 8008062:	eeb1 0a68 	vneg.f32	s0, s17
 8008066:	e7af      	b.n	8007fc8 <__ieee754_powf+0x30>
 8008068:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800806c:	d102      	bne.n	8008074 <__ieee754_powf+0xdc>
 800806e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8008072:	e7a9      	b.n	8007fc8 <__ieee754_powf+0x30>
 8008074:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8008078:	eeb0 0a48 	vmov.f32	s0, s16
 800807c:	d107      	bne.n	800808e <__ieee754_powf+0xf6>
 800807e:	2f00      	cmp	r7, #0
 8008080:	db05      	blt.n	800808e <__ieee754_powf+0xf6>
 8008082:	ecbd 8b02 	vpop	{d8}
 8008086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800808a:	f000 bbb3 	b.w	80087f4 <__ieee754_sqrtf>
 800808e:	f000 fb21 	bl	80086d4 <fabsf>
 8008092:	b125      	cbz	r5, 800809e <__ieee754_powf+0x106>
 8008094:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8008098:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800809c:	d115      	bne.n	80080ca <__ieee754_powf+0x132>
 800809e:	2c00      	cmp	r4, #0
 80080a0:	bfbc      	itt	lt
 80080a2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80080a6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80080aa:	2f00      	cmp	r7, #0
 80080ac:	da8c      	bge.n	8007fc8 <__ieee754_powf+0x30>
 80080ae:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 80080b2:	4335      	orrs	r5, r6
 80080b4:	d104      	bne.n	80080c0 <__ieee754_powf+0x128>
 80080b6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80080ba:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80080be:	e783      	b.n	8007fc8 <__ieee754_powf+0x30>
 80080c0:	2e01      	cmp	r6, #1
 80080c2:	d181      	bne.n	8007fc8 <__ieee754_powf+0x30>
 80080c4:	eeb1 0a40 	vneg.f32	s0, s0
 80080c8:	e77e      	b.n	8007fc8 <__ieee754_powf+0x30>
 80080ca:	0ff8      	lsrs	r0, r7, #31
 80080cc:	3801      	subs	r0, #1
 80080ce:	ea56 0300 	orrs.w	r3, r6, r0
 80080d2:	d104      	bne.n	80080de <__ieee754_powf+0x146>
 80080d4:	ee38 8a48 	vsub.f32	s16, s16, s16
 80080d8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80080dc:	e774      	b.n	8007fc8 <__ieee754_powf+0x30>
 80080de:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 80080e2:	dd73      	ble.n	80081cc <__ieee754_powf+0x234>
 80080e4:	4b9b      	ldr	r3, [pc, #620]	; (8008354 <__ieee754_powf+0x3bc>)
 80080e6:	429d      	cmp	r5, r3
 80080e8:	dc08      	bgt.n	80080fc <__ieee754_powf+0x164>
 80080ea:	2c00      	cmp	r4, #0
 80080ec:	da0b      	bge.n	8008106 <__ieee754_powf+0x16e>
 80080ee:	2000      	movs	r0, #0
 80080f0:	ecbd 8b02 	vpop	{d8}
 80080f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080f8:	f000 bb76 	b.w	80087e8 <__math_oflowf>
 80080fc:	4b96      	ldr	r3, [pc, #600]	; (8008358 <__ieee754_powf+0x3c0>)
 80080fe:	429d      	cmp	r5, r3
 8008100:	dd08      	ble.n	8008114 <__ieee754_powf+0x17c>
 8008102:	2c00      	cmp	r4, #0
 8008104:	dcf3      	bgt.n	80080ee <__ieee754_powf+0x156>
 8008106:	2000      	movs	r0, #0
 8008108:	ecbd 8b02 	vpop	{d8}
 800810c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008110:	f000 bb64 	b.w	80087dc <__math_uflowf>
 8008114:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008118:	ee30 0a67 	vsub.f32	s0, s0, s15
 800811c:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800835c <__ieee754_powf+0x3c4>
 8008120:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8008124:	eee0 6a67 	vfms.f32	s13, s0, s15
 8008128:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800812c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8008130:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008134:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008138:	eddf 7a89 	vldr	s15, [pc, #548]	; 8008360 <__ieee754_powf+0x3c8>
 800813c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8008140:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8008364 <__ieee754_powf+0x3cc>
 8008144:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008148:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8008368 <__ieee754_powf+0x3d0>
 800814c:	eef0 6a67 	vmov.f32	s13, s15
 8008150:	eee0 6a07 	vfma.f32	s13, s0, s14
 8008154:	ee16 3a90 	vmov	r3, s13
 8008158:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800815c:	f023 030f 	bic.w	r3, r3, #15
 8008160:	ee06 3a90 	vmov	s13, r3
 8008164:	eee0 6a47 	vfms.f32	s13, s0, s14
 8008168:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800816c:	3e01      	subs	r6, #1
 800816e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8008172:	4306      	orrs	r6, r0
 8008174:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008178:	f024 040f 	bic.w	r4, r4, #15
 800817c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8008180:	bf08      	it	eq
 8008182:	eeb0 8a47 	vmoveq.f32	s16, s14
 8008186:	ee07 4a10 	vmov	s14, r4
 800818a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800818e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8008192:	ee07 3a90 	vmov	s15, r3
 8008196:	eee7 0a27 	vfma.f32	s1, s14, s15
 800819a:	ee07 4a10 	vmov	s14, r4
 800819e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081a2:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80081a6:	ee17 1a10 	vmov	r1, s14
 80081aa:	2900      	cmp	r1, #0
 80081ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80081b0:	f340 817c 	ble.w	80084ac <__ieee754_powf+0x514>
 80081b4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80081b8:	f340 80f8 	ble.w	80083ac <__ieee754_powf+0x414>
 80081bc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80081c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081c4:	bf4c      	ite	mi
 80081c6:	2001      	movmi	r0, #1
 80081c8:	2000      	movpl	r0, #0
 80081ca:	e791      	b.n	80080f0 <__ieee754_powf+0x158>
 80081cc:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 80081d0:	bf01      	itttt	eq
 80081d2:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800836c <__ieee754_powf+0x3d4>
 80081d6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80081da:	f06f 0317 	mvneq.w	r3, #23
 80081de:	ee17 5a90 	vmoveq	r5, s15
 80081e2:	ea4f 52e5 	mov.w	r2, r5, asr #23
 80081e6:	bf18      	it	ne
 80081e8:	2300      	movne	r3, #0
 80081ea:	3a7f      	subs	r2, #127	; 0x7f
 80081ec:	441a      	add	r2, r3
 80081ee:	4b60      	ldr	r3, [pc, #384]	; (8008370 <__ieee754_powf+0x3d8>)
 80081f0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 80081f4:	429d      	cmp	r5, r3
 80081f6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 80081fa:	dd06      	ble.n	800820a <__ieee754_powf+0x272>
 80081fc:	4b5d      	ldr	r3, [pc, #372]	; (8008374 <__ieee754_powf+0x3dc>)
 80081fe:	429d      	cmp	r5, r3
 8008200:	f340 80a4 	ble.w	800834c <__ieee754_powf+0x3b4>
 8008204:	3201      	adds	r2, #1
 8008206:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800820a:	2500      	movs	r5, #0
 800820c:	4b5a      	ldr	r3, [pc, #360]	; (8008378 <__ieee754_powf+0x3e0>)
 800820e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8008212:	ee07 1a10 	vmov	s14, r1
 8008216:	edd3 5a00 	vldr	s11, [r3]
 800821a:	4b58      	ldr	r3, [pc, #352]	; (800837c <__ieee754_powf+0x3e4>)
 800821c:	ee75 7a87 	vadd.f32	s15, s11, s14
 8008220:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008224:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8008228:	1049      	asrs	r1, r1, #1
 800822a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800822e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8008232:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8008236:	ee37 6a65 	vsub.f32	s12, s14, s11
 800823a:	ee07 1a90 	vmov	s15, r1
 800823e:	ee26 5a24 	vmul.f32	s10, s12, s9
 8008242:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8008246:	ee15 7a10 	vmov	r7, s10
 800824a:	401f      	ands	r7, r3
 800824c:	ee06 7a90 	vmov	s13, r7
 8008250:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8008254:	ee37 7a65 	vsub.f32	s14, s14, s11
 8008258:	ee65 7a05 	vmul.f32	s15, s10, s10
 800825c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8008260:	eddf 5a47 	vldr	s11, [pc, #284]	; 8008380 <__ieee754_powf+0x3e8>
 8008264:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8008384 <__ieee754_powf+0x3ec>
 8008268:	eee7 5a87 	vfma.f32	s11, s15, s14
 800826c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8008388 <__ieee754_powf+0x3f0>
 8008270:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8008274:	eddf 5a39 	vldr	s11, [pc, #228]	; 800835c <__ieee754_powf+0x3c4>
 8008278:	eee7 5a27 	vfma.f32	s11, s14, s15
 800827c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800838c <__ieee754_powf+0x3f4>
 8008280:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8008284:	eddf 5a42 	vldr	s11, [pc, #264]	; 8008390 <__ieee754_powf+0x3f8>
 8008288:	ee26 6a24 	vmul.f32	s12, s12, s9
 800828c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8008290:	ee35 7a26 	vadd.f32	s14, s10, s13
 8008294:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8008298:	ee27 7a06 	vmul.f32	s14, s14, s12
 800829c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80082a0:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80082a4:	eef0 5a67 	vmov.f32	s11, s15
 80082a8:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80082ac:	ee75 5a87 	vadd.f32	s11, s11, s14
 80082b0:	ee15 1a90 	vmov	r1, s11
 80082b4:	4019      	ands	r1, r3
 80082b6:	ee05 1a90 	vmov	s11, r1
 80082ba:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80082be:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80082c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082c6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80082ca:	eee6 7a25 	vfma.f32	s15, s12, s11
 80082ce:	eeb0 6a67 	vmov.f32	s12, s15
 80082d2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80082d6:	ee16 1a10 	vmov	r1, s12
 80082da:	4019      	ands	r1, r3
 80082dc:	ee07 1a10 	vmov	s14, r1
 80082e0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80082e4:	ee06 1a10 	vmov	s12, r1
 80082e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80082ec:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8008394 <__ieee754_powf+0x3fc>
 80082f0:	4929      	ldr	r1, [pc, #164]	; (8008398 <__ieee754_powf+0x400>)
 80082f2:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800839c <__ieee754_powf+0x404>
 80082f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80082fa:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80083a0 <__ieee754_powf+0x408>
 80082fe:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008302:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8008306:	ed91 7a00 	vldr	s14, [r1]
 800830a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800830e:	ee07 2a10 	vmov	s14, r2
 8008312:	eef0 6a67 	vmov.f32	s13, s15
 8008316:	4a23      	ldr	r2, [pc, #140]	; (80083a4 <__ieee754_powf+0x40c>)
 8008318:	eee6 6a25 	vfma.f32	s13, s12, s11
 800831c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8008320:	ed92 5a00 	vldr	s10, [r2]
 8008324:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008328:	ee76 6a85 	vadd.f32	s13, s13, s10
 800832c:	ee76 6a87 	vadd.f32	s13, s13, s14
 8008330:	ee16 2a90 	vmov	r2, s13
 8008334:	4013      	ands	r3, r2
 8008336:	ee06 3a90 	vmov	s13, r3
 800833a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800833e:	ee37 7a45 	vsub.f32	s14, s14, s10
 8008342:	eea6 7a65 	vfms.f32	s14, s12, s11
 8008346:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800834a:	e70f      	b.n	800816c <__ieee754_powf+0x1d4>
 800834c:	2501      	movs	r5, #1
 800834e:	e75d      	b.n	800820c <__ieee754_powf+0x274>
 8008350:	00000000 	.word	0x00000000
 8008354:	3f7ffff3 	.word	0x3f7ffff3
 8008358:	3f800007 	.word	0x3f800007
 800835c:	3eaaaaab 	.word	0x3eaaaaab
 8008360:	3fb8aa3b 	.word	0x3fb8aa3b
 8008364:	36eca570 	.word	0x36eca570
 8008368:	3fb8aa00 	.word	0x3fb8aa00
 800836c:	4b800000 	.word	0x4b800000
 8008370:	001cc471 	.word	0x001cc471
 8008374:	005db3d6 	.word	0x005db3d6
 8008378:	0800b2fc 	.word	0x0800b2fc
 800837c:	fffff000 	.word	0xfffff000
 8008380:	3e6c3255 	.word	0x3e6c3255
 8008384:	3e53f142 	.word	0x3e53f142
 8008388:	3e8ba305 	.word	0x3e8ba305
 800838c:	3edb6db7 	.word	0x3edb6db7
 8008390:	3f19999a 	.word	0x3f19999a
 8008394:	3f76384f 	.word	0x3f76384f
 8008398:	0800b30c 	.word	0x0800b30c
 800839c:	3f763800 	.word	0x3f763800
 80083a0:	369dc3a0 	.word	0x369dc3a0
 80083a4:	0800b304 	.word	0x0800b304
 80083a8:	3338aa3c 	.word	0x3338aa3c
 80083ac:	f040 8093 	bne.w	80084d6 <__ieee754_powf+0x53e>
 80083b0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80083a8 <__ieee754_powf+0x410>
 80083b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80083b8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80083bc:	eef4 6ac7 	vcmpe.f32	s13, s14
 80083c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083c4:	f73f aefa 	bgt.w	80081bc <__ieee754_powf+0x224>
 80083c8:	15db      	asrs	r3, r3, #23
 80083ca:	3b7e      	subs	r3, #126	; 0x7e
 80083cc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80083d0:	4118      	asrs	r0, r3
 80083d2:	4408      	add	r0, r1
 80083d4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80083d8:	4a49      	ldr	r2, [pc, #292]	; (8008500 <__ieee754_powf+0x568>)
 80083da:	3b7f      	subs	r3, #127	; 0x7f
 80083dc:	411a      	asrs	r2, r3
 80083de:	4002      	ands	r2, r0
 80083e0:	ee07 2a10 	vmov	s14, r2
 80083e4:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80083e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80083ec:	f1c3 0317 	rsb	r3, r3, #23
 80083f0:	4118      	asrs	r0, r3
 80083f2:	2900      	cmp	r1, #0
 80083f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80083f8:	bfb8      	it	lt
 80083fa:	4240      	neglt	r0, r0
 80083fc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8008400:	eddf 6a40 	vldr	s13, [pc, #256]	; 8008504 <__ieee754_powf+0x56c>
 8008404:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8008508 <__ieee754_powf+0x570>
 8008408:	ee17 3a10 	vmov	r3, s14
 800840c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008410:	f023 030f 	bic.w	r3, r3, #15
 8008414:	ee07 3a10 	vmov	s14, r3
 8008418:	ee77 7a67 	vsub.f32	s15, s14, s15
 800841c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008420:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8008424:	eddf 7a39 	vldr	s15, [pc, #228]	; 800850c <__ieee754_powf+0x574>
 8008428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800842c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8008430:	eef0 6a67 	vmov.f32	s13, s15
 8008434:	eee7 6a06 	vfma.f32	s13, s14, s12
 8008438:	eef0 5a66 	vmov.f32	s11, s13
 800843c:	eee7 5a46 	vfms.f32	s11, s14, s12
 8008440:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8008444:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008448:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8008510 <__ieee754_powf+0x578>
 800844c:	eddf 5a31 	vldr	s11, [pc, #196]	; 8008514 <__ieee754_powf+0x57c>
 8008450:	eea7 6a25 	vfma.f32	s12, s14, s11
 8008454:	eddf 5a30 	vldr	s11, [pc, #192]	; 8008518 <__ieee754_powf+0x580>
 8008458:	eee6 5a07 	vfma.f32	s11, s12, s14
 800845c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800851c <__ieee754_powf+0x584>
 8008460:	eea5 6a87 	vfma.f32	s12, s11, s14
 8008464:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008520 <__ieee754_powf+0x588>
 8008468:	eee6 5a07 	vfma.f32	s11, s12, s14
 800846c:	eeb0 6a66 	vmov.f32	s12, s13
 8008470:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8008474:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008478:	ee66 5a86 	vmul.f32	s11, s13, s12
 800847c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8008480:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8008484:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8008488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800848c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008490:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008494:	ee10 3a10 	vmov	r3, s0
 8008498:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800849c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084a0:	da1f      	bge.n	80084e2 <__ieee754_powf+0x54a>
 80084a2:	f000 f91f 	bl	80086e4 <scalbnf>
 80084a6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80084aa:	e58d      	b.n	8007fc8 <__ieee754_powf+0x30>
 80084ac:	4a1d      	ldr	r2, [pc, #116]	; (8008524 <__ieee754_powf+0x58c>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	dd07      	ble.n	80084c2 <__ieee754_powf+0x52a>
 80084b2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80084b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ba:	bf4c      	ite	mi
 80084bc:	2001      	movmi	r0, #1
 80084be:	2000      	movpl	r0, #0
 80084c0:	e622      	b.n	8008108 <__ieee754_powf+0x170>
 80084c2:	d108      	bne.n	80084d6 <__ieee754_powf+0x53e>
 80084c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80084c8:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80084cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084d0:	f6ff af7a 	blt.w	80083c8 <__ieee754_powf+0x430>
 80084d4:	e7ed      	b.n	80084b2 <__ieee754_powf+0x51a>
 80084d6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80084da:	f73f af75 	bgt.w	80083c8 <__ieee754_powf+0x430>
 80084de:	2000      	movs	r0, #0
 80084e0:	e78c      	b.n	80083fc <__ieee754_powf+0x464>
 80084e2:	ee00 3a10 	vmov	s0, r3
 80084e6:	e7de      	b.n	80084a6 <__ieee754_powf+0x50e>
 80084e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80084ec:	e56c      	b.n	8007fc8 <__ieee754_powf+0x30>
 80084ee:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008528 <__ieee754_powf+0x590>
 80084f2:	e569      	b.n	8007fc8 <__ieee754_powf+0x30>
 80084f4:	eeb0 0a48 	vmov.f32	s0, s16
 80084f8:	e566      	b.n	8007fc8 <__ieee754_powf+0x30>
 80084fa:	2600      	movs	r6, #0
 80084fc:	e591      	b.n	8008022 <__ieee754_powf+0x8a>
 80084fe:	bf00      	nop
 8008500:	ff800000 	.word	0xff800000
 8008504:	3f317218 	.word	0x3f317218
 8008508:	3f317200 	.word	0x3f317200
 800850c:	35bfbe8c 	.word	0x35bfbe8c
 8008510:	b5ddea0e 	.word	0xb5ddea0e
 8008514:	3331bb4c 	.word	0x3331bb4c
 8008518:	388ab355 	.word	0x388ab355
 800851c:	bb360b61 	.word	0xbb360b61
 8008520:	3e2aaaab 	.word	0x3e2aaaab
 8008524:	43160000 	.word	0x43160000
 8008528:	00000000 	.word	0x00000000

0800852c <atanf>:
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	ee10 5a10 	vmov	r5, s0
 8008532:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008536:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800853a:	eef0 7a40 	vmov.f32	s15, s0
 800853e:	db10      	blt.n	8008562 <atanf+0x36>
 8008540:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008544:	dd04      	ble.n	8008550 <atanf+0x24>
 8008546:	ee70 7a00 	vadd.f32	s15, s0, s0
 800854a:	eeb0 0a67 	vmov.f32	s0, s15
 800854e:	bd38      	pop	{r3, r4, r5, pc}
 8008550:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8008688 <atanf+0x15c>
 8008554:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800868c <atanf+0x160>
 8008558:	2d00      	cmp	r5, #0
 800855a:	bfd8      	it	le
 800855c:	eef0 7a47 	vmovle.f32	s15, s14
 8008560:	e7f3      	b.n	800854a <atanf+0x1e>
 8008562:	4b4b      	ldr	r3, [pc, #300]	; (8008690 <atanf+0x164>)
 8008564:	429c      	cmp	r4, r3
 8008566:	dc10      	bgt.n	800858a <atanf+0x5e>
 8008568:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800856c:	da0a      	bge.n	8008584 <atanf+0x58>
 800856e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8008694 <atanf+0x168>
 8008572:	ee30 7a07 	vadd.f32	s14, s0, s14
 8008576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800857a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800857e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008582:	dce2      	bgt.n	800854a <atanf+0x1e>
 8008584:	f04f 33ff 	mov.w	r3, #4294967295
 8008588:	e013      	b.n	80085b2 <atanf+0x86>
 800858a:	f000 f8a3 	bl	80086d4 <fabsf>
 800858e:	4b42      	ldr	r3, [pc, #264]	; (8008698 <atanf+0x16c>)
 8008590:	429c      	cmp	r4, r3
 8008592:	dc4f      	bgt.n	8008634 <atanf+0x108>
 8008594:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8008598:	429c      	cmp	r4, r3
 800859a:	dc41      	bgt.n	8008620 <atanf+0xf4>
 800859c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80085a0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80085a4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80085a8:	2300      	movs	r3, #0
 80085aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80085ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80085b8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800869c <atanf+0x170>
 80085bc:	eddf 5a38 	vldr	s11, [pc, #224]	; 80086a0 <atanf+0x174>
 80085c0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80086a4 <atanf+0x178>
 80085c4:	ee66 6a06 	vmul.f32	s13, s12, s12
 80085c8:	eee6 5a87 	vfma.f32	s11, s13, s14
 80085cc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80086a8 <atanf+0x17c>
 80085d0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80085d4:	eddf 5a35 	vldr	s11, [pc, #212]	; 80086ac <atanf+0x180>
 80085d8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80085dc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80086b0 <atanf+0x184>
 80085e0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80085e4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80086b4 <atanf+0x188>
 80085e8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80085ec:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80086b8 <atanf+0x18c>
 80085f0:	eea6 5a87 	vfma.f32	s10, s13, s14
 80085f4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80086bc <atanf+0x190>
 80085f8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80085fc:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80086c0 <atanf+0x194>
 8008600:	eea7 5a26 	vfma.f32	s10, s14, s13
 8008604:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80086c4 <atanf+0x198>
 8008608:	eea5 7a26 	vfma.f32	s14, s10, s13
 800860c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008610:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008614:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008618:	d121      	bne.n	800865e <atanf+0x132>
 800861a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800861e:	e794      	b.n	800854a <atanf+0x1e>
 8008620:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008624:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008628:	ee30 0a27 	vadd.f32	s0, s0, s15
 800862c:	2301      	movs	r3, #1
 800862e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008632:	e7be      	b.n	80085b2 <atanf+0x86>
 8008634:	4b24      	ldr	r3, [pc, #144]	; (80086c8 <atanf+0x19c>)
 8008636:	429c      	cmp	r4, r3
 8008638:	dc0b      	bgt.n	8008652 <atanf+0x126>
 800863a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800863e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008642:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008646:	2302      	movs	r3, #2
 8008648:	ee70 6a67 	vsub.f32	s13, s0, s15
 800864c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008650:	e7af      	b.n	80085b2 <atanf+0x86>
 8008652:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008656:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800865a:	2303      	movs	r3, #3
 800865c:	e7a9      	b.n	80085b2 <atanf+0x86>
 800865e:	4a1b      	ldr	r2, [pc, #108]	; (80086cc <atanf+0x1a0>)
 8008660:	491b      	ldr	r1, [pc, #108]	; (80086d0 <atanf+0x1a4>)
 8008662:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008666:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800866a:	edd3 6a00 	vldr	s13, [r3]
 800866e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008672:	2d00      	cmp	r5, #0
 8008674:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008678:	edd2 7a00 	vldr	s15, [r2]
 800867c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008680:	bfb8      	it	lt
 8008682:	eef1 7a67 	vneglt.f32	s15, s15
 8008686:	e760      	b.n	800854a <atanf+0x1e>
 8008688:	3fc90fdb 	.word	0x3fc90fdb
 800868c:	bfc90fdb 	.word	0xbfc90fdb
 8008690:	3edfffff 	.word	0x3edfffff
 8008694:	7149f2ca 	.word	0x7149f2ca
 8008698:	3f97ffff 	.word	0x3f97ffff
 800869c:	3c8569d7 	.word	0x3c8569d7
 80086a0:	3d4bda59 	.word	0x3d4bda59
 80086a4:	bd6ef16b 	.word	0xbd6ef16b
 80086a8:	3d886b35 	.word	0x3d886b35
 80086ac:	3dba2e6e 	.word	0x3dba2e6e
 80086b0:	3e124925 	.word	0x3e124925
 80086b4:	3eaaaaab 	.word	0x3eaaaaab
 80086b8:	bd15a221 	.word	0xbd15a221
 80086bc:	bd9d8795 	.word	0xbd9d8795
 80086c0:	bde38e38 	.word	0xbde38e38
 80086c4:	be4ccccd 	.word	0xbe4ccccd
 80086c8:	401bffff 	.word	0x401bffff
 80086cc:	0800b314 	.word	0x0800b314
 80086d0:	0800b324 	.word	0x0800b324

080086d4 <fabsf>:
 80086d4:	ee10 3a10 	vmov	r3, s0
 80086d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086dc:	ee00 3a10 	vmov	s0, r3
 80086e0:	4770      	bx	lr
	...

080086e4 <scalbnf>:
 80086e4:	ee10 3a10 	vmov	r3, s0
 80086e8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80086ec:	d02b      	beq.n	8008746 <scalbnf+0x62>
 80086ee:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80086f2:	d302      	bcc.n	80086fa <scalbnf+0x16>
 80086f4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80086f8:	4770      	bx	lr
 80086fa:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80086fe:	d123      	bne.n	8008748 <scalbnf+0x64>
 8008700:	4b24      	ldr	r3, [pc, #144]	; (8008794 <scalbnf+0xb0>)
 8008702:	eddf 7a25 	vldr	s15, [pc, #148]	; 8008798 <scalbnf+0xb4>
 8008706:	4298      	cmp	r0, r3
 8008708:	ee20 0a27 	vmul.f32	s0, s0, s15
 800870c:	db17      	blt.n	800873e <scalbnf+0x5a>
 800870e:	ee10 3a10 	vmov	r3, s0
 8008712:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008716:	3a19      	subs	r2, #25
 8008718:	f24c 3150 	movw	r1, #50000	; 0xc350
 800871c:	4288      	cmp	r0, r1
 800871e:	dd15      	ble.n	800874c <scalbnf+0x68>
 8008720:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800879c <scalbnf+0xb8>
 8008724:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80087a0 <scalbnf+0xbc>
 8008728:	ee10 3a10 	vmov	r3, s0
 800872c:	eeb0 7a67 	vmov.f32	s14, s15
 8008730:	2b00      	cmp	r3, #0
 8008732:	bfb8      	it	lt
 8008734:	eef0 7a66 	vmovlt.f32	s15, s13
 8008738:	ee27 0a87 	vmul.f32	s0, s15, s14
 800873c:	4770      	bx	lr
 800873e:	eddf 7a19 	vldr	s15, [pc, #100]	; 80087a4 <scalbnf+0xc0>
 8008742:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008746:	4770      	bx	lr
 8008748:	0dd2      	lsrs	r2, r2, #23
 800874a:	e7e5      	b.n	8008718 <scalbnf+0x34>
 800874c:	4410      	add	r0, r2
 800874e:	28fe      	cmp	r0, #254	; 0xfe
 8008750:	dce6      	bgt.n	8008720 <scalbnf+0x3c>
 8008752:	2800      	cmp	r0, #0
 8008754:	dd06      	ble.n	8008764 <scalbnf+0x80>
 8008756:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800875a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800875e:	ee00 3a10 	vmov	s0, r3
 8008762:	4770      	bx	lr
 8008764:	f110 0f16 	cmn.w	r0, #22
 8008768:	da09      	bge.n	800877e <scalbnf+0x9a>
 800876a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80087a4 <scalbnf+0xc0>
 800876e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80087a8 <scalbnf+0xc4>
 8008772:	ee10 3a10 	vmov	r3, s0
 8008776:	eeb0 7a67 	vmov.f32	s14, s15
 800877a:	2b00      	cmp	r3, #0
 800877c:	e7d9      	b.n	8008732 <scalbnf+0x4e>
 800877e:	3019      	adds	r0, #25
 8008780:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008784:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008788:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80087ac <scalbnf+0xc8>
 800878c:	ee07 3a90 	vmov	s15, r3
 8008790:	e7d7      	b.n	8008742 <scalbnf+0x5e>
 8008792:	bf00      	nop
 8008794:	ffff3cb0 	.word	0xffff3cb0
 8008798:	4c000000 	.word	0x4c000000
 800879c:	7149f2ca 	.word	0x7149f2ca
 80087a0:	f149f2ca 	.word	0xf149f2ca
 80087a4:	0da24260 	.word	0x0da24260
 80087a8:	8da24260 	.word	0x8da24260
 80087ac:	33000000 	.word	0x33000000

080087b0 <with_errnof>:
 80087b0:	b513      	push	{r0, r1, r4, lr}
 80087b2:	4604      	mov	r4, r0
 80087b4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80087b8:	f000 fece 	bl	8009558 <__errno>
 80087bc:	ed9d 0a01 	vldr	s0, [sp, #4]
 80087c0:	6004      	str	r4, [r0, #0]
 80087c2:	b002      	add	sp, #8
 80087c4:	bd10      	pop	{r4, pc}

080087c6 <xflowf>:
 80087c6:	b130      	cbz	r0, 80087d6 <xflowf+0x10>
 80087c8:	eef1 7a40 	vneg.f32	s15, s0
 80087cc:	ee27 0a80 	vmul.f32	s0, s15, s0
 80087d0:	2022      	movs	r0, #34	; 0x22
 80087d2:	f7ff bfed 	b.w	80087b0 <with_errnof>
 80087d6:	eef0 7a40 	vmov.f32	s15, s0
 80087da:	e7f7      	b.n	80087cc <xflowf+0x6>

080087dc <__math_uflowf>:
 80087dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80087e4 <__math_uflowf+0x8>
 80087e0:	f7ff bff1 	b.w	80087c6 <xflowf>
 80087e4:	10000000 	.word	0x10000000

080087e8 <__math_oflowf>:
 80087e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80087f0 <__math_oflowf+0x8>
 80087ec:	f7ff bfeb 	b.w	80087c6 <xflowf>
 80087f0:	70000000 	.word	0x70000000

080087f4 <__ieee754_sqrtf>:
 80087f4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80087f8:	4770      	bx	lr

080087fa <__cvt>:
 80087fa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087fe:	ec55 4b10 	vmov	r4, r5, d0
 8008802:	2d00      	cmp	r5, #0
 8008804:	460e      	mov	r6, r1
 8008806:	4619      	mov	r1, r3
 8008808:	462b      	mov	r3, r5
 800880a:	bfbb      	ittet	lt
 800880c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008810:	461d      	movlt	r5, r3
 8008812:	2300      	movge	r3, #0
 8008814:	232d      	movlt	r3, #45	; 0x2d
 8008816:	700b      	strb	r3, [r1, #0]
 8008818:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800881a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800881e:	4691      	mov	r9, r2
 8008820:	f023 0820 	bic.w	r8, r3, #32
 8008824:	bfbc      	itt	lt
 8008826:	4622      	movlt	r2, r4
 8008828:	4614      	movlt	r4, r2
 800882a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800882e:	d005      	beq.n	800883c <__cvt+0x42>
 8008830:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008834:	d100      	bne.n	8008838 <__cvt+0x3e>
 8008836:	3601      	adds	r6, #1
 8008838:	2102      	movs	r1, #2
 800883a:	e000      	b.n	800883e <__cvt+0x44>
 800883c:	2103      	movs	r1, #3
 800883e:	ab03      	add	r3, sp, #12
 8008840:	9301      	str	r3, [sp, #4]
 8008842:	ab02      	add	r3, sp, #8
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	ec45 4b10 	vmov	d0, r4, r5
 800884a:	4653      	mov	r3, sl
 800884c:	4632      	mov	r2, r6
 800884e:	f000 ff37 	bl	80096c0 <_dtoa_r>
 8008852:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008856:	4607      	mov	r7, r0
 8008858:	d102      	bne.n	8008860 <__cvt+0x66>
 800885a:	f019 0f01 	tst.w	r9, #1
 800885e:	d022      	beq.n	80088a6 <__cvt+0xac>
 8008860:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008864:	eb07 0906 	add.w	r9, r7, r6
 8008868:	d110      	bne.n	800888c <__cvt+0x92>
 800886a:	783b      	ldrb	r3, [r7, #0]
 800886c:	2b30      	cmp	r3, #48	; 0x30
 800886e:	d10a      	bne.n	8008886 <__cvt+0x8c>
 8008870:	2200      	movs	r2, #0
 8008872:	2300      	movs	r3, #0
 8008874:	4620      	mov	r0, r4
 8008876:	4629      	mov	r1, r5
 8008878:	f7f8 f926 	bl	8000ac8 <__aeabi_dcmpeq>
 800887c:	b918      	cbnz	r0, 8008886 <__cvt+0x8c>
 800887e:	f1c6 0601 	rsb	r6, r6, #1
 8008882:	f8ca 6000 	str.w	r6, [sl]
 8008886:	f8da 3000 	ldr.w	r3, [sl]
 800888a:	4499      	add	r9, r3
 800888c:	2200      	movs	r2, #0
 800888e:	2300      	movs	r3, #0
 8008890:	4620      	mov	r0, r4
 8008892:	4629      	mov	r1, r5
 8008894:	f7f8 f918 	bl	8000ac8 <__aeabi_dcmpeq>
 8008898:	b108      	cbz	r0, 800889e <__cvt+0xa4>
 800889a:	f8cd 900c 	str.w	r9, [sp, #12]
 800889e:	2230      	movs	r2, #48	; 0x30
 80088a0:	9b03      	ldr	r3, [sp, #12]
 80088a2:	454b      	cmp	r3, r9
 80088a4:	d307      	bcc.n	80088b6 <__cvt+0xbc>
 80088a6:	9b03      	ldr	r3, [sp, #12]
 80088a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088aa:	1bdb      	subs	r3, r3, r7
 80088ac:	4638      	mov	r0, r7
 80088ae:	6013      	str	r3, [r2, #0]
 80088b0:	b004      	add	sp, #16
 80088b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088b6:	1c59      	adds	r1, r3, #1
 80088b8:	9103      	str	r1, [sp, #12]
 80088ba:	701a      	strb	r2, [r3, #0]
 80088bc:	e7f0      	b.n	80088a0 <__cvt+0xa6>

080088be <__exponent>:
 80088be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088c0:	4603      	mov	r3, r0
 80088c2:	2900      	cmp	r1, #0
 80088c4:	bfb8      	it	lt
 80088c6:	4249      	neglt	r1, r1
 80088c8:	f803 2b02 	strb.w	r2, [r3], #2
 80088cc:	bfb4      	ite	lt
 80088ce:	222d      	movlt	r2, #45	; 0x2d
 80088d0:	222b      	movge	r2, #43	; 0x2b
 80088d2:	2909      	cmp	r1, #9
 80088d4:	7042      	strb	r2, [r0, #1]
 80088d6:	dd2a      	ble.n	800892e <__exponent+0x70>
 80088d8:	f10d 0207 	add.w	r2, sp, #7
 80088dc:	4617      	mov	r7, r2
 80088de:	260a      	movs	r6, #10
 80088e0:	4694      	mov	ip, r2
 80088e2:	fb91 f5f6 	sdiv	r5, r1, r6
 80088e6:	fb06 1415 	mls	r4, r6, r5, r1
 80088ea:	3430      	adds	r4, #48	; 0x30
 80088ec:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80088f0:	460c      	mov	r4, r1
 80088f2:	2c63      	cmp	r4, #99	; 0x63
 80088f4:	f102 32ff 	add.w	r2, r2, #4294967295
 80088f8:	4629      	mov	r1, r5
 80088fa:	dcf1      	bgt.n	80088e0 <__exponent+0x22>
 80088fc:	3130      	adds	r1, #48	; 0x30
 80088fe:	f1ac 0402 	sub.w	r4, ip, #2
 8008902:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008906:	1c41      	adds	r1, r0, #1
 8008908:	4622      	mov	r2, r4
 800890a:	42ba      	cmp	r2, r7
 800890c:	d30a      	bcc.n	8008924 <__exponent+0x66>
 800890e:	f10d 0209 	add.w	r2, sp, #9
 8008912:	eba2 020c 	sub.w	r2, r2, ip
 8008916:	42bc      	cmp	r4, r7
 8008918:	bf88      	it	hi
 800891a:	2200      	movhi	r2, #0
 800891c:	4413      	add	r3, r2
 800891e:	1a18      	subs	r0, r3, r0
 8008920:	b003      	add	sp, #12
 8008922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008924:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008928:	f801 5f01 	strb.w	r5, [r1, #1]!
 800892c:	e7ed      	b.n	800890a <__exponent+0x4c>
 800892e:	2330      	movs	r3, #48	; 0x30
 8008930:	3130      	adds	r1, #48	; 0x30
 8008932:	7083      	strb	r3, [r0, #2]
 8008934:	70c1      	strb	r1, [r0, #3]
 8008936:	1d03      	adds	r3, r0, #4
 8008938:	e7f1      	b.n	800891e <__exponent+0x60>
	...

0800893c <_printf_float>:
 800893c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008940:	ed2d 8b02 	vpush	{d8}
 8008944:	b08d      	sub	sp, #52	; 0x34
 8008946:	460c      	mov	r4, r1
 8008948:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800894c:	4616      	mov	r6, r2
 800894e:	461f      	mov	r7, r3
 8008950:	4605      	mov	r5, r0
 8008952:	f000 fdb7 	bl	80094c4 <_localeconv_r>
 8008956:	f8d0 a000 	ldr.w	sl, [r0]
 800895a:	4650      	mov	r0, sl
 800895c:	f7f7 fc88 	bl	8000270 <strlen>
 8008960:	2300      	movs	r3, #0
 8008962:	930a      	str	r3, [sp, #40]	; 0x28
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	9305      	str	r3, [sp, #20]
 8008968:	f8d8 3000 	ldr.w	r3, [r8]
 800896c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008970:	3307      	adds	r3, #7
 8008972:	f023 0307 	bic.w	r3, r3, #7
 8008976:	f103 0208 	add.w	r2, r3, #8
 800897a:	f8c8 2000 	str.w	r2, [r8]
 800897e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008982:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008986:	9307      	str	r3, [sp, #28]
 8008988:	f8cd 8018 	str.w	r8, [sp, #24]
 800898c:	ee08 0a10 	vmov	s16, r0
 8008990:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008994:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008998:	4b9e      	ldr	r3, [pc, #632]	; (8008c14 <_printf_float+0x2d8>)
 800899a:	f04f 32ff 	mov.w	r2, #4294967295
 800899e:	f7f8 f8c5 	bl	8000b2c <__aeabi_dcmpun>
 80089a2:	bb88      	cbnz	r0, 8008a08 <_printf_float+0xcc>
 80089a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089a8:	4b9a      	ldr	r3, [pc, #616]	; (8008c14 <_printf_float+0x2d8>)
 80089aa:	f04f 32ff 	mov.w	r2, #4294967295
 80089ae:	f7f8 f89f 	bl	8000af0 <__aeabi_dcmple>
 80089b2:	bb48      	cbnz	r0, 8008a08 <_printf_float+0xcc>
 80089b4:	2200      	movs	r2, #0
 80089b6:	2300      	movs	r3, #0
 80089b8:	4640      	mov	r0, r8
 80089ba:	4649      	mov	r1, r9
 80089bc:	f7f8 f88e 	bl	8000adc <__aeabi_dcmplt>
 80089c0:	b110      	cbz	r0, 80089c8 <_printf_float+0x8c>
 80089c2:	232d      	movs	r3, #45	; 0x2d
 80089c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089c8:	4a93      	ldr	r2, [pc, #588]	; (8008c18 <_printf_float+0x2dc>)
 80089ca:	4b94      	ldr	r3, [pc, #592]	; (8008c1c <_printf_float+0x2e0>)
 80089cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80089d0:	bf94      	ite	ls
 80089d2:	4690      	movls	r8, r2
 80089d4:	4698      	movhi	r8, r3
 80089d6:	2303      	movs	r3, #3
 80089d8:	6123      	str	r3, [r4, #16]
 80089da:	9b05      	ldr	r3, [sp, #20]
 80089dc:	f023 0304 	bic.w	r3, r3, #4
 80089e0:	6023      	str	r3, [r4, #0]
 80089e2:	f04f 0900 	mov.w	r9, #0
 80089e6:	9700      	str	r7, [sp, #0]
 80089e8:	4633      	mov	r3, r6
 80089ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80089ec:	4621      	mov	r1, r4
 80089ee:	4628      	mov	r0, r5
 80089f0:	f000 f9da 	bl	8008da8 <_printf_common>
 80089f4:	3001      	adds	r0, #1
 80089f6:	f040 8090 	bne.w	8008b1a <_printf_float+0x1de>
 80089fa:	f04f 30ff 	mov.w	r0, #4294967295
 80089fe:	b00d      	add	sp, #52	; 0x34
 8008a00:	ecbd 8b02 	vpop	{d8}
 8008a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a08:	4642      	mov	r2, r8
 8008a0a:	464b      	mov	r3, r9
 8008a0c:	4640      	mov	r0, r8
 8008a0e:	4649      	mov	r1, r9
 8008a10:	f7f8 f88c 	bl	8000b2c <__aeabi_dcmpun>
 8008a14:	b140      	cbz	r0, 8008a28 <_printf_float+0xec>
 8008a16:	464b      	mov	r3, r9
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	bfbc      	itt	lt
 8008a1c:	232d      	movlt	r3, #45	; 0x2d
 8008a1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008a22:	4a7f      	ldr	r2, [pc, #508]	; (8008c20 <_printf_float+0x2e4>)
 8008a24:	4b7f      	ldr	r3, [pc, #508]	; (8008c24 <_printf_float+0x2e8>)
 8008a26:	e7d1      	b.n	80089cc <_printf_float+0x90>
 8008a28:	6863      	ldr	r3, [r4, #4]
 8008a2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008a2e:	9206      	str	r2, [sp, #24]
 8008a30:	1c5a      	adds	r2, r3, #1
 8008a32:	d13f      	bne.n	8008ab4 <_printf_float+0x178>
 8008a34:	2306      	movs	r3, #6
 8008a36:	6063      	str	r3, [r4, #4]
 8008a38:	9b05      	ldr	r3, [sp, #20]
 8008a3a:	6861      	ldr	r1, [r4, #4]
 8008a3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008a40:	2300      	movs	r3, #0
 8008a42:	9303      	str	r3, [sp, #12]
 8008a44:	ab0a      	add	r3, sp, #40	; 0x28
 8008a46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008a4a:	ab09      	add	r3, sp, #36	; 0x24
 8008a4c:	ec49 8b10 	vmov	d0, r8, r9
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	6022      	str	r2, [r4, #0]
 8008a54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008a58:	4628      	mov	r0, r5
 8008a5a:	f7ff fece 	bl	80087fa <__cvt>
 8008a5e:	9b06      	ldr	r3, [sp, #24]
 8008a60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a62:	2b47      	cmp	r3, #71	; 0x47
 8008a64:	4680      	mov	r8, r0
 8008a66:	d108      	bne.n	8008a7a <_printf_float+0x13e>
 8008a68:	1cc8      	adds	r0, r1, #3
 8008a6a:	db02      	blt.n	8008a72 <_printf_float+0x136>
 8008a6c:	6863      	ldr	r3, [r4, #4]
 8008a6e:	4299      	cmp	r1, r3
 8008a70:	dd41      	ble.n	8008af6 <_printf_float+0x1ba>
 8008a72:	f1ab 0302 	sub.w	r3, fp, #2
 8008a76:	fa5f fb83 	uxtb.w	fp, r3
 8008a7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a7e:	d820      	bhi.n	8008ac2 <_printf_float+0x186>
 8008a80:	3901      	subs	r1, #1
 8008a82:	465a      	mov	r2, fp
 8008a84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a88:	9109      	str	r1, [sp, #36]	; 0x24
 8008a8a:	f7ff ff18 	bl	80088be <__exponent>
 8008a8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a90:	1813      	adds	r3, r2, r0
 8008a92:	2a01      	cmp	r2, #1
 8008a94:	4681      	mov	r9, r0
 8008a96:	6123      	str	r3, [r4, #16]
 8008a98:	dc02      	bgt.n	8008aa0 <_printf_float+0x164>
 8008a9a:	6822      	ldr	r2, [r4, #0]
 8008a9c:	07d2      	lsls	r2, r2, #31
 8008a9e:	d501      	bpl.n	8008aa4 <_printf_float+0x168>
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	6123      	str	r3, [r4, #16]
 8008aa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d09c      	beq.n	80089e6 <_printf_float+0xaa>
 8008aac:	232d      	movs	r3, #45	; 0x2d
 8008aae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ab2:	e798      	b.n	80089e6 <_printf_float+0xaa>
 8008ab4:	9a06      	ldr	r2, [sp, #24]
 8008ab6:	2a47      	cmp	r2, #71	; 0x47
 8008ab8:	d1be      	bne.n	8008a38 <_printf_float+0xfc>
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1bc      	bne.n	8008a38 <_printf_float+0xfc>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e7b9      	b.n	8008a36 <_printf_float+0xfa>
 8008ac2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008ac6:	d118      	bne.n	8008afa <_printf_float+0x1be>
 8008ac8:	2900      	cmp	r1, #0
 8008aca:	6863      	ldr	r3, [r4, #4]
 8008acc:	dd0b      	ble.n	8008ae6 <_printf_float+0x1aa>
 8008ace:	6121      	str	r1, [r4, #16]
 8008ad0:	b913      	cbnz	r3, 8008ad8 <_printf_float+0x19c>
 8008ad2:	6822      	ldr	r2, [r4, #0]
 8008ad4:	07d0      	lsls	r0, r2, #31
 8008ad6:	d502      	bpl.n	8008ade <_printf_float+0x1a2>
 8008ad8:	3301      	adds	r3, #1
 8008ada:	440b      	add	r3, r1
 8008adc:	6123      	str	r3, [r4, #16]
 8008ade:	65a1      	str	r1, [r4, #88]	; 0x58
 8008ae0:	f04f 0900 	mov.w	r9, #0
 8008ae4:	e7de      	b.n	8008aa4 <_printf_float+0x168>
 8008ae6:	b913      	cbnz	r3, 8008aee <_printf_float+0x1b2>
 8008ae8:	6822      	ldr	r2, [r4, #0]
 8008aea:	07d2      	lsls	r2, r2, #31
 8008aec:	d501      	bpl.n	8008af2 <_printf_float+0x1b6>
 8008aee:	3302      	adds	r3, #2
 8008af0:	e7f4      	b.n	8008adc <_printf_float+0x1a0>
 8008af2:	2301      	movs	r3, #1
 8008af4:	e7f2      	b.n	8008adc <_printf_float+0x1a0>
 8008af6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008afc:	4299      	cmp	r1, r3
 8008afe:	db05      	blt.n	8008b0c <_printf_float+0x1d0>
 8008b00:	6823      	ldr	r3, [r4, #0]
 8008b02:	6121      	str	r1, [r4, #16]
 8008b04:	07d8      	lsls	r0, r3, #31
 8008b06:	d5ea      	bpl.n	8008ade <_printf_float+0x1a2>
 8008b08:	1c4b      	adds	r3, r1, #1
 8008b0a:	e7e7      	b.n	8008adc <_printf_float+0x1a0>
 8008b0c:	2900      	cmp	r1, #0
 8008b0e:	bfd4      	ite	le
 8008b10:	f1c1 0202 	rsble	r2, r1, #2
 8008b14:	2201      	movgt	r2, #1
 8008b16:	4413      	add	r3, r2
 8008b18:	e7e0      	b.n	8008adc <_printf_float+0x1a0>
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	055a      	lsls	r2, r3, #21
 8008b1e:	d407      	bmi.n	8008b30 <_printf_float+0x1f4>
 8008b20:	6923      	ldr	r3, [r4, #16]
 8008b22:	4642      	mov	r2, r8
 8008b24:	4631      	mov	r1, r6
 8008b26:	4628      	mov	r0, r5
 8008b28:	47b8      	blx	r7
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	d12c      	bne.n	8008b88 <_printf_float+0x24c>
 8008b2e:	e764      	b.n	80089fa <_printf_float+0xbe>
 8008b30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008b34:	f240 80e0 	bls.w	8008cf8 <_printf_float+0x3bc>
 8008b38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	2300      	movs	r3, #0
 8008b40:	f7f7 ffc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b44:	2800      	cmp	r0, #0
 8008b46:	d034      	beq.n	8008bb2 <_printf_float+0x276>
 8008b48:	4a37      	ldr	r2, [pc, #220]	; (8008c28 <_printf_float+0x2ec>)
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	4631      	mov	r1, r6
 8008b4e:	4628      	mov	r0, r5
 8008b50:	47b8      	blx	r7
 8008b52:	3001      	adds	r0, #1
 8008b54:	f43f af51 	beq.w	80089fa <_printf_float+0xbe>
 8008b58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	db02      	blt.n	8008b66 <_printf_float+0x22a>
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	07d8      	lsls	r0, r3, #31
 8008b64:	d510      	bpl.n	8008b88 <_printf_float+0x24c>
 8008b66:	ee18 3a10 	vmov	r3, s16
 8008b6a:	4652      	mov	r2, sl
 8008b6c:	4631      	mov	r1, r6
 8008b6e:	4628      	mov	r0, r5
 8008b70:	47b8      	blx	r7
 8008b72:	3001      	adds	r0, #1
 8008b74:	f43f af41 	beq.w	80089fa <_printf_float+0xbe>
 8008b78:	f04f 0800 	mov.w	r8, #0
 8008b7c:	f104 091a 	add.w	r9, r4, #26
 8008b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b82:	3b01      	subs	r3, #1
 8008b84:	4543      	cmp	r3, r8
 8008b86:	dc09      	bgt.n	8008b9c <_printf_float+0x260>
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	079b      	lsls	r3, r3, #30
 8008b8c:	f100 8107 	bmi.w	8008d9e <_printf_float+0x462>
 8008b90:	68e0      	ldr	r0, [r4, #12]
 8008b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b94:	4298      	cmp	r0, r3
 8008b96:	bfb8      	it	lt
 8008b98:	4618      	movlt	r0, r3
 8008b9a:	e730      	b.n	80089fe <_printf_float+0xc2>
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	464a      	mov	r2, r9
 8008ba0:	4631      	mov	r1, r6
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	47b8      	blx	r7
 8008ba6:	3001      	adds	r0, #1
 8008ba8:	f43f af27 	beq.w	80089fa <_printf_float+0xbe>
 8008bac:	f108 0801 	add.w	r8, r8, #1
 8008bb0:	e7e6      	b.n	8008b80 <_printf_float+0x244>
 8008bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	dc39      	bgt.n	8008c2c <_printf_float+0x2f0>
 8008bb8:	4a1b      	ldr	r2, [pc, #108]	; (8008c28 <_printf_float+0x2ec>)
 8008bba:	2301      	movs	r3, #1
 8008bbc:	4631      	mov	r1, r6
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	47b8      	blx	r7
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	f43f af19 	beq.w	80089fa <_printf_float+0xbe>
 8008bc8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	d102      	bne.n	8008bd6 <_printf_float+0x29a>
 8008bd0:	6823      	ldr	r3, [r4, #0]
 8008bd2:	07d9      	lsls	r1, r3, #31
 8008bd4:	d5d8      	bpl.n	8008b88 <_printf_float+0x24c>
 8008bd6:	ee18 3a10 	vmov	r3, s16
 8008bda:	4652      	mov	r2, sl
 8008bdc:	4631      	mov	r1, r6
 8008bde:	4628      	mov	r0, r5
 8008be0:	47b8      	blx	r7
 8008be2:	3001      	adds	r0, #1
 8008be4:	f43f af09 	beq.w	80089fa <_printf_float+0xbe>
 8008be8:	f04f 0900 	mov.w	r9, #0
 8008bec:	f104 0a1a 	add.w	sl, r4, #26
 8008bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf2:	425b      	negs	r3, r3
 8008bf4:	454b      	cmp	r3, r9
 8008bf6:	dc01      	bgt.n	8008bfc <_printf_float+0x2c0>
 8008bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bfa:	e792      	b.n	8008b22 <_printf_float+0x1e6>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	4652      	mov	r2, sl
 8008c00:	4631      	mov	r1, r6
 8008c02:	4628      	mov	r0, r5
 8008c04:	47b8      	blx	r7
 8008c06:	3001      	adds	r0, #1
 8008c08:	f43f aef7 	beq.w	80089fa <_printf_float+0xbe>
 8008c0c:	f109 0901 	add.w	r9, r9, #1
 8008c10:	e7ee      	b.n	8008bf0 <_printf_float+0x2b4>
 8008c12:	bf00      	nop
 8008c14:	7fefffff 	.word	0x7fefffff
 8008c18:	0800b334 	.word	0x0800b334
 8008c1c:	0800b338 	.word	0x0800b338
 8008c20:	0800b33c 	.word	0x0800b33c
 8008c24:	0800b340 	.word	0x0800b340
 8008c28:	0800b344 	.word	0x0800b344
 8008c2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c30:	429a      	cmp	r2, r3
 8008c32:	bfa8      	it	ge
 8008c34:	461a      	movge	r2, r3
 8008c36:	2a00      	cmp	r2, #0
 8008c38:	4691      	mov	r9, r2
 8008c3a:	dc37      	bgt.n	8008cac <_printf_float+0x370>
 8008c3c:	f04f 0b00 	mov.w	fp, #0
 8008c40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c44:	f104 021a 	add.w	r2, r4, #26
 8008c48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c4a:	9305      	str	r3, [sp, #20]
 8008c4c:	eba3 0309 	sub.w	r3, r3, r9
 8008c50:	455b      	cmp	r3, fp
 8008c52:	dc33      	bgt.n	8008cbc <_printf_float+0x380>
 8008c54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	db3b      	blt.n	8008cd4 <_printf_float+0x398>
 8008c5c:	6823      	ldr	r3, [r4, #0]
 8008c5e:	07da      	lsls	r2, r3, #31
 8008c60:	d438      	bmi.n	8008cd4 <_printf_float+0x398>
 8008c62:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008c66:	eba2 0903 	sub.w	r9, r2, r3
 8008c6a:	9b05      	ldr	r3, [sp, #20]
 8008c6c:	1ad2      	subs	r2, r2, r3
 8008c6e:	4591      	cmp	r9, r2
 8008c70:	bfa8      	it	ge
 8008c72:	4691      	movge	r9, r2
 8008c74:	f1b9 0f00 	cmp.w	r9, #0
 8008c78:	dc35      	bgt.n	8008ce6 <_printf_float+0x3aa>
 8008c7a:	f04f 0800 	mov.w	r8, #0
 8008c7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c82:	f104 0a1a 	add.w	sl, r4, #26
 8008c86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c8a:	1a9b      	subs	r3, r3, r2
 8008c8c:	eba3 0309 	sub.w	r3, r3, r9
 8008c90:	4543      	cmp	r3, r8
 8008c92:	f77f af79 	ble.w	8008b88 <_printf_float+0x24c>
 8008c96:	2301      	movs	r3, #1
 8008c98:	4652      	mov	r2, sl
 8008c9a:	4631      	mov	r1, r6
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	47b8      	blx	r7
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	f43f aeaa 	beq.w	80089fa <_printf_float+0xbe>
 8008ca6:	f108 0801 	add.w	r8, r8, #1
 8008caa:	e7ec      	b.n	8008c86 <_printf_float+0x34a>
 8008cac:	4613      	mov	r3, r2
 8008cae:	4631      	mov	r1, r6
 8008cb0:	4642      	mov	r2, r8
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	47b8      	blx	r7
 8008cb6:	3001      	adds	r0, #1
 8008cb8:	d1c0      	bne.n	8008c3c <_printf_float+0x300>
 8008cba:	e69e      	b.n	80089fa <_printf_float+0xbe>
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	4631      	mov	r1, r6
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	9205      	str	r2, [sp, #20]
 8008cc4:	47b8      	blx	r7
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	f43f ae97 	beq.w	80089fa <_printf_float+0xbe>
 8008ccc:	9a05      	ldr	r2, [sp, #20]
 8008cce:	f10b 0b01 	add.w	fp, fp, #1
 8008cd2:	e7b9      	b.n	8008c48 <_printf_float+0x30c>
 8008cd4:	ee18 3a10 	vmov	r3, s16
 8008cd8:	4652      	mov	r2, sl
 8008cda:	4631      	mov	r1, r6
 8008cdc:	4628      	mov	r0, r5
 8008cde:	47b8      	blx	r7
 8008ce0:	3001      	adds	r0, #1
 8008ce2:	d1be      	bne.n	8008c62 <_printf_float+0x326>
 8008ce4:	e689      	b.n	80089fa <_printf_float+0xbe>
 8008ce6:	9a05      	ldr	r2, [sp, #20]
 8008ce8:	464b      	mov	r3, r9
 8008cea:	4442      	add	r2, r8
 8008cec:	4631      	mov	r1, r6
 8008cee:	4628      	mov	r0, r5
 8008cf0:	47b8      	blx	r7
 8008cf2:	3001      	adds	r0, #1
 8008cf4:	d1c1      	bne.n	8008c7a <_printf_float+0x33e>
 8008cf6:	e680      	b.n	80089fa <_printf_float+0xbe>
 8008cf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cfa:	2a01      	cmp	r2, #1
 8008cfc:	dc01      	bgt.n	8008d02 <_printf_float+0x3c6>
 8008cfe:	07db      	lsls	r3, r3, #31
 8008d00:	d53a      	bpl.n	8008d78 <_printf_float+0x43c>
 8008d02:	2301      	movs	r3, #1
 8008d04:	4642      	mov	r2, r8
 8008d06:	4631      	mov	r1, r6
 8008d08:	4628      	mov	r0, r5
 8008d0a:	47b8      	blx	r7
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	f43f ae74 	beq.w	80089fa <_printf_float+0xbe>
 8008d12:	ee18 3a10 	vmov	r3, s16
 8008d16:	4652      	mov	r2, sl
 8008d18:	4631      	mov	r1, r6
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	47b8      	blx	r7
 8008d1e:	3001      	adds	r0, #1
 8008d20:	f43f ae6b 	beq.w	80089fa <_printf_float+0xbe>
 8008d24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d28:	2200      	movs	r2, #0
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008d30:	f7f7 feca 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d34:	b9d8      	cbnz	r0, 8008d6e <_printf_float+0x432>
 8008d36:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008d3a:	f108 0201 	add.w	r2, r8, #1
 8008d3e:	4631      	mov	r1, r6
 8008d40:	4628      	mov	r0, r5
 8008d42:	47b8      	blx	r7
 8008d44:	3001      	adds	r0, #1
 8008d46:	d10e      	bne.n	8008d66 <_printf_float+0x42a>
 8008d48:	e657      	b.n	80089fa <_printf_float+0xbe>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	4652      	mov	r2, sl
 8008d4e:	4631      	mov	r1, r6
 8008d50:	4628      	mov	r0, r5
 8008d52:	47b8      	blx	r7
 8008d54:	3001      	adds	r0, #1
 8008d56:	f43f ae50 	beq.w	80089fa <_printf_float+0xbe>
 8008d5a:	f108 0801 	add.w	r8, r8, #1
 8008d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d60:	3b01      	subs	r3, #1
 8008d62:	4543      	cmp	r3, r8
 8008d64:	dcf1      	bgt.n	8008d4a <_printf_float+0x40e>
 8008d66:	464b      	mov	r3, r9
 8008d68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d6c:	e6da      	b.n	8008b24 <_printf_float+0x1e8>
 8008d6e:	f04f 0800 	mov.w	r8, #0
 8008d72:	f104 0a1a 	add.w	sl, r4, #26
 8008d76:	e7f2      	b.n	8008d5e <_printf_float+0x422>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	4642      	mov	r2, r8
 8008d7c:	e7df      	b.n	8008d3e <_printf_float+0x402>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	464a      	mov	r2, r9
 8008d82:	4631      	mov	r1, r6
 8008d84:	4628      	mov	r0, r5
 8008d86:	47b8      	blx	r7
 8008d88:	3001      	adds	r0, #1
 8008d8a:	f43f ae36 	beq.w	80089fa <_printf_float+0xbe>
 8008d8e:	f108 0801 	add.w	r8, r8, #1
 8008d92:	68e3      	ldr	r3, [r4, #12]
 8008d94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d96:	1a5b      	subs	r3, r3, r1
 8008d98:	4543      	cmp	r3, r8
 8008d9a:	dcf0      	bgt.n	8008d7e <_printf_float+0x442>
 8008d9c:	e6f8      	b.n	8008b90 <_printf_float+0x254>
 8008d9e:	f04f 0800 	mov.w	r8, #0
 8008da2:	f104 0919 	add.w	r9, r4, #25
 8008da6:	e7f4      	b.n	8008d92 <_printf_float+0x456>

08008da8 <_printf_common>:
 8008da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dac:	4616      	mov	r6, r2
 8008dae:	4699      	mov	r9, r3
 8008db0:	688a      	ldr	r2, [r1, #8]
 8008db2:	690b      	ldr	r3, [r1, #16]
 8008db4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008db8:	4293      	cmp	r3, r2
 8008dba:	bfb8      	it	lt
 8008dbc:	4613      	movlt	r3, r2
 8008dbe:	6033      	str	r3, [r6, #0]
 8008dc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008dc4:	4607      	mov	r7, r0
 8008dc6:	460c      	mov	r4, r1
 8008dc8:	b10a      	cbz	r2, 8008dce <_printf_common+0x26>
 8008dca:	3301      	adds	r3, #1
 8008dcc:	6033      	str	r3, [r6, #0]
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	0699      	lsls	r1, r3, #26
 8008dd2:	bf42      	ittt	mi
 8008dd4:	6833      	ldrmi	r3, [r6, #0]
 8008dd6:	3302      	addmi	r3, #2
 8008dd8:	6033      	strmi	r3, [r6, #0]
 8008dda:	6825      	ldr	r5, [r4, #0]
 8008ddc:	f015 0506 	ands.w	r5, r5, #6
 8008de0:	d106      	bne.n	8008df0 <_printf_common+0x48>
 8008de2:	f104 0a19 	add.w	sl, r4, #25
 8008de6:	68e3      	ldr	r3, [r4, #12]
 8008de8:	6832      	ldr	r2, [r6, #0]
 8008dea:	1a9b      	subs	r3, r3, r2
 8008dec:	42ab      	cmp	r3, r5
 8008dee:	dc26      	bgt.n	8008e3e <_printf_common+0x96>
 8008df0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008df4:	1e13      	subs	r3, r2, #0
 8008df6:	6822      	ldr	r2, [r4, #0]
 8008df8:	bf18      	it	ne
 8008dfa:	2301      	movne	r3, #1
 8008dfc:	0692      	lsls	r2, r2, #26
 8008dfe:	d42b      	bmi.n	8008e58 <_printf_common+0xb0>
 8008e00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e04:	4649      	mov	r1, r9
 8008e06:	4638      	mov	r0, r7
 8008e08:	47c0      	blx	r8
 8008e0a:	3001      	adds	r0, #1
 8008e0c:	d01e      	beq.n	8008e4c <_printf_common+0xa4>
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	6922      	ldr	r2, [r4, #16]
 8008e12:	f003 0306 	and.w	r3, r3, #6
 8008e16:	2b04      	cmp	r3, #4
 8008e18:	bf02      	ittt	eq
 8008e1a:	68e5      	ldreq	r5, [r4, #12]
 8008e1c:	6833      	ldreq	r3, [r6, #0]
 8008e1e:	1aed      	subeq	r5, r5, r3
 8008e20:	68a3      	ldr	r3, [r4, #8]
 8008e22:	bf0c      	ite	eq
 8008e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e28:	2500      	movne	r5, #0
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	bfc4      	itt	gt
 8008e2e:	1a9b      	subgt	r3, r3, r2
 8008e30:	18ed      	addgt	r5, r5, r3
 8008e32:	2600      	movs	r6, #0
 8008e34:	341a      	adds	r4, #26
 8008e36:	42b5      	cmp	r5, r6
 8008e38:	d11a      	bne.n	8008e70 <_printf_common+0xc8>
 8008e3a:	2000      	movs	r0, #0
 8008e3c:	e008      	b.n	8008e50 <_printf_common+0xa8>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	4652      	mov	r2, sl
 8008e42:	4649      	mov	r1, r9
 8008e44:	4638      	mov	r0, r7
 8008e46:	47c0      	blx	r8
 8008e48:	3001      	adds	r0, #1
 8008e4a:	d103      	bne.n	8008e54 <_printf_common+0xac>
 8008e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e54:	3501      	adds	r5, #1
 8008e56:	e7c6      	b.n	8008de6 <_printf_common+0x3e>
 8008e58:	18e1      	adds	r1, r4, r3
 8008e5a:	1c5a      	adds	r2, r3, #1
 8008e5c:	2030      	movs	r0, #48	; 0x30
 8008e5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e62:	4422      	add	r2, r4
 8008e64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e6c:	3302      	adds	r3, #2
 8008e6e:	e7c7      	b.n	8008e00 <_printf_common+0x58>
 8008e70:	2301      	movs	r3, #1
 8008e72:	4622      	mov	r2, r4
 8008e74:	4649      	mov	r1, r9
 8008e76:	4638      	mov	r0, r7
 8008e78:	47c0      	blx	r8
 8008e7a:	3001      	adds	r0, #1
 8008e7c:	d0e6      	beq.n	8008e4c <_printf_common+0xa4>
 8008e7e:	3601      	adds	r6, #1
 8008e80:	e7d9      	b.n	8008e36 <_printf_common+0x8e>
	...

08008e84 <_printf_i>:
 8008e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e88:	7e0f      	ldrb	r7, [r1, #24]
 8008e8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e8c:	2f78      	cmp	r7, #120	; 0x78
 8008e8e:	4691      	mov	r9, r2
 8008e90:	4680      	mov	r8, r0
 8008e92:	460c      	mov	r4, r1
 8008e94:	469a      	mov	sl, r3
 8008e96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e9a:	d807      	bhi.n	8008eac <_printf_i+0x28>
 8008e9c:	2f62      	cmp	r7, #98	; 0x62
 8008e9e:	d80a      	bhi.n	8008eb6 <_printf_i+0x32>
 8008ea0:	2f00      	cmp	r7, #0
 8008ea2:	f000 80d4 	beq.w	800904e <_printf_i+0x1ca>
 8008ea6:	2f58      	cmp	r7, #88	; 0x58
 8008ea8:	f000 80c0 	beq.w	800902c <_printf_i+0x1a8>
 8008eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008eb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008eb4:	e03a      	b.n	8008f2c <_printf_i+0xa8>
 8008eb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008eba:	2b15      	cmp	r3, #21
 8008ebc:	d8f6      	bhi.n	8008eac <_printf_i+0x28>
 8008ebe:	a101      	add	r1, pc, #4	; (adr r1, 8008ec4 <_printf_i+0x40>)
 8008ec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ec4:	08008f1d 	.word	0x08008f1d
 8008ec8:	08008f31 	.word	0x08008f31
 8008ecc:	08008ead 	.word	0x08008ead
 8008ed0:	08008ead 	.word	0x08008ead
 8008ed4:	08008ead 	.word	0x08008ead
 8008ed8:	08008ead 	.word	0x08008ead
 8008edc:	08008f31 	.word	0x08008f31
 8008ee0:	08008ead 	.word	0x08008ead
 8008ee4:	08008ead 	.word	0x08008ead
 8008ee8:	08008ead 	.word	0x08008ead
 8008eec:	08008ead 	.word	0x08008ead
 8008ef0:	08009035 	.word	0x08009035
 8008ef4:	08008f5d 	.word	0x08008f5d
 8008ef8:	08008fef 	.word	0x08008fef
 8008efc:	08008ead 	.word	0x08008ead
 8008f00:	08008ead 	.word	0x08008ead
 8008f04:	08009057 	.word	0x08009057
 8008f08:	08008ead 	.word	0x08008ead
 8008f0c:	08008f5d 	.word	0x08008f5d
 8008f10:	08008ead 	.word	0x08008ead
 8008f14:	08008ead 	.word	0x08008ead
 8008f18:	08008ff7 	.word	0x08008ff7
 8008f1c:	682b      	ldr	r3, [r5, #0]
 8008f1e:	1d1a      	adds	r2, r3, #4
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	602a      	str	r2, [r5, #0]
 8008f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e09f      	b.n	8009070 <_printf_i+0x1ec>
 8008f30:	6820      	ldr	r0, [r4, #0]
 8008f32:	682b      	ldr	r3, [r5, #0]
 8008f34:	0607      	lsls	r7, r0, #24
 8008f36:	f103 0104 	add.w	r1, r3, #4
 8008f3a:	6029      	str	r1, [r5, #0]
 8008f3c:	d501      	bpl.n	8008f42 <_printf_i+0xbe>
 8008f3e:	681e      	ldr	r6, [r3, #0]
 8008f40:	e003      	b.n	8008f4a <_printf_i+0xc6>
 8008f42:	0646      	lsls	r6, r0, #25
 8008f44:	d5fb      	bpl.n	8008f3e <_printf_i+0xba>
 8008f46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008f4a:	2e00      	cmp	r6, #0
 8008f4c:	da03      	bge.n	8008f56 <_printf_i+0xd2>
 8008f4e:	232d      	movs	r3, #45	; 0x2d
 8008f50:	4276      	negs	r6, r6
 8008f52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f56:	485a      	ldr	r0, [pc, #360]	; (80090c0 <_printf_i+0x23c>)
 8008f58:	230a      	movs	r3, #10
 8008f5a:	e012      	b.n	8008f82 <_printf_i+0xfe>
 8008f5c:	682b      	ldr	r3, [r5, #0]
 8008f5e:	6820      	ldr	r0, [r4, #0]
 8008f60:	1d19      	adds	r1, r3, #4
 8008f62:	6029      	str	r1, [r5, #0]
 8008f64:	0605      	lsls	r5, r0, #24
 8008f66:	d501      	bpl.n	8008f6c <_printf_i+0xe8>
 8008f68:	681e      	ldr	r6, [r3, #0]
 8008f6a:	e002      	b.n	8008f72 <_printf_i+0xee>
 8008f6c:	0641      	lsls	r1, r0, #25
 8008f6e:	d5fb      	bpl.n	8008f68 <_printf_i+0xe4>
 8008f70:	881e      	ldrh	r6, [r3, #0]
 8008f72:	4853      	ldr	r0, [pc, #332]	; (80090c0 <_printf_i+0x23c>)
 8008f74:	2f6f      	cmp	r7, #111	; 0x6f
 8008f76:	bf0c      	ite	eq
 8008f78:	2308      	moveq	r3, #8
 8008f7a:	230a      	movne	r3, #10
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f82:	6865      	ldr	r5, [r4, #4]
 8008f84:	60a5      	str	r5, [r4, #8]
 8008f86:	2d00      	cmp	r5, #0
 8008f88:	bfa2      	ittt	ge
 8008f8a:	6821      	ldrge	r1, [r4, #0]
 8008f8c:	f021 0104 	bicge.w	r1, r1, #4
 8008f90:	6021      	strge	r1, [r4, #0]
 8008f92:	b90e      	cbnz	r6, 8008f98 <_printf_i+0x114>
 8008f94:	2d00      	cmp	r5, #0
 8008f96:	d04b      	beq.n	8009030 <_printf_i+0x1ac>
 8008f98:	4615      	mov	r5, r2
 8008f9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f9e:	fb03 6711 	mls	r7, r3, r1, r6
 8008fa2:	5dc7      	ldrb	r7, [r0, r7]
 8008fa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008fa8:	4637      	mov	r7, r6
 8008faa:	42bb      	cmp	r3, r7
 8008fac:	460e      	mov	r6, r1
 8008fae:	d9f4      	bls.n	8008f9a <_printf_i+0x116>
 8008fb0:	2b08      	cmp	r3, #8
 8008fb2:	d10b      	bne.n	8008fcc <_printf_i+0x148>
 8008fb4:	6823      	ldr	r3, [r4, #0]
 8008fb6:	07de      	lsls	r6, r3, #31
 8008fb8:	d508      	bpl.n	8008fcc <_printf_i+0x148>
 8008fba:	6923      	ldr	r3, [r4, #16]
 8008fbc:	6861      	ldr	r1, [r4, #4]
 8008fbe:	4299      	cmp	r1, r3
 8008fc0:	bfde      	ittt	le
 8008fc2:	2330      	movle	r3, #48	; 0x30
 8008fc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008fc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008fcc:	1b52      	subs	r2, r2, r5
 8008fce:	6122      	str	r2, [r4, #16]
 8008fd0:	f8cd a000 	str.w	sl, [sp]
 8008fd4:	464b      	mov	r3, r9
 8008fd6:	aa03      	add	r2, sp, #12
 8008fd8:	4621      	mov	r1, r4
 8008fda:	4640      	mov	r0, r8
 8008fdc:	f7ff fee4 	bl	8008da8 <_printf_common>
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	d14a      	bne.n	800907a <_printf_i+0x1f6>
 8008fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe8:	b004      	add	sp, #16
 8008fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fee:	6823      	ldr	r3, [r4, #0]
 8008ff0:	f043 0320 	orr.w	r3, r3, #32
 8008ff4:	6023      	str	r3, [r4, #0]
 8008ff6:	4833      	ldr	r0, [pc, #204]	; (80090c4 <_printf_i+0x240>)
 8008ff8:	2778      	movs	r7, #120	; 0x78
 8008ffa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	6829      	ldr	r1, [r5, #0]
 8009002:	061f      	lsls	r7, r3, #24
 8009004:	f851 6b04 	ldr.w	r6, [r1], #4
 8009008:	d402      	bmi.n	8009010 <_printf_i+0x18c>
 800900a:	065f      	lsls	r7, r3, #25
 800900c:	bf48      	it	mi
 800900e:	b2b6      	uxthmi	r6, r6
 8009010:	07df      	lsls	r7, r3, #31
 8009012:	bf48      	it	mi
 8009014:	f043 0320 	orrmi.w	r3, r3, #32
 8009018:	6029      	str	r1, [r5, #0]
 800901a:	bf48      	it	mi
 800901c:	6023      	strmi	r3, [r4, #0]
 800901e:	b91e      	cbnz	r6, 8009028 <_printf_i+0x1a4>
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	f023 0320 	bic.w	r3, r3, #32
 8009026:	6023      	str	r3, [r4, #0]
 8009028:	2310      	movs	r3, #16
 800902a:	e7a7      	b.n	8008f7c <_printf_i+0xf8>
 800902c:	4824      	ldr	r0, [pc, #144]	; (80090c0 <_printf_i+0x23c>)
 800902e:	e7e4      	b.n	8008ffa <_printf_i+0x176>
 8009030:	4615      	mov	r5, r2
 8009032:	e7bd      	b.n	8008fb0 <_printf_i+0x12c>
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	6826      	ldr	r6, [r4, #0]
 8009038:	6961      	ldr	r1, [r4, #20]
 800903a:	1d18      	adds	r0, r3, #4
 800903c:	6028      	str	r0, [r5, #0]
 800903e:	0635      	lsls	r5, r6, #24
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	d501      	bpl.n	8009048 <_printf_i+0x1c4>
 8009044:	6019      	str	r1, [r3, #0]
 8009046:	e002      	b.n	800904e <_printf_i+0x1ca>
 8009048:	0670      	lsls	r0, r6, #25
 800904a:	d5fb      	bpl.n	8009044 <_printf_i+0x1c0>
 800904c:	8019      	strh	r1, [r3, #0]
 800904e:	2300      	movs	r3, #0
 8009050:	6123      	str	r3, [r4, #16]
 8009052:	4615      	mov	r5, r2
 8009054:	e7bc      	b.n	8008fd0 <_printf_i+0x14c>
 8009056:	682b      	ldr	r3, [r5, #0]
 8009058:	1d1a      	adds	r2, r3, #4
 800905a:	602a      	str	r2, [r5, #0]
 800905c:	681d      	ldr	r5, [r3, #0]
 800905e:	6862      	ldr	r2, [r4, #4]
 8009060:	2100      	movs	r1, #0
 8009062:	4628      	mov	r0, r5
 8009064:	f7f7 f8b4 	bl	80001d0 <memchr>
 8009068:	b108      	cbz	r0, 800906e <_printf_i+0x1ea>
 800906a:	1b40      	subs	r0, r0, r5
 800906c:	6060      	str	r0, [r4, #4]
 800906e:	6863      	ldr	r3, [r4, #4]
 8009070:	6123      	str	r3, [r4, #16]
 8009072:	2300      	movs	r3, #0
 8009074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009078:	e7aa      	b.n	8008fd0 <_printf_i+0x14c>
 800907a:	6923      	ldr	r3, [r4, #16]
 800907c:	462a      	mov	r2, r5
 800907e:	4649      	mov	r1, r9
 8009080:	4640      	mov	r0, r8
 8009082:	47d0      	blx	sl
 8009084:	3001      	adds	r0, #1
 8009086:	d0ad      	beq.n	8008fe4 <_printf_i+0x160>
 8009088:	6823      	ldr	r3, [r4, #0]
 800908a:	079b      	lsls	r3, r3, #30
 800908c:	d413      	bmi.n	80090b6 <_printf_i+0x232>
 800908e:	68e0      	ldr	r0, [r4, #12]
 8009090:	9b03      	ldr	r3, [sp, #12]
 8009092:	4298      	cmp	r0, r3
 8009094:	bfb8      	it	lt
 8009096:	4618      	movlt	r0, r3
 8009098:	e7a6      	b.n	8008fe8 <_printf_i+0x164>
 800909a:	2301      	movs	r3, #1
 800909c:	4632      	mov	r2, r6
 800909e:	4649      	mov	r1, r9
 80090a0:	4640      	mov	r0, r8
 80090a2:	47d0      	blx	sl
 80090a4:	3001      	adds	r0, #1
 80090a6:	d09d      	beq.n	8008fe4 <_printf_i+0x160>
 80090a8:	3501      	adds	r5, #1
 80090aa:	68e3      	ldr	r3, [r4, #12]
 80090ac:	9903      	ldr	r1, [sp, #12]
 80090ae:	1a5b      	subs	r3, r3, r1
 80090b0:	42ab      	cmp	r3, r5
 80090b2:	dcf2      	bgt.n	800909a <_printf_i+0x216>
 80090b4:	e7eb      	b.n	800908e <_printf_i+0x20a>
 80090b6:	2500      	movs	r5, #0
 80090b8:	f104 0619 	add.w	r6, r4, #25
 80090bc:	e7f5      	b.n	80090aa <_printf_i+0x226>
 80090be:	bf00      	nop
 80090c0:	0800b346 	.word	0x0800b346
 80090c4:	0800b357 	.word	0x0800b357

080090c8 <std>:
 80090c8:	2300      	movs	r3, #0
 80090ca:	b510      	push	{r4, lr}
 80090cc:	4604      	mov	r4, r0
 80090ce:	e9c0 3300 	strd	r3, r3, [r0]
 80090d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090d6:	6083      	str	r3, [r0, #8]
 80090d8:	8181      	strh	r1, [r0, #12]
 80090da:	6643      	str	r3, [r0, #100]	; 0x64
 80090dc:	81c2      	strh	r2, [r0, #14]
 80090de:	6183      	str	r3, [r0, #24]
 80090e0:	4619      	mov	r1, r3
 80090e2:	2208      	movs	r2, #8
 80090e4:	305c      	adds	r0, #92	; 0x5c
 80090e6:	f000 f9e5 	bl	80094b4 <memset>
 80090ea:	4b05      	ldr	r3, [pc, #20]	; (8009100 <std+0x38>)
 80090ec:	6263      	str	r3, [r4, #36]	; 0x24
 80090ee:	4b05      	ldr	r3, [pc, #20]	; (8009104 <std+0x3c>)
 80090f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80090f2:	4b05      	ldr	r3, [pc, #20]	; (8009108 <std+0x40>)
 80090f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090f6:	4b05      	ldr	r3, [pc, #20]	; (800910c <std+0x44>)
 80090f8:	6224      	str	r4, [r4, #32]
 80090fa:	6323      	str	r3, [r4, #48]	; 0x30
 80090fc:	bd10      	pop	{r4, pc}
 80090fe:	bf00      	nop
 8009100:	08009305 	.word	0x08009305
 8009104:	08009327 	.word	0x08009327
 8009108:	0800935f 	.word	0x0800935f
 800910c:	08009383 	.word	0x08009383

08009110 <stdio_exit_handler>:
 8009110:	4a02      	ldr	r2, [pc, #8]	; (800911c <stdio_exit_handler+0xc>)
 8009112:	4903      	ldr	r1, [pc, #12]	; (8009120 <stdio_exit_handler+0x10>)
 8009114:	4803      	ldr	r0, [pc, #12]	; (8009124 <stdio_exit_handler+0x14>)
 8009116:	f000 b869 	b.w	80091ec <_fwalk_sglue>
 800911a:	bf00      	nop
 800911c:	2000001c 	.word	0x2000001c
 8009120:	0800af31 	.word	0x0800af31
 8009124:	20000028 	.word	0x20000028

08009128 <cleanup_stdio>:
 8009128:	6841      	ldr	r1, [r0, #4]
 800912a:	4b0c      	ldr	r3, [pc, #48]	; (800915c <cleanup_stdio+0x34>)
 800912c:	4299      	cmp	r1, r3
 800912e:	b510      	push	{r4, lr}
 8009130:	4604      	mov	r4, r0
 8009132:	d001      	beq.n	8009138 <cleanup_stdio+0x10>
 8009134:	f001 fefc 	bl	800af30 <_fflush_r>
 8009138:	68a1      	ldr	r1, [r4, #8]
 800913a:	4b09      	ldr	r3, [pc, #36]	; (8009160 <cleanup_stdio+0x38>)
 800913c:	4299      	cmp	r1, r3
 800913e:	d002      	beq.n	8009146 <cleanup_stdio+0x1e>
 8009140:	4620      	mov	r0, r4
 8009142:	f001 fef5 	bl	800af30 <_fflush_r>
 8009146:	68e1      	ldr	r1, [r4, #12]
 8009148:	4b06      	ldr	r3, [pc, #24]	; (8009164 <cleanup_stdio+0x3c>)
 800914a:	4299      	cmp	r1, r3
 800914c:	d004      	beq.n	8009158 <cleanup_stdio+0x30>
 800914e:	4620      	mov	r0, r4
 8009150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009154:	f001 beec 	b.w	800af30 <_fflush_r>
 8009158:	bd10      	pop	{r4, pc}
 800915a:	bf00      	nop
 800915c:	200003e0 	.word	0x200003e0
 8009160:	20000448 	.word	0x20000448
 8009164:	200004b0 	.word	0x200004b0

08009168 <global_stdio_init.part.0>:
 8009168:	b510      	push	{r4, lr}
 800916a:	4b0b      	ldr	r3, [pc, #44]	; (8009198 <global_stdio_init.part.0+0x30>)
 800916c:	4c0b      	ldr	r4, [pc, #44]	; (800919c <global_stdio_init.part.0+0x34>)
 800916e:	4a0c      	ldr	r2, [pc, #48]	; (80091a0 <global_stdio_init.part.0+0x38>)
 8009170:	601a      	str	r2, [r3, #0]
 8009172:	4620      	mov	r0, r4
 8009174:	2200      	movs	r2, #0
 8009176:	2104      	movs	r1, #4
 8009178:	f7ff ffa6 	bl	80090c8 <std>
 800917c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009180:	2201      	movs	r2, #1
 8009182:	2109      	movs	r1, #9
 8009184:	f7ff ffa0 	bl	80090c8 <std>
 8009188:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800918c:	2202      	movs	r2, #2
 800918e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009192:	2112      	movs	r1, #18
 8009194:	f7ff bf98 	b.w	80090c8 <std>
 8009198:	20000518 	.word	0x20000518
 800919c:	200003e0 	.word	0x200003e0
 80091a0:	08009111 	.word	0x08009111

080091a4 <__sfp_lock_acquire>:
 80091a4:	4801      	ldr	r0, [pc, #4]	; (80091ac <__sfp_lock_acquire+0x8>)
 80091a6:	f000 ba01 	b.w	80095ac <__retarget_lock_acquire_recursive>
 80091aa:	bf00      	nop
 80091ac:	20000521 	.word	0x20000521

080091b0 <__sfp_lock_release>:
 80091b0:	4801      	ldr	r0, [pc, #4]	; (80091b8 <__sfp_lock_release+0x8>)
 80091b2:	f000 b9fc 	b.w	80095ae <__retarget_lock_release_recursive>
 80091b6:	bf00      	nop
 80091b8:	20000521 	.word	0x20000521

080091bc <__sinit>:
 80091bc:	b510      	push	{r4, lr}
 80091be:	4604      	mov	r4, r0
 80091c0:	f7ff fff0 	bl	80091a4 <__sfp_lock_acquire>
 80091c4:	6a23      	ldr	r3, [r4, #32]
 80091c6:	b11b      	cbz	r3, 80091d0 <__sinit+0x14>
 80091c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091cc:	f7ff bff0 	b.w	80091b0 <__sfp_lock_release>
 80091d0:	4b04      	ldr	r3, [pc, #16]	; (80091e4 <__sinit+0x28>)
 80091d2:	6223      	str	r3, [r4, #32]
 80091d4:	4b04      	ldr	r3, [pc, #16]	; (80091e8 <__sinit+0x2c>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1f5      	bne.n	80091c8 <__sinit+0xc>
 80091dc:	f7ff ffc4 	bl	8009168 <global_stdio_init.part.0>
 80091e0:	e7f2      	b.n	80091c8 <__sinit+0xc>
 80091e2:	bf00      	nop
 80091e4:	08009129 	.word	0x08009129
 80091e8:	20000518 	.word	0x20000518

080091ec <_fwalk_sglue>:
 80091ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091f0:	4607      	mov	r7, r0
 80091f2:	4688      	mov	r8, r1
 80091f4:	4614      	mov	r4, r2
 80091f6:	2600      	movs	r6, #0
 80091f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091fc:	f1b9 0901 	subs.w	r9, r9, #1
 8009200:	d505      	bpl.n	800920e <_fwalk_sglue+0x22>
 8009202:	6824      	ldr	r4, [r4, #0]
 8009204:	2c00      	cmp	r4, #0
 8009206:	d1f7      	bne.n	80091f8 <_fwalk_sglue+0xc>
 8009208:	4630      	mov	r0, r6
 800920a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800920e:	89ab      	ldrh	r3, [r5, #12]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d907      	bls.n	8009224 <_fwalk_sglue+0x38>
 8009214:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009218:	3301      	adds	r3, #1
 800921a:	d003      	beq.n	8009224 <_fwalk_sglue+0x38>
 800921c:	4629      	mov	r1, r5
 800921e:	4638      	mov	r0, r7
 8009220:	47c0      	blx	r8
 8009222:	4306      	orrs	r6, r0
 8009224:	3568      	adds	r5, #104	; 0x68
 8009226:	e7e9      	b.n	80091fc <_fwalk_sglue+0x10>

08009228 <iprintf>:
 8009228:	b40f      	push	{r0, r1, r2, r3}
 800922a:	b507      	push	{r0, r1, r2, lr}
 800922c:	4906      	ldr	r1, [pc, #24]	; (8009248 <iprintf+0x20>)
 800922e:	ab04      	add	r3, sp, #16
 8009230:	6808      	ldr	r0, [r1, #0]
 8009232:	f853 2b04 	ldr.w	r2, [r3], #4
 8009236:	6881      	ldr	r1, [r0, #8]
 8009238:	9301      	str	r3, [sp, #4]
 800923a:	f001 fcd9 	bl	800abf0 <_vfiprintf_r>
 800923e:	b003      	add	sp, #12
 8009240:	f85d eb04 	ldr.w	lr, [sp], #4
 8009244:	b004      	add	sp, #16
 8009246:	4770      	bx	lr
 8009248:	20000074 	.word	0x20000074

0800924c <_puts_r>:
 800924c:	6a03      	ldr	r3, [r0, #32]
 800924e:	b570      	push	{r4, r5, r6, lr}
 8009250:	6884      	ldr	r4, [r0, #8]
 8009252:	4605      	mov	r5, r0
 8009254:	460e      	mov	r6, r1
 8009256:	b90b      	cbnz	r3, 800925c <_puts_r+0x10>
 8009258:	f7ff ffb0 	bl	80091bc <__sinit>
 800925c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800925e:	07db      	lsls	r3, r3, #31
 8009260:	d405      	bmi.n	800926e <_puts_r+0x22>
 8009262:	89a3      	ldrh	r3, [r4, #12]
 8009264:	0598      	lsls	r0, r3, #22
 8009266:	d402      	bmi.n	800926e <_puts_r+0x22>
 8009268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800926a:	f000 f99f 	bl	80095ac <__retarget_lock_acquire_recursive>
 800926e:	89a3      	ldrh	r3, [r4, #12]
 8009270:	0719      	lsls	r1, r3, #28
 8009272:	d513      	bpl.n	800929c <_puts_r+0x50>
 8009274:	6923      	ldr	r3, [r4, #16]
 8009276:	b18b      	cbz	r3, 800929c <_puts_r+0x50>
 8009278:	3e01      	subs	r6, #1
 800927a:	68a3      	ldr	r3, [r4, #8]
 800927c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009280:	3b01      	subs	r3, #1
 8009282:	60a3      	str	r3, [r4, #8]
 8009284:	b9e9      	cbnz	r1, 80092c2 <_puts_r+0x76>
 8009286:	2b00      	cmp	r3, #0
 8009288:	da2e      	bge.n	80092e8 <_puts_r+0x9c>
 800928a:	4622      	mov	r2, r4
 800928c:	210a      	movs	r1, #10
 800928e:	4628      	mov	r0, r5
 8009290:	f000 f87b 	bl	800938a <__swbuf_r>
 8009294:	3001      	adds	r0, #1
 8009296:	d007      	beq.n	80092a8 <_puts_r+0x5c>
 8009298:	250a      	movs	r5, #10
 800929a:	e007      	b.n	80092ac <_puts_r+0x60>
 800929c:	4621      	mov	r1, r4
 800929e:	4628      	mov	r0, r5
 80092a0:	f000 f8b0 	bl	8009404 <__swsetup_r>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d0e7      	beq.n	8009278 <_puts_r+0x2c>
 80092a8:	f04f 35ff 	mov.w	r5, #4294967295
 80092ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092ae:	07da      	lsls	r2, r3, #31
 80092b0:	d405      	bmi.n	80092be <_puts_r+0x72>
 80092b2:	89a3      	ldrh	r3, [r4, #12]
 80092b4:	059b      	lsls	r3, r3, #22
 80092b6:	d402      	bmi.n	80092be <_puts_r+0x72>
 80092b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092ba:	f000 f978 	bl	80095ae <__retarget_lock_release_recursive>
 80092be:	4628      	mov	r0, r5
 80092c0:	bd70      	pop	{r4, r5, r6, pc}
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	da04      	bge.n	80092d0 <_puts_r+0x84>
 80092c6:	69a2      	ldr	r2, [r4, #24]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	dc06      	bgt.n	80092da <_puts_r+0x8e>
 80092cc:	290a      	cmp	r1, #10
 80092ce:	d004      	beq.n	80092da <_puts_r+0x8e>
 80092d0:	6823      	ldr	r3, [r4, #0]
 80092d2:	1c5a      	adds	r2, r3, #1
 80092d4:	6022      	str	r2, [r4, #0]
 80092d6:	7019      	strb	r1, [r3, #0]
 80092d8:	e7cf      	b.n	800927a <_puts_r+0x2e>
 80092da:	4622      	mov	r2, r4
 80092dc:	4628      	mov	r0, r5
 80092de:	f000 f854 	bl	800938a <__swbuf_r>
 80092e2:	3001      	adds	r0, #1
 80092e4:	d1c9      	bne.n	800927a <_puts_r+0x2e>
 80092e6:	e7df      	b.n	80092a8 <_puts_r+0x5c>
 80092e8:	6823      	ldr	r3, [r4, #0]
 80092ea:	250a      	movs	r5, #10
 80092ec:	1c5a      	adds	r2, r3, #1
 80092ee:	6022      	str	r2, [r4, #0]
 80092f0:	701d      	strb	r5, [r3, #0]
 80092f2:	e7db      	b.n	80092ac <_puts_r+0x60>

080092f4 <puts>:
 80092f4:	4b02      	ldr	r3, [pc, #8]	; (8009300 <puts+0xc>)
 80092f6:	4601      	mov	r1, r0
 80092f8:	6818      	ldr	r0, [r3, #0]
 80092fa:	f7ff bfa7 	b.w	800924c <_puts_r>
 80092fe:	bf00      	nop
 8009300:	20000074 	.word	0x20000074

08009304 <__sread>:
 8009304:	b510      	push	{r4, lr}
 8009306:	460c      	mov	r4, r1
 8009308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800930c:	f000 f900 	bl	8009510 <_read_r>
 8009310:	2800      	cmp	r0, #0
 8009312:	bfab      	itete	ge
 8009314:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009316:	89a3      	ldrhlt	r3, [r4, #12]
 8009318:	181b      	addge	r3, r3, r0
 800931a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800931e:	bfac      	ite	ge
 8009320:	6563      	strge	r3, [r4, #84]	; 0x54
 8009322:	81a3      	strhlt	r3, [r4, #12]
 8009324:	bd10      	pop	{r4, pc}

08009326 <__swrite>:
 8009326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800932a:	461f      	mov	r7, r3
 800932c:	898b      	ldrh	r3, [r1, #12]
 800932e:	05db      	lsls	r3, r3, #23
 8009330:	4605      	mov	r5, r0
 8009332:	460c      	mov	r4, r1
 8009334:	4616      	mov	r6, r2
 8009336:	d505      	bpl.n	8009344 <__swrite+0x1e>
 8009338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800933c:	2302      	movs	r3, #2
 800933e:	2200      	movs	r2, #0
 8009340:	f000 f8d4 	bl	80094ec <_lseek_r>
 8009344:	89a3      	ldrh	r3, [r4, #12]
 8009346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800934a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800934e:	81a3      	strh	r3, [r4, #12]
 8009350:	4632      	mov	r2, r6
 8009352:	463b      	mov	r3, r7
 8009354:	4628      	mov	r0, r5
 8009356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800935a:	f000 b8eb 	b.w	8009534 <_write_r>

0800935e <__sseek>:
 800935e:	b510      	push	{r4, lr}
 8009360:	460c      	mov	r4, r1
 8009362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009366:	f000 f8c1 	bl	80094ec <_lseek_r>
 800936a:	1c43      	adds	r3, r0, #1
 800936c:	89a3      	ldrh	r3, [r4, #12]
 800936e:	bf15      	itete	ne
 8009370:	6560      	strne	r0, [r4, #84]	; 0x54
 8009372:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009376:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800937a:	81a3      	strheq	r3, [r4, #12]
 800937c:	bf18      	it	ne
 800937e:	81a3      	strhne	r3, [r4, #12]
 8009380:	bd10      	pop	{r4, pc}

08009382 <__sclose>:
 8009382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009386:	f000 b8a1 	b.w	80094cc <_close_r>

0800938a <__swbuf_r>:
 800938a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938c:	460e      	mov	r6, r1
 800938e:	4614      	mov	r4, r2
 8009390:	4605      	mov	r5, r0
 8009392:	b118      	cbz	r0, 800939c <__swbuf_r+0x12>
 8009394:	6a03      	ldr	r3, [r0, #32]
 8009396:	b90b      	cbnz	r3, 800939c <__swbuf_r+0x12>
 8009398:	f7ff ff10 	bl	80091bc <__sinit>
 800939c:	69a3      	ldr	r3, [r4, #24]
 800939e:	60a3      	str	r3, [r4, #8]
 80093a0:	89a3      	ldrh	r3, [r4, #12]
 80093a2:	071a      	lsls	r2, r3, #28
 80093a4:	d525      	bpl.n	80093f2 <__swbuf_r+0x68>
 80093a6:	6923      	ldr	r3, [r4, #16]
 80093a8:	b31b      	cbz	r3, 80093f2 <__swbuf_r+0x68>
 80093aa:	6823      	ldr	r3, [r4, #0]
 80093ac:	6922      	ldr	r2, [r4, #16]
 80093ae:	1a98      	subs	r0, r3, r2
 80093b0:	6963      	ldr	r3, [r4, #20]
 80093b2:	b2f6      	uxtb	r6, r6
 80093b4:	4283      	cmp	r3, r0
 80093b6:	4637      	mov	r7, r6
 80093b8:	dc04      	bgt.n	80093c4 <__swbuf_r+0x3a>
 80093ba:	4621      	mov	r1, r4
 80093bc:	4628      	mov	r0, r5
 80093be:	f001 fdb7 	bl	800af30 <_fflush_r>
 80093c2:	b9e0      	cbnz	r0, 80093fe <__swbuf_r+0x74>
 80093c4:	68a3      	ldr	r3, [r4, #8]
 80093c6:	3b01      	subs	r3, #1
 80093c8:	60a3      	str	r3, [r4, #8]
 80093ca:	6823      	ldr	r3, [r4, #0]
 80093cc:	1c5a      	adds	r2, r3, #1
 80093ce:	6022      	str	r2, [r4, #0]
 80093d0:	701e      	strb	r6, [r3, #0]
 80093d2:	6962      	ldr	r2, [r4, #20]
 80093d4:	1c43      	adds	r3, r0, #1
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d004      	beq.n	80093e4 <__swbuf_r+0x5a>
 80093da:	89a3      	ldrh	r3, [r4, #12]
 80093dc:	07db      	lsls	r3, r3, #31
 80093de:	d506      	bpl.n	80093ee <__swbuf_r+0x64>
 80093e0:	2e0a      	cmp	r6, #10
 80093e2:	d104      	bne.n	80093ee <__swbuf_r+0x64>
 80093e4:	4621      	mov	r1, r4
 80093e6:	4628      	mov	r0, r5
 80093e8:	f001 fda2 	bl	800af30 <_fflush_r>
 80093ec:	b938      	cbnz	r0, 80093fe <__swbuf_r+0x74>
 80093ee:	4638      	mov	r0, r7
 80093f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093f2:	4621      	mov	r1, r4
 80093f4:	4628      	mov	r0, r5
 80093f6:	f000 f805 	bl	8009404 <__swsetup_r>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d0d5      	beq.n	80093aa <__swbuf_r+0x20>
 80093fe:	f04f 37ff 	mov.w	r7, #4294967295
 8009402:	e7f4      	b.n	80093ee <__swbuf_r+0x64>

08009404 <__swsetup_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4b2a      	ldr	r3, [pc, #168]	; (80094b0 <__swsetup_r+0xac>)
 8009408:	4605      	mov	r5, r0
 800940a:	6818      	ldr	r0, [r3, #0]
 800940c:	460c      	mov	r4, r1
 800940e:	b118      	cbz	r0, 8009418 <__swsetup_r+0x14>
 8009410:	6a03      	ldr	r3, [r0, #32]
 8009412:	b90b      	cbnz	r3, 8009418 <__swsetup_r+0x14>
 8009414:	f7ff fed2 	bl	80091bc <__sinit>
 8009418:	89a3      	ldrh	r3, [r4, #12]
 800941a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800941e:	0718      	lsls	r0, r3, #28
 8009420:	d422      	bmi.n	8009468 <__swsetup_r+0x64>
 8009422:	06d9      	lsls	r1, r3, #27
 8009424:	d407      	bmi.n	8009436 <__swsetup_r+0x32>
 8009426:	2309      	movs	r3, #9
 8009428:	602b      	str	r3, [r5, #0]
 800942a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800942e:	81a3      	strh	r3, [r4, #12]
 8009430:	f04f 30ff 	mov.w	r0, #4294967295
 8009434:	e034      	b.n	80094a0 <__swsetup_r+0x9c>
 8009436:	0758      	lsls	r0, r3, #29
 8009438:	d512      	bpl.n	8009460 <__swsetup_r+0x5c>
 800943a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800943c:	b141      	cbz	r1, 8009450 <__swsetup_r+0x4c>
 800943e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009442:	4299      	cmp	r1, r3
 8009444:	d002      	beq.n	800944c <__swsetup_r+0x48>
 8009446:	4628      	mov	r0, r5
 8009448:	f000 ff2c 	bl	800a2a4 <_free_r>
 800944c:	2300      	movs	r3, #0
 800944e:	6363      	str	r3, [r4, #52]	; 0x34
 8009450:	89a3      	ldrh	r3, [r4, #12]
 8009452:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009456:	81a3      	strh	r3, [r4, #12]
 8009458:	2300      	movs	r3, #0
 800945a:	6063      	str	r3, [r4, #4]
 800945c:	6923      	ldr	r3, [r4, #16]
 800945e:	6023      	str	r3, [r4, #0]
 8009460:	89a3      	ldrh	r3, [r4, #12]
 8009462:	f043 0308 	orr.w	r3, r3, #8
 8009466:	81a3      	strh	r3, [r4, #12]
 8009468:	6923      	ldr	r3, [r4, #16]
 800946a:	b94b      	cbnz	r3, 8009480 <__swsetup_r+0x7c>
 800946c:	89a3      	ldrh	r3, [r4, #12]
 800946e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009476:	d003      	beq.n	8009480 <__swsetup_r+0x7c>
 8009478:	4621      	mov	r1, r4
 800947a:	4628      	mov	r0, r5
 800947c:	f001 fda6 	bl	800afcc <__smakebuf_r>
 8009480:	89a0      	ldrh	r0, [r4, #12]
 8009482:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009486:	f010 0301 	ands.w	r3, r0, #1
 800948a:	d00a      	beq.n	80094a2 <__swsetup_r+0x9e>
 800948c:	2300      	movs	r3, #0
 800948e:	60a3      	str	r3, [r4, #8]
 8009490:	6963      	ldr	r3, [r4, #20]
 8009492:	425b      	negs	r3, r3
 8009494:	61a3      	str	r3, [r4, #24]
 8009496:	6923      	ldr	r3, [r4, #16]
 8009498:	b943      	cbnz	r3, 80094ac <__swsetup_r+0xa8>
 800949a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800949e:	d1c4      	bne.n	800942a <__swsetup_r+0x26>
 80094a0:	bd38      	pop	{r3, r4, r5, pc}
 80094a2:	0781      	lsls	r1, r0, #30
 80094a4:	bf58      	it	pl
 80094a6:	6963      	ldrpl	r3, [r4, #20]
 80094a8:	60a3      	str	r3, [r4, #8]
 80094aa:	e7f4      	b.n	8009496 <__swsetup_r+0x92>
 80094ac:	2000      	movs	r0, #0
 80094ae:	e7f7      	b.n	80094a0 <__swsetup_r+0x9c>
 80094b0:	20000074 	.word	0x20000074

080094b4 <memset>:
 80094b4:	4402      	add	r2, r0
 80094b6:	4603      	mov	r3, r0
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d100      	bne.n	80094be <memset+0xa>
 80094bc:	4770      	bx	lr
 80094be:	f803 1b01 	strb.w	r1, [r3], #1
 80094c2:	e7f9      	b.n	80094b8 <memset+0x4>

080094c4 <_localeconv_r>:
 80094c4:	4800      	ldr	r0, [pc, #0]	; (80094c8 <_localeconv_r+0x4>)
 80094c6:	4770      	bx	lr
 80094c8:	20000168 	.word	0x20000168

080094cc <_close_r>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	4d06      	ldr	r5, [pc, #24]	; (80094e8 <_close_r+0x1c>)
 80094d0:	2300      	movs	r3, #0
 80094d2:	4604      	mov	r4, r0
 80094d4:	4608      	mov	r0, r1
 80094d6:	602b      	str	r3, [r5, #0]
 80094d8:	f7f8 fcdc 	bl	8001e94 <_close>
 80094dc:	1c43      	adds	r3, r0, #1
 80094de:	d102      	bne.n	80094e6 <_close_r+0x1a>
 80094e0:	682b      	ldr	r3, [r5, #0]
 80094e2:	b103      	cbz	r3, 80094e6 <_close_r+0x1a>
 80094e4:	6023      	str	r3, [r4, #0]
 80094e6:	bd38      	pop	{r3, r4, r5, pc}
 80094e8:	2000051c 	.word	0x2000051c

080094ec <_lseek_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4d07      	ldr	r5, [pc, #28]	; (800950c <_lseek_r+0x20>)
 80094f0:	4604      	mov	r4, r0
 80094f2:	4608      	mov	r0, r1
 80094f4:	4611      	mov	r1, r2
 80094f6:	2200      	movs	r2, #0
 80094f8:	602a      	str	r2, [r5, #0]
 80094fa:	461a      	mov	r2, r3
 80094fc:	f7f8 fcf1 	bl	8001ee2 <_lseek>
 8009500:	1c43      	adds	r3, r0, #1
 8009502:	d102      	bne.n	800950a <_lseek_r+0x1e>
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	b103      	cbz	r3, 800950a <_lseek_r+0x1e>
 8009508:	6023      	str	r3, [r4, #0]
 800950a:	bd38      	pop	{r3, r4, r5, pc}
 800950c:	2000051c 	.word	0x2000051c

08009510 <_read_r>:
 8009510:	b538      	push	{r3, r4, r5, lr}
 8009512:	4d07      	ldr	r5, [pc, #28]	; (8009530 <_read_r+0x20>)
 8009514:	4604      	mov	r4, r0
 8009516:	4608      	mov	r0, r1
 8009518:	4611      	mov	r1, r2
 800951a:	2200      	movs	r2, #0
 800951c:	602a      	str	r2, [r5, #0]
 800951e:	461a      	mov	r2, r3
 8009520:	f7f8 fc86 	bl	8001e30 <_read>
 8009524:	1c43      	adds	r3, r0, #1
 8009526:	d102      	bne.n	800952e <_read_r+0x1e>
 8009528:	682b      	ldr	r3, [r5, #0]
 800952a:	b103      	cbz	r3, 800952e <_read_r+0x1e>
 800952c:	6023      	str	r3, [r4, #0]
 800952e:	bd38      	pop	{r3, r4, r5, pc}
 8009530:	2000051c 	.word	0x2000051c

08009534 <_write_r>:
 8009534:	b538      	push	{r3, r4, r5, lr}
 8009536:	4d07      	ldr	r5, [pc, #28]	; (8009554 <_write_r+0x20>)
 8009538:	4604      	mov	r4, r0
 800953a:	4608      	mov	r0, r1
 800953c:	4611      	mov	r1, r2
 800953e:	2200      	movs	r2, #0
 8009540:	602a      	str	r2, [r5, #0]
 8009542:	461a      	mov	r2, r3
 8009544:	f7f8 fc92 	bl	8001e6c <_write>
 8009548:	1c43      	adds	r3, r0, #1
 800954a:	d102      	bne.n	8009552 <_write_r+0x1e>
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	b103      	cbz	r3, 8009552 <_write_r+0x1e>
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	bd38      	pop	{r3, r4, r5, pc}
 8009554:	2000051c 	.word	0x2000051c

08009558 <__errno>:
 8009558:	4b01      	ldr	r3, [pc, #4]	; (8009560 <__errno+0x8>)
 800955a:	6818      	ldr	r0, [r3, #0]
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	20000074 	.word	0x20000074

08009564 <__libc_init_array>:
 8009564:	b570      	push	{r4, r5, r6, lr}
 8009566:	4d0d      	ldr	r5, [pc, #52]	; (800959c <__libc_init_array+0x38>)
 8009568:	4c0d      	ldr	r4, [pc, #52]	; (80095a0 <__libc_init_array+0x3c>)
 800956a:	1b64      	subs	r4, r4, r5
 800956c:	10a4      	asrs	r4, r4, #2
 800956e:	2600      	movs	r6, #0
 8009570:	42a6      	cmp	r6, r4
 8009572:	d109      	bne.n	8009588 <__libc_init_array+0x24>
 8009574:	4d0b      	ldr	r5, [pc, #44]	; (80095a4 <__libc_init_array+0x40>)
 8009576:	4c0c      	ldr	r4, [pc, #48]	; (80095a8 <__libc_init_array+0x44>)
 8009578:	f001 fe56 	bl	800b228 <_init>
 800957c:	1b64      	subs	r4, r4, r5
 800957e:	10a4      	asrs	r4, r4, #2
 8009580:	2600      	movs	r6, #0
 8009582:	42a6      	cmp	r6, r4
 8009584:	d105      	bne.n	8009592 <__libc_init_array+0x2e>
 8009586:	bd70      	pop	{r4, r5, r6, pc}
 8009588:	f855 3b04 	ldr.w	r3, [r5], #4
 800958c:	4798      	blx	r3
 800958e:	3601      	adds	r6, #1
 8009590:	e7ee      	b.n	8009570 <__libc_init_array+0xc>
 8009592:	f855 3b04 	ldr.w	r3, [r5], #4
 8009596:	4798      	blx	r3
 8009598:	3601      	adds	r6, #1
 800959a:	e7f2      	b.n	8009582 <__libc_init_array+0x1e>
 800959c:	0800b6ac 	.word	0x0800b6ac
 80095a0:	0800b6ac 	.word	0x0800b6ac
 80095a4:	0800b6ac 	.word	0x0800b6ac
 80095a8:	0800b6b0 	.word	0x0800b6b0

080095ac <__retarget_lock_acquire_recursive>:
 80095ac:	4770      	bx	lr

080095ae <__retarget_lock_release_recursive>:
 80095ae:	4770      	bx	lr

080095b0 <quorem>:
 80095b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b4:	6903      	ldr	r3, [r0, #16]
 80095b6:	690c      	ldr	r4, [r1, #16]
 80095b8:	42a3      	cmp	r3, r4
 80095ba:	4607      	mov	r7, r0
 80095bc:	db7e      	blt.n	80096bc <quorem+0x10c>
 80095be:	3c01      	subs	r4, #1
 80095c0:	f101 0814 	add.w	r8, r1, #20
 80095c4:	f100 0514 	add.w	r5, r0, #20
 80095c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095cc:	9301      	str	r3, [sp, #4]
 80095ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80095d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095d6:	3301      	adds	r3, #1
 80095d8:	429a      	cmp	r2, r3
 80095da:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80095de:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80095e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80095e6:	d331      	bcc.n	800964c <quorem+0x9c>
 80095e8:	f04f 0e00 	mov.w	lr, #0
 80095ec:	4640      	mov	r0, r8
 80095ee:	46ac      	mov	ip, r5
 80095f0:	46f2      	mov	sl, lr
 80095f2:	f850 2b04 	ldr.w	r2, [r0], #4
 80095f6:	b293      	uxth	r3, r2
 80095f8:	fb06 e303 	mla	r3, r6, r3, lr
 80095fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009600:	0c1a      	lsrs	r2, r3, #16
 8009602:	b29b      	uxth	r3, r3
 8009604:	ebaa 0303 	sub.w	r3, sl, r3
 8009608:	f8dc a000 	ldr.w	sl, [ip]
 800960c:	fa13 f38a 	uxtah	r3, r3, sl
 8009610:	fb06 220e 	mla	r2, r6, lr, r2
 8009614:	9300      	str	r3, [sp, #0]
 8009616:	9b00      	ldr	r3, [sp, #0]
 8009618:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800961c:	b292      	uxth	r2, r2
 800961e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009622:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009626:	f8bd 3000 	ldrh.w	r3, [sp]
 800962a:	4581      	cmp	r9, r0
 800962c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009630:	f84c 3b04 	str.w	r3, [ip], #4
 8009634:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009638:	d2db      	bcs.n	80095f2 <quorem+0x42>
 800963a:	f855 300b 	ldr.w	r3, [r5, fp]
 800963e:	b92b      	cbnz	r3, 800964c <quorem+0x9c>
 8009640:	9b01      	ldr	r3, [sp, #4]
 8009642:	3b04      	subs	r3, #4
 8009644:	429d      	cmp	r5, r3
 8009646:	461a      	mov	r2, r3
 8009648:	d32c      	bcc.n	80096a4 <quorem+0xf4>
 800964a:	613c      	str	r4, [r7, #16]
 800964c:	4638      	mov	r0, r7
 800964e:	f001 f9a5 	bl	800a99c <__mcmp>
 8009652:	2800      	cmp	r0, #0
 8009654:	db22      	blt.n	800969c <quorem+0xec>
 8009656:	3601      	adds	r6, #1
 8009658:	4629      	mov	r1, r5
 800965a:	2000      	movs	r0, #0
 800965c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009660:	f8d1 c000 	ldr.w	ip, [r1]
 8009664:	b293      	uxth	r3, r2
 8009666:	1ac3      	subs	r3, r0, r3
 8009668:	0c12      	lsrs	r2, r2, #16
 800966a:	fa13 f38c 	uxtah	r3, r3, ip
 800966e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009672:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009676:	b29b      	uxth	r3, r3
 8009678:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800967c:	45c1      	cmp	r9, r8
 800967e:	f841 3b04 	str.w	r3, [r1], #4
 8009682:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009686:	d2e9      	bcs.n	800965c <quorem+0xac>
 8009688:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800968c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009690:	b922      	cbnz	r2, 800969c <quorem+0xec>
 8009692:	3b04      	subs	r3, #4
 8009694:	429d      	cmp	r5, r3
 8009696:	461a      	mov	r2, r3
 8009698:	d30a      	bcc.n	80096b0 <quorem+0x100>
 800969a:	613c      	str	r4, [r7, #16]
 800969c:	4630      	mov	r0, r6
 800969e:	b003      	add	sp, #12
 80096a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096a4:	6812      	ldr	r2, [r2, #0]
 80096a6:	3b04      	subs	r3, #4
 80096a8:	2a00      	cmp	r2, #0
 80096aa:	d1ce      	bne.n	800964a <quorem+0x9a>
 80096ac:	3c01      	subs	r4, #1
 80096ae:	e7c9      	b.n	8009644 <quorem+0x94>
 80096b0:	6812      	ldr	r2, [r2, #0]
 80096b2:	3b04      	subs	r3, #4
 80096b4:	2a00      	cmp	r2, #0
 80096b6:	d1f0      	bne.n	800969a <quorem+0xea>
 80096b8:	3c01      	subs	r4, #1
 80096ba:	e7eb      	b.n	8009694 <quorem+0xe4>
 80096bc:	2000      	movs	r0, #0
 80096be:	e7ee      	b.n	800969e <quorem+0xee>

080096c0 <_dtoa_r>:
 80096c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c4:	ed2d 8b04 	vpush	{d8-d9}
 80096c8:	69c5      	ldr	r5, [r0, #28]
 80096ca:	b093      	sub	sp, #76	; 0x4c
 80096cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80096d0:	ec57 6b10 	vmov	r6, r7, d0
 80096d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80096d8:	9107      	str	r1, [sp, #28]
 80096da:	4604      	mov	r4, r0
 80096dc:	920a      	str	r2, [sp, #40]	; 0x28
 80096de:	930d      	str	r3, [sp, #52]	; 0x34
 80096e0:	b975      	cbnz	r5, 8009700 <_dtoa_r+0x40>
 80096e2:	2010      	movs	r0, #16
 80096e4:	f000 fe2a 	bl	800a33c <malloc>
 80096e8:	4602      	mov	r2, r0
 80096ea:	61e0      	str	r0, [r4, #28]
 80096ec:	b920      	cbnz	r0, 80096f8 <_dtoa_r+0x38>
 80096ee:	4bae      	ldr	r3, [pc, #696]	; (80099a8 <_dtoa_r+0x2e8>)
 80096f0:	21ef      	movs	r1, #239	; 0xef
 80096f2:	48ae      	ldr	r0, [pc, #696]	; (80099ac <_dtoa_r+0x2ec>)
 80096f4:	f001 fce6 	bl	800b0c4 <__assert_func>
 80096f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80096fc:	6005      	str	r5, [r0, #0]
 80096fe:	60c5      	str	r5, [r0, #12]
 8009700:	69e3      	ldr	r3, [r4, #28]
 8009702:	6819      	ldr	r1, [r3, #0]
 8009704:	b151      	cbz	r1, 800971c <_dtoa_r+0x5c>
 8009706:	685a      	ldr	r2, [r3, #4]
 8009708:	604a      	str	r2, [r1, #4]
 800970a:	2301      	movs	r3, #1
 800970c:	4093      	lsls	r3, r2
 800970e:	608b      	str	r3, [r1, #8]
 8009710:	4620      	mov	r0, r4
 8009712:	f000 ff07 	bl	800a524 <_Bfree>
 8009716:	69e3      	ldr	r3, [r4, #28]
 8009718:	2200      	movs	r2, #0
 800971a:	601a      	str	r2, [r3, #0]
 800971c:	1e3b      	subs	r3, r7, #0
 800971e:	bfbb      	ittet	lt
 8009720:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009724:	9303      	strlt	r3, [sp, #12]
 8009726:	2300      	movge	r3, #0
 8009728:	2201      	movlt	r2, #1
 800972a:	bfac      	ite	ge
 800972c:	f8c8 3000 	strge.w	r3, [r8]
 8009730:	f8c8 2000 	strlt.w	r2, [r8]
 8009734:	4b9e      	ldr	r3, [pc, #632]	; (80099b0 <_dtoa_r+0x2f0>)
 8009736:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800973a:	ea33 0308 	bics.w	r3, r3, r8
 800973e:	d11b      	bne.n	8009778 <_dtoa_r+0xb8>
 8009740:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009742:	f242 730f 	movw	r3, #9999	; 0x270f
 8009746:	6013      	str	r3, [r2, #0]
 8009748:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800974c:	4333      	orrs	r3, r6
 800974e:	f000 8593 	beq.w	800a278 <_dtoa_r+0xbb8>
 8009752:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009754:	b963      	cbnz	r3, 8009770 <_dtoa_r+0xb0>
 8009756:	4b97      	ldr	r3, [pc, #604]	; (80099b4 <_dtoa_r+0x2f4>)
 8009758:	e027      	b.n	80097aa <_dtoa_r+0xea>
 800975a:	4b97      	ldr	r3, [pc, #604]	; (80099b8 <_dtoa_r+0x2f8>)
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	3308      	adds	r3, #8
 8009760:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009762:	6013      	str	r3, [r2, #0]
 8009764:	9800      	ldr	r0, [sp, #0]
 8009766:	b013      	add	sp, #76	; 0x4c
 8009768:	ecbd 8b04 	vpop	{d8-d9}
 800976c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009770:	4b90      	ldr	r3, [pc, #576]	; (80099b4 <_dtoa_r+0x2f4>)
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	3303      	adds	r3, #3
 8009776:	e7f3      	b.n	8009760 <_dtoa_r+0xa0>
 8009778:	ed9d 7b02 	vldr	d7, [sp, #8]
 800977c:	2200      	movs	r2, #0
 800977e:	ec51 0b17 	vmov	r0, r1, d7
 8009782:	eeb0 8a47 	vmov.f32	s16, s14
 8009786:	eef0 8a67 	vmov.f32	s17, s15
 800978a:	2300      	movs	r3, #0
 800978c:	f7f7 f99c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009790:	4681      	mov	r9, r0
 8009792:	b160      	cbz	r0, 80097ae <_dtoa_r+0xee>
 8009794:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009796:	2301      	movs	r3, #1
 8009798:	6013      	str	r3, [r2, #0]
 800979a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800979c:	2b00      	cmp	r3, #0
 800979e:	f000 8568 	beq.w	800a272 <_dtoa_r+0xbb2>
 80097a2:	4b86      	ldr	r3, [pc, #536]	; (80099bc <_dtoa_r+0x2fc>)
 80097a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80097a6:	6013      	str	r3, [r2, #0]
 80097a8:	3b01      	subs	r3, #1
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	e7da      	b.n	8009764 <_dtoa_r+0xa4>
 80097ae:	aa10      	add	r2, sp, #64	; 0x40
 80097b0:	a911      	add	r1, sp, #68	; 0x44
 80097b2:	4620      	mov	r0, r4
 80097b4:	eeb0 0a48 	vmov.f32	s0, s16
 80097b8:	eef0 0a68 	vmov.f32	s1, s17
 80097bc:	f001 f994 	bl	800aae8 <__d2b>
 80097c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80097c4:	4682      	mov	sl, r0
 80097c6:	2d00      	cmp	r5, #0
 80097c8:	d07f      	beq.n	80098ca <_dtoa_r+0x20a>
 80097ca:	ee18 3a90 	vmov	r3, s17
 80097ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097d2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80097d6:	ec51 0b18 	vmov	r0, r1, d8
 80097da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80097de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80097e2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80097e6:	4619      	mov	r1, r3
 80097e8:	2200      	movs	r2, #0
 80097ea:	4b75      	ldr	r3, [pc, #468]	; (80099c0 <_dtoa_r+0x300>)
 80097ec:	f7f6 fd4c 	bl	8000288 <__aeabi_dsub>
 80097f0:	a367      	add	r3, pc, #412	; (adr r3, 8009990 <_dtoa_r+0x2d0>)
 80097f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f6:	f7f6 feff 	bl	80005f8 <__aeabi_dmul>
 80097fa:	a367      	add	r3, pc, #412	; (adr r3, 8009998 <_dtoa_r+0x2d8>)
 80097fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009800:	f7f6 fd44 	bl	800028c <__adddf3>
 8009804:	4606      	mov	r6, r0
 8009806:	4628      	mov	r0, r5
 8009808:	460f      	mov	r7, r1
 800980a:	f7f6 fe8b 	bl	8000524 <__aeabi_i2d>
 800980e:	a364      	add	r3, pc, #400	; (adr r3, 80099a0 <_dtoa_r+0x2e0>)
 8009810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009814:	f7f6 fef0 	bl	80005f8 <__aeabi_dmul>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	4630      	mov	r0, r6
 800981e:	4639      	mov	r1, r7
 8009820:	f7f6 fd34 	bl	800028c <__adddf3>
 8009824:	4606      	mov	r6, r0
 8009826:	460f      	mov	r7, r1
 8009828:	f7f7 f996 	bl	8000b58 <__aeabi_d2iz>
 800982c:	2200      	movs	r2, #0
 800982e:	4683      	mov	fp, r0
 8009830:	2300      	movs	r3, #0
 8009832:	4630      	mov	r0, r6
 8009834:	4639      	mov	r1, r7
 8009836:	f7f7 f951 	bl	8000adc <__aeabi_dcmplt>
 800983a:	b148      	cbz	r0, 8009850 <_dtoa_r+0x190>
 800983c:	4658      	mov	r0, fp
 800983e:	f7f6 fe71 	bl	8000524 <__aeabi_i2d>
 8009842:	4632      	mov	r2, r6
 8009844:	463b      	mov	r3, r7
 8009846:	f7f7 f93f 	bl	8000ac8 <__aeabi_dcmpeq>
 800984a:	b908      	cbnz	r0, 8009850 <_dtoa_r+0x190>
 800984c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009850:	f1bb 0f16 	cmp.w	fp, #22
 8009854:	d857      	bhi.n	8009906 <_dtoa_r+0x246>
 8009856:	4b5b      	ldr	r3, [pc, #364]	; (80099c4 <_dtoa_r+0x304>)
 8009858:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800985c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009860:	ec51 0b18 	vmov	r0, r1, d8
 8009864:	f7f7 f93a 	bl	8000adc <__aeabi_dcmplt>
 8009868:	2800      	cmp	r0, #0
 800986a:	d04e      	beq.n	800990a <_dtoa_r+0x24a>
 800986c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009870:	2300      	movs	r3, #0
 8009872:	930c      	str	r3, [sp, #48]	; 0x30
 8009874:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009876:	1b5b      	subs	r3, r3, r5
 8009878:	1e5a      	subs	r2, r3, #1
 800987a:	bf45      	ittet	mi
 800987c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009880:	9305      	strmi	r3, [sp, #20]
 8009882:	2300      	movpl	r3, #0
 8009884:	2300      	movmi	r3, #0
 8009886:	9206      	str	r2, [sp, #24]
 8009888:	bf54      	ite	pl
 800988a:	9305      	strpl	r3, [sp, #20]
 800988c:	9306      	strmi	r3, [sp, #24]
 800988e:	f1bb 0f00 	cmp.w	fp, #0
 8009892:	db3c      	blt.n	800990e <_dtoa_r+0x24e>
 8009894:	9b06      	ldr	r3, [sp, #24]
 8009896:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800989a:	445b      	add	r3, fp
 800989c:	9306      	str	r3, [sp, #24]
 800989e:	2300      	movs	r3, #0
 80098a0:	9308      	str	r3, [sp, #32]
 80098a2:	9b07      	ldr	r3, [sp, #28]
 80098a4:	2b09      	cmp	r3, #9
 80098a6:	d868      	bhi.n	800997a <_dtoa_r+0x2ba>
 80098a8:	2b05      	cmp	r3, #5
 80098aa:	bfc4      	itt	gt
 80098ac:	3b04      	subgt	r3, #4
 80098ae:	9307      	strgt	r3, [sp, #28]
 80098b0:	9b07      	ldr	r3, [sp, #28]
 80098b2:	f1a3 0302 	sub.w	r3, r3, #2
 80098b6:	bfcc      	ite	gt
 80098b8:	2500      	movgt	r5, #0
 80098ba:	2501      	movle	r5, #1
 80098bc:	2b03      	cmp	r3, #3
 80098be:	f200 8085 	bhi.w	80099cc <_dtoa_r+0x30c>
 80098c2:	e8df f003 	tbb	[pc, r3]
 80098c6:	3b2e      	.short	0x3b2e
 80098c8:	5839      	.short	0x5839
 80098ca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80098ce:	441d      	add	r5, r3
 80098d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80098d4:	2b20      	cmp	r3, #32
 80098d6:	bfc1      	itttt	gt
 80098d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80098dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80098e0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80098e4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80098e8:	bfd6      	itet	le
 80098ea:	f1c3 0320 	rsble	r3, r3, #32
 80098ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80098f2:	fa06 f003 	lslle.w	r0, r6, r3
 80098f6:	f7f6 fe05 	bl	8000504 <__aeabi_ui2d>
 80098fa:	2201      	movs	r2, #1
 80098fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009900:	3d01      	subs	r5, #1
 8009902:	920e      	str	r2, [sp, #56]	; 0x38
 8009904:	e76f      	b.n	80097e6 <_dtoa_r+0x126>
 8009906:	2301      	movs	r3, #1
 8009908:	e7b3      	b.n	8009872 <_dtoa_r+0x1b2>
 800990a:	900c      	str	r0, [sp, #48]	; 0x30
 800990c:	e7b2      	b.n	8009874 <_dtoa_r+0x1b4>
 800990e:	9b05      	ldr	r3, [sp, #20]
 8009910:	eba3 030b 	sub.w	r3, r3, fp
 8009914:	9305      	str	r3, [sp, #20]
 8009916:	f1cb 0300 	rsb	r3, fp, #0
 800991a:	9308      	str	r3, [sp, #32]
 800991c:	2300      	movs	r3, #0
 800991e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009920:	e7bf      	b.n	80098a2 <_dtoa_r+0x1e2>
 8009922:	2300      	movs	r3, #0
 8009924:	9309      	str	r3, [sp, #36]	; 0x24
 8009926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009928:	2b00      	cmp	r3, #0
 800992a:	dc52      	bgt.n	80099d2 <_dtoa_r+0x312>
 800992c:	2301      	movs	r3, #1
 800992e:	9301      	str	r3, [sp, #4]
 8009930:	9304      	str	r3, [sp, #16]
 8009932:	461a      	mov	r2, r3
 8009934:	920a      	str	r2, [sp, #40]	; 0x28
 8009936:	e00b      	b.n	8009950 <_dtoa_r+0x290>
 8009938:	2301      	movs	r3, #1
 800993a:	e7f3      	b.n	8009924 <_dtoa_r+0x264>
 800993c:	2300      	movs	r3, #0
 800993e:	9309      	str	r3, [sp, #36]	; 0x24
 8009940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009942:	445b      	add	r3, fp
 8009944:	9301      	str	r3, [sp, #4]
 8009946:	3301      	adds	r3, #1
 8009948:	2b01      	cmp	r3, #1
 800994a:	9304      	str	r3, [sp, #16]
 800994c:	bfb8      	it	lt
 800994e:	2301      	movlt	r3, #1
 8009950:	69e0      	ldr	r0, [r4, #28]
 8009952:	2100      	movs	r1, #0
 8009954:	2204      	movs	r2, #4
 8009956:	f102 0614 	add.w	r6, r2, #20
 800995a:	429e      	cmp	r6, r3
 800995c:	d93d      	bls.n	80099da <_dtoa_r+0x31a>
 800995e:	6041      	str	r1, [r0, #4]
 8009960:	4620      	mov	r0, r4
 8009962:	f000 fd9f 	bl	800a4a4 <_Balloc>
 8009966:	9000      	str	r0, [sp, #0]
 8009968:	2800      	cmp	r0, #0
 800996a:	d139      	bne.n	80099e0 <_dtoa_r+0x320>
 800996c:	4b16      	ldr	r3, [pc, #88]	; (80099c8 <_dtoa_r+0x308>)
 800996e:	4602      	mov	r2, r0
 8009970:	f240 11af 	movw	r1, #431	; 0x1af
 8009974:	e6bd      	b.n	80096f2 <_dtoa_r+0x32>
 8009976:	2301      	movs	r3, #1
 8009978:	e7e1      	b.n	800993e <_dtoa_r+0x27e>
 800997a:	2501      	movs	r5, #1
 800997c:	2300      	movs	r3, #0
 800997e:	9307      	str	r3, [sp, #28]
 8009980:	9509      	str	r5, [sp, #36]	; 0x24
 8009982:	f04f 33ff 	mov.w	r3, #4294967295
 8009986:	9301      	str	r3, [sp, #4]
 8009988:	9304      	str	r3, [sp, #16]
 800998a:	2200      	movs	r2, #0
 800998c:	2312      	movs	r3, #18
 800998e:	e7d1      	b.n	8009934 <_dtoa_r+0x274>
 8009990:	636f4361 	.word	0x636f4361
 8009994:	3fd287a7 	.word	0x3fd287a7
 8009998:	8b60c8b3 	.word	0x8b60c8b3
 800999c:	3fc68a28 	.word	0x3fc68a28
 80099a0:	509f79fb 	.word	0x509f79fb
 80099a4:	3fd34413 	.word	0x3fd34413
 80099a8:	0800b375 	.word	0x0800b375
 80099ac:	0800b38c 	.word	0x0800b38c
 80099b0:	7ff00000 	.word	0x7ff00000
 80099b4:	0800b371 	.word	0x0800b371
 80099b8:	0800b368 	.word	0x0800b368
 80099bc:	0800b345 	.word	0x0800b345
 80099c0:	3ff80000 	.word	0x3ff80000
 80099c4:	0800b478 	.word	0x0800b478
 80099c8:	0800b3e4 	.word	0x0800b3e4
 80099cc:	2301      	movs	r3, #1
 80099ce:	9309      	str	r3, [sp, #36]	; 0x24
 80099d0:	e7d7      	b.n	8009982 <_dtoa_r+0x2c2>
 80099d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099d4:	9301      	str	r3, [sp, #4]
 80099d6:	9304      	str	r3, [sp, #16]
 80099d8:	e7ba      	b.n	8009950 <_dtoa_r+0x290>
 80099da:	3101      	adds	r1, #1
 80099dc:	0052      	lsls	r2, r2, #1
 80099de:	e7ba      	b.n	8009956 <_dtoa_r+0x296>
 80099e0:	69e3      	ldr	r3, [r4, #28]
 80099e2:	9a00      	ldr	r2, [sp, #0]
 80099e4:	601a      	str	r2, [r3, #0]
 80099e6:	9b04      	ldr	r3, [sp, #16]
 80099e8:	2b0e      	cmp	r3, #14
 80099ea:	f200 80a8 	bhi.w	8009b3e <_dtoa_r+0x47e>
 80099ee:	2d00      	cmp	r5, #0
 80099f0:	f000 80a5 	beq.w	8009b3e <_dtoa_r+0x47e>
 80099f4:	f1bb 0f00 	cmp.w	fp, #0
 80099f8:	dd38      	ble.n	8009a6c <_dtoa_r+0x3ac>
 80099fa:	4bc0      	ldr	r3, [pc, #768]	; (8009cfc <_dtoa_r+0x63c>)
 80099fc:	f00b 020f 	and.w	r2, fp, #15
 8009a00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a04:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009a08:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009a0c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009a10:	d019      	beq.n	8009a46 <_dtoa_r+0x386>
 8009a12:	4bbb      	ldr	r3, [pc, #748]	; (8009d00 <_dtoa_r+0x640>)
 8009a14:	ec51 0b18 	vmov	r0, r1, d8
 8009a18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a1c:	f7f6 ff16 	bl	800084c <__aeabi_ddiv>
 8009a20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a24:	f008 080f 	and.w	r8, r8, #15
 8009a28:	2503      	movs	r5, #3
 8009a2a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009d00 <_dtoa_r+0x640>
 8009a2e:	f1b8 0f00 	cmp.w	r8, #0
 8009a32:	d10a      	bne.n	8009a4a <_dtoa_r+0x38a>
 8009a34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a38:	4632      	mov	r2, r6
 8009a3a:	463b      	mov	r3, r7
 8009a3c:	f7f6 ff06 	bl	800084c <__aeabi_ddiv>
 8009a40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a44:	e02b      	b.n	8009a9e <_dtoa_r+0x3de>
 8009a46:	2502      	movs	r5, #2
 8009a48:	e7ef      	b.n	8009a2a <_dtoa_r+0x36a>
 8009a4a:	f018 0f01 	tst.w	r8, #1
 8009a4e:	d008      	beq.n	8009a62 <_dtoa_r+0x3a2>
 8009a50:	4630      	mov	r0, r6
 8009a52:	4639      	mov	r1, r7
 8009a54:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009a58:	f7f6 fdce 	bl	80005f8 <__aeabi_dmul>
 8009a5c:	3501      	adds	r5, #1
 8009a5e:	4606      	mov	r6, r0
 8009a60:	460f      	mov	r7, r1
 8009a62:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009a66:	f109 0908 	add.w	r9, r9, #8
 8009a6a:	e7e0      	b.n	8009a2e <_dtoa_r+0x36e>
 8009a6c:	f000 809f 	beq.w	8009bae <_dtoa_r+0x4ee>
 8009a70:	f1cb 0600 	rsb	r6, fp, #0
 8009a74:	4ba1      	ldr	r3, [pc, #644]	; (8009cfc <_dtoa_r+0x63c>)
 8009a76:	4fa2      	ldr	r7, [pc, #648]	; (8009d00 <_dtoa_r+0x640>)
 8009a78:	f006 020f 	and.w	r2, r6, #15
 8009a7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a84:	ec51 0b18 	vmov	r0, r1, d8
 8009a88:	f7f6 fdb6 	bl	80005f8 <__aeabi_dmul>
 8009a8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a90:	1136      	asrs	r6, r6, #4
 8009a92:	2300      	movs	r3, #0
 8009a94:	2502      	movs	r5, #2
 8009a96:	2e00      	cmp	r6, #0
 8009a98:	d17e      	bne.n	8009b98 <_dtoa_r+0x4d8>
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1d0      	bne.n	8009a40 <_dtoa_r+0x380>
 8009a9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009aa0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	f000 8084 	beq.w	8009bb2 <_dtoa_r+0x4f2>
 8009aaa:	4b96      	ldr	r3, [pc, #600]	; (8009d04 <_dtoa_r+0x644>)
 8009aac:	2200      	movs	r2, #0
 8009aae:	4640      	mov	r0, r8
 8009ab0:	4649      	mov	r1, r9
 8009ab2:	f7f7 f813 	bl	8000adc <__aeabi_dcmplt>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	d07b      	beq.n	8009bb2 <_dtoa_r+0x4f2>
 8009aba:	9b04      	ldr	r3, [sp, #16]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d078      	beq.n	8009bb2 <_dtoa_r+0x4f2>
 8009ac0:	9b01      	ldr	r3, [sp, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	dd39      	ble.n	8009b3a <_dtoa_r+0x47a>
 8009ac6:	4b90      	ldr	r3, [pc, #576]	; (8009d08 <_dtoa_r+0x648>)
 8009ac8:	2200      	movs	r2, #0
 8009aca:	4640      	mov	r0, r8
 8009acc:	4649      	mov	r1, r9
 8009ace:	f7f6 fd93 	bl	80005f8 <__aeabi_dmul>
 8009ad2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ad6:	9e01      	ldr	r6, [sp, #4]
 8009ad8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009adc:	3501      	adds	r5, #1
 8009ade:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	f7f6 fd1e 	bl	8000524 <__aeabi_i2d>
 8009ae8:	4642      	mov	r2, r8
 8009aea:	464b      	mov	r3, r9
 8009aec:	f7f6 fd84 	bl	80005f8 <__aeabi_dmul>
 8009af0:	4b86      	ldr	r3, [pc, #536]	; (8009d0c <_dtoa_r+0x64c>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	f7f6 fbca 	bl	800028c <__adddf3>
 8009af8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009afc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b00:	9303      	str	r3, [sp, #12]
 8009b02:	2e00      	cmp	r6, #0
 8009b04:	d158      	bne.n	8009bb8 <_dtoa_r+0x4f8>
 8009b06:	4b82      	ldr	r3, [pc, #520]	; (8009d10 <_dtoa_r+0x650>)
 8009b08:	2200      	movs	r2, #0
 8009b0a:	4640      	mov	r0, r8
 8009b0c:	4649      	mov	r1, r9
 8009b0e:	f7f6 fbbb 	bl	8000288 <__aeabi_dsub>
 8009b12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b16:	4680      	mov	r8, r0
 8009b18:	4689      	mov	r9, r1
 8009b1a:	f7f6 fffd 	bl	8000b18 <__aeabi_dcmpgt>
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	f040 8296 	bne.w	800a050 <_dtoa_r+0x990>
 8009b24:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009b28:	4640      	mov	r0, r8
 8009b2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b2e:	4649      	mov	r1, r9
 8009b30:	f7f6 ffd4 	bl	8000adc <__aeabi_dcmplt>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	f040 8289 	bne.w	800a04c <_dtoa_r+0x98c>
 8009b3a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009b3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f2c0 814e 	blt.w	8009de2 <_dtoa_r+0x722>
 8009b46:	f1bb 0f0e 	cmp.w	fp, #14
 8009b4a:	f300 814a 	bgt.w	8009de2 <_dtoa_r+0x722>
 8009b4e:	4b6b      	ldr	r3, [pc, #428]	; (8009cfc <_dtoa_r+0x63c>)
 8009b50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009b54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	f280 80dc 	bge.w	8009d18 <_dtoa_r+0x658>
 8009b60:	9b04      	ldr	r3, [sp, #16]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f300 80d8 	bgt.w	8009d18 <_dtoa_r+0x658>
 8009b68:	f040 826f 	bne.w	800a04a <_dtoa_r+0x98a>
 8009b6c:	4b68      	ldr	r3, [pc, #416]	; (8009d10 <_dtoa_r+0x650>)
 8009b6e:	2200      	movs	r2, #0
 8009b70:	4640      	mov	r0, r8
 8009b72:	4649      	mov	r1, r9
 8009b74:	f7f6 fd40 	bl	80005f8 <__aeabi_dmul>
 8009b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b7c:	f7f6 ffc2 	bl	8000b04 <__aeabi_dcmpge>
 8009b80:	9e04      	ldr	r6, [sp, #16]
 8009b82:	4637      	mov	r7, r6
 8009b84:	2800      	cmp	r0, #0
 8009b86:	f040 8245 	bne.w	800a014 <_dtoa_r+0x954>
 8009b8a:	9d00      	ldr	r5, [sp, #0]
 8009b8c:	2331      	movs	r3, #49	; 0x31
 8009b8e:	f805 3b01 	strb.w	r3, [r5], #1
 8009b92:	f10b 0b01 	add.w	fp, fp, #1
 8009b96:	e241      	b.n	800a01c <_dtoa_r+0x95c>
 8009b98:	07f2      	lsls	r2, r6, #31
 8009b9a:	d505      	bpl.n	8009ba8 <_dtoa_r+0x4e8>
 8009b9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ba0:	f7f6 fd2a 	bl	80005f8 <__aeabi_dmul>
 8009ba4:	3501      	adds	r5, #1
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	1076      	asrs	r6, r6, #1
 8009baa:	3708      	adds	r7, #8
 8009bac:	e773      	b.n	8009a96 <_dtoa_r+0x3d6>
 8009bae:	2502      	movs	r5, #2
 8009bb0:	e775      	b.n	8009a9e <_dtoa_r+0x3de>
 8009bb2:	9e04      	ldr	r6, [sp, #16]
 8009bb4:	465f      	mov	r7, fp
 8009bb6:	e792      	b.n	8009ade <_dtoa_r+0x41e>
 8009bb8:	9900      	ldr	r1, [sp, #0]
 8009bba:	4b50      	ldr	r3, [pc, #320]	; (8009cfc <_dtoa_r+0x63c>)
 8009bbc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009bc0:	4431      	add	r1, r6
 8009bc2:	9102      	str	r1, [sp, #8]
 8009bc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bc6:	eeb0 9a47 	vmov.f32	s18, s14
 8009bca:	eef0 9a67 	vmov.f32	s19, s15
 8009bce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009bd2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009bd6:	2900      	cmp	r1, #0
 8009bd8:	d044      	beq.n	8009c64 <_dtoa_r+0x5a4>
 8009bda:	494e      	ldr	r1, [pc, #312]	; (8009d14 <_dtoa_r+0x654>)
 8009bdc:	2000      	movs	r0, #0
 8009bde:	f7f6 fe35 	bl	800084c <__aeabi_ddiv>
 8009be2:	ec53 2b19 	vmov	r2, r3, d9
 8009be6:	f7f6 fb4f 	bl	8000288 <__aeabi_dsub>
 8009bea:	9d00      	ldr	r5, [sp, #0]
 8009bec:	ec41 0b19 	vmov	d9, r0, r1
 8009bf0:	4649      	mov	r1, r9
 8009bf2:	4640      	mov	r0, r8
 8009bf4:	f7f6 ffb0 	bl	8000b58 <__aeabi_d2iz>
 8009bf8:	4606      	mov	r6, r0
 8009bfa:	f7f6 fc93 	bl	8000524 <__aeabi_i2d>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	460b      	mov	r3, r1
 8009c02:	4640      	mov	r0, r8
 8009c04:	4649      	mov	r1, r9
 8009c06:	f7f6 fb3f 	bl	8000288 <__aeabi_dsub>
 8009c0a:	3630      	adds	r6, #48	; 0x30
 8009c0c:	f805 6b01 	strb.w	r6, [r5], #1
 8009c10:	ec53 2b19 	vmov	r2, r3, d9
 8009c14:	4680      	mov	r8, r0
 8009c16:	4689      	mov	r9, r1
 8009c18:	f7f6 ff60 	bl	8000adc <__aeabi_dcmplt>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	d164      	bne.n	8009cea <_dtoa_r+0x62a>
 8009c20:	4642      	mov	r2, r8
 8009c22:	464b      	mov	r3, r9
 8009c24:	4937      	ldr	r1, [pc, #220]	; (8009d04 <_dtoa_r+0x644>)
 8009c26:	2000      	movs	r0, #0
 8009c28:	f7f6 fb2e 	bl	8000288 <__aeabi_dsub>
 8009c2c:	ec53 2b19 	vmov	r2, r3, d9
 8009c30:	f7f6 ff54 	bl	8000adc <__aeabi_dcmplt>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	f040 80b6 	bne.w	8009da6 <_dtoa_r+0x6e6>
 8009c3a:	9b02      	ldr	r3, [sp, #8]
 8009c3c:	429d      	cmp	r5, r3
 8009c3e:	f43f af7c 	beq.w	8009b3a <_dtoa_r+0x47a>
 8009c42:	4b31      	ldr	r3, [pc, #196]	; (8009d08 <_dtoa_r+0x648>)
 8009c44:	ec51 0b19 	vmov	r0, r1, d9
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f7f6 fcd5 	bl	80005f8 <__aeabi_dmul>
 8009c4e:	4b2e      	ldr	r3, [pc, #184]	; (8009d08 <_dtoa_r+0x648>)
 8009c50:	ec41 0b19 	vmov	d9, r0, r1
 8009c54:	2200      	movs	r2, #0
 8009c56:	4640      	mov	r0, r8
 8009c58:	4649      	mov	r1, r9
 8009c5a:	f7f6 fccd 	bl	80005f8 <__aeabi_dmul>
 8009c5e:	4680      	mov	r8, r0
 8009c60:	4689      	mov	r9, r1
 8009c62:	e7c5      	b.n	8009bf0 <_dtoa_r+0x530>
 8009c64:	ec51 0b17 	vmov	r0, r1, d7
 8009c68:	f7f6 fcc6 	bl	80005f8 <__aeabi_dmul>
 8009c6c:	9b02      	ldr	r3, [sp, #8]
 8009c6e:	9d00      	ldr	r5, [sp, #0]
 8009c70:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c72:	ec41 0b19 	vmov	d9, r0, r1
 8009c76:	4649      	mov	r1, r9
 8009c78:	4640      	mov	r0, r8
 8009c7a:	f7f6 ff6d 	bl	8000b58 <__aeabi_d2iz>
 8009c7e:	4606      	mov	r6, r0
 8009c80:	f7f6 fc50 	bl	8000524 <__aeabi_i2d>
 8009c84:	3630      	adds	r6, #48	; 0x30
 8009c86:	4602      	mov	r2, r0
 8009c88:	460b      	mov	r3, r1
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	4649      	mov	r1, r9
 8009c8e:	f7f6 fafb 	bl	8000288 <__aeabi_dsub>
 8009c92:	f805 6b01 	strb.w	r6, [r5], #1
 8009c96:	9b02      	ldr	r3, [sp, #8]
 8009c98:	429d      	cmp	r5, r3
 8009c9a:	4680      	mov	r8, r0
 8009c9c:	4689      	mov	r9, r1
 8009c9e:	f04f 0200 	mov.w	r2, #0
 8009ca2:	d124      	bne.n	8009cee <_dtoa_r+0x62e>
 8009ca4:	4b1b      	ldr	r3, [pc, #108]	; (8009d14 <_dtoa_r+0x654>)
 8009ca6:	ec51 0b19 	vmov	r0, r1, d9
 8009caa:	f7f6 faef 	bl	800028c <__adddf3>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	4640      	mov	r0, r8
 8009cb4:	4649      	mov	r1, r9
 8009cb6:	f7f6 ff2f 	bl	8000b18 <__aeabi_dcmpgt>
 8009cba:	2800      	cmp	r0, #0
 8009cbc:	d173      	bne.n	8009da6 <_dtoa_r+0x6e6>
 8009cbe:	ec53 2b19 	vmov	r2, r3, d9
 8009cc2:	4914      	ldr	r1, [pc, #80]	; (8009d14 <_dtoa_r+0x654>)
 8009cc4:	2000      	movs	r0, #0
 8009cc6:	f7f6 fadf 	bl	8000288 <__aeabi_dsub>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	460b      	mov	r3, r1
 8009cce:	4640      	mov	r0, r8
 8009cd0:	4649      	mov	r1, r9
 8009cd2:	f7f6 ff03 	bl	8000adc <__aeabi_dcmplt>
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	f43f af2f 	beq.w	8009b3a <_dtoa_r+0x47a>
 8009cdc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009cde:	1e6b      	subs	r3, r5, #1
 8009ce0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ce2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009ce6:	2b30      	cmp	r3, #48	; 0x30
 8009ce8:	d0f8      	beq.n	8009cdc <_dtoa_r+0x61c>
 8009cea:	46bb      	mov	fp, r7
 8009cec:	e04a      	b.n	8009d84 <_dtoa_r+0x6c4>
 8009cee:	4b06      	ldr	r3, [pc, #24]	; (8009d08 <_dtoa_r+0x648>)
 8009cf0:	f7f6 fc82 	bl	80005f8 <__aeabi_dmul>
 8009cf4:	4680      	mov	r8, r0
 8009cf6:	4689      	mov	r9, r1
 8009cf8:	e7bd      	b.n	8009c76 <_dtoa_r+0x5b6>
 8009cfa:	bf00      	nop
 8009cfc:	0800b478 	.word	0x0800b478
 8009d00:	0800b450 	.word	0x0800b450
 8009d04:	3ff00000 	.word	0x3ff00000
 8009d08:	40240000 	.word	0x40240000
 8009d0c:	401c0000 	.word	0x401c0000
 8009d10:	40140000 	.word	0x40140000
 8009d14:	3fe00000 	.word	0x3fe00000
 8009d18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009d1c:	9d00      	ldr	r5, [sp, #0]
 8009d1e:	4642      	mov	r2, r8
 8009d20:	464b      	mov	r3, r9
 8009d22:	4630      	mov	r0, r6
 8009d24:	4639      	mov	r1, r7
 8009d26:	f7f6 fd91 	bl	800084c <__aeabi_ddiv>
 8009d2a:	f7f6 ff15 	bl	8000b58 <__aeabi_d2iz>
 8009d2e:	9001      	str	r0, [sp, #4]
 8009d30:	f7f6 fbf8 	bl	8000524 <__aeabi_i2d>
 8009d34:	4642      	mov	r2, r8
 8009d36:	464b      	mov	r3, r9
 8009d38:	f7f6 fc5e 	bl	80005f8 <__aeabi_dmul>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	460b      	mov	r3, r1
 8009d40:	4630      	mov	r0, r6
 8009d42:	4639      	mov	r1, r7
 8009d44:	f7f6 faa0 	bl	8000288 <__aeabi_dsub>
 8009d48:	9e01      	ldr	r6, [sp, #4]
 8009d4a:	9f04      	ldr	r7, [sp, #16]
 8009d4c:	3630      	adds	r6, #48	; 0x30
 8009d4e:	f805 6b01 	strb.w	r6, [r5], #1
 8009d52:	9e00      	ldr	r6, [sp, #0]
 8009d54:	1bae      	subs	r6, r5, r6
 8009d56:	42b7      	cmp	r7, r6
 8009d58:	4602      	mov	r2, r0
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	d134      	bne.n	8009dc8 <_dtoa_r+0x708>
 8009d5e:	f7f6 fa95 	bl	800028c <__adddf3>
 8009d62:	4642      	mov	r2, r8
 8009d64:	464b      	mov	r3, r9
 8009d66:	4606      	mov	r6, r0
 8009d68:	460f      	mov	r7, r1
 8009d6a:	f7f6 fed5 	bl	8000b18 <__aeabi_dcmpgt>
 8009d6e:	b9c8      	cbnz	r0, 8009da4 <_dtoa_r+0x6e4>
 8009d70:	4642      	mov	r2, r8
 8009d72:	464b      	mov	r3, r9
 8009d74:	4630      	mov	r0, r6
 8009d76:	4639      	mov	r1, r7
 8009d78:	f7f6 fea6 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d7c:	b110      	cbz	r0, 8009d84 <_dtoa_r+0x6c4>
 8009d7e:	9b01      	ldr	r3, [sp, #4]
 8009d80:	07db      	lsls	r3, r3, #31
 8009d82:	d40f      	bmi.n	8009da4 <_dtoa_r+0x6e4>
 8009d84:	4651      	mov	r1, sl
 8009d86:	4620      	mov	r0, r4
 8009d88:	f000 fbcc 	bl	800a524 <_Bfree>
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d90:	702b      	strb	r3, [r5, #0]
 8009d92:	f10b 0301 	add.w	r3, fp, #1
 8009d96:	6013      	str	r3, [r2, #0]
 8009d98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	f43f ace2 	beq.w	8009764 <_dtoa_r+0xa4>
 8009da0:	601d      	str	r5, [r3, #0]
 8009da2:	e4df      	b.n	8009764 <_dtoa_r+0xa4>
 8009da4:	465f      	mov	r7, fp
 8009da6:	462b      	mov	r3, r5
 8009da8:	461d      	mov	r5, r3
 8009daa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009dae:	2a39      	cmp	r2, #57	; 0x39
 8009db0:	d106      	bne.n	8009dc0 <_dtoa_r+0x700>
 8009db2:	9a00      	ldr	r2, [sp, #0]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d1f7      	bne.n	8009da8 <_dtoa_r+0x6e8>
 8009db8:	9900      	ldr	r1, [sp, #0]
 8009dba:	2230      	movs	r2, #48	; 0x30
 8009dbc:	3701      	adds	r7, #1
 8009dbe:	700a      	strb	r2, [r1, #0]
 8009dc0:	781a      	ldrb	r2, [r3, #0]
 8009dc2:	3201      	adds	r2, #1
 8009dc4:	701a      	strb	r2, [r3, #0]
 8009dc6:	e790      	b.n	8009cea <_dtoa_r+0x62a>
 8009dc8:	4ba3      	ldr	r3, [pc, #652]	; (800a058 <_dtoa_r+0x998>)
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f7f6 fc14 	bl	80005f8 <__aeabi_dmul>
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	4606      	mov	r6, r0
 8009dd6:	460f      	mov	r7, r1
 8009dd8:	f7f6 fe76 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	d09e      	beq.n	8009d1e <_dtoa_r+0x65e>
 8009de0:	e7d0      	b.n	8009d84 <_dtoa_r+0x6c4>
 8009de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009de4:	2a00      	cmp	r2, #0
 8009de6:	f000 80ca 	beq.w	8009f7e <_dtoa_r+0x8be>
 8009dea:	9a07      	ldr	r2, [sp, #28]
 8009dec:	2a01      	cmp	r2, #1
 8009dee:	f300 80ad 	bgt.w	8009f4c <_dtoa_r+0x88c>
 8009df2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009df4:	2a00      	cmp	r2, #0
 8009df6:	f000 80a5 	beq.w	8009f44 <_dtoa_r+0x884>
 8009dfa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009dfe:	9e08      	ldr	r6, [sp, #32]
 8009e00:	9d05      	ldr	r5, [sp, #20]
 8009e02:	9a05      	ldr	r2, [sp, #20]
 8009e04:	441a      	add	r2, r3
 8009e06:	9205      	str	r2, [sp, #20]
 8009e08:	9a06      	ldr	r2, [sp, #24]
 8009e0a:	2101      	movs	r1, #1
 8009e0c:	441a      	add	r2, r3
 8009e0e:	4620      	mov	r0, r4
 8009e10:	9206      	str	r2, [sp, #24]
 8009e12:	f000 fc3d 	bl	800a690 <__i2b>
 8009e16:	4607      	mov	r7, r0
 8009e18:	b165      	cbz	r5, 8009e34 <_dtoa_r+0x774>
 8009e1a:	9b06      	ldr	r3, [sp, #24]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	dd09      	ble.n	8009e34 <_dtoa_r+0x774>
 8009e20:	42ab      	cmp	r3, r5
 8009e22:	9a05      	ldr	r2, [sp, #20]
 8009e24:	bfa8      	it	ge
 8009e26:	462b      	movge	r3, r5
 8009e28:	1ad2      	subs	r2, r2, r3
 8009e2a:	9205      	str	r2, [sp, #20]
 8009e2c:	9a06      	ldr	r2, [sp, #24]
 8009e2e:	1aed      	subs	r5, r5, r3
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	9306      	str	r3, [sp, #24]
 8009e34:	9b08      	ldr	r3, [sp, #32]
 8009e36:	b1f3      	cbz	r3, 8009e76 <_dtoa_r+0x7b6>
 8009e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	f000 80a3 	beq.w	8009f86 <_dtoa_r+0x8c6>
 8009e40:	2e00      	cmp	r6, #0
 8009e42:	dd10      	ble.n	8009e66 <_dtoa_r+0x7a6>
 8009e44:	4639      	mov	r1, r7
 8009e46:	4632      	mov	r2, r6
 8009e48:	4620      	mov	r0, r4
 8009e4a:	f000 fce1 	bl	800a810 <__pow5mult>
 8009e4e:	4652      	mov	r2, sl
 8009e50:	4601      	mov	r1, r0
 8009e52:	4607      	mov	r7, r0
 8009e54:	4620      	mov	r0, r4
 8009e56:	f000 fc31 	bl	800a6bc <__multiply>
 8009e5a:	4651      	mov	r1, sl
 8009e5c:	4680      	mov	r8, r0
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f000 fb60 	bl	800a524 <_Bfree>
 8009e64:	46c2      	mov	sl, r8
 8009e66:	9b08      	ldr	r3, [sp, #32]
 8009e68:	1b9a      	subs	r2, r3, r6
 8009e6a:	d004      	beq.n	8009e76 <_dtoa_r+0x7b6>
 8009e6c:	4651      	mov	r1, sl
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f000 fcce 	bl	800a810 <__pow5mult>
 8009e74:	4682      	mov	sl, r0
 8009e76:	2101      	movs	r1, #1
 8009e78:	4620      	mov	r0, r4
 8009e7a:	f000 fc09 	bl	800a690 <__i2b>
 8009e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	4606      	mov	r6, r0
 8009e84:	f340 8081 	ble.w	8009f8a <_dtoa_r+0x8ca>
 8009e88:	461a      	mov	r2, r3
 8009e8a:	4601      	mov	r1, r0
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	f000 fcbf 	bl	800a810 <__pow5mult>
 8009e92:	9b07      	ldr	r3, [sp, #28]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	4606      	mov	r6, r0
 8009e98:	dd7a      	ble.n	8009f90 <_dtoa_r+0x8d0>
 8009e9a:	f04f 0800 	mov.w	r8, #0
 8009e9e:	6933      	ldr	r3, [r6, #16]
 8009ea0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009ea4:	6918      	ldr	r0, [r3, #16]
 8009ea6:	f000 fba5 	bl	800a5f4 <__hi0bits>
 8009eaa:	f1c0 0020 	rsb	r0, r0, #32
 8009eae:	9b06      	ldr	r3, [sp, #24]
 8009eb0:	4418      	add	r0, r3
 8009eb2:	f010 001f 	ands.w	r0, r0, #31
 8009eb6:	f000 8094 	beq.w	8009fe2 <_dtoa_r+0x922>
 8009eba:	f1c0 0320 	rsb	r3, r0, #32
 8009ebe:	2b04      	cmp	r3, #4
 8009ec0:	f340 8085 	ble.w	8009fce <_dtoa_r+0x90e>
 8009ec4:	9b05      	ldr	r3, [sp, #20]
 8009ec6:	f1c0 001c 	rsb	r0, r0, #28
 8009eca:	4403      	add	r3, r0
 8009ecc:	9305      	str	r3, [sp, #20]
 8009ece:	9b06      	ldr	r3, [sp, #24]
 8009ed0:	4403      	add	r3, r0
 8009ed2:	4405      	add	r5, r0
 8009ed4:	9306      	str	r3, [sp, #24]
 8009ed6:	9b05      	ldr	r3, [sp, #20]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	dd05      	ble.n	8009ee8 <_dtoa_r+0x828>
 8009edc:	4651      	mov	r1, sl
 8009ede:	461a      	mov	r2, r3
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f000 fcef 	bl	800a8c4 <__lshift>
 8009ee6:	4682      	mov	sl, r0
 8009ee8:	9b06      	ldr	r3, [sp, #24]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	dd05      	ble.n	8009efa <_dtoa_r+0x83a>
 8009eee:	4631      	mov	r1, r6
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	f000 fce6 	bl	800a8c4 <__lshift>
 8009ef8:	4606      	mov	r6, r0
 8009efa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d072      	beq.n	8009fe6 <_dtoa_r+0x926>
 8009f00:	4631      	mov	r1, r6
 8009f02:	4650      	mov	r0, sl
 8009f04:	f000 fd4a 	bl	800a99c <__mcmp>
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	da6c      	bge.n	8009fe6 <_dtoa_r+0x926>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	4651      	mov	r1, sl
 8009f10:	220a      	movs	r2, #10
 8009f12:	4620      	mov	r0, r4
 8009f14:	f000 fb28 	bl	800a568 <__multadd>
 8009f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f1e:	4682      	mov	sl, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f000 81b0 	beq.w	800a286 <_dtoa_r+0xbc6>
 8009f26:	2300      	movs	r3, #0
 8009f28:	4639      	mov	r1, r7
 8009f2a:	220a      	movs	r2, #10
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	f000 fb1b 	bl	800a568 <__multadd>
 8009f32:	9b01      	ldr	r3, [sp, #4]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	4607      	mov	r7, r0
 8009f38:	f300 8096 	bgt.w	800a068 <_dtoa_r+0x9a8>
 8009f3c:	9b07      	ldr	r3, [sp, #28]
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	dc59      	bgt.n	8009ff6 <_dtoa_r+0x936>
 8009f42:	e091      	b.n	800a068 <_dtoa_r+0x9a8>
 8009f44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009f4a:	e758      	b.n	8009dfe <_dtoa_r+0x73e>
 8009f4c:	9b04      	ldr	r3, [sp, #16]
 8009f4e:	1e5e      	subs	r6, r3, #1
 8009f50:	9b08      	ldr	r3, [sp, #32]
 8009f52:	42b3      	cmp	r3, r6
 8009f54:	bfbf      	itttt	lt
 8009f56:	9b08      	ldrlt	r3, [sp, #32]
 8009f58:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009f5a:	9608      	strlt	r6, [sp, #32]
 8009f5c:	1af3      	sublt	r3, r6, r3
 8009f5e:	bfb4      	ite	lt
 8009f60:	18d2      	addlt	r2, r2, r3
 8009f62:	1b9e      	subge	r6, r3, r6
 8009f64:	9b04      	ldr	r3, [sp, #16]
 8009f66:	bfbc      	itt	lt
 8009f68:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009f6a:	2600      	movlt	r6, #0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	bfb7      	itett	lt
 8009f70:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009f74:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009f78:	1a9d      	sublt	r5, r3, r2
 8009f7a:	2300      	movlt	r3, #0
 8009f7c:	e741      	b.n	8009e02 <_dtoa_r+0x742>
 8009f7e:	9e08      	ldr	r6, [sp, #32]
 8009f80:	9d05      	ldr	r5, [sp, #20]
 8009f82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009f84:	e748      	b.n	8009e18 <_dtoa_r+0x758>
 8009f86:	9a08      	ldr	r2, [sp, #32]
 8009f88:	e770      	b.n	8009e6c <_dtoa_r+0x7ac>
 8009f8a:	9b07      	ldr	r3, [sp, #28]
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	dc19      	bgt.n	8009fc4 <_dtoa_r+0x904>
 8009f90:	9b02      	ldr	r3, [sp, #8]
 8009f92:	b9bb      	cbnz	r3, 8009fc4 <_dtoa_r+0x904>
 8009f94:	9b03      	ldr	r3, [sp, #12]
 8009f96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f9a:	b99b      	cbnz	r3, 8009fc4 <_dtoa_r+0x904>
 8009f9c:	9b03      	ldr	r3, [sp, #12]
 8009f9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fa2:	0d1b      	lsrs	r3, r3, #20
 8009fa4:	051b      	lsls	r3, r3, #20
 8009fa6:	b183      	cbz	r3, 8009fca <_dtoa_r+0x90a>
 8009fa8:	9b05      	ldr	r3, [sp, #20]
 8009faa:	3301      	adds	r3, #1
 8009fac:	9305      	str	r3, [sp, #20]
 8009fae:	9b06      	ldr	r3, [sp, #24]
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	9306      	str	r3, [sp, #24]
 8009fb4:	f04f 0801 	mov.w	r8, #1
 8009fb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f47f af6f 	bne.w	8009e9e <_dtoa_r+0x7de>
 8009fc0:	2001      	movs	r0, #1
 8009fc2:	e774      	b.n	8009eae <_dtoa_r+0x7ee>
 8009fc4:	f04f 0800 	mov.w	r8, #0
 8009fc8:	e7f6      	b.n	8009fb8 <_dtoa_r+0x8f8>
 8009fca:	4698      	mov	r8, r3
 8009fcc:	e7f4      	b.n	8009fb8 <_dtoa_r+0x8f8>
 8009fce:	d082      	beq.n	8009ed6 <_dtoa_r+0x816>
 8009fd0:	9a05      	ldr	r2, [sp, #20]
 8009fd2:	331c      	adds	r3, #28
 8009fd4:	441a      	add	r2, r3
 8009fd6:	9205      	str	r2, [sp, #20]
 8009fd8:	9a06      	ldr	r2, [sp, #24]
 8009fda:	441a      	add	r2, r3
 8009fdc:	441d      	add	r5, r3
 8009fde:	9206      	str	r2, [sp, #24]
 8009fe0:	e779      	b.n	8009ed6 <_dtoa_r+0x816>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	e7f4      	b.n	8009fd0 <_dtoa_r+0x910>
 8009fe6:	9b04      	ldr	r3, [sp, #16]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	dc37      	bgt.n	800a05c <_dtoa_r+0x99c>
 8009fec:	9b07      	ldr	r3, [sp, #28]
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	dd34      	ble.n	800a05c <_dtoa_r+0x99c>
 8009ff2:	9b04      	ldr	r3, [sp, #16]
 8009ff4:	9301      	str	r3, [sp, #4]
 8009ff6:	9b01      	ldr	r3, [sp, #4]
 8009ff8:	b963      	cbnz	r3, 800a014 <_dtoa_r+0x954>
 8009ffa:	4631      	mov	r1, r6
 8009ffc:	2205      	movs	r2, #5
 8009ffe:	4620      	mov	r0, r4
 800a000:	f000 fab2 	bl	800a568 <__multadd>
 800a004:	4601      	mov	r1, r0
 800a006:	4606      	mov	r6, r0
 800a008:	4650      	mov	r0, sl
 800a00a:	f000 fcc7 	bl	800a99c <__mcmp>
 800a00e:	2800      	cmp	r0, #0
 800a010:	f73f adbb 	bgt.w	8009b8a <_dtoa_r+0x4ca>
 800a014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a016:	9d00      	ldr	r5, [sp, #0]
 800a018:	ea6f 0b03 	mvn.w	fp, r3
 800a01c:	f04f 0800 	mov.w	r8, #0
 800a020:	4631      	mov	r1, r6
 800a022:	4620      	mov	r0, r4
 800a024:	f000 fa7e 	bl	800a524 <_Bfree>
 800a028:	2f00      	cmp	r7, #0
 800a02a:	f43f aeab 	beq.w	8009d84 <_dtoa_r+0x6c4>
 800a02e:	f1b8 0f00 	cmp.w	r8, #0
 800a032:	d005      	beq.n	800a040 <_dtoa_r+0x980>
 800a034:	45b8      	cmp	r8, r7
 800a036:	d003      	beq.n	800a040 <_dtoa_r+0x980>
 800a038:	4641      	mov	r1, r8
 800a03a:	4620      	mov	r0, r4
 800a03c:	f000 fa72 	bl	800a524 <_Bfree>
 800a040:	4639      	mov	r1, r7
 800a042:	4620      	mov	r0, r4
 800a044:	f000 fa6e 	bl	800a524 <_Bfree>
 800a048:	e69c      	b.n	8009d84 <_dtoa_r+0x6c4>
 800a04a:	2600      	movs	r6, #0
 800a04c:	4637      	mov	r7, r6
 800a04e:	e7e1      	b.n	800a014 <_dtoa_r+0x954>
 800a050:	46bb      	mov	fp, r7
 800a052:	4637      	mov	r7, r6
 800a054:	e599      	b.n	8009b8a <_dtoa_r+0x4ca>
 800a056:	bf00      	nop
 800a058:	40240000 	.word	0x40240000
 800a05c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a05e:	2b00      	cmp	r3, #0
 800a060:	f000 80c8 	beq.w	800a1f4 <_dtoa_r+0xb34>
 800a064:	9b04      	ldr	r3, [sp, #16]
 800a066:	9301      	str	r3, [sp, #4]
 800a068:	2d00      	cmp	r5, #0
 800a06a:	dd05      	ble.n	800a078 <_dtoa_r+0x9b8>
 800a06c:	4639      	mov	r1, r7
 800a06e:	462a      	mov	r2, r5
 800a070:	4620      	mov	r0, r4
 800a072:	f000 fc27 	bl	800a8c4 <__lshift>
 800a076:	4607      	mov	r7, r0
 800a078:	f1b8 0f00 	cmp.w	r8, #0
 800a07c:	d05b      	beq.n	800a136 <_dtoa_r+0xa76>
 800a07e:	6879      	ldr	r1, [r7, #4]
 800a080:	4620      	mov	r0, r4
 800a082:	f000 fa0f 	bl	800a4a4 <_Balloc>
 800a086:	4605      	mov	r5, r0
 800a088:	b928      	cbnz	r0, 800a096 <_dtoa_r+0x9d6>
 800a08a:	4b83      	ldr	r3, [pc, #524]	; (800a298 <_dtoa_r+0xbd8>)
 800a08c:	4602      	mov	r2, r0
 800a08e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a092:	f7ff bb2e 	b.w	80096f2 <_dtoa_r+0x32>
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	3202      	adds	r2, #2
 800a09a:	0092      	lsls	r2, r2, #2
 800a09c:	f107 010c 	add.w	r1, r7, #12
 800a0a0:	300c      	adds	r0, #12
 800a0a2:	f001 f801 	bl	800b0a8 <memcpy>
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f000 fc0a 	bl	800a8c4 <__lshift>
 800a0b0:	9b00      	ldr	r3, [sp, #0]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	9304      	str	r3, [sp, #16]
 800a0b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	9308      	str	r3, [sp, #32]
 800a0be:	9b02      	ldr	r3, [sp, #8]
 800a0c0:	f003 0301 	and.w	r3, r3, #1
 800a0c4:	46b8      	mov	r8, r7
 800a0c6:	9306      	str	r3, [sp, #24]
 800a0c8:	4607      	mov	r7, r0
 800a0ca:	9b04      	ldr	r3, [sp, #16]
 800a0cc:	4631      	mov	r1, r6
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	4650      	mov	r0, sl
 800a0d2:	9301      	str	r3, [sp, #4]
 800a0d4:	f7ff fa6c 	bl	80095b0 <quorem>
 800a0d8:	4641      	mov	r1, r8
 800a0da:	9002      	str	r0, [sp, #8]
 800a0dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a0e0:	4650      	mov	r0, sl
 800a0e2:	f000 fc5b 	bl	800a99c <__mcmp>
 800a0e6:	463a      	mov	r2, r7
 800a0e8:	9005      	str	r0, [sp, #20]
 800a0ea:	4631      	mov	r1, r6
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	f000 fc71 	bl	800a9d4 <__mdiff>
 800a0f2:	68c2      	ldr	r2, [r0, #12]
 800a0f4:	4605      	mov	r5, r0
 800a0f6:	bb02      	cbnz	r2, 800a13a <_dtoa_r+0xa7a>
 800a0f8:	4601      	mov	r1, r0
 800a0fa:	4650      	mov	r0, sl
 800a0fc:	f000 fc4e 	bl	800a99c <__mcmp>
 800a100:	4602      	mov	r2, r0
 800a102:	4629      	mov	r1, r5
 800a104:	4620      	mov	r0, r4
 800a106:	9209      	str	r2, [sp, #36]	; 0x24
 800a108:	f000 fa0c 	bl	800a524 <_Bfree>
 800a10c:	9b07      	ldr	r3, [sp, #28]
 800a10e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a110:	9d04      	ldr	r5, [sp, #16]
 800a112:	ea43 0102 	orr.w	r1, r3, r2
 800a116:	9b06      	ldr	r3, [sp, #24]
 800a118:	4319      	orrs	r1, r3
 800a11a:	d110      	bne.n	800a13e <_dtoa_r+0xa7e>
 800a11c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a120:	d029      	beq.n	800a176 <_dtoa_r+0xab6>
 800a122:	9b05      	ldr	r3, [sp, #20]
 800a124:	2b00      	cmp	r3, #0
 800a126:	dd02      	ble.n	800a12e <_dtoa_r+0xa6e>
 800a128:	9b02      	ldr	r3, [sp, #8]
 800a12a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a12e:	9b01      	ldr	r3, [sp, #4]
 800a130:	f883 9000 	strb.w	r9, [r3]
 800a134:	e774      	b.n	800a020 <_dtoa_r+0x960>
 800a136:	4638      	mov	r0, r7
 800a138:	e7ba      	b.n	800a0b0 <_dtoa_r+0x9f0>
 800a13a:	2201      	movs	r2, #1
 800a13c:	e7e1      	b.n	800a102 <_dtoa_r+0xa42>
 800a13e:	9b05      	ldr	r3, [sp, #20]
 800a140:	2b00      	cmp	r3, #0
 800a142:	db04      	blt.n	800a14e <_dtoa_r+0xa8e>
 800a144:	9907      	ldr	r1, [sp, #28]
 800a146:	430b      	orrs	r3, r1
 800a148:	9906      	ldr	r1, [sp, #24]
 800a14a:	430b      	orrs	r3, r1
 800a14c:	d120      	bne.n	800a190 <_dtoa_r+0xad0>
 800a14e:	2a00      	cmp	r2, #0
 800a150:	dded      	ble.n	800a12e <_dtoa_r+0xa6e>
 800a152:	4651      	mov	r1, sl
 800a154:	2201      	movs	r2, #1
 800a156:	4620      	mov	r0, r4
 800a158:	f000 fbb4 	bl	800a8c4 <__lshift>
 800a15c:	4631      	mov	r1, r6
 800a15e:	4682      	mov	sl, r0
 800a160:	f000 fc1c 	bl	800a99c <__mcmp>
 800a164:	2800      	cmp	r0, #0
 800a166:	dc03      	bgt.n	800a170 <_dtoa_r+0xab0>
 800a168:	d1e1      	bne.n	800a12e <_dtoa_r+0xa6e>
 800a16a:	f019 0f01 	tst.w	r9, #1
 800a16e:	d0de      	beq.n	800a12e <_dtoa_r+0xa6e>
 800a170:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a174:	d1d8      	bne.n	800a128 <_dtoa_r+0xa68>
 800a176:	9a01      	ldr	r2, [sp, #4]
 800a178:	2339      	movs	r3, #57	; 0x39
 800a17a:	7013      	strb	r3, [r2, #0]
 800a17c:	462b      	mov	r3, r5
 800a17e:	461d      	mov	r5, r3
 800a180:	3b01      	subs	r3, #1
 800a182:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a186:	2a39      	cmp	r2, #57	; 0x39
 800a188:	d06c      	beq.n	800a264 <_dtoa_r+0xba4>
 800a18a:	3201      	adds	r2, #1
 800a18c:	701a      	strb	r2, [r3, #0]
 800a18e:	e747      	b.n	800a020 <_dtoa_r+0x960>
 800a190:	2a00      	cmp	r2, #0
 800a192:	dd07      	ble.n	800a1a4 <_dtoa_r+0xae4>
 800a194:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a198:	d0ed      	beq.n	800a176 <_dtoa_r+0xab6>
 800a19a:	9a01      	ldr	r2, [sp, #4]
 800a19c:	f109 0301 	add.w	r3, r9, #1
 800a1a0:	7013      	strb	r3, [r2, #0]
 800a1a2:	e73d      	b.n	800a020 <_dtoa_r+0x960>
 800a1a4:	9b04      	ldr	r3, [sp, #16]
 800a1a6:	9a08      	ldr	r2, [sp, #32]
 800a1a8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d043      	beq.n	800a238 <_dtoa_r+0xb78>
 800a1b0:	4651      	mov	r1, sl
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	220a      	movs	r2, #10
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	f000 f9d6 	bl	800a568 <__multadd>
 800a1bc:	45b8      	cmp	r8, r7
 800a1be:	4682      	mov	sl, r0
 800a1c0:	f04f 0300 	mov.w	r3, #0
 800a1c4:	f04f 020a 	mov.w	r2, #10
 800a1c8:	4641      	mov	r1, r8
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	d107      	bne.n	800a1de <_dtoa_r+0xb1e>
 800a1ce:	f000 f9cb 	bl	800a568 <__multadd>
 800a1d2:	4680      	mov	r8, r0
 800a1d4:	4607      	mov	r7, r0
 800a1d6:	9b04      	ldr	r3, [sp, #16]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	9304      	str	r3, [sp, #16]
 800a1dc:	e775      	b.n	800a0ca <_dtoa_r+0xa0a>
 800a1de:	f000 f9c3 	bl	800a568 <__multadd>
 800a1e2:	4639      	mov	r1, r7
 800a1e4:	4680      	mov	r8, r0
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	220a      	movs	r2, #10
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	f000 f9bc 	bl	800a568 <__multadd>
 800a1f0:	4607      	mov	r7, r0
 800a1f2:	e7f0      	b.n	800a1d6 <_dtoa_r+0xb16>
 800a1f4:	9b04      	ldr	r3, [sp, #16]
 800a1f6:	9301      	str	r3, [sp, #4]
 800a1f8:	9d00      	ldr	r5, [sp, #0]
 800a1fa:	4631      	mov	r1, r6
 800a1fc:	4650      	mov	r0, sl
 800a1fe:	f7ff f9d7 	bl	80095b0 <quorem>
 800a202:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a206:	9b00      	ldr	r3, [sp, #0]
 800a208:	f805 9b01 	strb.w	r9, [r5], #1
 800a20c:	1aea      	subs	r2, r5, r3
 800a20e:	9b01      	ldr	r3, [sp, #4]
 800a210:	4293      	cmp	r3, r2
 800a212:	dd07      	ble.n	800a224 <_dtoa_r+0xb64>
 800a214:	4651      	mov	r1, sl
 800a216:	2300      	movs	r3, #0
 800a218:	220a      	movs	r2, #10
 800a21a:	4620      	mov	r0, r4
 800a21c:	f000 f9a4 	bl	800a568 <__multadd>
 800a220:	4682      	mov	sl, r0
 800a222:	e7ea      	b.n	800a1fa <_dtoa_r+0xb3a>
 800a224:	9b01      	ldr	r3, [sp, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	bfc8      	it	gt
 800a22a:	461d      	movgt	r5, r3
 800a22c:	9b00      	ldr	r3, [sp, #0]
 800a22e:	bfd8      	it	le
 800a230:	2501      	movle	r5, #1
 800a232:	441d      	add	r5, r3
 800a234:	f04f 0800 	mov.w	r8, #0
 800a238:	4651      	mov	r1, sl
 800a23a:	2201      	movs	r2, #1
 800a23c:	4620      	mov	r0, r4
 800a23e:	f000 fb41 	bl	800a8c4 <__lshift>
 800a242:	4631      	mov	r1, r6
 800a244:	4682      	mov	sl, r0
 800a246:	f000 fba9 	bl	800a99c <__mcmp>
 800a24a:	2800      	cmp	r0, #0
 800a24c:	dc96      	bgt.n	800a17c <_dtoa_r+0xabc>
 800a24e:	d102      	bne.n	800a256 <_dtoa_r+0xb96>
 800a250:	f019 0f01 	tst.w	r9, #1
 800a254:	d192      	bne.n	800a17c <_dtoa_r+0xabc>
 800a256:	462b      	mov	r3, r5
 800a258:	461d      	mov	r5, r3
 800a25a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a25e:	2a30      	cmp	r2, #48	; 0x30
 800a260:	d0fa      	beq.n	800a258 <_dtoa_r+0xb98>
 800a262:	e6dd      	b.n	800a020 <_dtoa_r+0x960>
 800a264:	9a00      	ldr	r2, [sp, #0]
 800a266:	429a      	cmp	r2, r3
 800a268:	d189      	bne.n	800a17e <_dtoa_r+0xabe>
 800a26a:	f10b 0b01 	add.w	fp, fp, #1
 800a26e:	2331      	movs	r3, #49	; 0x31
 800a270:	e796      	b.n	800a1a0 <_dtoa_r+0xae0>
 800a272:	4b0a      	ldr	r3, [pc, #40]	; (800a29c <_dtoa_r+0xbdc>)
 800a274:	f7ff ba99 	b.w	80097aa <_dtoa_r+0xea>
 800a278:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f47f aa6d 	bne.w	800975a <_dtoa_r+0x9a>
 800a280:	4b07      	ldr	r3, [pc, #28]	; (800a2a0 <_dtoa_r+0xbe0>)
 800a282:	f7ff ba92 	b.w	80097aa <_dtoa_r+0xea>
 800a286:	9b01      	ldr	r3, [sp, #4]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	dcb5      	bgt.n	800a1f8 <_dtoa_r+0xb38>
 800a28c:	9b07      	ldr	r3, [sp, #28]
 800a28e:	2b02      	cmp	r3, #2
 800a290:	f73f aeb1 	bgt.w	8009ff6 <_dtoa_r+0x936>
 800a294:	e7b0      	b.n	800a1f8 <_dtoa_r+0xb38>
 800a296:	bf00      	nop
 800a298:	0800b3e4 	.word	0x0800b3e4
 800a29c:	0800b344 	.word	0x0800b344
 800a2a0:	0800b368 	.word	0x0800b368

0800a2a4 <_free_r>:
 800a2a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2a6:	2900      	cmp	r1, #0
 800a2a8:	d044      	beq.n	800a334 <_free_r+0x90>
 800a2aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2ae:	9001      	str	r0, [sp, #4]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f1a1 0404 	sub.w	r4, r1, #4
 800a2b6:	bfb8      	it	lt
 800a2b8:	18e4      	addlt	r4, r4, r3
 800a2ba:	f000 f8e7 	bl	800a48c <__malloc_lock>
 800a2be:	4a1e      	ldr	r2, [pc, #120]	; (800a338 <_free_r+0x94>)
 800a2c0:	9801      	ldr	r0, [sp, #4]
 800a2c2:	6813      	ldr	r3, [r2, #0]
 800a2c4:	b933      	cbnz	r3, 800a2d4 <_free_r+0x30>
 800a2c6:	6063      	str	r3, [r4, #4]
 800a2c8:	6014      	str	r4, [r2, #0]
 800a2ca:	b003      	add	sp, #12
 800a2cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2d0:	f000 b8e2 	b.w	800a498 <__malloc_unlock>
 800a2d4:	42a3      	cmp	r3, r4
 800a2d6:	d908      	bls.n	800a2ea <_free_r+0x46>
 800a2d8:	6825      	ldr	r5, [r4, #0]
 800a2da:	1961      	adds	r1, r4, r5
 800a2dc:	428b      	cmp	r3, r1
 800a2de:	bf01      	itttt	eq
 800a2e0:	6819      	ldreq	r1, [r3, #0]
 800a2e2:	685b      	ldreq	r3, [r3, #4]
 800a2e4:	1949      	addeq	r1, r1, r5
 800a2e6:	6021      	streq	r1, [r4, #0]
 800a2e8:	e7ed      	b.n	800a2c6 <_free_r+0x22>
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	b10b      	cbz	r3, 800a2f4 <_free_r+0x50>
 800a2f0:	42a3      	cmp	r3, r4
 800a2f2:	d9fa      	bls.n	800a2ea <_free_r+0x46>
 800a2f4:	6811      	ldr	r1, [r2, #0]
 800a2f6:	1855      	adds	r5, r2, r1
 800a2f8:	42a5      	cmp	r5, r4
 800a2fa:	d10b      	bne.n	800a314 <_free_r+0x70>
 800a2fc:	6824      	ldr	r4, [r4, #0]
 800a2fe:	4421      	add	r1, r4
 800a300:	1854      	adds	r4, r2, r1
 800a302:	42a3      	cmp	r3, r4
 800a304:	6011      	str	r1, [r2, #0]
 800a306:	d1e0      	bne.n	800a2ca <_free_r+0x26>
 800a308:	681c      	ldr	r4, [r3, #0]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	6053      	str	r3, [r2, #4]
 800a30e:	440c      	add	r4, r1
 800a310:	6014      	str	r4, [r2, #0]
 800a312:	e7da      	b.n	800a2ca <_free_r+0x26>
 800a314:	d902      	bls.n	800a31c <_free_r+0x78>
 800a316:	230c      	movs	r3, #12
 800a318:	6003      	str	r3, [r0, #0]
 800a31a:	e7d6      	b.n	800a2ca <_free_r+0x26>
 800a31c:	6825      	ldr	r5, [r4, #0]
 800a31e:	1961      	adds	r1, r4, r5
 800a320:	428b      	cmp	r3, r1
 800a322:	bf04      	itt	eq
 800a324:	6819      	ldreq	r1, [r3, #0]
 800a326:	685b      	ldreq	r3, [r3, #4]
 800a328:	6063      	str	r3, [r4, #4]
 800a32a:	bf04      	itt	eq
 800a32c:	1949      	addeq	r1, r1, r5
 800a32e:	6021      	streq	r1, [r4, #0]
 800a330:	6054      	str	r4, [r2, #4]
 800a332:	e7ca      	b.n	800a2ca <_free_r+0x26>
 800a334:	b003      	add	sp, #12
 800a336:	bd30      	pop	{r4, r5, pc}
 800a338:	20000524 	.word	0x20000524

0800a33c <malloc>:
 800a33c:	4b02      	ldr	r3, [pc, #8]	; (800a348 <malloc+0xc>)
 800a33e:	4601      	mov	r1, r0
 800a340:	6818      	ldr	r0, [r3, #0]
 800a342:	f000 b823 	b.w	800a38c <_malloc_r>
 800a346:	bf00      	nop
 800a348:	20000074 	.word	0x20000074

0800a34c <sbrk_aligned>:
 800a34c:	b570      	push	{r4, r5, r6, lr}
 800a34e:	4e0e      	ldr	r6, [pc, #56]	; (800a388 <sbrk_aligned+0x3c>)
 800a350:	460c      	mov	r4, r1
 800a352:	6831      	ldr	r1, [r6, #0]
 800a354:	4605      	mov	r5, r0
 800a356:	b911      	cbnz	r1, 800a35e <sbrk_aligned+0x12>
 800a358:	f000 fe96 	bl	800b088 <_sbrk_r>
 800a35c:	6030      	str	r0, [r6, #0]
 800a35e:	4621      	mov	r1, r4
 800a360:	4628      	mov	r0, r5
 800a362:	f000 fe91 	bl	800b088 <_sbrk_r>
 800a366:	1c43      	adds	r3, r0, #1
 800a368:	d00a      	beq.n	800a380 <sbrk_aligned+0x34>
 800a36a:	1cc4      	adds	r4, r0, #3
 800a36c:	f024 0403 	bic.w	r4, r4, #3
 800a370:	42a0      	cmp	r0, r4
 800a372:	d007      	beq.n	800a384 <sbrk_aligned+0x38>
 800a374:	1a21      	subs	r1, r4, r0
 800a376:	4628      	mov	r0, r5
 800a378:	f000 fe86 	bl	800b088 <_sbrk_r>
 800a37c:	3001      	adds	r0, #1
 800a37e:	d101      	bne.n	800a384 <sbrk_aligned+0x38>
 800a380:	f04f 34ff 	mov.w	r4, #4294967295
 800a384:	4620      	mov	r0, r4
 800a386:	bd70      	pop	{r4, r5, r6, pc}
 800a388:	20000528 	.word	0x20000528

0800a38c <_malloc_r>:
 800a38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a390:	1ccd      	adds	r5, r1, #3
 800a392:	f025 0503 	bic.w	r5, r5, #3
 800a396:	3508      	adds	r5, #8
 800a398:	2d0c      	cmp	r5, #12
 800a39a:	bf38      	it	cc
 800a39c:	250c      	movcc	r5, #12
 800a39e:	2d00      	cmp	r5, #0
 800a3a0:	4607      	mov	r7, r0
 800a3a2:	db01      	blt.n	800a3a8 <_malloc_r+0x1c>
 800a3a4:	42a9      	cmp	r1, r5
 800a3a6:	d905      	bls.n	800a3b4 <_malloc_r+0x28>
 800a3a8:	230c      	movs	r3, #12
 800a3aa:	603b      	str	r3, [r7, #0]
 800a3ac:	2600      	movs	r6, #0
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a488 <_malloc_r+0xfc>
 800a3b8:	f000 f868 	bl	800a48c <__malloc_lock>
 800a3bc:	f8d8 3000 	ldr.w	r3, [r8]
 800a3c0:	461c      	mov	r4, r3
 800a3c2:	bb5c      	cbnz	r4, 800a41c <_malloc_r+0x90>
 800a3c4:	4629      	mov	r1, r5
 800a3c6:	4638      	mov	r0, r7
 800a3c8:	f7ff ffc0 	bl	800a34c <sbrk_aligned>
 800a3cc:	1c43      	adds	r3, r0, #1
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	d155      	bne.n	800a47e <_malloc_r+0xf2>
 800a3d2:	f8d8 4000 	ldr.w	r4, [r8]
 800a3d6:	4626      	mov	r6, r4
 800a3d8:	2e00      	cmp	r6, #0
 800a3da:	d145      	bne.n	800a468 <_malloc_r+0xdc>
 800a3dc:	2c00      	cmp	r4, #0
 800a3de:	d048      	beq.n	800a472 <_malloc_r+0xe6>
 800a3e0:	6823      	ldr	r3, [r4, #0]
 800a3e2:	4631      	mov	r1, r6
 800a3e4:	4638      	mov	r0, r7
 800a3e6:	eb04 0903 	add.w	r9, r4, r3
 800a3ea:	f000 fe4d 	bl	800b088 <_sbrk_r>
 800a3ee:	4581      	cmp	r9, r0
 800a3f0:	d13f      	bne.n	800a472 <_malloc_r+0xe6>
 800a3f2:	6821      	ldr	r1, [r4, #0]
 800a3f4:	1a6d      	subs	r5, r5, r1
 800a3f6:	4629      	mov	r1, r5
 800a3f8:	4638      	mov	r0, r7
 800a3fa:	f7ff ffa7 	bl	800a34c <sbrk_aligned>
 800a3fe:	3001      	adds	r0, #1
 800a400:	d037      	beq.n	800a472 <_malloc_r+0xe6>
 800a402:	6823      	ldr	r3, [r4, #0]
 800a404:	442b      	add	r3, r5
 800a406:	6023      	str	r3, [r4, #0]
 800a408:	f8d8 3000 	ldr.w	r3, [r8]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d038      	beq.n	800a482 <_malloc_r+0xf6>
 800a410:	685a      	ldr	r2, [r3, #4]
 800a412:	42a2      	cmp	r2, r4
 800a414:	d12b      	bne.n	800a46e <_malloc_r+0xe2>
 800a416:	2200      	movs	r2, #0
 800a418:	605a      	str	r2, [r3, #4]
 800a41a:	e00f      	b.n	800a43c <_malloc_r+0xb0>
 800a41c:	6822      	ldr	r2, [r4, #0]
 800a41e:	1b52      	subs	r2, r2, r5
 800a420:	d41f      	bmi.n	800a462 <_malloc_r+0xd6>
 800a422:	2a0b      	cmp	r2, #11
 800a424:	d917      	bls.n	800a456 <_malloc_r+0xca>
 800a426:	1961      	adds	r1, r4, r5
 800a428:	42a3      	cmp	r3, r4
 800a42a:	6025      	str	r5, [r4, #0]
 800a42c:	bf18      	it	ne
 800a42e:	6059      	strne	r1, [r3, #4]
 800a430:	6863      	ldr	r3, [r4, #4]
 800a432:	bf08      	it	eq
 800a434:	f8c8 1000 	streq.w	r1, [r8]
 800a438:	5162      	str	r2, [r4, r5]
 800a43a:	604b      	str	r3, [r1, #4]
 800a43c:	4638      	mov	r0, r7
 800a43e:	f104 060b 	add.w	r6, r4, #11
 800a442:	f000 f829 	bl	800a498 <__malloc_unlock>
 800a446:	f026 0607 	bic.w	r6, r6, #7
 800a44a:	1d23      	adds	r3, r4, #4
 800a44c:	1af2      	subs	r2, r6, r3
 800a44e:	d0ae      	beq.n	800a3ae <_malloc_r+0x22>
 800a450:	1b9b      	subs	r3, r3, r6
 800a452:	50a3      	str	r3, [r4, r2]
 800a454:	e7ab      	b.n	800a3ae <_malloc_r+0x22>
 800a456:	42a3      	cmp	r3, r4
 800a458:	6862      	ldr	r2, [r4, #4]
 800a45a:	d1dd      	bne.n	800a418 <_malloc_r+0x8c>
 800a45c:	f8c8 2000 	str.w	r2, [r8]
 800a460:	e7ec      	b.n	800a43c <_malloc_r+0xb0>
 800a462:	4623      	mov	r3, r4
 800a464:	6864      	ldr	r4, [r4, #4]
 800a466:	e7ac      	b.n	800a3c2 <_malloc_r+0x36>
 800a468:	4634      	mov	r4, r6
 800a46a:	6876      	ldr	r6, [r6, #4]
 800a46c:	e7b4      	b.n	800a3d8 <_malloc_r+0x4c>
 800a46e:	4613      	mov	r3, r2
 800a470:	e7cc      	b.n	800a40c <_malloc_r+0x80>
 800a472:	230c      	movs	r3, #12
 800a474:	603b      	str	r3, [r7, #0]
 800a476:	4638      	mov	r0, r7
 800a478:	f000 f80e 	bl	800a498 <__malloc_unlock>
 800a47c:	e797      	b.n	800a3ae <_malloc_r+0x22>
 800a47e:	6025      	str	r5, [r4, #0]
 800a480:	e7dc      	b.n	800a43c <_malloc_r+0xb0>
 800a482:	605b      	str	r3, [r3, #4]
 800a484:	deff      	udf	#255	; 0xff
 800a486:	bf00      	nop
 800a488:	20000524 	.word	0x20000524

0800a48c <__malloc_lock>:
 800a48c:	4801      	ldr	r0, [pc, #4]	; (800a494 <__malloc_lock+0x8>)
 800a48e:	f7ff b88d 	b.w	80095ac <__retarget_lock_acquire_recursive>
 800a492:	bf00      	nop
 800a494:	20000520 	.word	0x20000520

0800a498 <__malloc_unlock>:
 800a498:	4801      	ldr	r0, [pc, #4]	; (800a4a0 <__malloc_unlock+0x8>)
 800a49a:	f7ff b888 	b.w	80095ae <__retarget_lock_release_recursive>
 800a49e:	bf00      	nop
 800a4a0:	20000520 	.word	0x20000520

0800a4a4 <_Balloc>:
 800a4a4:	b570      	push	{r4, r5, r6, lr}
 800a4a6:	69c6      	ldr	r6, [r0, #28]
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	460d      	mov	r5, r1
 800a4ac:	b976      	cbnz	r6, 800a4cc <_Balloc+0x28>
 800a4ae:	2010      	movs	r0, #16
 800a4b0:	f7ff ff44 	bl	800a33c <malloc>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	61e0      	str	r0, [r4, #28]
 800a4b8:	b920      	cbnz	r0, 800a4c4 <_Balloc+0x20>
 800a4ba:	4b18      	ldr	r3, [pc, #96]	; (800a51c <_Balloc+0x78>)
 800a4bc:	4818      	ldr	r0, [pc, #96]	; (800a520 <_Balloc+0x7c>)
 800a4be:	216b      	movs	r1, #107	; 0x6b
 800a4c0:	f000 fe00 	bl	800b0c4 <__assert_func>
 800a4c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4c8:	6006      	str	r6, [r0, #0]
 800a4ca:	60c6      	str	r6, [r0, #12]
 800a4cc:	69e6      	ldr	r6, [r4, #28]
 800a4ce:	68f3      	ldr	r3, [r6, #12]
 800a4d0:	b183      	cbz	r3, 800a4f4 <_Balloc+0x50>
 800a4d2:	69e3      	ldr	r3, [r4, #28]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a4da:	b9b8      	cbnz	r0, 800a50c <_Balloc+0x68>
 800a4dc:	2101      	movs	r1, #1
 800a4de:	fa01 f605 	lsl.w	r6, r1, r5
 800a4e2:	1d72      	adds	r2, r6, #5
 800a4e4:	0092      	lsls	r2, r2, #2
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f000 fe0a 	bl	800b100 <_calloc_r>
 800a4ec:	b160      	cbz	r0, 800a508 <_Balloc+0x64>
 800a4ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a4f2:	e00e      	b.n	800a512 <_Balloc+0x6e>
 800a4f4:	2221      	movs	r2, #33	; 0x21
 800a4f6:	2104      	movs	r1, #4
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	f000 fe01 	bl	800b100 <_calloc_r>
 800a4fe:	69e3      	ldr	r3, [r4, #28]
 800a500:	60f0      	str	r0, [r6, #12]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1e4      	bne.n	800a4d2 <_Balloc+0x2e>
 800a508:	2000      	movs	r0, #0
 800a50a:	bd70      	pop	{r4, r5, r6, pc}
 800a50c:	6802      	ldr	r2, [r0, #0]
 800a50e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a512:	2300      	movs	r3, #0
 800a514:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a518:	e7f7      	b.n	800a50a <_Balloc+0x66>
 800a51a:	bf00      	nop
 800a51c:	0800b375 	.word	0x0800b375
 800a520:	0800b3f5 	.word	0x0800b3f5

0800a524 <_Bfree>:
 800a524:	b570      	push	{r4, r5, r6, lr}
 800a526:	69c6      	ldr	r6, [r0, #28]
 800a528:	4605      	mov	r5, r0
 800a52a:	460c      	mov	r4, r1
 800a52c:	b976      	cbnz	r6, 800a54c <_Bfree+0x28>
 800a52e:	2010      	movs	r0, #16
 800a530:	f7ff ff04 	bl	800a33c <malloc>
 800a534:	4602      	mov	r2, r0
 800a536:	61e8      	str	r0, [r5, #28]
 800a538:	b920      	cbnz	r0, 800a544 <_Bfree+0x20>
 800a53a:	4b09      	ldr	r3, [pc, #36]	; (800a560 <_Bfree+0x3c>)
 800a53c:	4809      	ldr	r0, [pc, #36]	; (800a564 <_Bfree+0x40>)
 800a53e:	218f      	movs	r1, #143	; 0x8f
 800a540:	f000 fdc0 	bl	800b0c4 <__assert_func>
 800a544:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a548:	6006      	str	r6, [r0, #0]
 800a54a:	60c6      	str	r6, [r0, #12]
 800a54c:	b13c      	cbz	r4, 800a55e <_Bfree+0x3a>
 800a54e:	69eb      	ldr	r3, [r5, #28]
 800a550:	6862      	ldr	r2, [r4, #4]
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a558:	6021      	str	r1, [r4, #0]
 800a55a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a55e:	bd70      	pop	{r4, r5, r6, pc}
 800a560:	0800b375 	.word	0x0800b375
 800a564:	0800b3f5 	.word	0x0800b3f5

0800a568 <__multadd>:
 800a568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a56c:	690d      	ldr	r5, [r1, #16]
 800a56e:	4607      	mov	r7, r0
 800a570:	460c      	mov	r4, r1
 800a572:	461e      	mov	r6, r3
 800a574:	f101 0c14 	add.w	ip, r1, #20
 800a578:	2000      	movs	r0, #0
 800a57a:	f8dc 3000 	ldr.w	r3, [ip]
 800a57e:	b299      	uxth	r1, r3
 800a580:	fb02 6101 	mla	r1, r2, r1, r6
 800a584:	0c1e      	lsrs	r6, r3, #16
 800a586:	0c0b      	lsrs	r3, r1, #16
 800a588:	fb02 3306 	mla	r3, r2, r6, r3
 800a58c:	b289      	uxth	r1, r1
 800a58e:	3001      	adds	r0, #1
 800a590:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a594:	4285      	cmp	r5, r0
 800a596:	f84c 1b04 	str.w	r1, [ip], #4
 800a59a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a59e:	dcec      	bgt.n	800a57a <__multadd+0x12>
 800a5a0:	b30e      	cbz	r6, 800a5e6 <__multadd+0x7e>
 800a5a2:	68a3      	ldr	r3, [r4, #8]
 800a5a4:	42ab      	cmp	r3, r5
 800a5a6:	dc19      	bgt.n	800a5dc <__multadd+0x74>
 800a5a8:	6861      	ldr	r1, [r4, #4]
 800a5aa:	4638      	mov	r0, r7
 800a5ac:	3101      	adds	r1, #1
 800a5ae:	f7ff ff79 	bl	800a4a4 <_Balloc>
 800a5b2:	4680      	mov	r8, r0
 800a5b4:	b928      	cbnz	r0, 800a5c2 <__multadd+0x5a>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	4b0c      	ldr	r3, [pc, #48]	; (800a5ec <__multadd+0x84>)
 800a5ba:	480d      	ldr	r0, [pc, #52]	; (800a5f0 <__multadd+0x88>)
 800a5bc:	21ba      	movs	r1, #186	; 0xba
 800a5be:	f000 fd81 	bl	800b0c4 <__assert_func>
 800a5c2:	6922      	ldr	r2, [r4, #16]
 800a5c4:	3202      	adds	r2, #2
 800a5c6:	f104 010c 	add.w	r1, r4, #12
 800a5ca:	0092      	lsls	r2, r2, #2
 800a5cc:	300c      	adds	r0, #12
 800a5ce:	f000 fd6b 	bl	800b0a8 <memcpy>
 800a5d2:	4621      	mov	r1, r4
 800a5d4:	4638      	mov	r0, r7
 800a5d6:	f7ff ffa5 	bl	800a524 <_Bfree>
 800a5da:	4644      	mov	r4, r8
 800a5dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a5e0:	3501      	adds	r5, #1
 800a5e2:	615e      	str	r6, [r3, #20]
 800a5e4:	6125      	str	r5, [r4, #16]
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5ec:	0800b3e4 	.word	0x0800b3e4
 800a5f0:	0800b3f5 	.word	0x0800b3f5

0800a5f4 <__hi0bits>:
 800a5f4:	0c03      	lsrs	r3, r0, #16
 800a5f6:	041b      	lsls	r3, r3, #16
 800a5f8:	b9d3      	cbnz	r3, 800a630 <__hi0bits+0x3c>
 800a5fa:	0400      	lsls	r0, r0, #16
 800a5fc:	2310      	movs	r3, #16
 800a5fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a602:	bf04      	itt	eq
 800a604:	0200      	lsleq	r0, r0, #8
 800a606:	3308      	addeq	r3, #8
 800a608:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a60c:	bf04      	itt	eq
 800a60e:	0100      	lsleq	r0, r0, #4
 800a610:	3304      	addeq	r3, #4
 800a612:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a616:	bf04      	itt	eq
 800a618:	0080      	lsleq	r0, r0, #2
 800a61a:	3302      	addeq	r3, #2
 800a61c:	2800      	cmp	r0, #0
 800a61e:	db05      	blt.n	800a62c <__hi0bits+0x38>
 800a620:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a624:	f103 0301 	add.w	r3, r3, #1
 800a628:	bf08      	it	eq
 800a62a:	2320      	moveq	r3, #32
 800a62c:	4618      	mov	r0, r3
 800a62e:	4770      	bx	lr
 800a630:	2300      	movs	r3, #0
 800a632:	e7e4      	b.n	800a5fe <__hi0bits+0xa>

0800a634 <__lo0bits>:
 800a634:	6803      	ldr	r3, [r0, #0]
 800a636:	f013 0207 	ands.w	r2, r3, #7
 800a63a:	d00c      	beq.n	800a656 <__lo0bits+0x22>
 800a63c:	07d9      	lsls	r1, r3, #31
 800a63e:	d422      	bmi.n	800a686 <__lo0bits+0x52>
 800a640:	079a      	lsls	r2, r3, #30
 800a642:	bf49      	itett	mi
 800a644:	085b      	lsrmi	r3, r3, #1
 800a646:	089b      	lsrpl	r3, r3, #2
 800a648:	6003      	strmi	r3, [r0, #0]
 800a64a:	2201      	movmi	r2, #1
 800a64c:	bf5c      	itt	pl
 800a64e:	6003      	strpl	r3, [r0, #0]
 800a650:	2202      	movpl	r2, #2
 800a652:	4610      	mov	r0, r2
 800a654:	4770      	bx	lr
 800a656:	b299      	uxth	r1, r3
 800a658:	b909      	cbnz	r1, 800a65e <__lo0bits+0x2a>
 800a65a:	0c1b      	lsrs	r3, r3, #16
 800a65c:	2210      	movs	r2, #16
 800a65e:	b2d9      	uxtb	r1, r3
 800a660:	b909      	cbnz	r1, 800a666 <__lo0bits+0x32>
 800a662:	3208      	adds	r2, #8
 800a664:	0a1b      	lsrs	r3, r3, #8
 800a666:	0719      	lsls	r1, r3, #28
 800a668:	bf04      	itt	eq
 800a66a:	091b      	lsreq	r3, r3, #4
 800a66c:	3204      	addeq	r2, #4
 800a66e:	0799      	lsls	r1, r3, #30
 800a670:	bf04      	itt	eq
 800a672:	089b      	lsreq	r3, r3, #2
 800a674:	3202      	addeq	r2, #2
 800a676:	07d9      	lsls	r1, r3, #31
 800a678:	d403      	bmi.n	800a682 <__lo0bits+0x4e>
 800a67a:	085b      	lsrs	r3, r3, #1
 800a67c:	f102 0201 	add.w	r2, r2, #1
 800a680:	d003      	beq.n	800a68a <__lo0bits+0x56>
 800a682:	6003      	str	r3, [r0, #0]
 800a684:	e7e5      	b.n	800a652 <__lo0bits+0x1e>
 800a686:	2200      	movs	r2, #0
 800a688:	e7e3      	b.n	800a652 <__lo0bits+0x1e>
 800a68a:	2220      	movs	r2, #32
 800a68c:	e7e1      	b.n	800a652 <__lo0bits+0x1e>
	...

0800a690 <__i2b>:
 800a690:	b510      	push	{r4, lr}
 800a692:	460c      	mov	r4, r1
 800a694:	2101      	movs	r1, #1
 800a696:	f7ff ff05 	bl	800a4a4 <_Balloc>
 800a69a:	4602      	mov	r2, r0
 800a69c:	b928      	cbnz	r0, 800a6aa <__i2b+0x1a>
 800a69e:	4b05      	ldr	r3, [pc, #20]	; (800a6b4 <__i2b+0x24>)
 800a6a0:	4805      	ldr	r0, [pc, #20]	; (800a6b8 <__i2b+0x28>)
 800a6a2:	f240 1145 	movw	r1, #325	; 0x145
 800a6a6:	f000 fd0d 	bl	800b0c4 <__assert_func>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	6144      	str	r4, [r0, #20]
 800a6ae:	6103      	str	r3, [r0, #16]
 800a6b0:	bd10      	pop	{r4, pc}
 800a6b2:	bf00      	nop
 800a6b4:	0800b3e4 	.word	0x0800b3e4
 800a6b8:	0800b3f5 	.word	0x0800b3f5

0800a6bc <__multiply>:
 800a6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c0:	4691      	mov	r9, r2
 800a6c2:	690a      	ldr	r2, [r1, #16]
 800a6c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	bfb8      	it	lt
 800a6cc:	460b      	movlt	r3, r1
 800a6ce:	460c      	mov	r4, r1
 800a6d0:	bfbc      	itt	lt
 800a6d2:	464c      	movlt	r4, r9
 800a6d4:	4699      	movlt	r9, r3
 800a6d6:	6927      	ldr	r7, [r4, #16]
 800a6d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a6dc:	68a3      	ldr	r3, [r4, #8]
 800a6de:	6861      	ldr	r1, [r4, #4]
 800a6e0:	eb07 060a 	add.w	r6, r7, sl
 800a6e4:	42b3      	cmp	r3, r6
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	bfb8      	it	lt
 800a6ea:	3101      	addlt	r1, #1
 800a6ec:	f7ff feda 	bl	800a4a4 <_Balloc>
 800a6f0:	b930      	cbnz	r0, 800a700 <__multiply+0x44>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	4b44      	ldr	r3, [pc, #272]	; (800a808 <__multiply+0x14c>)
 800a6f6:	4845      	ldr	r0, [pc, #276]	; (800a80c <__multiply+0x150>)
 800a6f8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a6fc:	f000 fce2 	bl	800b0c4 <__assert_func>
 800a700:	f100 0514 	add.w	r5, r0, #20
 800a704:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a708:	462b      	mov	r3, r5
 800a70a:	2200      	movs	r2, #0
 800a70c:	4543      	cmp	r3, r8
 800a70e:	d321      	bcc.n	800a754 <__multiply+0x98>
 800a710:	f104 0314 	add.w	r3, r4, #20
 800a714:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a718:	f109 0314 	add.w	r3, r9, #20
 800a71c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a720:	9202      	str	r2, [sp, #8]
 800a722:	1b3a      	subs	r2, r7, r4
 800a724:	3a15      	subs	r2, #21
 800a726:	f022 0203 	bic.w	r2, r2, #3
 800a72a:	3204      	adds	r2, #4
 800a72c:	f104 0115 	add.w	r1, r4, #21
 800a730:	428f      	cmp	r7, r1
 800a732:	bf38      	it	cc
 800a734:	2204      	movcc	r2, #4
 800a736:	9201      	str	r2, [sp, #4]
 800a738:	9a02      	ldr	r2, [sp, #8]
 800a73a:	9303      	str	r3, [sp, #12]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d80c      	bhi.n	800a75a <__multiply+0x9e>
 800a740:	2e00      	cmp	r6, #0
 800a742:	dd03      	ble.n	800a74c <__multiply+0x90>
 800a744:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d05b      	beq.n	800a804 <__multiply+0x148>
 800a74c:	6106      	str	r6, [r0, #16]
 800a74e:	b005      	add	sp, #20
 800a750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a754:	f843 2b04 	str.w	r2, [r3], #4
 800a758:	e7d8      	b.n	800a70c <__multiply+0x50>
 800a75a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a75e:	f1ba 0f00 	cmp.w	sl, #0
 800a762:	d024      	beq.n	800a7ae <__multiply+0xf2>
 800a764:	f104 0e14 	add.w	lr, r4, #20
 800a768:	46a9      	mov	r9, r5
 800a76a:	f04f 0c00 	mov.w	ip, #0
 800a76e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a772:	f8d9 1000 	ldr.w	r1, [r9]
 800a776:	fa1f fb82 	uxth.w	fp, r2
 800a77a:	b289      	uxth	r1, r1
 800a77c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a780:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a784:	f8d9 2000 	ldr.w	r2, [r9]
 800a788:	4461      	add	r1, ip
 800a78a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a78e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a792:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a796:	b289      	uxth	r1, r1
 800a798:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a79c:	4577      	cmp	r7, lr
 800a79e:	f849 1b04 	str.w	r1, [r9], #4
 800a7a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a7a6:	d8e2      	bhi.n	800a76e <__multiply+0xb2>
 800a7a8:	9a01      	ldr	r2, [sp, #4]
 800a7aa:	f845 c002 	str.w	ip, [r5, r2]
 800a7ae:	9a03      	ldr	r2, [sp, #12]
 800a7b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a7b4:	3304      	adds	r3, #4
 800a7b6:	f1b9 0f00 	cmp.w	r9, #0
 800a7ba:	d021      	beq.n	800a800 <__multiply+0x144>
 800a7bc:	6829      	ldr	r1, [r5, #0]
 800a7be:	f104 0c14 	add.w	ip, r4, #20
 800a7c2:	46ae      	mov	lr, r5
 800a7c4:	f04f 0a00 	mov.w	sl, #0
 800a7c8:	f8bc b000 	ldrh.w	fp, [ip]
 800a7cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a7d0:	fb09 220b 	mla	r2, r9, fp, r2
 800a7d4:	4452      	add	r2, sl
 800a7d6:	b289      	uxth	r1, r1
 800a7d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a7dc:	f84e 1b04 	str.w	r1, [lr], #4
 800a7e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a7e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a7e8:	f8be 1000 	ldrh.w	r1, [lr]
 800a7ec:	fb09 110a 	mla	r1, r9, sl, r1
 800a7f0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a7f4:	4567      	cmp	r7, ip
 800a7f6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a7fa:	d8e5      	bhi.n	800a7c8 <__multiply+0x10c>
 800a7fc:	9a01      	ldr	r2, [sp, #4]
 800a7fe:	50a9      	str	r1, [r5, r2]
 800a800:	3504      	adds	r5, #4
 800a802:	e799      	b.n	800a738 <__multiply+0x7c>
 800a804:	3e01      	subs	r6, #1
 800a806:	e79b      	b.n	800a740 <__multiply+0x84>
 800a808:	0800b3e4 	.word	0x0800b3e4
 800a80c:	0800b3f5 	.word	0x0800b3f5

0800a810 <__pow5mult>:
 800a810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a814:	4615      	mov	r5, r2
 800a816:	f012 0203 	ands.w	r2, r2, #3
 800a81a:	4606      	mov	r6, r0
 800a81c:	460f      	mov	r7, r1
 800a81e:	d007      	beq.n	800a830 <__pow5mult+0x20>
 800a820:	4c25      	ldr	r4, [pc, #148]	; (800a8b8 <__pow5mult+0xa8>)
 800a822:	3a01      	subs	r2, #1
 800a824:	2300      	movs	r3, #0
 800a826:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a82a:	f7ff fe9d 	bl	800a568 <__multadd>
 800a82e:	4607      	mov	r7, r0
 800a830:	10ad      	asrs	r5, r5, #2
 800a832:	d03d      	beq.n	800a8b0 <__pow5mult+0xa0>
 800a834:	69f4      	ldr	r4, [r6, #28]
 800a836:	b97c      	cbnz	r4, 800a858 <__pow5mult+0x48>
 800a838:	2010      	movs	r0, #16
 800a83a:	f7ff fd7f 	bl	800a33c <malloc>
 800a83e:	4602      	mov	r2, r0
 800a840:	61f0      	str	r0, [r6, #28]
 800a842:	b928      	cbnz	r0, 800a850 <__pow5mult+0x40>
 800a844:	4b1d      	ldr	r3, [pc, #116]	; (800a8bc <__pow5mult+0xac>)
 800a846:	481e      	ldr	r0, [pc, #120]	; (800a8c0 <__pow5mult+0xb0>)
 800a848:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a84c:	f000 fc3a 	bl	800b0c4 <__assert_func>
 800a850:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a854:	6004      	str	r4, [r0, #0]
 800a856:	60c4      	str	r4, [r0, #12]
 800a858:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a85c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a860:	b94c      	cbnz	r4, 800a876 <__pow5mult+0x66>
 800a862:	f240 2171 	movw	r1, #625	; 0x271
 800a866:	4630      	mov	r0, r6
 800a868:	f7ff ff12 	bl	800a690 <__i2b>
 800a86c:	2300      	movs	r3, #0
 800a86e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a872:	4604      	mov	r4, r0
 800a874:	6003      	str	r3, [r0, #0]
 800a876:	f04f 0900 	mov.w	r9, #0
 800a87a:	07eb      	lsls	r3, r5, #31
 800a87c:	d50a      	bpl.n	800a894 <__pow5mult+0x84>
 800a87e:	4639      	mov	r1, r7
 800a880:	4622      	mov	r2, r4
 800a882:	4630      	mov	r0, r6
 800a884:	f7ff ff1a 	bl	800a6bc <__multiply>
 800a888:	4639      	mov	r1, r7
 800a88a:	4680      	mov	r8, r0
 800a88c:	4630      	mov	r0, r6
 800a88e:	f7ff fe49 	bl	800a524 <_Bfree>
 800a892:	4647      	mov	r7, r8
 800a894:	106d      	asrs	r5, r5, #1
 800a896:	d00b      	beq.n	800a8b0 <__pow5mult+0xa0>
 800a898:	6820      	ldr	r0, [r4, #0]
 800a89a:	b938      	cbnz	r0, 800a8ac <__pow5mult+0x9c>
 800a89c:	4622      	mov	r2, r4
 800a89e:	4621      	mov	r1, r4
 800a8a0:	4630      	mov	r0, r6
 800a8a2:	f7ff ff0b 	bl	800a6bc <__multiply>
 800a8a6:	6020      	str	r0, [r4, #0]
 800a8a8:	f8c0 9000 	str.w	r9, [r0]
 800a8ac:	4604      	mov	r4, r0
 800a8ae:	e7e4      	b.n	800a87a <__pow5mult+0x6a>
 800a8b0:	4638      	mov	r0, r7
 800a8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8b6:	bf00      	nop
 800a8b8:	0800b540 	.word	0x0800b540
 800a8bc:	0800b375 	.word	0x0800b375
 800a8c0:	0800b3f5 	.word	0x0800b3f5

0800a8c4 <__lshift>:
 800a8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8c8:	460c      	mov	r4, r1
 800a8ca:	6849      	ldr	r1, [r1, #4]
 800a8cc:	6923      	ldr	r3, [r4, #16]
 800a8ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a8d2:	68a3      	ldr	r3, [r4, #8]
 800a8d4:	4607      	mov	r7, r0
 800a8d6:	4691      	mov	r9, r2
 800a8d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8dc:	f108 0601 	add.w	r6, r8, #1
 800a8e0:	42b3      	cmp	r3, r6
 800a8e2:	db0b      	blt.n	800a8fc <__lshift+0x38>
 800a8e4:	4638      	mov	r0, r7
 800a8e6:	f7ff fddd 	bl	800a4a4 <_Balloc>
 800a8ea:	4605      	mov	r5, r0
 800a8ec:	b948      	cbnz	r0, 800a902 <__lshift+0x3e>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	4b28      	ldr	r3, [pc, #160]	; (800a994 <__lshift+0xd0>)
 800a8f2:	4829      	ldr	r0, [pc, #164]	; (800a998 <__lshift+0xd4>)
 800a8f4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a8f8:	f000 fbe4 	bl	800b0c4 <__assert_func>
 800a8fc:	3101      	adds	r1, #1
 800a8fe:	005b      	lsls	r3, r3, #1
 800a900:	e7ee      	b.n	800a8e0 <__lshift+0x1c>
 800a902:	2300      	movs	r3, #0
 800a904:	f100 0114 	add.w	r1, r0, #20
 800a908:	f100 0210 	add.w	r2, r0, #16
 800a90c:	4618      	mov	r0, r3
 800a90e:	4553      	cmp	r3, sl
 800a910:	db33      	blt.n	800a97a <__lshift+0xb6>
 800a912:	6920      	ldr	r0, [r4, #16]
 800a914:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a918:	f104 0314 	add.w	r3, r4, #20
 800a91c:	f019 091f 	ands.w	r9, r9, #31
 800a920:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a924:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a928:	d02b      	beq.n	800a982 <__lshift+0xbe>
 800a92a:	f1c9 0e20 	rsb	lr, r9, #32
 800a92e:	468a      	mov	sl, r1
 800a930:	2200      	movs	r2, #0
 800a932:	6818      	ldr	r0, [r3, #0]
 800a934:	fa00 f009 	lsl.w	r0, r0, r9
 800a938:	4310      	orrs	r0, r2
 800a93a:	f84a 0b04 	str.w	r0, [sl], #4
 800a93e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a942:	459c      	cmp	ip, r3
 800a944:	fa22 f20e 	lsr.w	r2, r2, lr
 800a948:	d8f3      	bhi.n	800a932 <__lshift+0x6e>
 800a94a:	ebac 0304 	sub.w	r3, ip, r4
 800a94e:	3b15      	subs	r3, #21
 800a950:	f023 0303 	bic.w	r3, r3, #3
 800a954:	3304      	adds	r3, #4
 800a956:	f104 0015 	add.w	r0, r4, #21
 800a95a:	4584      	cmp	ip, r0
 800a95c:	bf38      	it	cc
 800a95e:	2304      	movcc	r3, #4
 800a960:	50ca      	str	r2, [r1, r3]
 800a962:	b10a      	cbz	r2, 800a968 <__lshift+0xa4>
 800a964:	f108 0602 	add.w	r6, r8, #2
 800a968:	3e01      	subs	r6, #1
 800a96a:	4638      	mov	r0, r7
 800a96c:	612e      	str	r6, [r5, #16]
 800a96e:	4621      	mov	r1, r4
 800a970:	f7ff fdd8 	bl	800a524 <_Bfree>
 800a974:	4628      	mov	r0, r5
 800a976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a97a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a97e:	3301      	adds	r3, #1
 800a980:	e7c5      	b.n	800a90e <__lshift+0x4a>
 800a982:	3904      	subs	r1, #4
 800a984:	f853 2b04 	ldr.w	r2, [r3], #4
 800a988:	f841 2f04 	str.w	r2, [r1, #4]!
 800a98c:	459c      	cmp	ip, r3
 800a98e:	d8f9      	bhi.n	800a984 <__lshift+0xc0>
 800a990:	e7ea      	b.n	800a968 <__lshift+0xa4>
 800a992:	bf00      	nop
 800a994:	0800b3e4 	.word	0x0800b3e4
 800a998:	0800b3f5 	.word	0x0800b3f5

0800a99c <__mcmp>:
 800a99c:	b530      	push	{r4, r5, lr}
 800a99e:	6902      	ldr	r2, [r0, #16]
 800a9a0:	690c      	ldr	r4, [r1, #16]
 800a9a2:	1b12      	subs	r2, r2, r4
 800a9a4:	d10e      	bne.n	800a9c4 <__mcmp+0x28>
 800a9a6:	f100 0314 	add.w	r3, r0, #20
 800a9aa:	3114      	adds	r1, #20
 800a9ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a9b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a9b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a9b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a9bc:	42a5      	cmp	r5, r4
 800a9be:	d003      	beq.n	800a9c8 <__mcmp+0x2c>
 800a9c0:	d305      	bcc.n	800a9ce <__mcmp+0x32>
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	4610      	mov	r0, r2
 800a9c6:	bd30      	pop	{r4, r5, pc}
 800a9c8:	4283      	cmp	r3, r0
 800a9ca:	d3f3      	bcc.n	800a9b4 <__mcmp+0x18>
 800a9cc:	e7fa      	b.n	800a9c4 <__mcmp+0x28>
 800a9ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a9d2:	e7f7      	b.n	800a9c4 <__mcmp+0x28>

0800a9d4 <__mdiff>:
 800a9d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d8:	460c      	mov	r4, r1
 800a9da:	4606      	mov	r6, r0
 800a9dc:	4611      	mov	r1, r2
 800a9de:	4620      	mov	r0, r4
 800a9e0:	4690      	mov	r8, r2
 800a9e2:	f7ff ffdb 	bl	800a99c <__mcmp>
 800a9e6:	1e05      	subs	r5, r0, #0
 800a9e8:	d110      	bne.n	800aa0c <__mdiff+0x38>
 800a9ea:	4629      	mov	r1, r5
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	f7ff fd59 	bl	800a4a4 <_Balloc>
 800a9f2:	b930      	cbnz	r0, 800aa02 <__mdiff+0x2e>
 800a9f4:	4b3a      	ldr	r3, [pc, #232]	; (800aae0 <__mdiff+0x10c>)
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	f240 2137 	movw	r1, #567	; 0x237
 800a9fc:	4839      	ldr	r0, [pc, #228]	; (800aae4 <__mdiff+0x110>)
 800a9fe:	f000 fb61 	bl	800b0c4 <__assert_func>
 800aa02:	2301      	movs	r3, #1
 800aa04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa0c:	bfa4      	itt	ge
 800aa0e:	4643      	movge	r3, r8
 800aa10:	46a0      	movge	r8, r4
 800aa12:	4630      	mov	r0, r6
 800aa14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aa18:	bfa6      	itte	ge
 800aa1a:	461c      	movge	r4, r3
 800aa1c:	2500      	movge	r5, #0
 800aa1e:	2501      	movlt	r5, #1
 800aa20:	f7ff fd40 	bl	800a4a4 <_Balloc>
 800aa24:	b920      	cbnz	r0, 800aa30 <__mdiff+0x5c>
 800aa26:	4b2e      	ldr	r3, [pc, #184]	; (800aae0 <__mdiff+0x10c>)
 800aa28:	4602      	mov	r2, r0
 800aa2a:	f240 2145 	movw	r1, #581	; 0x245
 800aa2e:	e7e5      	b.n	800a9fc <__mdiff+0x28>
 800aa30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aa34:	6926      	ldr	r6, [r4, #16]
 800aa36:	60c5      	str	r5, [r0, #12]
 800aa38:	f104 0914 	add.w	r9, r4, #20
 800aa3c:	f108 0514 	add.w	r5, r8, #20
 800aa40:	f100 0e14 	add.w	lr, r0, #20
 800aa44:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aa48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aa4c:	f108 0210 	add.w	r2, r8, #16
 800aa50:	46f2      	mov	sl, lr
 800aa52:	2100      	movs	r1, #0
 800aa54:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aa5c:	fa11 f88b 	uxtah	r8, r1, fp
 800aa60:	b299      	uxth	r1, r3
 800aa62:	0c1b      	lsrs	r3, r3, #16
 800aa64:	eba8 0801 	sub.w	r8, r8, r1
 800aa68:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa6c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa70:	fa1f f888 	uxth.w	r8, r8
 800aa74:	1419      	asrs	r1, r3, #16
 800aa76:	454e      	cmp	r6, r9
 800aa78:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa7c:	f84a 3b04 	str.w	r3, [sl], #4
 800aa80:	d8e8      	bhi.n	800aa54 <__mdiff+0x80>
 800aa82:	1b33      	subs	r3, r6, r4
 800aa84:	3b15      	subs	r3, #21
 800aa86:	f023 0303 	bic.w	r3, r3, #3
 800aa8a:	3304      	adds	r3, #4
 800aa8c:	3415      	adds	r4, #21
 800aa8e:	42a6      	cmp	r6, r4
 800aa90:	bf38      	it	cc
 800aa92:	2304      	movcc	r3, #4
 800aa94:	441d      	add	r5, r3
 800aa96:	4473      	add	r3, lr
 800aa98:	469e      	mov	lr, r3
 800aa9a:	462e      	mov	r6, r5
 800aa9c:	4566      	cmp	r6, ip
 800aa9e:	d30e      	bcc.n	800aabe <__mdiff+0xea>
 800aaa0:	f10c 0203 	add.w	r2, ip, #3
 800aaa4:	1b52      	subs	r2, r2, r5
 800aaa6:	f022 0203 	bic.w	r2, r2, #3
 800aaaa:	3d03      	subs	r5, #3
 800aaac:	45ac      	cmp	ip, r5
 800aaae:	bf38      	it	cc
 800aab0:	2200      	movcc	r2, #0
 800aab2:	4413      	add	r3, r2
 800aab4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800aab8:	b17a      	cbz	r2, 800aada <__mdiff+0x106>
 800aaba:	6107      	str	r7, [r0, #16]
 800aabc:	e7a4      	b.n	800aa08 <__mdiff+0x34>
 800aabe:	f856 8b04 	ldr.w	r8, [r6], #4
 800aac2:	fa11 f288 	uxtah	r2, r1, r8
 800aac6:	1414      	asrs	r4, r2, #16
 800aac8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aacc:	b292      	uxth	r2, r2
 800aace:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aad2:	f84e 2b04 	str.w	r2, [lr], #4
 800aad6:	1421      	asrs	r1, r4, #16
 800aad8:	e7e0      	b.n	800aa9c <__mdiff+0xc8>
 800aada:	3f01      	subs	r7, #1
 800aadc:	e7ea      	b.n	800aab4 <__mdiff+0xe0>
 800aade:	bf00      	nop
 800aae0:	0800b3e4 	.word	0x0800b3e4
 800aae4:	0800b3f5 	.word	0x0800b3f5

0800aae8 <__d2b>:
 800aae8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aaec:	460f      	mov	r7, r1
 800aaee:	2101      	movs	r1, #1
 800aaf0:	ec59 8b10 	vmov	r8, r9, d0
 800aaf4:	4616      	mov	r6, r2
 800aaf6:	f7ff fcd5 	bl	800a4a4 <_Balloc>
 800aafa:	4604      	mov	r4, r0
 800aafc:	b930      	cbnz	r0, 800ab0c <__d2b+0x24>
 800aafe:	4602      	mov	r2, r0
 800ab00:	4b24      	ldr	r3, [pc, #144]	; (800ab94 <__d2b+0xac>)
 800ab02:	4825      	ldr	r0, [pc, #148]	; (800ab98 <__d2b+0xb0>)
 800ab04:	f240 310f 	movw	r1, #783	; 0x30f
 800ab08:	f000 fadc 	bl	800b0c4 <__assert_func>
 800ab0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab14:	bb2d      	cbnz	r5, 800ab62 <__d2b+0x7a>
 800ab16:	9301      	str	r3, [sp, #4]
 800ab18:	f1b8 0300 	subs.w	r3, r8, #0
 800ab1c:	d026      	beq.n	800ab6c <__d2b+0x84>
 800ab1e:	4668      	mov	r0, sp
 800ab20:	9300      	str	r3, [sp, #0]
 800ab22:	f7ff fd87 	bl	800a634 <__lo0bits>
 800ab26:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ab2a:	b1e8      	cbz	r0, 800ab68 <__d2b+0x80>
 800ab2c:	f1c0 0320 	rsb	r3, r0, #32
 800ab30:	fa02 f303 	lsl.w	r3, r2, r3
 800ab34:	430b      	orrs	r3, r1
 800ab36:	40c2      	lsrs	r2, r0
 800ab38:	6163      	str	r3, [r4, #20]
 800ab3a:	9201      	str	r2, [sp, #4]
 800ab3c:	9b01      	ldr	r3, [sp, #4]
 800ab3e:	61a3      	str	r3, [r4, #24]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	bf14      	ite	ne
 800ab44:	2202      	movne	r2, #2
 800ab46:	2201      	moveq	r2, #1
 800ab48:	6122      	str	r2, [r4, #16]
 800ab4a:	b1bd      	cbz	r5, 800ab7c <__d2b+0x94>
 800ab4c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab50:	4405      	add	r5, r0
 800ab52:	603d      	str	r5, [r7, #0]
 800ab54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab58:	6030      	str	r0, [r6, #0]
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	b003      	add	sp, #12
 800ab5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab66:	e7d6      	b.n	800ab16 <__d2b+0x2e>
 800ab68:	6161      	str	r1, [r4, #20]
 800ab6a:	e7e7      	b.n	800ab3c <__d2b+0x54>
 800ab6c:	a801      	add	r0, sp, #4
 800ab6e:	f7ff fd61 	bl	800a634 <__lo0bits>
 800ab72:	9b01      	ldr	r3, [sp, #4]
 800ab74:	6163      	str	r3, [r4, #20]
 800ab76:	3020      	adds	r0, #32
 800ab78:	2201      	movs	r2, #1
 800ab7a:	e7e5      	b.n	800ab48 <__d2b+0x60>
 800ab7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab84:	6038      	str	r0, [r7, #0]
 800ab86:	6918      	ldr	r0, [r3, #16]
 800ab88:	f7ff fd34 	bl	800a5f4 <__hi0bits>
 800ab8c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab90:	e7e2      	b.n	800ab58 <__d2b+0x70>
 800ab92:	bf00      	nop
 800ab94:	0800b3e4 	.word	0x0800b3e4
 800ab98:	0800b3f5 	.word	0x0800b3f5

0800ab9c <__sfputc_r>:
 800ab9c:	6893      	ldr	r3, [r2, #8]
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	b410      	push	{r4}
 800aba4:	6093      	str	r3, [r2, #8]
 800aba6:	da08      	bge.n	800abba <__sfputc_r+0x1e>
 800aba8:	6994      	ldr	r4, [r2, #24]
 800abaa:	42a3      	cmp	r3, r4
 800abac:	db01      	blt.n	800abb2 <__sfputc_r+0x16>
 800abae:	290a      	cmp	r1, #10
 800abb0:	d103      	bne.n	800abba <__sfputc_r+0x1e>
 800abb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abb6:	f7fe bbe8 	b.w	800938a <__swbuf_r>
 800abba:	6813      	ldr	r3, [r2, #0]
 800abbc:	1c58      	adds	r0, r3, #1
 800abbe:	6010      	str	r0, [r2, #0]
 800abc0:	7019      	strb	r1, [r3, #0]
 800abc2:	4608      	mov	r0, r1
 800abc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abc8:	4770      	bx	lr

0800abca <__sfputs_r>:
 800abca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abcc:	4606      	mov	r6, r0
 800abce:	460f      	mov	r7, r1
 800abd0:	4614      	mov	r4, r2
 800abd2:	18d5      	adds	r5, r2, r3
 800abd4:	42ac      	cmp	r4, r5
 800abd6:	d101      	bne.n	800abdc <__sfputs_r+0x12>
 800abd8:	2000      	movs	r0, #0
 800abda:	e007      	b.n	800abec <__sfputs_r+0x22>
 800abdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abe0:	463a      	mov	r2, r7
 800abe2:	4630      	mov	r0, r6
 800abe4:	f7ff ffda 	bl	800ab9c <__sfputc_r>
 800abe8:	1c43      	adds	r3, r0, #1
 800abea:	d1f3      	bne.n	800abd4 <__sfputs_r+0xa>
 800abec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800abf0 <_vfiprintf_r>:
 800abf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf4:	460d      	mov	r5, r1
 800abf6:	b09d      	sub	sp, #116	; 0x74
 800abf8:	4614      	mov	r4, r2
 800abfa:	4698      	mov	r8, r3
 800abfc:	4606      	mov	r6, r0
 800abfe:	b118      	cbz	r0, 800ac08 <_vfiprintf_r+0x18>
 800ac00:	6a03      	ldr	r3, [r0, #32]
 800ac02:	b90b      	cbnz	r3, 800ac08 <_vfiprintf_r+0x18>
 800ac04:	f7fe fada 	bl	80091bc <__sinit>
 800ac08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac0a:	07d9      	lsls	r1, r3, #31
 800ac0c:	d405      	bmi.n	800ac1a <_vfiprintf_r+0x2a>
 800ac0e:	89ab      	ldrh	r3, [r5, #12]
 800ac10:	059a      	lsls	r2, r3, #22
 800ac12:	d402      	bmi.n	800ac1a <_vfiprintf_r+0x2a>
 800ac14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac16:	f7fe fcc9 	bl	80095ac <__retarget_lock_acquire_recursive>
 800ac1a:	89ab      	ldrh	r3, [r5, #12]
 800ac1c:	071b      	lsls	r3, r3, #28
 800ac1e:	d501      	bpl.n	800ac24 <_vfiprintf_r+0x34>
 800ac20:	692b      	ldr	r3, [r5, #16]
 800ac22:	b99b      	cbnz	r3, 800ac4c <_vfiprintf_r+0x5c>
 800ac24:	4629      	mov	r1, r5
 800ac26:	4630      	mov	r0, r6
 800ac28:	f7fe fbec 	bl	8009404 <__swsetup_r>
 800ac2c:	b170      	cbz	r0, 800ac4c <_vfiprintf_r+0x5c>
 800ac2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac30:	07dc      	lsls	r4, r3, #31
 800ac32:	d504      	bpl.n	800ac3e <_vfiprintf_r+0x4e>
 800ac34:	f04f 30ff 	mov.w	r0, #4294967295
 800ac38:	b01d      	add	sp, #116	; 0x74
 800ac3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac3e:	89ab      	ldrh	r3, [r5, #12]
 800ac40:	0598      	lsls	r0, r3, #22
 800ac42:	d4f7      	bmi.n	800ac34 <_vfiprintf_r+0x44>
 800ac44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac46:	f7fe fcb2 	bl	80095ae <__retarget_lock_release_recursive>
 800ac4a:	e7f3      	b.n	800ac34 <_vfiprintf_r+0x44>
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ac50:	2320      	movs	r3, #32
 800ac52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac56:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac5a:	2330      	movs	r3, #48	; 0x30
 800ac5c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ae10 <_vfiprintf_r+0x220>
 800ac60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac64:	f04f 0901 	mov.w	r9, #1
 800ac68:	4623      	mov	r3, r4
 800ac6a:	469a      	mov	sl, r3
 800ac6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac70:	b10a      	cbz	r2, 800ac76 <_vfiprintf_r+0x86>
 800ac72:	2a25      	cmp	r2, #37	; 0x25
 800ac74:	d1f9      	bne.n	800ac6a <_vfiprintf_r+0x7a>
 800ac76:	ebba 0b04 	subs.w	fp, sl, r4
 800ac7a:	d00b      	beq.n	800ac94 <_vfiprintf_r+0xa4>
 800ac7c:	465b      	mov	r3, fp
 800ac7e:	4622      	mov	r2, r4
 800ac80:	4629      	mov	r1, r5
 800ac82:	4630      	mov	r0, r6
 800ac84:	f7ff ffa1 	bl	800abca <__sfputs_r>
 800ac88:	3001      	adds	r0, #1
 800ac8a:	f000 80a9 	beq.w	800ade0 <_vfiprintf_r+0x1f0>
 800ac8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac90:	445a      	add	r2, fp
 800ac92:	9209      	str	r2, [sp, #36]	; 0x24
 800ac94:	f89a 3000 	ldrb.w	r3, [sl]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f000 80a1 	beq.w	800ade0 <_vfiprintf_r+0x1f0>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	f04f 32ff 	mov.w	r2, #4294967295
 800aca4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aca8:	f10a 0a01 	add.w	sl, sl, #1
 800acac:	9304      	str	r3, [sp, #16]
 800acae:	9307      	str	r3, [sp, #28]
 800acb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acb4:	931a      	str	r3, [sp, #104]	; 0x68
 800acb6:	4654      	mov	r4, sl
 800acb8:	2205      	movs	r2, #5
 800acba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acbe:	4854      	ldr	r0, [pc, #336]	; (800ae10 <_vfiprintf_r+0x220>)
 800acc0:	f7f5 fa86 	bl	80001d0 <memchr>
 800acc4:	9a04      	ldr	r2, [sp, #16]
 800acc6:	b9d8      	cbnz	r0, 800ad00 <_vfiprintf_r+0x110>
 800acc8:	06d1      	lsls	r1, r2, #27
 800acca:	bf44      	itt	mi
 800accc:	2320      	movmi	r3, #32
 800acce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acd2:	0713      	lsls	r3, r2, #28
 800acd4:	bf44      	itt	mi
 800acd6:	232b      	movmi	r3, #43	; 0x2b
 800acd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acdc:	f89a 3000 	ldrb.w	r3, [sl]
 800ace0:	2b2a      	cmp	r3, #42	; 0x2a
 800ace2:	d015      	beq.n	800ad10 <_vfiprintf_r+0x120>
 800ace4:	9a07      	ldr	r2, [sp, #28]
 800ace6:	4654      	mov	r4, sl
 800ace8:	2000      	movs	r0, #0
 800acea:	f04f 0c0a 	mov.w	ip, #10
 800acee:	4621      	mov	r1, r4
 800acf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acf4:	3b30      	subs	r3, #48	; 0x30
 800acf6:	2b09      	cmp	r3, #9
 800acf8:	d94d      	bls.n	800ad96 <_vfiprintf_r+0x1a6>
 800acfa:	b1b0      	cbz	r0, 800ad2a <_vfiprintf_r+0x13a>
 800acfc:	9207      	str	r2, [sp, #28]
 800acfe:	e014      	b.n	800ad2a <_vfiprintf_r+0x13a>
 800ad00:	eba0 0308 	sub.w	r3, r0, r8
 800ad04:	fa09 f303 	lsl.w	r3, r9, r3
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	9304      	str	r3, [sp, #16]
 800ad0c:	46a2      	mov	sl, r4
 800ad0e:	e7d2      	b.n	800acb6 <_vfiprintf_r+0xc6>
 800ad10:	9b03      	ldr	r3, [sp, #12]
 800ad12:	1d19      	adds	r1, r3, #4
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	9103      	str	r1, [sp, #12]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	bfbb      	ittet	lt
 800ad1c:	425b      	neglt	r3, r3
 800ad1e:	f042 0202 	orrlt.w	r2, r2, #2
 800ad22:	9307      	strge	r3, [sp, #28]
 800ad24:	9307      	strlt	r3, [sp, #28]
 800ad26:	bfb8      	it	lt
 800ad28:	9204      	strlt	r2, [sp, #16]
 800ad2a:	7823      	ldrb	r3, [r4, #0]
 800ad2c:	2b2e      	cmp	r3, #46	; 0x2e
 800ad2e:	d10c      	bne.n	800ad4a <_vfiprintf_r+0x15a>
 800ad30:	7863      	ldrb	r3, [r4, #1]
 800ad32:	2b2a      	cmp	r3, #42	; 0x2a
 800ad34:	d134      	bne.n	800ada0 <_vfiprintf_r+0x1b0>
 800ad36:	9b03      	ldr	r3, [sp, #12]
 800ad38:	1d1a      	adds	r2, r3, #4
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	9203      	str	r2, [sp, #12]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	bfb8      	it	lt
 800ad42:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad46:	3402      	adds	r4, #2
 800ad48:	9305      	str	r3, [sp, #20]
 800ad4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ae20 <_vfiprintf_r+0x230>
 800ad4e:	7821      	ldrb	r1, [r4, #0]
 800ad50:	2203      	movs	r2, #3
 800ad52:	4650      	mov	r0, sl
 800ad54:	f7f5 fa3c 	bl	80001d0 <memchr>
 800ad58:	b138      	cbz	r0, 800ad6a <_vfiprintf_r+0x17a>
 800ad5a:	9b04      	ldr	r3, [sp, #16]
 800ad5c:	eba0 000a 	sub.w	r0, r0, sl
 800ad60:	2240      	movs	r2, #64	; 0x40
 800ad62:	4082      	lsls	r2, r0
 800ad64:	4313      	orrs	r3, r2
 800ad66:	3401      	adds	r4, #1
 800ad68:	9304      	str	r3, [sp, #16]
 800ad6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad6e:	4829      	ldr	r0, [pc, #164]	; (800ae14 <_vfiprintf_r+0x224>)
 800ad70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad74:	2206      	movs	r2, #6
 800ad76:	f7f5 fa2b 	bl	80001d0 <memchr>
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	d03f      	beq.n	800adfe <_vfiprintf_r+0x20e>
 800ad7e:	4b26      	ldr	r3, [pc, #152]	; (800ae18 <_vfiprintf_r+0x228>)
 800ad80:	bb1b      	cbnz	r3, 800adca <_vfiprintf_r+0x1da>
 800ad82:	9b03      	ldr	r3, [sp, #12]
 800ad84:	3307      	adds	r3, #7
 800ad86:	f023 0307 	bic.w	r3, r3, #7
 800ad8a:	3308      	adds	r3, #8
 800ad8c:	9303      	str	r3, [sp, #12]
 800ad8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad90:	443b      	add	r3, r7
 800ad92:	9309      	str	r3, [sp, #36]	; 0x24
 800ad94:	e768      	b.n	800ac68 <_vfiprintf_r+0x78>
 800ad96:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad9a:	460c      	mov	r4, r1
 800ad9c:	2001      	movs	r0, #1
 800ad9e:	e7a6      	b.n	800acee <_vfiprintf_r+0xfe>
 800ada0:	2300      	movs	r3, #0
 800ada2:	3401      	adds	r4, #1
 800ada4:	9305      	str	r3, [sp, #20]
 800ada6:	4619      	mov	r1, r3
 800ada8:	f04f 0c0a 	mov.w	ip, #10
 800adac:	4620      	mov	r0, r4
 800adae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adb2:	3a30      	subs	r2, #48	; 0x30
 800adb4:	2a09      	cmp	r2, #9
 800adb6:	d903      	bls.n	800adc0 <_vfiprintf_r+0x1d0>
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d0c6      	beq.n	800ad4a <_vfiprintf_r+0x15a>
 800adbc:	9105      	str	r1, [sp, #20]
 800adbe:	e7c4      	b.n	800ad4a <_vfiprintf_r+0x15a>
 800adc0:	fb0c 2101 	mla	r1, ip, r1, r2
 800adc4:	4604      	mov	r4, r0
 800adc6:	2301      	movs	r3, #1
 800adc8:	e7f0      	b.n	800adac <_vfiprintf_r+0x1bc>
 800adca:	ab03      	add	r3, sp, #12
 800adcc:	9300      	str	r3, [sp, #0]
 800adce:	462a      	mov	r2, r5
 800add0:	4b12      	ldr	r3, [pc, #72]	; (800ae1c <_vfiprintf_r+0x22c>)
 800add2:	a904      	add	r1, sp, #16
 800add4:	4630      	mov	r0, r6
 800add6:	f7fd fdb1 	bl	800893c <_printf_float>
 800adda:	4607      	mov	r7, r0
 800addc:	1c78      	adds	r0, r7, #1
 800adde:	d1d6      	bne.n	800ad8e <_vfiprintf_r+0x19e>
 800ade0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ade2:	07d9      	lsls	r1, r3, #31
 800ade4:	d405      	bmi.n	800adf2 <_vfiprintf_r+0x202>
 800ade6:	89ab      	ldrh	r3, [r5, #12]
 800ade8:	059a      	lsls	r2, r3, #22
 800adea:	d402      	bmi.n	800adf2 <_vfiprintf_r+0x202>
 800adec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adee:	f7fe fbde 	bl	80095ae <__retarget_lock_release_recursive>
 800adf2:	89ab      	ldrh	r3, [r5, #12]
 800adf4:	065b      	lsls	r3, r3, #25
 800adf6:	f53f af1d 	bmi.w	800ac34 <_vfiprintf_r+0x44>
 800adfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adfc:	e71c      	b.n	800ac38 <_vfiprintf_r+0x48>
 800adfe:	ab03      	add	r3, sp, #12
 800ae00:	9300      	str	r3, [sp, #0]
 800ae02:	462a      	mov	r2, r5
 800ae04:	4b05      	ldr	r3, [pc, #20]	; (800ae1c <_vfiprintf_r+0x22c>)
 800ae06:	a904      	add	r1, sp, #16
 800ae08:	4630      	mov	r0, r6
 800ae0a:	f7fe f83b 	bl	8008e84 <_printf_i>
 800ae0e:	e7e4      	b.n	800adda <_vfiprintf_r+0x1ea>
 800ae10:	0800b54c 	.word	0x0800b54c
 800ae14:	0800b556 	.word	0x0800b556
 800ae18:	0800893d 	.word	0x0800893d
 800ae1c:	0800abcb 	.word	0x0800abcb
 800ae20:	0800b552 	.word	0x0800b552

0800ae24 <__sflush_r>:
 800ae24:	898a      	ldrh	r2, [r1, #12]
 800ae26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae2a:	4605      	mov	r5, r0
 800ae2c:	0710      	lsls	r0, r2, #28
 800ae2e:	460c      	mov	r4, r1
 800ae30:	d458      	bmi.n	800aee4 <__sflush_r+0xc0>
 800ae32:	684b      	ldr	r3, [r1, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	dc05      	bgt.n	800ae44 <__sflush_r+0x20>
 800ae38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	dc02      	bgt.n	800ae44 <__sflush_r+0x20>
 800ae3e:	2000      	movs	r0, #0
 800ae40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae46:	2e00      	cmp	r6, #0
 800ae48:	d0f9      	beq.n	800ae3e <__sflush_r+0x1a>
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae50:	682f      	ldr	r7, [r5, #0]
 800ae52:	6a21      	ldr	r1, [r4, #32]
 800ae54:	602b      	str	r3, [r5, #0]
 800ae56:	d032      	beq.n	800aebe <__sflush_r+0x9a>
 800ae58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae5a:	89a3      	ldrh	r3, [r4, #12]
 800ae5c:	075a      	lsls	r2, r3, #29
 800ae5e:	d505      	bpl.n	800ae6c <__sflush_r+0x48>
 800ae60:	6863      	ldr	r3, [r4, #4]
 800ae62:	1ac0      	subs	r0, r0, r3
 800ae64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae66:	b10b      	cbz	r3, 800ae6c <__sflush_r+0x48>
 800ae68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae6a:	1ac0      	subs	r0, r0, r3
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4602      	mov	r2, r0
 800ae70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae72:	6a21      	ldr	r1, [r4, #32]
 800ae74:	4628      	mov	r0, r5
 800ae76:	47b0      	blx	r6
 800ae78:	1c43      	adds	r3, r0, #1
 800ae7a:	89a3      	ldrh	r3, [r4, #12]
 800ae7c:	d106      	bne.n	800ae8c <__sflush_r+0x68>
 800ae7e:	6829      	ldr	r1, [r5, #0]
 800ae80:	291d      	cmp	r1, #29
 800ae82:	d82b      	bhi.n	800aedc <__sflush_r+0xb8>
 800ae84:	4a29      	ldr	r2, [pc, #164]	; (800af2c <__sflush_r+0x108>)
 800ae86:	410a      	asrs	r2, r1
 800ae88:	07d6      	lsls	r6, r2, #31
 800ae8a:	d427      	bmi.n	800aedc <__sflush_r+0xb8>
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	6062      	str	r2, [r4, #4]
 800ae90:	04d9      	lsls	r1, r3, #19
 800ae92:	6922      	ldr	r2, [r4, #16]
 800ae94:	6022      	str	r2, [r4, #0]
 800ae96:	d504      	bpl.n	800aea2 <__sflush_r+0x7e>
 800ae98:	1c42      	adds	r2, r0, #1
 800ae9a:	d101      	bne.n	800aea0 <__sflush_r+0x7c>
 800ae9c:	682b      	ldr	r3, [r5, #0]
 800ae9e:	b903      	cbnz	r3, 800aea2 <__sflush_r+0x7e>
 800aea0:	6560      	str	r0, [r4, #84]	; 0x54
 800aea2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aea4:	602f      	str	r7, [r5, #0]
 800aea6:	2900      	cmp	r1, #0
 800aea8:	d0c9      	beq.n	800ae3e <__sflush_r+0x1a>
 800aeaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aeae:	4299      	cmp	r1, r3
 800aeb0:	d002      	beq.n	800aeb8 <__sflush_r+0x94>
 800aeb2:	4628      	mov	r0, r5
 800aeb4:	f7ff f9f6 	bl	800a2a4 <_free_r>
 800aeb8:	2000      	movs	r0, #0
 800aeba:	6360      	str	r0, [r4, #52]	; 0x34
 800aebc:	e7c0      	b.n	800ae40 <__sflush_r+0x1c>
 800aebe:	2301      	movs	r3, #1
 800aec0:	4628      	mov	r0, r5
 800aec2:	47b0      	blx	r6
 800aec4:	1c41      	adds	r1, r0, #1
 800aec6:	d1c8      	bne.n	800ae5a <__sflush_r+0x36>
 800aec8:	682b      	ldr	r3, [r5, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d0c5      	beq.n	800ae5a <__sflush_r+0x36>
 800aece:	2b1d      	cmp	r3, #29
 800aed0:	d001      	beq.n	800aed6 <__sflush_r+0xb2>
 800aed2:	2b16      	cmp	r3, #22
 800aed4:	d101      	bne.n	800aeda <__sflush_r+0xb6>
 800aed6:	602f      	str	r7, [r5, #0]
 800aed8:	e7b1      	b.n	800ae3e <__sflush_r+0x1a>
 800aeda:	89a3      	ldrh	r3, [r4, #12]
 800aedc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aee0:	81a3      	strh	r3, [r4, #12]
 800aee2:	e7ad      	b.n	800ae40 <__sflush_r+0x1c>
 800aee4:	690f      	ldr	r7, [r1, #16]
 800aee6:	2f00      	cmp	r7, #0
 800aee8:	d0a9      	beq.n	800ae3e <__sflush_r+0x1a>
 800aeea:	0793      	lsls	r3, r2, #30
 800aeec:	680e      	ldr	r6, [r1, #0]
 800aeee:	bf08      	it	eq
 800aef0:	694b      	ldreq	r3, [r1, #20]
 800aef2:	600f      	str	r7, [r1, #0]
 800aef4:	bf18      	it	ne
 800aef6:	2300      	movne	r3, #0
 800aef8:	eba6 0807 	sub.w	r8, r6, r7
 800aefc:	608b      	str	r3, [r1, #8]
 800aefe:	f1b8 0f00 	cmp.w	r8, #0
 800af02:	dd9c      	ble.n	800ae3e <__sflush_r+0x1a>
 800af04:	6a21      	ldr	r1, [r4, #32]
 800af06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af08:	4643      	mov	r3, r8
 800af0a:	463a      	mov	r2, r7
 800af0c:	4628      	mov	r0, r5
 800af0e:	47b0      	blx	r6
 800af10:	2800      	cmp	r0, #0
 800af12:	dc06      	bgt.n	800af22 <__sflush_r+0xfe>
 800af14:	89a3      	ldrh	r3, [r4, #12]
 800af16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af1a:	81a3      	strh	r3, [r4, #12]
 800af1c:	f04f 30ff 	mov.w	r0, #4294967295
 800af20:	e78e      	b.n	800ae40 <__sflush_r+0x1c>
 800af22:	4407      	add	r7, r0
 800af24:	eba8 0800 	sub.w	r8, r8, r0
 800af28:	e7e9      	b.n	800aefe <__sflush_r+0xda>
 800af2a:	bf00      	nop
 800af2c:	dfbffffe 	.word	0xdfbffffe

0800af30 <_fflush_r>:
 800af30:	b538      	push	{r3, r4, r5, lr}
 800af32:	690b      	ldr	r3, [r1, #16]
 800af34:	4605      	mov	r5, r0
 800af36:	460c      	mov	r4, r1
 800af38:	b913      	cbnz	r3, 800af40 <_fflush_r+0x10>
 800af3a:	2500      	movs	r5, #0
 800af3c:	4628      	mov	r0, r5
 800af3e:	bd38      	pop	{r3, r4, r5, pc}
 800af40:	b118      	cbz	r0, 800af4a <_fflush_r+0x1a>
 800af42:	6a03      	ldr	r3, [r0, #32]
 800af44:	b90b      	cbnz	r3, 800af4a <_fflush_r+0x1a>
 800af46:	f7fe f939 	bl	80091bc <__sinit>
 800af4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d0f3      	beq.n	800af3a <_fflush_r+0xa>
 800af52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af54:	07d0      	lsls	r0, r2, #31
 800af56:	d404      	bmi.n	800af62 <_fflush_r+0x32>
 800af58:	0599      	lsls	r1, r3, #22
 800af5a:	d402      	bmi.n	800af62 <_fflush_r+0x32>
 800af5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af5e:	f7fe fb25 	bl	80095ac <__retarget_lock_acquire_recursive>
 800af62:	4628      	mov	r0, r5
 800af64:	4621      	mov	r1, r4
 800af66:	f7ff ff5d 	bl	800ae24 <__sflush_r>
 800af6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af6c:	07da      	lsls	r2, r3, #31
 800af6e:	4605      	mov	r5, r0
 800af70:	d4e4      	bmi.n	800af3c <_fflush_r+0xc>
 800af72:	89a3      	ldrh	r3, [r4, #12]
 800af74:	059b      	lsls	r3, r3, #22
 800af76:	d4e1      	bmi.n	800af3c <_fflush_r+0xc>
 800af78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af7a:	f7fe fb18 	bl	80095ae <__retarget_lock_release_recursive>
 800af7e:	e7dd      	b.n	800af3c <_fflush_r+0xc>

0800af80 <__swhatbuf_r>:
 800af80:	b570      	push	{r4, r5, r6, lr}
 800af82:	460c      	mov	r4, r1
 800af84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af88:	2900      	cmp	r1, #0
 800af8a:	b096      	sub	sp, #88	; 0x58
 800af8c:	4615      	mov	r5, r2
 800af8e:	461e      	mov	r6, r3
 800af90:	da0d      	bge.n	800afae <__swhatbuf_r+0x2e>
 800af92:	89a3      	ldrh	r3, [r4, #12]
 800af94:	f013 0f80 	tst.w	r3, #128	; 0x80
 800af98:	f04f 0100 	mov.w	r1, #0
 800af9c:	bf0c      	ite	eq
 800af9e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800afa2:	2340      	movne	r3, #64	; 0x40
 800afa4:	2000      	movs	r0, #0
 800afa6:	6031      	str	r1, [r6, #0]
 800afa8:	602b      	str	r3, [r5, #0]
 800afaa:	b016      	add	sp, #88	; 0x58
 800afac:	bd70      	pop	{r4, r5, r6, pc}
 800afae:	466a      	mov	r2, sp
 800afb0:	f000 f848 	bl	800b044 <_fstat_r>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	dbec      	blt.n	800af92 <__swhatbuf_r+0x12>
 800afb8:	9901      	ldr	r1, [sp, #4]
 800afba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800afbe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800afc2:	4259      	negs	r1, r3
 800afc4:	4159      	adcs	r1, r3
 800afc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afca:	e7eb      	b.n	800afa4 <__swhatbuf_r+0x24>

0800afcc <__smakebuf_r>:
 800afcc:	898b      	ldrh	r3, [r1, #12]
 800afce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800afd0:	079d      	lsls	r5, r3, #30
 800afd2:	4606      	mov	r6, r0
 800afd4:	460c      	mov	r4, r1
 800afd6:	d507      	bpl.n	800afe8 <__smakebuf_r+0x1c>
 800afd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800afdc:	6023      	str	r3, [r4, #0]
 800afde:	6123      	str	r3, [r4, #16]
 800afe0:	2301      	movs	r3, #1
 800afe2:	6163      	str	r3, [r4, #20]
 800afe4:	b002      	add	sp, #8
 800afe6:	bd70      	pop	{r4, r5, r6, pc}
 800afe8:	ab01      	add	r3, sp, #4
 800afea:	466a      	mov	r2, sp
 800afec:	f7ff ffc8 	bl	800af80 <__swhatbuf_r>
 800aff0:	9900      	ldr	r1, [sp, #0]
 800aff2:	4605      	mov	r5, r0
 800aff4:	4630      	mov	r0, r6
 800aff6:	f7ff f9c9 	bl	800a38c <_malloc_r>
 800affa:	b948      	cbnz	r0, 800b010 <__smakebuf_r+0x44>
 800affc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b000:	059a      	lsls	r2, r3, #22
 800b002:	d4ef      	bmi.n	800afe4 <__smakebuf_r+0x18>
 800b004:	f023 0303 	bic.w	r3, r3, #3
 800b008:	f043 0302 	orr.w	r3, r3, #2
 800b00c:	81a3      	strh	r3, [r4, #12]
 800b00e:	e7e3      	b.n	800afd8 <__smakebuf_r+0xc>
 800b010:	89a3      	ldrh	r3, [r4, #12]
 800b012:	6020      	str	r0, [r4, #0]
 800b014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b018:	81a3      	strh	r3, [r4, #12]
 800b01a:	9b00      	ldr	r3, [sp, #0]
 800b01c:	6163      	str	r3, [r4, #20]
 800b01e:	9b01      	ldr	r3, [sp, #4]
 800b020:	6120      	str	r0, [r4, #16]
 800b022:	b15b      	cbz	r3, 800b03c <__smakebuf_r+0x70>
 800b024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b028:	4630      	mov	r0, r6
 800b02a:	f000 f81d 	bl	800b068 <_isatty_r>
 800b02e:	b128      	cbz	r0, 800b03c <__smakebuf_r+0x70>
 800b030:	89a3      	ldrh	r3, [r4, #12]
 800b032:	f023 0303 	bic.w	r3, r3, #3
 800b036:	f043 0301 	orr.w	r3, r3, #1
 800b03a:	81a3      	strh	r3, [r4, #12]
 800b03c:	89a3      	ldrh	r3, [r4, #12]
 800b03e:	431d      	orrs	r5, r3
 800b040:	81a5      	strh	r5, [r4, #12]
 800b042:	e7cf      	b.n	800afe4 <__smakebuf_r+0x18>

0800b044 <_fstat_r>:
 800b044:	b538      	push	{r3, r4, r5, lr}
 800b046:	4d07      	ldr	r5, [pc, #28]	; (800b064 <_fstat_r+0x20>)
 800b048:	2300      	movs	r3, #0
 800b04a:	4604      	mov	r4, r0
 800b04c:	4608      	mov	r0, r1
 800b04e:	4611      	mov	r1, r2
 800b050:	602b      	str	r3, [r5, #0]
 800b052:	f7f6 ff2b 	bl	8001eac <_fstat>
 800b056:	1c43      	adds	r3, r0, #1
 800b058:	d102      	bne.n	800b060 <_fstat_r+0x1c>
 800b05a:	682b      	ldr	r3, [r5, #0]
 800b05c:	b103      	cbz	r3, 800b060 <_fstat_r+0x1c>
 800b05e:	6023      	str	r3, [r4, #0]
 800b060:	bd38      	pop	{r3, r4, r5, pc}
 800b062:	bf00      	nop
 800b064:	2000051c 	.word	0x2000051c

0800b068 <_isatty_r>:
 800b068:	b538      	push	{r3, r4, r5, lr}
 800b06a:	4d06      	ldr	r5, [pc, #24]	; (800b084 <_isatty_r+0x1c>)
 800b06c:	2300      	movs	r3, #0
 800b06e:	4604      	mov	r4, r0
 800b070:	4608      	mov	r0, r1
 800b072:	602b      	str	r3, [r5, #0]
 800b074:	f7f6 ff2a 	bl	8001ecc <_isatty>
 800b078:	1c43      	adds	r3, r0, #1
 800b07a:	d102      	bne.n	800b082 <_isatty_r+0x1a>
 800b07c:	682b      	ldr	r3, [r5, #0]
 800b07e:	b103      	cbz	r3, 800b082 <_isatty_r+0x1a>
 800b080:	6023      	str	r3, [r4, #0]
 800b082:	bd38      	pop	{r3, r4, r5, pc}
 800b084:	2000051c 	.word	0x2000051c

0800b088 <_sbrk_r>:
 800b088:	b538      	push	{r3, r4, r5, lr}
 800b08a:	4d06      	ldr	r5, [pc, #24]	; (800b0a4 <_sbrk_r+0x1c>)
 800b08c:	2300      	movs	r3, #0
 800b08e:	4604      	mov	r4, r0
 800b090:	4608      	mov	r0, r1
 800b092:	602b      	str	r3, [r5, #0]
 800b094:	f7f6 ff32 	bl	8001efc <_sbrk>
 800b098:	1c43      	adds	r3, r0, #1
 800b09a:	d102      	bne.n	800b0a2 <_sbrk_r+0x1a>
 800b09c:	682b      	ldr	r3, [r5, #0]
 800b09e:	b103      	cbz	r3, 800b0a2 <_sbrk_r+0x1a>
 800b0a0:	6023      	str	r3, [r4, #0]
 800b0a2:	bd38      	pop	{r3, r4, r5, pc}
 800b0a4:	2000051c 	.word	0x2000051c

0800b0a8 <memcpy>:
 800b0a8:	440a      	add	r2, r1
 800b0aa:	4291      	cmp	r1, r2
 800b0ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0b0:	d100      	bne.n	800b0b4 <memcpy+0xc>
 800b0b2:	4770      	bx	lr
 800b0b4:	b510      	push	{r4, lr}
 800b0b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0be:	4291      	cmp	r1, r2
 800b0c0:	d1f9      	bne.n	800b0b6 <memcpy+0xe>
 800b0c2:	bd10      	pop	{r4, pc}

0800b0c4 <__assert_func>:
 800b0c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0c6:	4614      	mov	r4, r2
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	4b09      	ldr	r3, [pc, #36]	; (800b0f0 <__assert_func+0x2c>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4605      	mov	r5, r0
 800b0d0:	68d8      	ldr	r0, [r3, #12]
 800b0d2:	b14c      	cbz	r4, 800b0e8 <__assert_func+0x24>
 800b0d4:	4b07      	ldr	r3, [pc, #28]	; (800b0f4 <__assert_func+0x30>)
 800b0d6:	9100      	str	r1, [sp, #0]
 800b0d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0dc:	4906      	ldr	r1, [pc, #24]	; (800b0f8 <__assert_func+0x34>)
 800b0de:	462b      	mov	r3, r5
 800b0e0:	f000 f844 	bl	800b16c <fiprintf>
 800b0e4:	f000 f854 	bl	800b190 <abort>
 800b0e8:	4b04      	ldr	r3, [pc, #16]	; (800b0fc <__assert_func+0x38>)
 800b0ea:	461c      	mov	r4, r3
 800b0ec:	e7f3      	b.n	800b0d6 <__assert_func+0x12>
 800b0ee:	bf00      	nop
 800b0f0:	20000074 	.word	0x20000074
 800b0f4:	0800b567 	.word	0x0800b567
 800b0f8:	0800b574 	.word	0x0800b574
 800b0fc:	0800b5a2 	.word	0x0800b5a2

0800b100 <_calloc_r>:
 800b100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b102:	fba1 2402 	umull	r2, r4, r1, r2
 800b106:	b94c      	cbnz	r4, 800b11c <_calloc_r+0x1c>
 800b108:	4611      	mov	r1, r2
 800b10a:	9201      	str	r2, [sp, #4]
 800b10c:	f7ff f93e 	bl	800a38c <_malloc_r>
 800b110:	9a01      	ldr	r2, [sp, #4]
 800b112:	4605      	mov	r5, r0
 800b114:	b930      	cbnz	r0, 800b124 <_calloc_r+0x24>
 800b116:	4628      	mov	r0, r5
 800b118:	b003      	add	sp, #12
 800b11a:	bd30      	pop	{r4, r5, pc}
 800b11c:	220c      	movs	r2, #12
 800b11e:	6002      	str	r2, [r0, #0]
 800b120:	2500      	movs	r5, #0
 800b122:	e7f8      	b.n	800b116 <_calloc_r+0x16>
 800b124:	4621      	mov	r1, r4
 800b126:	f7fe f9c5 	bl	80094b4 <memset>
 800b12a:	e7f4      	b.n	800b116 <_calloc_r+0x16>

0800b12c <__ascii_mbtowc>:
 800b12c:	b082      	sub	sp, #8
 800b12e:	b901      	cbnz	r1, 800b132 <__ascii_mbtowc+0x6>
 800b130:	a901      	add	r1, sp, #4
 800b132:	b142      	cbz	r2, 800b146 <__ascii_mbtowc+0x1a>
 800b134:	b14b      	cbz	r3, 800b14a <__ascii_mbtowc+0x1e>
 800b136:	7813      	ldrb	r3, [r2, #0]
 800b138:	600b      	str	r3, [r1, #0]
 800b13a:	7812      	ldrb	r2, [r2, #0]
 800b13c:	1e10      	subs	r0, r2, #0
 800b13e:	bf18      	it	ne
 800b140:	2001      	movne	r0, #1
 800b142:	b002      	add	sp, #8
 800b144:	4770      	bx	lr
 800b146:	4610      	mov	r0, r2
 800b148:	e7fb      	b.n	800b142 <__ascii_mbtowc+0x16>
 800b14a:	f06f 0001 	mvn.w	r0, #1
 800b14e:	e7f8      	b.n	800b142 <__ascii_mbtowc+0x16>

0800b150 <__ascii_wctomb>:
 800b150:	b149      	cbz	r1, 800b166 <__ascii_wctomb+0x16>
 800b152:	2aff      	cmp	r2, #255	; 0xff
 800b154:	bf85      	ittet	hi
 800b156:	238a      	movhi	r3, #138	; 0x8a
 800b158:	6003      	strhi	r3, [r0, #0]
 800b15a:	700a      	strbls	r2, [r1, #0]
 800b15c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b160:	bf98      	it	ls
 800b162:	2001      	movls	r0, #1
 800b164:	4770      	bx	lr
 800b166:	4608      	mov	r0, r1
 800b168:	4770      	bx	lr
	...

0800b16c <fiprintf>:
 800b16c:	b40e      	push	{r1, r2, r3}
 800b16e:	b503      	push	{r0, r1, lr}
 800b170:	4601      	mov	r1, r0
 800b172:	ab03      	add	r3, sp, #12
 800b174:	4805      	ldr	r0, [pc, #20]	; (800b18c <fiprintf+0x20>)
 800b176:	f853 2b04 	ldr.w	r2, [r3], #4
 800b17a:	6800      	ldr	r0, [r0, #0]
 800b17c:	9301      	str	r3, [sp, #4]
 800b17e:	f7ff fd37 	bl	800abf0 <_vfiprintf_r>
 800b182:	b002      	add	sp, #8
 800b184:	f85d eb04 	ldr.w	lr, [sp], #4
 800b188:	b003      	add	sp, #12
 800b18a:	4770      	bx	lr
 800b18c:	20000074 	.word	0x20000074

0800b190 <abort>:
 800b190:	b508      	push	{r3, lr}
 800b192:	2006      	movs	r0, #6
 800b194:	f000 f82c 	bl	800b1f0 <raise>
 800b198:	2001      	movs	r0, #1
 800b19a:	f7f6 fe3f 	bl	8001e1c <_exit>

0800b19e <_raise_r>:
 800b19e:	291f      	cmp	r1, #31
 800b1a0:	b538      	push	{r3, r4, r5, lr}
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	460d      	mov	r5, r1
 800b1a6:	d904      	bls.n	800b1b2 <_raise_r+0x14>
 800b1a8:	2316      	movs	r3, #22
 800b1aa:	6003      	str	r3, [r0, #0]
 800b1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b1b0:	bd38      	pop	{r3, r4, r5, pc}
 800b1b2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b1b4:	b112      	cbz	r2, 800b1bc <_raise_r+0x1e>
 800b1b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1ba:	b94b      	cbnz	r3, 800b1d0 <_raise_r+0x32>
 800b1bc:	4620      	mov	r0, r4
 800b1be:	f000 f831 	bl	800b224 <_getpid_r>
 800b1c2:	462a      	mov	r2, r5
 800b1c4:	4601      	mov	r1, r0
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1cc:	f000 b818 	b.w	800b200 <_kill_r>
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d00a      	beq.n	800b1ea <_raise_r+0x4c>
 800b1d4:	1c59      	adds	r1, r3, #1
 800b1d6:	d103      	bne.n	800b1e0 <_raise_r+0x42>
 800b1d8:	2316      	movs	r3, #22
 800b1da:	6003      	str	r3, [r0, #0]
 800b1dc:	2001      	movs	r0, #1
 800b1de:	e7e7      	b.n	800b1b0 <_raise_r+0x12>
 800b1e0:	2400      	movs	r4, #0
 800b1e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	4798      	blx	r3
 800b1ea:	2000      	movs	r0, #0
 800b1ec:	e7e0      	b.n	800b1b0 <_raise_r+0x12>
	...

0800b1f0 <raise>:
 800b1f0:	4b02      	ldr	r3, [pc, #8]	; (800b1fc <raise+0xc>)
 800b1f2:	4601      	mov	r1, r0
 800b1f4:	6818      	ldr	r0, [r3, #0]
 800b1f6:	f7ff bfd2 	b.w	800b19e <_raise_r>
 800b1fa:	bf00      	nop
 800b1fc:	20000074 	.word	0x20000074

0800b200 <_kill_r>:
 800b200:	b538      	push	{r3, r4, r5, lr}
 800b202:	4d07      	ldr	r5, [pc, #28]	; (800b220 <_kill_r+0x20>)
 800b204:	2300      	movs	r3, #0
 800b206:	4604      	mov	r4, r0
 800b208:	4608      	mov	r0, r1
 800b20a:	4611      	mov	r1, r2
 800b20c:	602b      	str	r3, [r5, #0]
 800b20e:	f7f6 fdf5 	bl	8001dfc <_kill>
 800b212:	1c43      	adds	r3, r0, #1
 800b214:	d102      	bne.n	800b21c <_kill_r+0x1c>
 800b216:	682b      	ldr	r3, [r5, #0]
 800b218:	b103      	cbz	r3, 800b21c <_kill_r+0x1c>
 800b21a:	6023      	str	r3, [r4, #0]
 800b21c:	bd38      	pop	{r3, r4, r5, pc}
 800b21e:	bf00      	nop
 800b220:	2000051c 	.word	0x2000051c

0800b224 <_getpid_r>:
 800b224:	f7f6 bde2 	b.w	8001dec <_getpid>

0800b228 <_init>:
 800b228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b22a:	bf00      	nop
 800b22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b22e:	bc08      	pop	{r3}
 800b230:	469e      	mov	lr, r3
 800b232:	4770      	bx	lr

0800b234 <_fini>:
 800b234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b236:	bf00      	nop
 800b238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b23a:	bc08      	pop	{r3}
 800b23c:	469e      	mov	lr, r3
 800b23e:	4770      	bx	lr
